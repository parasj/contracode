<s> export class Globals { public static _UNKNOWN_ = false ; public static _UNKNOWN_ = new RegExp ( "s" ) ; public static active = true ; } </s>	O O O $any$ O O O $boolean$ O O O O O $RegExp$ O O $RegExpConstructor$ O O O O O O $boolean$ O O O O O
<s> 's' ; import * as vscode from 's' ; import { Position , PositionDiff } from 's' ; import { Globals } from 's' ; export class TextEditor { static async insert ( text , at : Position | undefined = undefined , _UNKNOWN_ : boolean | undefined = undefined ) < boolean > { if ( _UNKNOWN_ === undefined ) { _UNKNOWN_ = text . length === 0 ; } if ( ! _UNKNOWN_ ) { await vscode . window . activeTextEditor ! . edit ( editBuilder => { if ( ! at ) { at = Position . FromVSCodePosition ( vscode . window . activeTextEditor ! . selection . active ) ; } editBuilder . insert ( at ! , text ) ; } ) ; } else { await vscode . commands . executeCommand ( 's' , { text } ) ; } return true ; } static async _UNKNOWN_ ( text , position : vscode . Position ) < boolean > { return vscode . window . activeTextEditor ! . edit ( editBuilder => { editBuilder . insert ( position , text ) ; } ) ; } static async delete ( range : vscode . Range ) < boolean > { return vscode . window . activeTextEditor ! . edit ( editBuilder => { editBuilder . delete ( range ) ; } ) ; } static _UNKNOWN_ ( ) { return vscode . window . activeTextEditor ! . document . version ; } static _UNKNOWN_ ( ) { return vscode . window . activeTextEditor ! . document . fileName ; } static async _UNKNOWN_ ( ) < boolean > { const start = new vscode . Position ( 0 , 0 ) ; const lastLine = vscode . window . activeTextEditor ! . document . lineCount - 0 ; const end = vscode . window . activeTextEditor ! . document . lineAt ( lastLine ) . range . end ; const range = new vscode . Range ( start , end ) ; return vscode . window . activeTextEditor ! . edit ( editBuilder => { editBuilder . delete ( range ) ; } ) ; } static async replace ( range : vscode . Range , text ) < boolean > { return vscode . window . activeTextEditor ! . edit ( editBuilder => { editBuilder . replace ( range , text ) ; } ) ; } static _UNKNOWN_ ( ) { const lineNo = vscode . window . activeTextEditor ! . selection . active . line ; return vscode . window . activeTextEditor ! . document . lineAt ( lineNo ) . text ; } static readLineAt ( lineNo ) { if ( lineNo === null ) { lineNo = vscode . window . activeTextEditor ! . selection . active . line ; } if ( lineNo >= vscode . window . activeTextEditor ! . document . lineCount ) { throw new RangeError ( ) ; } return vscode . window . activeTextEditor ! . document . lineAt ( lineNo ) . text ; } static getLineCount ( ) { return vscode . window . activeTextEditor ! . document . lineCount ; } static getLineAt ( position : vscode . Position ) : vscode . _UNKNOWN_ { return vscode . window . activeTextEditor ! . document . lineAt ( position ) ; } static _UNKNOWN_ ( position ) { const line = TextEditor . getLineAt ( position ) ; return line . text [ position . character ] ; } static _UNKNOWN_ ( lineNumber ) { if ( lineNumber < 0 || lineNumber > TextEditor . getLineCount ( ) ) { throw new Error ( 's' + lineNumber + 's' ) ; } return TextEditor . readLineAt ( lineNumber ) . length ; } static getSelection ( ) : vscode . Range { return vscode . window . activeTextEditor ! . selection ; } static getText ( selection ? : vscode . Range ) { return vscode . window . activeTextEditor ! . document . getText ( selection ) ; } static _UNKNOWN_ ( position ) : string | undefined { let start = position ; let end = position . getRight ( ) ; const char = TextEditor . getText ( new vscode . Range ( start , end ) ) ; if ( Globals . _UNKNOWN_ . test ( char ) ) { start = position . _UNKNOWN_ ( ) ; } else { start = position . _UNKNOWN_ ( true ) ; } end = start . _UNKNOWN_ ( true ) . getRight ( ) ; const word = TextEditor . getText ( new vscode . Range ( start , end ) ) ; if ( Globals . _UNKNOWN_ . test ( word ) ) { return undefined ; } return word ; } static _UNKNOWN_ ( position : vscode . Position ) { return position . line === 0 ; } static _UNKNOWN_ ( position : vscode . Position ) { return position . line === vscode . window . activeTextEditor ! . document . lineCount - 0 ; } static _UNKNOWN_ ( offset ) { const pos = vscode . window . activeTextEditor ! . document . positionAt ( offset ) ; return new Position ( pos . line , pos . character ) ; } static _UNKNOWN_ ( position ) { return vscode . window . activeTextEditor ! . document . offsetAt ( position ) ; } } export type _UNKNOWN_ = 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' ; export type _UNKNOWN_ = | 's' | 's' | 's' | 's' | 's' | 's' | 's' | 's' | 's' | 's' | 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' | 's' ; </s>	O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O $Promise$ O $string$ O $Position$ O $any$ O O O $undefined$ O $boolean$ O O O O O $undefined$ O O O O O O O $boolean$ O $undefined$ O O $boolean$ O $string$ O $number$ O O O O O O O $boolean$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $Position$ O O $Position$ O $any$ O $Position$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $Position$ O O $string$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $string$ O O O O O O O O O O $Promise$ O $string$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O O O O O $Promise$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $number$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $String$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $Promise$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O O $number$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $number$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O $Promise$ O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O O O O $string$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $string$ O $number$ O O O O $number$ O O O O $number$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $number$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $RangeErrorConstructor$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $number$ O O $any$ O O O $number$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $string$ O $Position$ O O O $any$ O $any$ O $any$ O $Position$ O O O $any$ O $any$ O $Position$ O $any$ O O O O $number$ O $number$ O O O O $number$ O O O $number$ O $any$ O $number$ O O O O O O $ErrorConstructor$ O O O $number$ O O O O O O $any$ O $string$ O $number$ O O $number$ O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $string$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $string$ O $Position$ O O O O O O O $Position$ O $Position$ O O $Position$ O $Position$ O $Position$ O O O O $string$ O $any$ O $string$ O O $any$ O $any$ O $Position$ O $Position$ O O O O O $any$ O $RegExp$ O $boolean$ O $string$ O O O $Position$ O $Position$ O $Position$ O O O O O O $Position$ O $Position$ O $Position$ O O O O O $Position$ O $Position$ O $Position$ O O O O $Position$ O O O O $string$ O $any$ O $string$ O O $any$ O $any$ O $Position$ O $Position$ O O O O O $any$ O $RegExp$ O $boolean$ O $string$ O O O O $undefined$ O O O $string$ O O O $boolean$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $boolean$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $Position$ O $number$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $number$ O $Position$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $Position$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O $any$ O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O
<s> 's' ; import * as vscode from 's' ; import { Position , PositionDiff } from 's' ; export class Range { private _start : Position ; private _UNKNOWN_ : Position ; public get start ( ) : Position { return this . _start ; } public get stop ( ) : Position { return this . _UNKNOWN_ ; } constructor ( start , stop ) { this . _start = start ; this . _UNKNOWN_ = stop ; } public static _UNKNOWN_ ( e : vscode . Selection ) { return new Range ( Position . FromVSCodePosition ( e . start ) , Position . FromVSCodePosition ( e . end ) ) ; } public static * _UNKNOWN_ ( list : Range [ ] ) < { start : Position ; stop : Position ; range : Range ; i : number } > { for ( let i = 0 ; i < list . length ; i ++ ) { yield { i , range : list [ i ] , start : list [ i ] . _start , stop : list [ i ] . _UNKNOWN_ , } ; } } public getRight ( count = 0 ) { return new Range ( this . _start . getRight ( count ) , this . _UNKNOWN_ . getRight ( count ) ) ; } public _UNKNOWN_ ( count = 0 ) { return new Range ( this . _start . _UNKNOWN_ ( count ) , this . _UNKNOWN_ . _UNKNOWN_ ( count ) ) ; } public equals ( other ) { return this . _start . isEqual ( other . _start ) && this . _UNKNOWN_ . isEqual ( other . _UNKNOWN_ ) ; } public _UNKNOWN_ ( stop ) { return new Range ( this . _start , stop ) ; } public _UNKNOWN_ ( start ) { return new Range ( start , this . _UNKNOWN_ ) ; } public toString ( ) { return `template` ; } public _UNKNOWN_ ( other ) { return this . start . isBefore ( other . stop ) && other . start . isBefore ( this . stop ) ; } public add ( diff ) { return new Range ( this . start . add ( diff ) , this . stop . add ( diff ) ) ; } } </s>	O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O $Position$ O $any$ O O $Position$ O $any$ O O O $Position$ O O O $any$ O O O O $Position$ O O O O $Position$ O O O $any$ O O O O $Position$ O O O O $Position$ O $Position$ O O O O $Position$ O $Position$ O O O $Position$ O $Position$ O O O O $Range$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $Position$ O $any$ O $any$ O O $any$ O $Position$ O $any$ O $any$ O O O O O O O $Iterable$ O $Range[]$ O $any$ O O O O O $Position$ O $any$ O $Position$ O $any$ O $Range$ O $any$ O $number$ O O O O O O O O $number$ O O O $number$ O $Range[]$ O $number$ O $number$ O O O O O $number$ O $Range$ O $Range[]$ O $number$ O O $Position$ O $Range[]$ O $number$ O O $Position$ O $Position$ O $Range[]$ O $number$ O O $Position$ O O O O O O $Range$ O $number$ O O O O O O $any$ O O O $Position$ O $Position$ O $number$ O O O O $Position$ O $Position$ O $number$ O O O O O $Range$ O $number$ O O O O O O $any$ O O O $Position$ O $Position$ O $number$ O O O O $Position$ O $Position$ O $number$ O O O O O $boolean$ O $Range$ O O O O O $Position$ O $any$ O $Range$ O $Position$ O O O O $Position$ O $any$ O $Range$ O $Position$ O O O O $Range$ O $Position$ O O O O $any$ O O O $Position$ O $Position$ O O O O $Range$ O $Position$ O O O O $any$ O $Position$ O O O $Position$ O O O O $string$ O O O O O O O O $boolean$ O $Range$ O O O O O $Position$ O $any$ O $Range$ O $Position$ O O $Range$ O $Position$ O $any$ O O O $Position$ O O O O $Range$ O $PositionDiff$ O O O O $any$ O O O $Position$ O $Position$ O $PositionDiff$ O O O O $Position$ O $Position$ O $PositionDiff$ O O O O O O
<s> "s" ; import * as _ from "s" ; import * as vscode from 's' ; import { Range } from 's' ; import { Position } from 's' ; export async function _UNKNOWN_ ( message ) < { } > { return vscode . window . showInformationMessage ( "s" + message ) as { } ; } export async function showError ( message ) < { } > { return vscode . window . showErrorMessage ( "s" + message ) as { } ; } const _UNKNOWN_ = require ( 's' ) ; export function _UNKNOWN_ ( text ) { _UNKNOWN_ . writeSync ( text ) ; } export function _UNKNOWN_ ( ) { return _UNKNOWN_ . readSync ( ) ; } export async function _UNKNOWN_ ( ) < void > { await new Promise ( ( resolve , reject ) => { setTimeout ( resolve , 0 ) ; const disposer = vscode . window . _UNKNOWN_ ( x => { disposer . dispose ( ) ; resolve ( ) ; } ) ; } ) ; } export async function _UNKNOWN_ ( ) < void > { await new Promise ( ( resolve , reject ) => { setTimeout ( resolve , 0 ) ; const disposer = vscode . window . onDidChangeActiveTextEditor ( ( textEditor ) => { disposer . dispose ( ) ; resolve ( textEditor ) ; } ) ; } ) ; } export async function _UNKNOWN_ ( ) < Range [ ] > { await _UNKNOWN_ ( ) ; return vscode . window . activeTextEditor ! . selections . map ( x => new Range ( Position . FromVSCodePosition ( x . start ) , Position . FromVSCodePosition ( x . end ) ) ) ; } export async function wait ( time ) < void > { await new Promise ( ( resolve , reject ) => { setTimeout ( resolve , time ) ; } ) ; } export function _UNKNOWN_ ( str ) { let result = _ . _UNKNOWN_ ( str ) ; return result . replace ( "s" , "s" ) ; } </s>	O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O O $Promise$ O $string$ O O O O O O O $any$ O $any$ O $any$ O O O $string$ O O O O O O O O O $Promise$ O $string$ O O O O O O O $any$ O $any$ O $any$ O O O $string$ O O O O O O O $any$ O $any$ O O O O O O $void$ O $string$ O O $any$ O $any$ O $string$ O O O O O $string$ O O O O $any$ O $any$ O O O O O O O $Promise$ O O O O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $number$ O $void$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $void$ O O O O O O O O O O O O O $Promise$ O O O O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $number$ O $void$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O $void$ O $any$ O O O O O O O O O O O O $Promise$ O O O $any$ O O O O O $Promise<void>$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $Position$ O $any$ O $any$ O O $any$ O $Position$ O $any$ O $any$ O O O O O O O O $Promise$ O $number$ O O O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $number$ O $void$ O $number$ O O O O O O O O $string$ O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O O O O O O
<s> 's' ; import * as _ from 's' ; import * as vscode from 's' ; import { TextEditor } from 's' ; import { _UNKNOWN_ } from 's' ; export class PositionDiff { private _UNKNOWN_ : number ; private _UNKNOWN_ : number ; private _UNKNOWN_ : boolean ; constructor ( line , character ) { this . _UNKNOWN_ = line ; this . _UNKNOWN_ = character ; } public static _UNKNOWN_ ( line = 0 , character = 0 ) { const result = new PositionDiff ( line , character ) ; result . _UNKNOWN_ = true ; return result ; } public _UNKNOWN_ ( other ) { if ( this . _UNKNOWN_ || other . _UNKNOWN_ ) { throw new Error ( "s" ) ; } return new PositionDiff ( this . _UNKNOWN_ + other . _UNKNOWN_ , this . _UNKNOWN_ + other . _UNKNOWN_ ) ; } public _UNKNOWN_ ( other , { _UNKNOWN_ = true } = { } ) { let _UNKNOWN_ = this . _UNKNOWN_ ( ) ? 0 : this . character + other . character ; let _UNKNOWN_ = this . line + other . line ; if ( _UNKNOWN_ ) { if ( _UNKNOWN_ < 0 ) { _UNKNOWN_ = 0 ; } if ( _UNKNOWN_ < 0 ) { _UNKNOWN_ = 0 ; } } return new Position ( _UNKNOWN_ , _UNKNOWN_ ) ; } public get line ( ) : number { return this . _UNKNOWN_ ; } public get character ( ) : number { return this . _UNKNOWN_ ; } public _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } public toString ( ) { if ( this . _UNKNOWN_ ) { return `template` ; } return `template` ; } } export class Position extends vscode . Position { private static _UNKNOWN_ = 's' ; private static _UNKNOWN_ = 's' ; private static _UNKNOWN_ = 's' ; private _UNKNOWN_ : RegExp ; private _UNKNOWN_ : RegExp ; private _UNKNOWN_ : RegExp ; private _UNKNOWN_ : RegExp ; constructor ( line , character ) { super ( line , character ) ; this . _UNKNOWN_ = this . _UNKNOWN_ ( Position . _UNKNOWN_ ) ; this . _UNKNOWN_ = this . _UNKNOWN_ ( Position . _UNKNOWN_ ) ; this . _UNKNOWN_ = "s" ; this . _UNKNOWN_ = this . _UNKNOWN_ ( Position . _UNKNOWN_ ) ; } public _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ( ) ) { return this ; } if ( this . _UNKNOWN_ ( ) ) { return this . _UNKNOWN_ ( 0 ) ; } return this . getRight ( ) ; } public toString ( ) { return `template` ; } public static FromVSCodePosition ( pos : vscode . Position ) { return new Position ( pos . line , pos . character ) ; } public static _UNKNOWN_ ( 0 , 0 ) { if ( 0 . line < 0 . line ) { return 0 ; } if ( 0 . line === 0 . line && 0 . character < 0 . character ) { return 0 ; } return 0 ; } public _UNKNOWN_ ( other ) { if ( this . line < other . line ) { return true ; } if ( this . line === other . line && this . character < other . character ) { return true ; } return false ; } public static * _UNKNOWN_ ( start , forward = true ) < { line : string ; char : string ; pos : Position } > { let lineIndex , charIndex ; if ( forward ) { for ( lineIndex = start . line ; lineIndex < TextEditor . getLineCount ( ) ; lineIndex ++ ) { charIndex = lineIndex === start . line ? start . character : 0 ; const line = TextEditor . getLineAt ( new Position ( lineIndex , 0 ) ) . text ; for ( ; charIndex < line . length ; charIndex ++ ) { yield { line : line , char : line [ charIndex ] , pos : new Position ( lineIndex , charIndex ) , } ; } } } else { for ( lineIndex = start . line ; lineIndex >= 0 ; lineIndex -- ) { const line = TextEditor . getLineAt ( new Position ( lineIndex , 0 ) ) . text ; charIndex = lineIndex === start . line ? start . character : line . length - 0 ; for ( ; charIndex >= 0 ; charIndex -- ) { yield { line : line , char : line [ charIndex ] , pos : new Position ( lineIndex , charIndex ) , } ; } } } } public static * _UNKNOWN_ ( topLeft , _UNKNOWN_ ) < { line : string ; char : string ; pos : Position } > { for ( let lineIndex = topLeft . line ; lineIndex <= _UNKNOWN_ . line ; lineIndex ++ ) { const line = TextEditor . getLineAt ( new Position ( lineIndex , 0 ) ) . text ; for ( let charIndex = topLeft . character ; charIndex < _UNKNOWN_ . character + 0 ; charIndex ++ ) { yield { line : line , char : line [ charIndex ] , pos : new Position ( lineIndex , charIndex ) , } ; } } } public static * _UNKNOWN_ ( topLeft , _UNKNOWN_ ) < { line : string ; char : string ; pos : Position } > { for ( let lineIndex = topLeft . line ; lineIndex <= _UNKNOWN_ . line ; lineIndex ++ ) { const line = TextEditor . getLineAt ( new Position ( lineIndex , 0 ) ) . text ; if ( lineIndex === topLeft . line ) { for ( let charIndex = topLeft . character ; charIndex < line . length + 0 ; charIndex ++ ) { yield { line : line , char : line [ charIndex ] , pos : new Position ( lineIndex , charIndex ) , } ; } } else if ( lineIndex === _UNKNOWN_ . line ) { for ( let charIndex = 0 ; charIndex < _UNKNOWN_ . character + 0 ; charIndex ++ ) { yield { line : line , char : line [ charIndex ] , pos : new Position ( lineIndex , charIndex ) , } ; } } else { for ( let charIndex = 0 ; charIndex < line . length + 0 ; charIndex ++ ) { yield { line : line , char : line [ charIndex ] , pos : new Position ( lineIndex , charIndex ) , } ; } } } } public static * _UNKNOWN_ ( start ) < { start : Position ; end : Position ; word : string } > { const text = TextEditor . getLineAt ( start ) . text ; let _UNKNOWN_ = start . _UNKNOWN_ ( true ) ; do { const word = text . substring ( start . character , _UNKNOWN_ . character + 0 ) ; yield { start : start , end : _UNKNOWN_ , word : word , } ; if ( _UNKNOWN_ . getRight ( ) . _UNKNOWN_ ( ) ) { return ; } start = start . _UNKNOWN_ ( ) ; _UNKNOWN_ = start . _UNKNOWN_ ( true ) ; } while ( true ) ; } public static _UNKNOWN_ ( 0 , 0 ) { if ( Position . _UNKNOWN_ ( 0 , 0 ) === 0 ) { return 0 ; } return 0 ; } public subtract ( other ) { return new PositionDiff ( this . line - other . line , this . character - other . character ) ; } public add ( diff , { _UNKNOWN_ = true } = { } ) { let _UNKNOWN_ = this . character + diff . character ; let _UNKNOWN_ = this . line + diff . line ; if ( diff . _UNKNOWN_ ( ) ) { _UNKNOWN_ = diff . character ; } if ( _UNKNOWN_ ) { if ( _UNKNOWN_ < 0 ) { _UNKNOWN_ = 0 ; } if ( _UNKNOWN_ < 0 ) { _UNKNOWN_ = 0 ; } if ( _UNKNOWN_ >= TextEditor . getLineCount ( ) - 0 ) { _UNKNOWN_ = TextEditor . getLineCount ( ) - 0 ; } } return new Position ( _UNKNOWN_ , _UNKNOWN_ ) ; } public _UNKNOWN_ ( line , character ) { let position = new Position ( line , character ) ; return position ; } public getLeft ( ) { if ( ! this . _UNKNOWN_ ( ) ) { return new Position ( this . line , this . character - 0 ) ; } return this ; } public _UNKNOWN_ ( _UNKNOWN_ = true ) { if ( ! this . _UNKNOWN_ ( ) ) { return this . getLeft ( ) ; } if ( this . line === 0 ) { return this ; } if ( _UNKNOWN_ ) { return this . _UNKNOWN_ ( 0 ) . getLineEnd ( ) ; } else { return this . _UNKNOWN_ ( 0 ) . getLineEnd ( ) . getLeft ( ) ; } } public getRight ( count = 0 ) { if ( ! this . _UNKNOWN_ ( ) ) { return new Position ( this . line , this . character + count ) ; } return this ; } public _UNKNOWN_ ( _UNKNOWN_ ) { if ( this . _UNKNOWN_ ( ) . line !== this . line ) { let _UNKNOWN_ = this . line + 0 ; let _UNKNOWN_ = Position . _UNKNOWN_ ( _UNKNOWN_ ) ; return new Position ( _UNKNOWN_ , Math . min ( _UNKNOWN_ , _UNKNOWN_ ) ) ; } return this ; } public _UNKNOWN_ ( _UNKNOWN_ ) { if ( this . _UNKNOWN_ ( ) . line !== this . line ) { let prevLine = this . line - 0 ; let _UNKNOWN_ = Position . _UNKNOWN_ ( prevLine ) ; return new Position ( prevLine , Math . min ( _UNKNOWN_ , _UNKNOWN_ ) ) ; } return this ; } public _UNKNOWN_ ( count = 0 , { _UNKNOWN_ = true } = { } ) { const line = _UNKNOWN_ ? Math . min ( TextEditor . getLineCount ( ) - 0 , this . line + count ) : this . line + count ; return new Position ( line , this . character ) ; } public _UNKNOWN_ ( count = 0 ) { return new Position ( Math . max ( 0 , this . line - count ) , this . character ) ; } public _UNKNOWN_ ( count = 0 ) { return new Position ( this . line , Math . max ( 0 , this . character - count ) ) ; } public _UNKNOWN_ ( count = 0 ) { return new Position ( this . line , Math . min ( TextEditor . getLineAt ( this ) . text . length - 0 , this . character + count ) ) ; } public _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ , _UNKNOWN_ ) ; } public _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ , _UNKNOWN_ ) ; } public _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ , _UNKNOWN_ ) ; } public _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ , _UNKNOWN_ ) ; } public _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } public _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ , _UNKNOWN_ ) ; } public _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } public _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } public _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ , _UNKNOWN_ ) ; } public _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ , _UNKNOWN_ ) ; } public _UNKNOWN_ ( args : { forward : boolean ; _UNKNOWN_ : string } ) { let pos = this ; if ( ( args . forward && pos . line === TextEditor . getLineCount ( ) - 0 ) || ( ! args . forward && pos . line === 0 ) ) { return pos . _UNKNOWN_ ( ) ; } pos = args . forward ? pos . _UNKNOWN_ ( 0 ) : pos . _UNKNOWN_ ( 0 ) ; while ( ! TextEditor . getLineAt ( pos ) . text . startsWith ( args . _UNKNOWN_ ) ) { if ( args . forward ) { if ( pos . line === TextEditor . getLineCount ( ) - 0 ) { break ; } pos = pos . _UNKNOWN_ ( 0 ) ; } else { if ( pos . line === 0 ) { break ; } pos = pos . _UNKNOWN_ ( 0 ) ; } } return pos . _UNKNOWN_ ( ) ; } public _UNKNOWN_ ( ) { let pos = this ; while ( TextEditor . getLineAt ( pos ) . text === 's' && ! TextEditor . _UNKNOWN_ ( pos ) ) { pos = pos . _UNKNOWN_ ( 0 ) ; } while ( TextEditor . getLineAt ( pos ) . text !== 's' && pos . line < TextEditor . getLineCount ( ) - 0 ) { pos = pos . _UNKNOWN_ ( 0 ) ; } return pos . getLineEnd ( ) ; } public _UNKNOWN_ ( ) { let pos = this ; while ( TextEditor . getLineAt ( pos ) . text === 's' && ! TextEditor . _UNKNOWN_ ( pos ) ) { pos = pos . _UNKNOWN_ ( 0 ) ; } while ( pos . line > 0 && TextEditor . getLineAt ( pos ) . text !== 's' ) { pos = pos . _UNKNOWN_ ( 0 ) ; } return pos . getLineBegin ( ) ; } public _UNKNOWN_ ( args : { forward : boolean } ) { if ( args . forward ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ , false ) ; } else { return this . _UNKNOWN_ ( this . _UNKNOWN_ , false ) ; } } public _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ , false ) ; } public getLineBegin ( ) { return new Position ( this . line , 0 ) ; } public _UNKNOWN_ ( ) { if ( this . line === 0 ) { return this . getLineBegin ( ) ; } return new Position ( this . line - 0 , 0 ) ; } public _UNKNOWN_ ( ) { if ( this . line >= TextEditor . getLineCount ( ) - 0 ) { return this . getLineEnd ( ) ; } return new Position ( this . line + 0 , 0 ) ; } public getLineEnd ( ) { return new Position ( this . line , Position . _UNKNOWN_ ( this . line ) ) ; } public _UNKNOWN_ ( ) { return new Position ( this . line , Position . _UNKNOWN_ ( this . line ) + 0 ) ; } public _UNKNOWN_ ( ) { return new Position ( 0 , 0 ) ; } public _UNKNOWN_ ( ) { if ( this . character === Position . _UNKNOWN_ ( this . line ) ) { return this . getLeft ( ) ; } else { return this ; } } public _UNKNOWN_ ( text ) { const _UNKNOWN_ = ( text . match ( "s" ) || [ ] ) . length ; return new Position ( this . line + _UNKNOWN_ , _UNKNOWN_ === 0 ? this . character + text . length : text . length - ( text . lastIndexOf ( 's' ) + 0 ) ) ; } public _UNKNOWN_ ( ) { let lineCount = TextEditor . getLineCount ( ) ; let line = lineCount > 0 ? lineCount - 0 : 0 ; let char = Position . _UNKNOWN_ ( line ) ; return new Position ( line , char ) ; } public isValid ( ) { try { let lineCount = TextEditor . getLineCount ( ) || 0 ; if ( this . line >= lineCount ) { return false ; } let charCount = Position . _UNKNOWN_ ( this . line ) ; if ( this . character > charCount + 0 ) { return false ; } } catch ( e ) { return false ; } return true ; } public _UNKNOWN_ ( ) { return this . character === 0 ; } public _UNKNOWN_ ( ) { return this . character >= Position . _UNKNOWN_ ( this . line ) ; } public _UNKNOWN_ ( ) { return Position . _UNKNOWN_ ( this . line ) === this . character ; } public _UNKNOWN_ ( ) { return this . line === TextEditor . getLineCount ( ) - 0 && this . _UNKNOWN_ ( ) ; } public _UNKNOWN_ ( allowEmpty = false ) { if ( allowEmpty ) { return "s" . test ( TextEditor . getText ( new vscode . Range ( this . getLineBegin ( ) , this ) ) ) ; } else { return "s" . test ( TextEditor . getText ( new vscode . Range ( this . getLineBegin ( ) , this ) ) ) ; } } public static _UNKNOWN_ ( line ) { return TextEditor . readLineAt ( line ) . match ( "s" ) ! [ 0 ] . length ; } public _UNKNOWN_ ( ) { return new Position ( this . line , Position . _UNKNOWN_ ( this . line ) ) ; } public static _UNKNOWN_ ( line ) { return TextEditor . readLineAt ( line ) . length ; } private _UNKNOWN_ ( _UNKNOWN_ ) { let escaped = _UNKNOWN_ && _UNKNOWN_ ( _UNKNOWN_ ) ; let segments : string [ ] = [ ] ; segments . push ( `template` ) ; segments . push ( `template` ) ; segments . push ( `template` ) ; let result = new RegExp ( segments . join ( 's' ) , 's' ) ; return result ; } private _UNKNOWN_ ( line , regex ) : number [ ] { let positions : number [ ] = [ ] ; let result = regex . exec ( line ) ; while ( result ) { positions . push ( result . index ) ; if ( result . index === regex . lastIndex ) { regex . lastIndex ++ ; } result = regex . exec ( line ) ; } return positions ; } private _UNKNOWN_ ( line , regex ) : number [ ] { let positions : number [ ] = [ ] ; let result = regex . exec ( line ) ; while ( result ) { if ( result [ 0 ] . length ) { positions . push ( result . index + result [ 0 ] . length - 0 ) ; } if ( result . index === regex . lastIndex ) { regex . lastIndex ++ ; } result = regex . exec ( line ) ; } return positions ; } private _UNKNOWN_ ( regex , _UNKNOWN_ = false ) { for ( let currentLine = this . line ; currentLine >= 0 ; currentLine -- ) { let positions = this . _UNKNOWN_ ( TextEditor . getLineAt ( new vscode . Position ( currentLine , 0 ) ) . text , regex ) ; let _UNKNOWN_ = _ . find ( positions . reverse ( ) , index => ( index < this . character && ! _UNKNOWN_ ) || ( index <= this . character && _UNKNOWN_ ) || currentLine !== this . line ) ; if ( _UNKNOWN_ !== undefined ) { return new Position ( currentLine , _UNKNOWN_ ) ; } } return new Position ( 0 , 0 ) . getLineBegin ( ) ; } private _UNKNOWN_ ( regex , _UNKNOWN_ = false ) { for ( let currentLine = this . line ; currentLine < TextEditor . getLineCount ( ) ; currentLine ++ ) { let positions = this . _UNKNOWN_ ( TextEditor . getLineAt ( new vscode . Position ( currentLine , 0 ) ) . text , regex ) ; let _UNKNOWN_ = _ . find ( positions , index => ( index > this . character && ! _UNKNOWN_ ) || ( index >= this . character && _UNKNOWN_ ) || currentLine !== this . line ) ; if ( _UNKNOWN_ !== undefined ) { return new Position ( currentLine , _UNKNOWN_ ) ; } } return new Position ( TextEditor . getLineCount ( ) - 0 , 0 ) . getLineEnd ( ) ; } private _UNKNOWN_ ( regex ) { for ( let currentLine = this . line ; currentLine < TextEditor . getLineCount ( ) ; currentLine ++ ) { let positions = this . _UNKNOWN_ ( TextEditor . getLineAt ( new vscode . Position ( currentLine , 0 ) ) . text , regex ) ; let index = _ . findIndex ( positions , i => i >= this . character || currentLine !== this . line ) ; let _UNKNOWN_ = 0 ; if ( index === - 0 ) { _UNKNOWN_ = positions [ positions . length - 0 ] ; } else if ( index > 0 ) { _UNKNOWN_ = positions [ index - 0 ] ; } if ( _UNKNOWN_ !== undefined ) { return new Position ( currentLine , _UNKNOWN_ ) ; } } return new Position ( TextEditor . getLineCount ( ) - 0 , 0 ) . getLineEnd ( ) ; } private _UNKNOWN_ ( regex , _UNKNOWN_ ) { for ( let currentLine = this . line ; currentLine < TextEditor . getLineCount ( ) ; currentLine ++ ) { let positions = this . _UNKNOWN_ ( TextEditor . getLineAt ( new vscode . Position ( currentLine , 0 ) ) . text , regex ) ; let _UNKNOWN_ = _ . find ( positions , index => ( index > this . character && ! _UNKNOWN_ ) || ( index >= this . character && _UNKNOWN_ ) || currentLine !== this . line ) ; if ( _UNKNOWN_ !== undefined ) { return new Position ( currentLine , _UNKNOWN_ ) ; } } return new Position ( TextEditor . getLineCount ( ) - 0 , 0 ) . getLineEnd ( ) ; } private _UNKNOWN_ ( regex , _UNKNOWN_ ) { let _UNKNOWN_ = this . _UNKNOWN_ ( ) ; for ( let currentLine = this . line ; currentLine >= _UNKNOWN_ . line ; currentLine -- ) { let _UNKNOWN_ = this . _UNKNOWN_ ( TextEditor . getLineAt ( new vscode . Position ( currentLine , 0 ) ) . text , regex ) ; let _UNKNOWN_ = _ . find ( _UNKNOWN_ . reverse ( ) , index => ( index < this . character && ! _UNKNOWN_ && new Position ( currentLine , index ) . _UNKNOWN_ ( ) . compareTo ( this ) ) || ( index <= this . character && _UNKNOWN_ ) || currentLine !== this . line ) ; if ( _UNKNOWN_ !== undefined ) { return new Position ( currentLine , _UNKNOWN_ ) . _UNKNOWN_ ( ) ; } } if ( _UNKNOWN_ . line + 0 === this . line || _UNKNOWN_ . line === this . line ) { return _UNKNOWN_ ; } else { return new Position ( _UNKNOWN_ . line + 0 , 0 ) ; } } private _UNKNOWN_ ( regex , _UNKNOWN_ ) { let _UNKNOWN_ = this . _UNKNOWN_ ( ) ; for ( let currentLine = this . line ; currentLine <= _UNKNOWN_ . line ; currentLine ++ ) { let _UNKNOWN_ = this . _UNKNOWN_ ( TextEditor . getLineAt ( new vscode . Position ( currentLine , 0 ) ) . text , regex ) ; let _UNKNOWN_ = _ . find ( _UNKNOWN_ , index => ( index > this . character && ! _UNKNOWN_ ) || ( index >= this . character && _UNKNOWN_ ) || currentLine !== this . line ) ; if ( _UNKNOWN_ !== undefined ) { return new Position ( currentLine , _UNKNOWN_ ) . _UNKNOWN_ ( ) ; } } return this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } private _UNKNOWN_ ( regex , _UNKNOWN_ ) { let _UNKNOWN_ = this . _UNKNOWN_ ( ) ; for ( let currentLine = this . line ; currentLine <= _UNKNOWN_ . line ; currentLine ++ ) { let _UNKNOWN_ = this . _UNKNOWN_ ( TextEditor . getLineAt ( new vscode . Position ( currentLine , 0 ) ) . text , regex ) ; let _UNKNOWN_ = _ . find ( _UNKNOWN_ , index => ( index > this . character && ! _UNKNOWN_ ) || ( index >= this . character && _UNKNOWN_ ) || currentLine !== this . line ) ; if ( _UNKNOWN_ !== undefined ) { return new Position ( currentLine , _UNKNOWN_ ) ; } } return this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } private _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) { if ( TextEditor . getLineAt ( new vscode . Position ( this . line , 0 ) ) . text ) { return _UNKNOWN_ ; } else { for ( let currentLine = this . line ; currentLine <= _UNKNOWN_ . line ; currentLine ++ ) { let _UNKNOWN_ = this . _UNKNOWN_ ( TextEditor . getLineAt ( new vscode . Position ( currentLine , 0 ) ) . text , "s" ) ; let _UNKNOWN_ = _ . find ( _UNKNOWN_ , index => ( index > this . character && ! _UNKNOWN_ ) || ( index >= this . character && _UNKNOWN_ ) || currentLine !== this . line ) ; if ( _UNKNOWN_ !== undefined ) { return new Position ( currentLine , _UNKNOWN_ ) ; } } } throw new Error ( 's' ) ; } private _UNKNOWN_ ( char , count , direction ) : Position | undefined { const line = TextEditor . getLineAt ( this ) ; let index = this . character ; while ( count && index !== - 0 ) { if ( direction > 0 ) { index = line . text . indexOf ( char , index + direction ) ; } else { index = line . text . lastIndexOf ( char , index + direction ) ; } count -- ; } if ( index > - 0 ) { return new Position ( this . line , index ) ; } return undefined ; } public _UNKNOWN_ ( char , count = 0 ) : Position | null { const position = this . _UNKNOWN_ ( char , count , + 0 ) ; if ( ! position ) { return null ; } return new Position ( this . line , position . character - 0 ) ; } public _UNKNOWN_ ( char , count = 0 ) : Position | null { const position = this . _UNKNOWN_ ( char , count , - 0 ) ; if ( ! position ) { return null ; } return new Position ( this . line , position . character + 0 ) ; } public _UNKNOWN_ ( char , count = 0 ) : Position | null { const position = this . _UNKNOWN_ ( char , count , + 0 ) ; if ( ! position ) { return null ; } return new Position ( this . line , position . character ) ; } public _UNKNOWN_ ( char , count = 0 ) : Position | null { const position = this . _UNKNOWN_ ( char , count , - 0 ) ; if ( ! position ) { return null ; } return position ; } } </s>	O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $string$ O O O O O O $any$ O O $number$ O O O O $number$ O O O O $boolean$ O O O O O $number$ O $number$ O O O O $number$ O $number$ O O O $number$ O $number$ O O O O $PositionDiff$ O $number$ O O O $number$ O O O O O $PositionDiff$ O O $any$ O $number$ O $number$ O O $PositionDiff$ O $boolean$ O O O O $PositionDiff$ O O O $PositionDiff$ O $PositionDiff$ O O O O O O $boolean$ O $PositionDiff$ O $boolean$ O O O O $ErrorConstructor$ O O O O O O O $any$ O O O $number$ O $PositionDiff$ O $number$ O O O $number$ O $PositionDiff$ O $number$ O O O O $Position$ O $Position$ O O $boolean$ O O O O O O O O O $any$ O O O $boolean$ O O O O O O O $number$ O $Position$ O $any$ O O $any$ O O O $number$ O $Position$ O $any$ O O O $boolean$ O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $number$ O O O O O O O O $number$ O O O O $number$ O O O O O O O O $number$ O O O $boolean$ O O O O O O $boolean$ O O O $string$ O O O O O O O $boolean$ O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O O $RegExp$ O $RegExpConstructor$ O O $RegExp$ O $RegExpConstructor$ O O $RegExp$ O $RegExpConstructor$ O O $RegExp$ O $RegExpConstructor$ O O O $number$ O $number$ O O O O $number$ O $number$ O O O O $RegExp$ O O O $RegExp$ O $any$ O $string$ O O O O $RegExp$ O O O $RegExp$ O $any$ O $string$ O O O O $RegExp$ O O O O O $RegExp$ O O O $RegExp$ O $any$ O $string$ O O O O $Position$ O O O O O O O $boolean$ O O O O O O O O O O O O $boolean$ O O O O O O O $Position$ O O O O O O O O $Position$ O O O O O $string$ O O O O O O O O O $Position$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Position$ O $Position$ O $Position$ O O O O $Position$ O $any$ O $Position$ O $any$ O O O $Position$ O O O O $Position$ O $any$ O $Position$ O $any$ O $Position$ O $any$ O $Position$ O $any$ O O O $Position$ O O O $Position$ O O O $boolean$ O $Position$ O O O O O O $any$ O $Position$ O $any$ O O O O O O O O O O $any$ O $Position$ O $any$ O O O $any$ O $Position$ O $any$ O O O O O O O O O O O O O $Iterable$ O $Position$ O $boolean$ O O O O O $string$ O O O $string$ O O O $Position$ O $any$ O O O O $number$ O $number$ O O O $boolean$ O O O O $number$ O $Position$ O $any$ O $number$ O $any$ O $number$ O O O $number$ O O O $number$ O $number$ O $Position$ O $any$ O $Position$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $number$ O O O O O $any$ O O O O $number$ O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $number$ O O $Position$ O O $any$ O $number$ O $number$ O O O O O O O O O O O $number$ O $Position$ O $any$ O $number$ O O O $number$ O O O O $any$ O $any$ O $any$ O O $any$ O $number$ O O O O O $any$ O $number$ O $number$ O $Position$ O $any$ O $Position$ O $any$ O $any$ O $any$ O O O O O O $number$ O O O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $number$ O O $Position$ O O $any$ O $number$ O $number$ O O O O O O O O O O O $Iterable$ O $Position$ O $Position$ O O O $string$ O O O $string$ O O O $Position$ O $any$ O O O O O O $any$ O $Position$ O $any$ O $any$ O $Position$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $Position$ O $any$ O $any$ O $Position$ O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $Position$ O O $any$ O $any$ O $any$ O O O O O O O O O O $Iterable$ O $Position$ O $Position$ O O O $string$ O O O $string$ O O O $Position$ O $any$ O O O O O O $any$ O $Position$ O $any$ O $any$ O $Position$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O $Position$ O $any$ O O O O O $any$ O $Position$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $Position$ O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $Position$ O $any$ O O O O O $number$ O O O $number$ O $Position$ O $any$ O O O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $number$ O O $Position$ O O $any$ O $any$ O $number$ O O O O O O O O O O O $number$ O O O $number$ O $any$ O $any$ O O O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $number$ O O $Position$ O O $any$ O $any$ O $number$ O O O O O O O O O O O $Iterable$ O $Position$ O O O $Position$ O $any$ O $Position$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $Position$ O O $any$ O O $Position$ O $Position$ O $Position$ O O O O O O O $any$ O $any$ O $any$ O $Position$ O $any$ O $Position$ O $any$ O O O O O O $Position$ O $Position$ O $Position$ O $Position$ O $any$ O $any$ O O O O O $Position$ O $Position$ O O O $boolean$ O O O O O O O $Position$ O $Position$ O $Position$ O O O $Position$ O $Position$ O $Position$ O O O O O O O O O O O O O $Position$ O $Position$ O $Position$ O O O O $any$ O O O $Position$ O $Position$ O O $Position$ O O O $Position$ O O O $Position$ O O O $PositionDiff$ O $Position$ O O O O $any$ O O O $any$ O $Position$ O $any$ O O O $any$ O $Position$ O $any$ O O O O $Position$ O $PositionDiff$ O O $boolean$ O O O O O O O O O $any$ O O O $any$ O $PositionDiff$ O $number$ O O $any$ O O O $any$ O $PositionDiff$ O $number$ O O O $PositionDiff$ O $boolean$ O O O O $any$ O $PositionDiff$ O $number$ O O O O $boolean$ O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O $any$ O $any$ O $number$ O O O O O O $any$ O $any$ O $number$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $Position$ O $number$ O $number$ O O O $Position$ O O $any$ O $number$ O $number$ O O O $Position$ O O O $Position$ O O O O O O O O $boolean$ O O O O O O $any$ O O O $any$ O O O $any$ O O O O O O O O O O $Position$ O $boolean$ O O O O O O O O O $boolean$ O O O O O O O $Position$ O O O O O O O O $any$ O O O O O O O O O O $boolean$ O O O O O $Position$ O O O O $Position$ O O O O O O O O O $Position$ O O O O $Position$ O O O $Position$ O O O O O O $Position$ O $number$ O O O O O O O O O $boolean$ O O O O O O $any$ O O O $any$ O O O $any$ O $number$ O O O O O O O O $Position$ O $number$ O O O O O O $Position$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O $number$ O $any$ O $number$ O $any$ O O O O $any$ O $any$ O $Math$ O $number$ O $number$ O $number$ O O O O O O O O O $Position$ O $number$ O O O O O O $Position$ O O O $any$ O O O $any$ O O O $number$ O O O $any$ O O O O $number$ O $any$ O $number$ O $number$ O O O O $any$ O $number$ O $Math$ O $number$ O $number$ O $number$ O O O O O O O O O $Position$ O $number$ O O O O $boolean$ O O O O O O O O O $any$ O $boolean$ O $Math$ O $number$ O $any$ O $number$ O O O O O O O $any$ O $number$ O O O O $any$ O $number$ O O O $any$ O $any$ O O O $any$ O O O O $Position$ O $number$ O O O O O O $any$ O $Math$ O $number$ O O O O O $any$ O $number$ O O O O $any$ O O O O $Position$ O $number$ O O O O O O $any$ O O O $any$ O $Math$ O $number$ O O O O O $any$ O $number$ O O O O O $Position$ O $number$ O O O O O O $any$ O O O $any$ O $Math$ O $number$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $number$ O O O O O $Position$ O $boolean$ O O O O O O O $Position$ O O O $RegExp$ O $boolean$ O O O O $Position$ O $boolean$ O O O O O O O $Position$ O O O $RegExp$ O $boolean$ O O O O $Position$ O $boolean$ O O O O O O O $Position$ O O O $RegExp$ O $boolean$ O O O O $Position$ O $boolean$ O O O O O O O $Position$ O O O $RegExp$ O $boolean$ O O O O $Position$ O $boolean$ O O O O O O O $Position$ O O O $RegExp$ O O O O $Position$ O $boolean$ O O O O O O O $Position$ O O O $RegExp$ O $boolean$ O O O O $Position$ O O O O O O $Position$ O O O $RegExp$ O O O O $Position$ O O O O O O $Position$ O O O $RegExp$ O O O O $Position$ O $boolean$ O O O O O O O $Position$ O O O $RegExp$ O $boolean$ O O O O $Position$ O $boolean$ O O O O O O O $Position$ O O O $RegExp$ O $boolean$ O O O O $Position$ O $complex$ O O $boolean$ O O O $string$ O O O O O O $Position$ O O O O O O $complex$ O $boolean$ O $Position$ O $any$ O $any$ O $number$ O O O O O O O O $complex$ O $boolean$ O $Position$ O $any$ O O O O O O $Position$ O $Position$ O O O O $Position$ O $complex$ O $boolean$ O $Position$ O $Position$ O O O O $Position$ O $Position$ O O O O O O O $any$ O $any$ O $Position$ O O $any$ O $any$ O $complex$ O $string$ O O O O O $complex$ O $boolean$ O O O O $Position$ O $any$ O $any$ O $number$ O O O O O O O O O $Position$ O $Position$ O $Position$ O O O O O O O O O $Position$ O $any$ O O O O O O O $Position$ O $Position$ O $Position$ O O O O O O O $Position$ O $Position$ O O O O O $Position$ O O O O $Position$ O O O O O $any$ O $any$ O $Position$ O O $any$ O O O O $any$ O $boolean$ O $Position$ O O O $Position$ O $Position$ O $Position$ O O O O O O O $any$ O $any$ O $Position$ O O $any$ O O O $Position$ O $any$ O $any$ O $number$ O O O O O O $Position$ O $Position$ O $Position$ O O O O O O $Position$ O $Position$ O O O O O $Position$ O O O O $Position$ O O O O O $any$ O $any$ O $Position$ O O $any$ O O O O $any$ O $boolean$ O $Position$ O O O $Position$ O $Position$ O $Position$ O O O O O O O $Position$ O $any$ O O O $any$ O $any$ O $Position$ O O $any$ O O O O $Position$ O $Position$ O $Position$ O O O O O O $Position$ O $Position$ O O O O O $Position$ O $complex$ O O $boolean$ O O O O O O O $complex$ O $boolean$ O O O O O $Position$ O O O $RegExp$ O O O O O O O O O O $Position$ O O O $RegExp$ O O O O O O O $Position$ O O O O O O $Position$ O O O $RegExp$ O O O O O O $Position$ O O O O O $any$ O O O $any$ O O O O O O $Position$ O O O O O O O $any$ O O O O O O O $Position$ O O O O O O $any$ O O O $any$ O O O O O O O O $Position$ O O O O O O O $any$ O $any$ O $number$ O O O O O O O O O $Position$ O O O O O O $any$ O O O $any$ O O O O O O O O $Position$ O O O O O $any$ O O O $any$ O $any$ O $number$ O O O $any$ O O O O O $Position$ O O O O O $any$ O O O $any$ O $any$ O $number$ O O O $any$ O O O O O O O $Position$ O O O O O $any$ O O O O O O O O $Position$ O O O O O O O $any$ O $any$ O $number$ O O O $any$ O O O O O O $Position$ O O O O O O O O O O O O $Position$ O $string$ O O O $number$ O O $string$ O $complex$ O O O O O O O O $number$ O O O $any$ O O O $any$ O $number$ O $number$ O O O O O $any$ O $string$ O $number$ O $string$ O $number$ O O $string$ O $number$ O O O O O O O O O O $Position$ O O O O $number$ O $any$ O $number$ O O O O $number$ O $number$ O O O $number$ O O O O O O $number$ O $any$ O $number$ O $number$ O O O O $any$ O $number$ O $number$ O O O O $boolean$ O O O O O O $number$ O $any$ O $number$ O O O O O O O O O $any$ O $number$ O O O O O O O $number$ O $any$ O $number$ O O O $any$ O O O O O O $any$ O $number$ O O O O O O O O O O O $any$ O O O O O O O O O O O $boolean$ O O O O O O $any$ O O O O O $boolean$ O O O O O O $any$ O $any$ O $number$ O O O $any$ O O O O $boolean$ O O O O $any$ O $number$ O O O $any$ O O O O $any$ O O O $boolean$ O O O O O O $any$ O $any$ O $number$ O O O O O O O $boolean$ O O O O O $boolean$ O $boolean$ O O O O O O $boolean$ O O O O O $boolean$ O $any$ O $string$ O O $any$ O $any$ O O O $Position$ O O O O O O O O O O O O O O $boolean$ O $any$ O $string$ O O $any$ O $any$ O O O $Position$ O O O O O O O O O O O O $number$ O $number$ O O O $any$ O $string$ O $number$ O O $complex$ O O O O O O O O $number$ O O O $Position$ O O O O O $any$ O O O $any$ O $any$ O $number$ O O O $any$ O O O O O O $number$ O $number$ O O O $any$ O $string$ O $number$ O O $number$ O O O $RegExp$ O $string$ O O O $string$ O $string$ O $string$ O $string$ O O O $string[]$ O O O O O O O O $string[]$ O $number$ O O O O $string[]$ O $number$ O O O O $string[]$ O $number$ O O O O O $RegExp$ O O $RegExpConstructor$ O $string[]$ O $string$ O O O O O O O O $RegExp$ O O O $number[]$ O $string$ O $RegExp$ O O O O O O O $number[]$ O O O O O O O O O $RegExpExecArray$ O $RegExp$ O $RegExpExecArray$ O $string$ O O O O $RegExpExecArray$ O O $number[]$ O $number$ O $RegExpExecArray$ O $number$ O O O O $RegExpExecArray$ O $number$ O $RegExp$ O $number$ O O $RegExp$ O $number$ O O O $RegExpExecArray$ O $RegExp$ O $RegExpExecArray$ O $string$ O O O O $number[]$ O O O $number[]$ O $string$ O $RegExp$ O O O O O O O $number[]$ O O O O O O O O O $RegExpExecArray$ O $RegExp$ O $RegExpExecArray$ O $string$ O O O O $RegExpExecArray$ O O O O $RegExpExecArray$ O O O O $number$ O O $number[]$ O $number$ O $RegExpExecArray$ O $number$ O $RegExpExecArray$ O O O O $number$ O O O O O O O $RegExpExecArray$ O $number$ O $RegExp$ O $number$ O O $RegExp$ O $number$ O O O $RegExpExecArray$ O $RegExp$ O $RegExpExecArray$ O $string$ O O O O $number[]$ O O O $Position$ O $RegExp$ O $boolean$ O O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $number[]$ O O O $number[]$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $RegExp$ O O O $any$ O $any$ O $any$ O $number[]$ O $number[]$ O O O $any$ O O $any$ O O O $any$ O O $boolean$ O O O $any$ O O O $any$ O $boolean$ O O $any$ O O O $any$ O O O O $any$ O $undefined$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $Position$ O O O O O $Position$ O $RegExp$ O $boolean$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O $number$ O O O $any$ O O O O $number[]$ O O O $number[]$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $RegExp$ O O O $any$ O $any$ O $any$ O $number[]$ O $any$ O O $any$ O O O $any$ O O $boolean$ O O O $any$ O O O $any$ O $boolean$ O O $any$ O O O $any$ O O O O $any$ O $undefined$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $number$ O O O O O O O O $Position$ O O O O O $Position$ O $RegExp$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $number$ O O O $any$ O O O O $number[]$ O O O $number[]$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $RegExp$ O O O $any$ O $any$ O $any$ O $number[]$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O $number$ O O O O O $any$ O O O O O $number$ O $number[]$ O $number[]$ O $number$ O O O O O O O O $any$ O O O O $number$ O $number[]$ O $any$ O O O O O O O $number$ O $undefined$ O O O O $any$ O $any$ O $number$ O O O O O O $any$ O $any$ O $number$ O O O O O O O O $Position$ O O O O O $Position$ O $RegExp$ O $boolean$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $number$ O O O $any$ O O O O $number[]$ O O O $number[]$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $RegExp$ O O O $any$ O $any$ O $any$ O $number[]$ O $any$ O O $any$ O O O $any$ O O $boolean$ O O O $any$ O O O $any$ O $boolean$ O O $any$ O O O $any$ O O O O $any$ O $undefined$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $number$ O O O O O O O O $Position$ O O O O O $Position$ O $RegExp$ O $boolean$ O O O $Position$ O O O $Position$ O O O O O O $any$ O O O $any$ O $any$ O $Position$ O $any$ O $any$ O O O O $number[]$ O O O $number[]$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $RegExp$ O O O $any$ O $any$ O $any$ O $number[]$ O $number[]$ O O O $any$ O O $any$ O O O $any$ O O $boolean$ O O $any$ O $any$ O $any$ O O $Position$ O O O $any$ O O O O O O $any$ O O O $any$ O $boolean$ O O $any$ O O O $any$ O O O O $any$ O $undefined$ O O O O $any$ O $any$ O $any$ O O $Position$ O O O O O O O $Position$ O $any$ O O O O O $any$ O $Position$ O $any$ O O O $any$ O O O $Position$ O O O O O O $any$ O $Position$ O $any$ O O O O O O O O O $Position$ O $RegExp$ O $boolean$ O O O $Position$ O O O $Position$ O O O O O O $any$ O O O $any$ O $any$ O $Position$ O $any$ O $any$ O O O O $number[]$ O O O $number[]$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $RegExp$ O O O $any$ O $any$ O $any$ O $number[]$ O $any$ O O $any$ O O O $any$ O O $boolean$ O O O $any$ O O O $any$ O $boolean$ O O $any$ O O O $any$ O O O O $any$ O $undefined$ O O O O $any$ O $any$ O $any$ O O $Position$ O O O O O O O O $Position$ O $Position$ O $boolean$ O O O O $Position$ O $RegExp$ O $boolean$ O O O $Position$ O O O $Position$ O O O O O O $any$ O O O $any$ O $any$ O $Position$ O $any$ O $any$ O O O O $number[]$ O O O $number[]$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $RegExp$ O O O $any$ O $any$ O $any$ O $number[]$ O $any$ O O $any$ O O O $any$ O O $boolean$ O O O $any$ O O O $any$ O $boolean$ O O $any$ O O O $any$ O O O O $any$ O $undefined$ O O O O $any$ O $any$ O $any$ O O O O O O O $Position$ O $Position$ O $boolean$ O O O O $Position$ O $Position$ O $boolean$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O $Position$ O O O O O O O $any$ O O O $any$ O $any$ O $Position$ O $any$ O $any$ O O O O $number[]$ O O O $number[]$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $number[]$ O $any$ O O $any$ O O O $any$ O O $boolean$ O O O $any$ O O O $any$ O $boolean$ O O $any$ O O O $any$ O O O O $any$ O $undefined$ O O O O $any$ O $any$ O $any$ O O O O O O O $ErrorConstructor$ O O O O O O $Position$ O $string$ O $number$ O $number$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O $number$ O $any$ O O O O O O O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $number$ O O O $number$ O O O O O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O O $undefined$ O O O $Position$ O $string$ O $number$ O O O O $any$ O O O O $Position$ O O O $Position$ O $string$ O $number$ O O O O O O O O $Position$ O O O O O O O O $any$ O O O $any$ O $Position$ O $any$ O O O O O O $Position$ O $string$ O $number$ O O O O $any$ O O O O $Position$ O O O $Position$ O $string$ O $number$ O O O O O O O O $Position$ O O O O O O O O $any$ O O O $any$ O $Position$ O $any$ O O O O O O $Position$ O $string$ O $number$ O O O O $any$ O O O O $Position$ O O O $Position$ O $string$ O $number$ O O O O O O O O $Position$ O O O O O O O O $any$ O O O $any$ O $Position$ O $any$ O O O O $Position$ O $string$ O $number$ O O O O $any$ O O O O $Position$ O O O $Position$ O $string$ O $number$ O O O O O O O O $Position$ O O O O O O O $Position$ O O O O
<s> import * as vscode from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ { static _UNKNOWN_ : string = 's' ; static get _UNKNOWN_ ( ) { return [ 's' , 's' , 's' , `template` , `template` , ] ; } static async _UNKNOWN_ ( ) { return [ 's' , 's' , 's' , 's' , 's' ] ; } static async _UNKNOWN_ ( ) { let result : string [ ] = [ ] ; const _UNKNOWN_ = vscode . window . activeTextEditor ! . options ; if ( _UNKNOWN_ . insertSpaces ) { result . push ( 's' ) ; } this . _UNKNOWN_ = await ( await _UNKNOWN_ . _UNKNOWN_ . buffer ) . _UNKNOWN_ ( 's' ) ; result = result . concat ( [ `template` , `template` , ] ) ; return result ; } } </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O O $string$ O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O $Promise<string[]>$ O O O O O O O O O O O O O O O O O O O $Promise<string[]>$ O O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $string[]$ O $number$ O O O O O O O $string$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $string[]$ O $string[]$ O $complex$ O O O O O O O O O O $string[]$ O O O O
<s> 's' ; import * as vscode from 's' ; import { _UNKNOWN_ } from 's' ; import { TextEditor } from 's' ; import { Position } from 's' ; import { Configuration } from 's' ; type _UNKNOWN_ = { entries : Array < { seq : number ; time : number } > ; _UNKNOWN_ : number ; _UNKNOWN_ : number ; _UNKNOWN_ : number ; _UNKNOWN_ : number ; _UNKNOWN_ : number ; _UNKNOWN_ : number ; } ; export class _UNKNOWN_ { private static _UNKNOWN_ = vscode . window . createTextEditorDecorationType ( { backgroundColor : new vscode . _UNKNOWN_ ( 's' ) , borderColor : new vscode . _UNKNOWN_ ( 's' ) , dark : { color : 's' , } , light : { color : 's' , } , _UNKNOWN_ : 's' , borderWidth : 's' , } ) ; static async _UNKNOWN_ ( ) { _UNKNOWN_ . _UNKNOWN_ ++ ; let lines = await _UNKNOWN_ . _UNKNOWN_ . buffer . lines ; TextEditor . replace ( new vscode . Range ( 0 , 0 , TextEditor . getLineCount ( ) - 0 , TextEditor . _UNKNOWN_ ( TextEditor . getLineCount ( ) - 0 ) ) , lines . join ( 's' ) ) ; } static async _UNKNOWN_ ( pos : vscode . Position ) { await _UNKNOWN_ . _UNKNOWN_ . call ( 's' , [ 's' , [ 0 , pos . line + 0 , pos . character + 0 , false ] ] ) ; } static async _UNKNOWN_ ( start , target ) { if ( start < target ) { } else if ( start > target ) { await _UNKNOWN_ . _UNKNOWN_ . input ( 's' . repeat ( start - target ) ) ; } } static _UNKNOWN_ ( funcName , args ? : any [ ] ) < any > { if ( args ) { return [ 's' , [ funcName , args ] ] ; } else { return [ 's' , [ funcName , [ ] ] ] ; } } static _UNKNOWN_ ( command ) < any > { return [ 's' , [ command ] ] ; } static _UNKNOWN_ ( lines < string > , buffer = 0 , start = 0 , end = - 0 , _UNKNOWN_ = 0 ) { return [ 's' , [ buffer , start , end , _UNKNOWN_ , lines ] ] ; } static _UNKNOWN_ ( keys , mode = 's' , _UNKNOWN_ = false ) { return [ 's' , [ keys , mode , _UNKNOWN_ ] ] ; } static _UNKNOWN_ ( ... _UNKNOWN_ < any > ) < any > { let ret < any > = [ ] ; for ( const a of _UNKNOWN_ ) { if ( a [ 0 ] instanceof Array ) { ret . concat ( a ) ; } else { ret = ret . concat ( [ a ] ) ; } } return ret ; } static async _UNKNOWN_ ( pos : vscode . Range ) { await _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ ( 's' , [ 's' , [ 0 , pos . start . line + 0 , pos . start . character + 0 , false ] ] ) , _UNKNOWN_ . _UNKNOWN_ ( 's' ) , _UNKNOWN_ . _UNKNOWN_ ( 's' , [ 's' , [ 0 , pos . end . line + 0 , pos . end . character + 0 , false ] ] ) ) ) ; } private static async _UNKNOWN_ ( name ) < Position > { let [ row , character ] = ( ( await _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( 's' , [ name ] ) ) as Array < number > ) . slice ( 0 , 0 ) ; return new Position ( row - 0 , character - 0 ) ; } static async _UNKNOWN_ ( ) < number > { return ( await _UNKNOWN_ . _UNKNOWN_ . call ( 's' ) ) [ 0 ] - 0 ; } static async _UNKNOWN_ ( ) < Position > { return this . _UNKNOWN_ ( 's' ) ; } static async _UNKNOWN_ ( ) < Position > { return this . _UNKNOWN_ ( 's' ) ; } static async _UNKNOWN_ ( ) < _UNKNOWN_ > { return ( await _UNKNOWN_ . _UNKNOWN_ . call ( 's' , [ ] ) ) as _UNKNOWN_ ; } static async _UNKNOWN_ ( mode ) { return this . _UNKNOWN_ ( mode , await this . _UNKNOWN_ ( ) , await this . _UNKNOWN_ ( ) , await this . _UNKNOWN_ ( ) ) ; } static _UNKNOWN_ ( mode , curPos , startPos , _UNKNOWN_ ) { const cursorPos = new Position ( curPos . line , curPos . character ) ; let _UNKNOWN_ = [ ] ; switch ( mode ) { case 's' : if ( startPos . _UNKNOWN_ ( curPos ) ) { curPos = curPos . _UNKNOWN_ ( ) ; } else { startPos = startPos . _UNKNOWN_ ( ) ; } vscode . window . activeTextEditor ! . options . cursorStyle = vscode . TextEditorCursorStyle . _UNKNOWN_ ; vscode . window . activeTextEditor ! . selection = new vscode . Selection ( startPos , curPos ) ; break ; case 's' : if ( startPos . _UNKNOWN_ ( curPos ) ) { curPos = curPos . _UNKNOWN_ ( ) ; startPos = startPos . getLineBegin ( ) ; } else { curPos = curPos . getLineBegin ( ) ; startPos = startPos . _UNKNOWN_ ( ) ; } vscode . window . activeTextEditor ! . options . cursorStyle = vscode . TextEditorCursorStyle . _UNKNOWN_ ; vscode . window . activeTextEditor ! . selection = new vscode . Selection ( startPos , curPos ) ; break ; case 's' : const top = Position . _UNKNOWN_ ( curPos , startPos ) . line ; const bottom = Position . _UNKNOWN_ ( curPos , startPos ) . line ; const left = Math . min ( startPos . character , _UNKNOWN_ ) ; const right = Math . max ( startPos . character , _UNKNOWN_ ) + 0 ; let selections = [ ] ; for ( let line = top ; line <= bottom ; line ++ ) { selections . push ( new vscode . Selection ( new Position ( line , left ) , new Position ( line , right ) ) ) ; } vscode . window . activeTextEditor ! . selections = selections ; vscode . window . activeTextEditor ! . options . cursorStyle = vscode . TextEditorCursorStyle . _UNKNOWN_ ; break ; case 's' : vscode . window . activeTextEditor ! . options . cursorStyle = Configuration . _UNKNOWN_ ; vscode . window . activeTextEditor ! . selection = new vscode . Selection ( curPos , curPos ) ; break ; case 's' : vscode . window . activeTextEditor ! . options . cursorStyle = vscode . TextEditorCursorStyle . _UNKNOWN_ ; vscode . window . activeTextEditor ! . selection = new vscode . Selection ( curPos , curPos ) ; break ; case 's' : default : vscode . window . activeTextEditor ! . options . cursorStyle = vscode . TextEditorCursorStyle . Block ; vscode . window . activeTextEditor ! . selection = new vscode . Selection ( curPos , curPos ) ; break ; } switch ( mode ) { case 's' : if ( startPos . _UNKNOWN_ ( curPos ) ) { _UNKNOWN_ . push ( new vscode . Range ( curPos . getLeft ( ) , curPos ) ) ; } else { _UNKNOWN_ . push ( new vscode . Range ( curPos , curPos . getRight ( ) ) ) ; } break ; case 's' : _UNKNOWN_ . push ( new vscode . Range ( cursorPos , cursorPos . getRight ( ) ) ) ; break ; case 's' : _UNKNOWN_ . push ( new vscode . Range ( curPos , curPos . getRight ( ) ) ) ; break ; default : break ; } vscode . window . activeTextEditor ! . setDecorations ( this . _UNKNOWN_ , _UNKNOWN_ ) ; vscode . window . activeTextEditor ! . revealRange ( new vscode . Range ( cursorPos , cursorPos ) ) ; } static async _UNKNOWN_ ( ) { _UNKNOWN_ . mode = await _UNKNOWN_ . _UNKNOWN_ . mode ; } static async _UNKNOWN_ ( arg < string > ) { _UNKNOWN_ . _UNKNOWN_ . command ( `template` ) ; } } </s>	O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O $ArrayConstructor$ O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $string$ O O O $string$ O O O O O O O O $Promise<void>$ O O O $any$ O $number$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Promise<boolean>$ O O $any$ O $any$ O O O O O $any$ O $number$ O O O O O $any$ O $number$ O $any$ O $number$ O O O O O O O $any$ O $any$ O O O O O O O O $Promise<void>$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O $Promise<void>$ O $number$ O $number$ O O O O $number$ O $number$ O O O O O O $number$ O $number$ O O O $any$ O $any$ O $any$ O O O $string$ O $number$ O $number$ O O O O O O $Array$ O $string$ O $any[]$ O O O O O O O O O O O O $any[]$ O O O O O O O $string$ O $any[]$ O O O O O O O O O O O $string$ O O O O O O O O O $Array$ O $string$ O O O O O O O O O O $string$ O O O O O $complex$ O $Array$ O O O O $number$ O O O $number$ O O O $number$ O O O O $number$ O O O O O O O O O $number$ O $number$ O $number$ O $number$ O $string[]$ O O O O O $complex$ O $string$ O $string$ O O O $boolean$ O O O O O O O O O $string$ O $string$ O $boolean$ O O O O O $Array$ O O $Array$ O O O O O O O O O $Array$ O O O O O O O O O O $any$ O $any[]$ O O O O $any$ O O O O $ArrayConstructor$ O O $any[]$ O $complex$ O $any$ O O O O O $any[]$ O $any[]$ O $complex$ O O $any$ O O O O O O $any[]$ O O O O $Promise<void>$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any[]$ O $any$ O $any[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $complex$ O O O O $any$ O $any[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O $Promise$ O $string$ O O $any$ O O O O $number$ O $number$ O O O O O $any$ O $any$ O $any$ O O O O $string$ O O O O $ArrayConstructor$ O O O O O $number[]$ O O O O O O O O $any$ O $number$ O O O $number$ O O O O O O O $Promise$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O $Promise$ O O O $any$ O O O O O $any$ O O O O O O O $Promise$ O O O $any$ O O O O O $any$ O O O O O O O $Promise$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $Promise<void>$ O $string$ O O O O O $void$ O $string$ O O O O $any$ O O O O O O $any$ O O O O O O $Promise<number>$ O O O O O O $void$ O $string$ O $Position$ O $Position$ O $number$ O O O $Position$ O O $any$ O $Position$ O $any$ O $Position$ O $any$ O O O $any[]$ O O O O O O $string$ O O O O O O O $Position$ O $any$ O $Position$ O O O $Position$ O $Position$ O $Position$ O O O O O O $Position$ O $Position$ O $Position$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $Position$ O $Position$ O O O O O O O O O $Position$ O $any$ O $Position$ O O O $Position$ O $Position$ O $Position$ O O O $Position$ O $Position$ O $Position$ O O O O O O $Position$ O $Position$ O $Position$ O O O $Position$ O $Position$ O $Position$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $Position$ O $Position$ O O O O O O O O $any$ O $any$ O O O $Position$ O $Position$ O O $any$ O O $any$ O $any$ O O O $Position$ O $Position$ O O $any$ O O $number$ O $Math$ O $number$ O $Position$ O $any$ O $number$ O O O $number$ O $Math$ O $number$ O $Position$ O $any$ O $number$ O O O O O $any[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any[]$ O $number$ O O $any$ O $any$ O O $any$ O $any$ O $number$ O O O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any[]$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $number$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $Position$ O $Position$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $Position$ O $Position$ O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $Position$ O $Position$ O O O O O O O $string$ O O O O O O O $Position$ O $boolean$ O $Position$ O O O $any[]$ O $number$ O O $any$ O $any$ O $Position$ O $Position$ O O O $Position$ O O O O O O $any[]$ O $number$ O O $any$ O $any$ O $Position$ O $Position$ O $Position$ O O O O O O O O O O O $any[]$ O $number$ O O $any$ O $any$ O $Position$ O $Position$ O $Position$ O O O O O O O O O O $any[]$ O $number$ O O $any$ O $any$ O $Position$ O $Position$ O $Position$ O O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any[]$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $Position$ O $Position$ O O O O O O $Promise<void>$ O O O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O O $Promise<void>$ O $Array$ O O O O O $any$ O $any$ O $any$ O O O O O O O
<s> import * as vscode from 's' ; import { Position } from 's' ; import { TextEditor } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class Cell { v : string ; highlight : any ; constructor ( v ) { this . v = v ; this . highlight = { } ; } } interface _UNKNOWN_ { width : number ; height : number ; } export interface _UNKNOWN_ { all : string [ ] ; normal : string [ ] ; insert : string [ ] ; visual : string [ ] ; } export interface _UNKNOWN_ { name : string ; decorator ? : vscode . _UNKNOWN_ ; } export class _UNKNOWN_ { _UNKNOWN_ = 0 ; term : Array < Array < Cell > > = [ ] ; _UNKNOWN_ : number ; _UNKNOWN_ : number ; size : _UNKNOWN_ ; _UNKNOWN_ : any ; _UNKNOWN_ : vscode . StatusBarItem ; _UNKNOWN_ : vscode . StatusBarItem [ ] ; _UNKNOWN_ : string [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] ; _UNKNOWN_ : { top : number ; bottom : number ; left : number ; right : number ; } ; resize ( size ) { this . size = size ; for ( let i = 0 ; i < this . size . height ; i ++ ) { this . term [ i ] = [ ] ; for ( let j = 0 ; j < this . size . width ; j ++ ) { this . term [ i ] [ j ] = new Cell ( 's' ) ; } } this . _UNKNOWN_ = { top : 0 , bottom : this . size . height , left : 0 , right : this . size . width , } ; } clear ( ) { this . resize ( this . size ) ; } scroll ( deltaY ) { const { top , bottom , left , right } = this . _UNKNOWN_ ; const width = right - left ; const height = bottom - top ; let _UNKNOWN_ = [ top , bottom ] ; if ( deltaY < 0 ) { _UNKNOWN_ = [ bottom , top - 0 ] ; } for ( let y = _UNKNOWN_ [ 0 ] ; y !== _UNKNOWN_ [ 0 ] ; y = y + Math . sign ( deltaY ) ) { if ( top <= y + deltaY && y + deltaY < bottom ) { for ( let x = left ; x < right ; x ++ ) { this . term [ y ] [ x ] = this . term [ y + deltaY ] [ x ] ; } } else { for ( let x = left ; x < right ; x ++ ) { this . term [ y ] [ x ] = new Cell ( 's' ) ; this . term [ y ] [ x ] . highlight = this . _UNKNOWN_ ; } } } } constructor ( size : { width : number ; height : number } ) { this . size = size ; this . resize ( this . size ) ; this . _UNKNOWN_ = 0 ; this . _UNKNOWN_ = 0 ; this . _UNKNOWN_ = { } ; this . _UNKNOWN_ = vscode . window . createStatusBarItem ( vscode . StatusBarAlignment . Left , 0 ) ; this . _UNKNOWN_ = [ ] ; for ( let i = 0 ; i < 0 ; i ++ ) { this . _UNKNOWN_ . push ( vscode . window . createStatusBarItem ( vscode . StatusBarAlignment . Left , 0 - i ) ) ; } this . _UNKNOWN_ = [ { name : 's' , decorator : vscode . window . createTextEditorDecorationType ( { backgroundColor : new vscode . _UNKNOWN_ ( 's' ) , } ) , } , { name : 's' , decorator : vscode . window . createTextEditorDecorationType ( { backgroundColor : new vscode . _UNKNOWN_ ( 's' ) , } ) , } , { name : 's' , decorator : vscode . window . createTextEditorDecorationType ( { backgroundColor : new vscode . _UNKNOWN_ ( 's' ) , } ) , } , { name : 's' , decorator : vscode . window . createTextEditorDecorationType ( { backgroundColor : new vscode . _UNKNOWN_ ( 's' ) , } ) , } , { name : 's' , decorator : vscode . window . createTextEditorDecorationType ( { backgroundColor : 's' , _UNKNOWN_ : 's' , } ) , } , { name : 's' , decorator : vscode . window . createTextEditorDecorationType ( { _UNKNOWN_ : 's' , } ) , } , ] ; for ( let i = 0 ; i < this . _UNKNOWN_ . length ; i ++ ) { _UNKNOWN_ . _UNKNOWN_ . command ( `template` ) ; } } private async _UNKNOWN_ ( mode : [ string , number ] ) { if ( mode [ 0 ] === 's' ) { await _UNKNOWN_ . _UNKNOWN_ ( await _UNKNOWN_ . _UNKNOWN_ ( ) ) ; } else { await _UNKNOWN_ . _UNKNOWN_ ( ) ; await _UNKNOWN_ . _UNKNOWN_ ( ) ; await _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . mode . mode ) ; await _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ ) ; } const _UNKNOWN_ = vscode . workspace . getConfiguration ( 's' ) . get ( 's' ) as _UNKNOWN_ ; if ( mode [ 0 ] === 's' ) { for ( const key of _UNKNOWN_ . visual . concat ( _UNKNOWN_ . normal ) ) { vscode . commands . executeCommand ( 's' , `template` , true ) ; } for ( const key of _UNKNOWN_ . insert ) { vscode . commands . executeCommand ( 's' , `template` , false ) ; } } else if ( mode [ 0 ] === 's' ) { for ( const key of _UNKNOWN_ . normal . concat ( _UNKNOWN_ . insert ) ) { vscode . commands . executeCommand ( 's' , `template` , true ) ; } for ( const key of _UNKNOWN_ . visual ) { vscode . commands . executeCommand ( 's' , `template` , false ) ; } } else { for ( const key of _UNKNOWN_ . visual . concat ( _UNKNOWN_ . insert ) ) { vscode . commands . executeCommand ( 's' , `template` , true ) ; } for ( const key of _UNKNOWN_ . normal ) { vscode . commands . executeCommand ( 's' , `template` , false ) ; } } for ( const key of _UNKNOWN_ . all ) { vscode . commands . executeCommand ( 's' , `template` , false ) ; } } async _UNKNOWN_ ( changes < any > ) { let _UNKNOWN_ = false ; for ( let change of changes ) { change = change as Array < any > ; const name = change [ 0 ] ; const args = change . slice ( 0 ) ; if ( name === 's' ) { this . _UNKNOWN_ = args [ 0 ] [ 0 ] ; this . _UNKNOWN_ = args [ 0 ] [ 0 ] ; } else if ( name === 's' ) { for ( let i = 0 ; i < this . size . width - this . _UNKNOWN_ ; i ++ ) { this . term [ this . _UNKNOWN_ ] [ this . _UNKNOWN_ + i ] . v = 's' ; this . term [ this . _UNKNOWN_ ] [ this . _UNKNOWN_ + i ] . highlight = { } ; } _UNKNOWN_ = true ; } else if ( name === 's' ) { for ( const cs of args ) { for ( const c of cs ) { this . term [ this . _UNKNOWN_ ] [ this . _UNKNOWN_ ] . v = c ; this . term [ this . _UNKNOWN_ ] [ this . _UNKNOWN_ ] . highlight = this . _UNKNOWN_ ; this . _UNKNOWN_ += 0 ; } } _UNKNOWN_ = true ; } else if ( name === 's' ) { this . _UNKNOWN_ = args [ args . length - 0 ] [ 0 ] ; } else if ( name === 's' ) { this . _UNKNOWN_ ( args [ 0 ] ) ; } else if ( name === 's' ) { this . _UNKNOWN_ = { top : args [ 0 ] [ 0 ] , bottom : args [ 0 ] [ 0 ] + 0 , left : args [ 0 ] [ 0 ] , right : args [ 0 ] [ 0 ] + 0 , } ; } else if ( name === 's' ) { this . resize ( { width : args [ 0 ] [ 0 ] , height : args [ 0 ] [ 0 ] } ) ; } else if ( name === 's' ) { this . scroll ( args [ 0 ] [ 0 ] ) ; } else if ( name === 's' ) { let text = 's' ; for ( let _UNKNOWN_ of args [ 0 ] [ 0 ] ) { text += _UNKNOWN_ [ 0 ] ; } this . _UNKNOWN_ . text = args [ 0 ] [ 0 ] + args [ 0 ] [ 0 ] + 's' . repeat ( args [ 0 ] [ 0 ] ) + text . slice ( 0 , args [ 0 ] [ 0 ] ) + 's' + text . slice ( args [ 0 ] [ 0 ] ) ; this . _UNKNOWN_ . text += 's' . repeat ( 0 - this . _UNKNOWN_ . text . length % 0 ) ; this . _UNKNOWN_ . show ( ) ; } else if ( name === 's' ) { this . _UNKNOWN_ . hide ( ) ; } else if ( [ 's' , 's' , 's' , 's' , 's' , ] . indexOf ( name ) !== - 0 ) { } else if ( name === 's' ) { this . _UNKNOWN_ = args [ 0 ] [ 0 ] ; } else if ( name === 's' ) { for ( const i of this . _UNKNOWN_ ) { i . hide ( ) ; } } else if ( name === 's' ) { const _UNKNOWN_ = args [ 0 ] [ 0 ] ; const _UNKNOWN_ = 0 ; const startIndex = _UNKNOWN_ - _UNKNOWN_ % _UNKNOWN_ ; const endIndex = _UNKNOWN_ + 0 - _UNKNOWN_ % _UNKNOWN_ ; let offset = startIndex > 0 ? 0 : 0 ; if ( offset ) { this . _UNKNOWN_ [ 0 ] . text = 's' ; } for ( let i = 0 ; i < _UNKNOWN_ ; i ++ ) { this . _UNKNOWN_ [ i + offset ] . text = this . _UNKNOWN_ [ startIndex + i ] ; if ( startIndex + i === _UNKNOWN_ ) { this . _UNKNOWN_ [ i + offset ] . color = new vscode . _UNKNOWN_ ( 's' ) ; } else { this . _UNKNOWN_ [ i + offset ] . color = undefined ; } this . _UNKNOWN_ [ i + offset ] . show ( ) ; } if ( endIndex < this . _UNKNOWN_ . length - 0 ) { this . _UNKNOWN_ [ offset + _UNKNOWN_ ] . text = 's' ; this . _UNKNOWN_ [ offset + _UNKNOWN_ ] . show ( ) ; } for ( let i = offset + _UNKNOWN_ + 0 ; i < this . _UNKNOWN_ . length ; i ++ ) { this . _UNKNOWN_ [ i ] . hide ( ) ; } } else { } } if ( _UNKNOWN_ . DEBUG ) { this . _UNKNOWN_ . text = this . term [ this . size . height - 0 ] . map ( x => x . v ) . join ( 's' ) ; this . _UNKNOWN_ . show ( ) ; const _UNKNOWN_ = this . term [ this . size . height - 0 ] . map ( x => x . v ) . join ( 's' ) . replace ( "s" , 's' ) ; let _UNKNOWN_ : string [ ] = _UNKNOWN_ . split ( "s" ) ; let _UNKNOWN_ = _UNKNOWN_ . map ( x => _UNKNOWN_ . indexOf ( x ) ) ; if ( _UNKNOWN_ [ 0 ] === 's' || _UNKNOWN_ [ _UNKNOWN_ . length - 0 ] === 's' ) { for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { this . _UNKNOWN_ [ i ] . text = _UNKNOWN_ [ i ] ; this . _UNKNOWN_ [ i ] . show ( ) ; if ( this . term [ this . size . height - 0 ] [ _UNKNOWN_ [ i ] ] . highlight . hasOwnProperty ( 's' ) ) { this . _UNKNOWN_ [ i ] . color = 's' ; } else { this . _UNKNOWN_ [ i ] . color = 's' ; } } for ( let i = _UNKNOWN_ . length ; i < this . _UNKNOWN_ . length ; i ++ ) { this . _UNKNOWN_ [ i ] . hide ( ) ; } } else { for ( let i = 0 ; i < this . _UNKNOWN_ . length ; i ++ ) { this . _UNKNOWN_ [ i ] . hide ( ) ; } } } if ( ! vscode . workspace . getConfiguration ( 's' ) . get ( 's' ) || ! _UNKNOWN_ ) { return ; } let curPos = await _UNKNOWN_ . _UNKNOWN_ ( ) ; let _UNKNOWN_ = curPos . line - ( ( await _UNKNOWN_ . _UNKNOWN_ . call ( 's' ) ) - 0 ) ; let _UNKNOWN_ = curPos . character - ( ( await _UNKNOWN_ . _UNKNOWN_ . call ( 's' ) ) - 0 ) ; let _UNKNOWN_ : vscode . Range [ ] [ ] = [ ] ; for ( let i = 0 ; i < this . _UNKNOWN_ . length ; i ++ ) { _UNKNOWN_ . push ( [ ] ) ; } let _UNKNOWN_ = - 0 ; for ( let i = 0 ; i < this . size . height ; i ++ ) { let isRange = false ; let start = 0 ; for ( let j = 0 ; j < this . size . width ; j ++ ) { if ( isRange && ! ( this . term [ i ] [ j ] . highlight . background === _UNKNOWN_ ) ) { isRange = false ; _UNKNOWN_ [ _UNKNOWN_ - this . _UNKNOWN_ ] . push ( new vscode . Range ( new vscode . Position ( i + _UNKNOWN_ , start + _UNKNOWN_ ) , new vscode . Position ( i + _UNKNOWN_ , j + _UNKNOWN_ ) ) ) ; _UNKNOWN_ = - 0 ; } const _UNKNOWN_ = this . term [ i ] [ j ] . highlight . background - this . _UNKNOWN_ ; if ( ! isRange && _UNKNOWN_ >= 0 && _UNKNOWN_ < _UNKNOWN_ . length ) { start = j ; isRange = true ; _UNKNOWN_ = this . term [ i ] [ j ] . highlight . background ; } } } for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { if ( ! ( this . _UNKNOWN_ [ i ] . decorator && vscode . window . activeTextEditor ) ) { continue ; } vscode . window . activeTextEditor ! . setDecorations ( this . _UNKNOWN_ [ i ] . decorator ! , _UNKNOWN_ [ i ] ) ; } } } </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $string$ O O O $any$ O O O O O $string$ O O O O $string$ O $string$ O O O $any$ O O O O O O O $any$ O $number$ O O O $number$ O O O O O O $any$ O $string[]$ O O O O O $string[]$ O O O O O $string[]$ O O O O O $string[]$ O O O O O O O O $any$ O $string$ O O O $any$ O O $any$ O $any$ O O O O $any$ O $number$ O O O $any$ O $ArrayConstructor$ O $ArrayConstructor$ O $any$ O O O O O O $number$ O O O $number$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any[]$ O $any$ O $any$ O O O $string[]$ O O O O O $any$ O $any$ O O O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O $void$ O $any$ O O O O $any$ O $any$ O O O O $number$ O O O $number$ O O O $any$ O $number$ O $number$ O O O O O $any$ O $number$ O O O O O O O O $number$ O O O $number$ O O O $any$ O $number$ O $number$ O O O O O $any$ O $number$ O O $number$ O O O $any$ O O O O O O O O $complex$ O O $number$ O O O $number$ O O O $any$ O $number$ O $number$ O O O $number$ O O O $any$ O $number$ O O O O $void$ O O O O O $void$ O O O $any$ O O O $void$ O $number$ O O O O $number$ O $number$ O $number$ O $number$ O O O O $complex$ O O $number$ O $number$ O $number$ O O $number$ O $number$ O $number$ O O $number[]$ O O $number$ O $number$ O O O O $number$ O O O O $number[]$ O O $number$ O $number$ O O O O O O O O $number$ O $number[]$ O O O O $number$ O $number[]$ O O O O $number$ O $number$ O $Math$ O $number$ O $number$ O O O O O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O O O O O $number$ O $number$ O $number$ O $number$ O $number$ O O O O O $any$ O $number$ O O $number$ O O O O $any$ O $number$ O $number$ O O $number$ O O O O O O O O O $number$ O $number$ O $number$ O $number$ O $number$ O O O O O $any$ O $number$ O O $number$ O O O $any$ O O O O O O $any$ O $number$ O O $number$ O O $any$ O O O $any$ O O O O O O O $complex$ O O $number$ O O O $number$ O O O O O O O $any$ O $complex$ O O O $void$ O O O $any$ O O O O $number$ O O O O O $number$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any[]$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $number$ O O O O O O $any$ O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O $string$ O O O O O O O O O O O O O $number$ O O O $number$ O O O $any$ O $number$ O $number$ O O O $any$ O $any$ O $any$ O O O O O O O O $Promise<void>$ O $complex$ O O O O O O O O O O $complex$ O O O O O O O O $any$ O $Promise<void>$ O O $any$ O $Promise<string[]>$ O O O O O O O O $any$ O $Promise<void>$ O O O O $any$ O $Promise<void>$ O O O O $any$ O $Promise<void>$ O $any$ O $complex$ O $string$ O O O $any$ O $Promise<void>$ O $any$ O $string[]$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O $complex$ O O O O O O O O O O $string$ O $any$ O $string[]$ O $complex$ O $any$ O $string[]$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O O $string$ O $any$ O $string[]$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O $complex$ O O O O O O O O O O $string$ O $any$ O $string[]$ O $complex$ O $any$ O $string[]$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O O $string$ O $any$ O $string[]$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O $string$ O $any$ O $string[]$ O $complex$ O $any$ O $string[]$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O O $string$ O $any$ O $string[]$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O $string$ O $any$ O $string[]$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $Promise<void>$ O $Array$ O O O O O O $boolean$ O O O O O O $any$ O $any[]$ O O $any$ O $any$ O $ArrayConstructor$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $number$ O $any$ O O O O O O O O O $number$ O $any$ O O O O O O O O O O O $any$ O O O O O O O $number$ O O O $number$ O O O $any$ O $number$ O O O $number$ O $number$ O O O O O $any$ O O O $number$ O O O O $number$ O $number$ O O $string$ O O O O O $any$ O O O $number$ O O O O $number$ O $number$ O O $any$ O O O O O $boolean$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O $number$ O O O O $number$ O O $string$ O $any$ O O O $any$ O O O $number$ O O O O $number$ O O $any$ O O O $any$ O O O $number$ O O O O O $boolean$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O O O O O $Promise<void>$ O $any$ O O O O O O O O O $any$ O O O O O O $complex$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O $void$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O O O $any$ O O O O O O $void$ O $any$ O O O O O O O O O O O O $any$ O O O O O $string$ O O O O O O $any$ O $any$ O O O O O O O O $string$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O O $string$ O $any$ O O O O O O O O $string$ O $string$ O O O $any$ O O O O O O O O O O $string$ O $string$ O $any$ O O O O O O O O O O $any$ O $any$ O O O $string$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O $number$ O $any$ O O O O O O O O O O $any$ O O O O O O $string[]$ O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any[]$ O O $any$ O $any$ O O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O O O $number$ O $any$ O $any$ O O O O $number$ O $any$ O O O $any$ O O O O $number$ O $number$ O O O O O O O O O $number$ O O O O $any[]$ O O O O $any$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O $number$ O O $any$ O O O $string[]$ O $number$ O $number$ O O O O $number$ O $number$ O $any$ O O O O $any[]$ O $number$ O $number$ O O $any$ O O $any$ O $any$ O O O O O O O O O $any[]$ O $number$ O $number$ O O $any$ O $undefined$ O O O O $any[]$ O $number$ O $number$ O O $any$ O O O O O O $number$ O O O $string[]$ O $number$ O O O O O O $any[]$ O $number$ O O O O $any$ O O O O O $any[]$ O $number$ O O O O $any$ O O O O O O O $number$ O $number$ O O O O O $number$ O O O $any[]$ O $number$ O $number$ O O O O O $any[]$ O $number$ O O $any$ O O O O O O O O O O O $any$ O $boolean$ O O O O $any$ O $any$ O O O $any$ O O O $any$ O $number$ O O O O $U[]$ O $Cell$ O $Cell$ O $string$ O O $string$ O O O O O O $any$ O $any$ O O O O $string$ O O O $any$ O O O $any$ O $number$ O O O O $U[]$ O $Cell$ O $Cell$ O $string$ O O $string$ O O O O $complex$ O O O O O O O $string[]$ O O O O O $string$ O $complex$ O O O O O $number[]$ O $string[]$ O $U[]$ O $string$ O $string$ O $number$ O $string$ O O O O O $string[]$ O O O O O O $string[]$ O $string[]$ O $number$ O O O O O O O O O O $number$ O O O $number$ O $string[]$ O $number$ O $number$ O O O O O $any[]$ O $number$ O O $any$ O $string[]$ O $number$ O O O O $any[]$ O $number$ O O $any$ O O O O O O O $any$ O O O $any$ O $number$ O O O O $number[]$ O $number$ O O O $any$ O $any$ O O O O O O O $any[]$ O $number$ O O $any$ O O O O O O O O $any[]$ O $number$ O O $any$ O O O O O O O O $number$ O $string[]$ O $number$ O $number$ O O O $any[]$ O $number$ O $number$ O O O O O $any[]$ O $number$ O O $any$ O O O O O O O O O O $number$ O O O $number$ O O O $any[]$ O $number$ O $number$ O O O O O $any[]$ O $number$ O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O $boolean$ O O O O O O $Position$ O O $any$ O $any$ O O O O $number$ O $Position$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O $number$ O $Position$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O $any[][]$ O $any$ O $any$ O O O O O O O O O O O $number$ O O O $number$ O O O $any$ O $number$ O $number$ O O O $any[][]$ O $number$ O O O O O O O $number$ O O O O O O O $number$ O O O $number$ O O O $any$ O $number$ O $number$ O O O O $boolean$ O O O O $number$ O O O O O O $number$ O O O $number$ O O O $any$ O $number$ O $number$ O O O O O $boolean$ O O O O O $any$ O $number$ O O $number$ O O $any$ O $any$ O $number$ O O O $boolean$ O O O $any[][]$ O $number$ O O O $number$ O O $number$ O O $any$ O $any$ O O $any$ O $any$ O $number$ O $number$ O $number$ O $number$ O O O $any$ O $any$ O $number$ O $number$ O $number$ O $number$ O O O O $number$ O O O O O O $number$ O O O $any$ O $number$ O O $number$ O O $any$ O $any$ O O O $number$ O O O O $boolean$ O $number$ O O O $number$ O $any[][]$ O $number$ O O $number$ O $number$ O $boolean$ O O O $number$ O O O $any$ O $number$ O O $number$ O O $any$ O $any$ O O O O O O O $number$ O O O $number$ O $any[][]$ O $number$ O $number$ O O O O O O O O O $any$ O $number$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $number$ O O $any$ O O $any[][]$ O $number$ O O O O O O O
<s> 's' ; import * as vscode from 's' ; import { _UNKNOWN_ } from 's' ; import { Globals } from 's' ; export type _UNKNOWN_ = number | string | boolean ; export type _UNKNOWN_ = { [ key ] : _UNKNOWN_ ; [ key ] : _UNKNOWN_ ; } ; class _UNKNOWN_ { private static _instance : _UNKNOWN_ | null ; constructor ( ) { this . _UNKNOWN_ ( ) ; } public static getInstance ( ) { if ( _UNKNOWN_ . _instance == null ) { _UNKNOWN_ . _instance = new _UNKNOWN_ ( ) ; } return _UNKNOWN_ . _instance ; } _UNKNOWN_ ( ) { let _UNKNOWN_ = vscode . workspace . getConfiguration ( 's' ) ; for ( const option in this ) { const _UNKNOWN_ = _UNKNOWN_ [ option ] as any ; if ( _UNKNOWN_ !== null && _UNKNOWN_ !== undefined ) { this [ option ] = _UNKNOWN_ ; } } const _UNKNOWN_ = vscode . workspace . getConfiguration ( ) . get ( 's' ) as string ; this . _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ ) ; } private _UNKNOWN_ ( cursorStyle ) : vscode . TextEditorCursorStyle { const _UNKNOWN_ = { line : vscode . TextEditorCursorStyle . Line , block : vscode . TextEditorCursorStyle . Block , underline : vscode . TextEditorCursorStyle . _UNKNOWN_ , 's' : vscode . TextEditorCursorStyle . _UNKNOWN_ , 's' : vscode . TextEditorCursorStyle . _UNKNOWN_ , 's' : vscode . TextEditorCursorStyle . _UNKNOWN_ , } ; if ( _UNKNOWN_ [ cursorStyle ] !== undefined ) { return _UNKNOWN_ [ cursorStyle ] ; } else { return vscode . TextEditorCursorStyle . Line ; } } _UNKNOWN_ : _UNKNOWN_ = { all : [ 's' ] , normal : [ 's' ] , insert : [ 's' ] , visual : [ 's' ] } ; _UNKNOWN_ : number | undefined ; _UNKNOWN_ : string = 's' ; } export const Configuration = _UNKNOWN_ . getInstance ( ) ; </s>	O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O $any$ O O O $number$ O O $any$ O O $string$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O O O O $void$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $complex$ O O O O O $any$ O $any$ O $complex$ O O O O O O $any$ O O O $any$ O $undefined$ O O O O $complex$ O O $any$ O O O O $string$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O $number$ O O O $any$ O $string$ O O O O $any$ O $string$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $complex$ O $string$ O O $undefined$ O O O $complex$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $string[]$ O O O O O $string[]$ O O O O O $string[]$ O O O O O $string[]$ O O O O O O $number$ O O O O O $string$ O O O O O O O O $any$ O $any$ O $any$ O O O O
<s> import * as vscode from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as fs from 's' ; export class _UNKNOWN_ { static _UNKNOWN_ : { [ method ] : Function } = { } ; static async _UNKNOWN_ ( args , resp ) { const filePath = args [ 0 ] as string ; const _UNKNOWN_ = vscode . Uri . file ( filePath ) ; console . log ( filePath ) ; if ( fs . existsSync ( filePath ) && fs . lstatSync ( filePath ) . isFile ( ) ) { await vscode . window . showTextDocument ( await vscode . workspace . openTextDocument ( filePath ) ) ; await _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . mode . mode ) ; } else { console . log ( 's' ) ; } resp . send ( 's' ) ; } static async _UNKNOWN_ ( _ , resp ) { await _UNKNOWN_ . _UNKNOWN_ . command ( 's' ) ; await resp . send ( 's' ) ; } static async _UNKNOWN_ ( args < any > , resp ) { const filePath = vscode . Uri . file ( args [ 0 ] ) ; await vscode . commands . executeCommand ( 's' , filePath ) ; await resp . send ( 's' ) ; } static async _UNKNOWN_ ( args < string > , resp ) { const _UNKNOWN_ = args [ 0 ] ; const filePath = vscode . Uri . file ( _UNKNOWN_ ) ; console . log ( 's' , filePath ) ; if ( args [ 0 ] !== vscode . window . activeTextEditor ! . document . fileName ) { await vscode . commands . executeCommand ( 's' , filePath ) ; } if ( args [ 0 ] !== vscode . window . activeTextEditor ! . document . fileName ) { resp . send ( 's' ) ; return ; } await vscode . commands . executeCommand ( 's' ) ; resp . send ( 's' ) ; } static async _UNKNOWN_ ( args < any > , resp ) { await _UNKNOWN_ . _UNKNOWN_ . command ( "s" ) ; await vscode . commands . executeCommand ( 's' ) ; await _UNKNOWN_ . _UNKNOWN_ ( vscode . window . activeTextEditor ! . selection . active ) ; resp . send ( 's' ) ; } } </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O $complex$ O O O $string$ O O $FunctionConstructor$ O O O O O O O $Promise<void>$ O $any$ O $any$ O O O $string$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $Console$ O $void$ O $string$ O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O $string$ O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $Promise<void>$ O $any$ O $complex$ O $string$ O O O O O $Console$ O $void$ O O O O O $any$ O $any$ O O O O O O O $Promise<void>$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $Promise<void>$ O $Array$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any[]$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O O $Promise<void>$ O $Array$ O O O O $any$ O O O $string$ O $string[]$ O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $Console$ O $void$ O O O $any$ O O O O $string[]$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $string[]$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $Promise<void>$ O $Array$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $Promise<void>$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Position } from 's' ; import * as vscode from 's' ; import { TextEditor } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ { static async _UNKNOWN_ ( key ) { await _UNKNOWN_ . _UNKNOWN_ . input ( key ) ; } static async _UNKNOWN_ ( key ) { const _UNKNOWN_ = _UNKNOWN_ . mode . mode ; const _UNKNOWN_ = _UNKNOWN_ . mode . _UNKNOWN_ ; async function input ( k ) { await _UNKNOWN_ . _UNKNOWN_ . input ( k === 's' ? 's' : k ) ; await _UNKNOWN_ . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ . mode . mode === 's' ) { await _UNKNOWN_ . _UNKNOWN_ . input ( 's' ) ; } const curPos = await _UNKNOWN_ . _UNKNOWN_ ( ) ; const startPos = await _UNKNOWN_ . _UNKNOWN_ ( ) ; const _UNKNOWN_ = await _UNKNOWN_ . _UNKNOWN_ ( ) ; const _UNKNOWN_ = ( await _UNKNOWN_ . _UNKNOWN_ . call ( 's' ) ) - 0 ; const _UNKNOWN_ = await _UNKNOWN_ . _UNKNOWN_ . buffer . _UNKNOWN_ ; vscode . commands . executeCommand ( 's' , { lineNumber : Math . min ( vscode . window . activeTextEditor ! . selection . active . line , curPos . line - _UNKNOWN_ ) , at : 's' , } ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . mode . mode , curPos , startPos , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . mode . mode , curPos , startPos , _UNKNOWN_ ) ; } if ( _UNKNOWN_ !== 's' ) { await input ( key ) ; } else { if ( key . length > 0 ) { await input ( key ) ; } else { await vscode . commands . executeCommand ( 's' , { text : key } ) ; } } await vscode . commands . executeCommand ( 's' , 's' , _UNKNOWN_ . mode . mode ) ; } static async _UNKNOWN_ ( e : vscode . _UNKNOWN_ ) { if ( e . _UNKNOWN_ . length === 0 ) { return ; } const change = e . _UNKNOWN_ [ 0 ] ; const _UNKNOWN_ = Position . FromVSCodePosition ( change . range . start ) ; const _UNKNOWN_ = Position . FromVSCodePosition ( change . range . end ) ; const curPos = Position . FromVSCodePosition ( vscode . window . activeTextEditor ! . selection . active ) ; const _UNKNOWN_ = vscode . window . activeTextEditor ! . selection ; const _UNKNOWN_ = new Position ( 0 , 0 ) . _UNKNOWN_ ( ) ; const _UNKNOWN_ = ( ) => { if ( e . _UNKNOWN_ . length > 0 || vscode . window . activeTextEditor ! . selections . length > 0 ) { return false ; } if ( _UNKNOWN_ . mode . mode !== 's' ) { return false ; } if ( change . text === 's' && _UNKNOWN_ . character === 0 && change . _UNKNOWN_ === 0 ) { return true ; } if ( ! ( _UNKNOWN_ . line === curPos . line && _UNKNOWN_ . line === _UNKNOWN_ . line ) ) { return false ; } if ( _UNKNOWN_ . active . line !== _UNKNOWN_ . anchor . line || _UNKNOWN_ . active . character !== _UNKNOWN_ . anchor . character ) { return false ; } if ( _UNKNOWN_ . line === 0 && _UNKNOWN_ . character === 0 && change . _UNKNOWN_ !== 0 ) { if ( change . text [ change . text . length - 0 ] === 's' ) { return false ; } else if ( TextEditor . getLineCount ( ) === 0 ) { return false ; } } return true ; } ; await _UNKNOWN_ . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ ( ) ) { if ( ! _UNKNOWN_ . mode . _UNKNOWN_ ) { const _UNKNOWN_ = await _UNKNOWN_ . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ . line !== curPos . line ) { await _UNKNOWN_ . _UNKNOWN_ ( curPos ) ; } else { await _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . character , _UNKNOWN_ . character ) ; } } await _UNKNOWN_ . _UNKNOWN_ . input ( 's' . repeat ( change . _UNKNOWN_ ) ) ; await _UNKNOWN_ . _UNKNOWN_ . input ( change . text . replace ( 's' , 's' ) ) ; } else { _UNKNOWN_ . _UNKNOWN_ -- ; if ( _UNKNOWN_ . _UNKNOWN_ !== 0 ) { return ; } const _UNKNOWN_ = change . text . length !== change . _UNKNOWN_ ; if ( _UNKNOWN_ || true ) { const startTime = new Date ( ) . getTime ( ) ; const _UNKNOWN_ = vscode . window . activeTextEditor ! . selection . active ; let t = await _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( 's' , [ TextEditor . getText ( ) . split ( 's' ) , _UNKNOWN_ . line + 0 , _UNKNOWN_ . character + 0 , ] ) ; console . log ( `template` ) ; } } } static async _UNKNOWN_ ( ) { if ( vscode . window . activeTextEditor === undefined ) { return ; } const _UNKNOWN_ = vscode . window . activeTextEditor ! . document . fileName ; await _UNKNOWN_ . _UNKNOWN_ . command ( `template` ) ; await _UNKNOWN_ . _UNKNOWN_ ( ) ; await _UNKNOWN_ . _UNKNOWN_ ( vscode . window . activeTextEditor ! . selection . active ) ; await _UNKNOWN_ . _UNKNOWN_ ( await _UNKNOWN_ . _UNKNOWN_ ( ) ) ; await _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . mode . mode ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O $Promise<void>$ O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O $Promise<void>$ O $string$ O O O $string$ O $any$ O $complex$ O $string$ O O $boolean$ O $any$ O $complex$ O $boolean$ O O O $Promise<void>$ O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O $string$ O O O $any$ O $Promise<void>$ O O O O O $any$ O $complex$ O $string$ O O O O O $any$ O $any$ O $any$ O O O O O O $Position$ O O $any$ O $any$ O O O O $Position$ O O $any$ O $any$ O O O O $number$ O O $any$ O $Promise<number>$ O O O O $number$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $number$ O $Math$ O $number$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $Position$ O $any$ O $number$ O O $string$ O O O O O O $any$ O $void$ O $any$ O $complex$ O $string$ O $Position$ O $Position$ O $number$ O O O $any$ O $Promise<void>$ O O O $any$ O $void$ O $any$ O $complex$ O $string$ O $Position$ O $Position$ O $number$ O O O O O $string$ O O O O O $Promise<void>$ O $string$ O O O O O O O $string$ O $number$ O O O O O $Promise<void>$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $string$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O O O O O $Promise<void>$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O $Position$ O $any$ O $Position$ O $any$ O $any$ O $any$ O O O $Position$ O $any$ O $Position$ O $any$ O $any$ O $any$ O O O $Position$ O $any$ O $Position$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $Position$ O O $any$ O O O O O O $Position$ O O O O $boolean$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O $any$ O $complex$ O $string$ O O O O O O O O O O $any$ O $any$ O O O $Position$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O O $Position$ O $any$ O $Position$ O $any$ O $Position$ O $any$ O $Position$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $Position$ O $any$ O O O $Position$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O $any$ O $number$ O O O O O O O O O O O O O O O O O $any$ O $Promise<void>$ O O O O O $boolean$ O O O O O O O $any$ O $complex$ O $boolean$ O O O $Position$ O O $any$ O $any$ O O O O O $Position$ O $any$ O $Position$ O $any$ O O O $any$ O $Promise<void>$ O $Position$ O O O O O O $any$ O $Promise<void>$ O $Position$ O $any$ O $Position$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O $number$ O O O O $any$ O $number$ O O O O O O O O $boolean$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $boolean$ O O O O O $number$ O O $DateConstructor$ O O O $number$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $string$ O O O $complex$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $Console$ O $void$ O O O O O O O O O $Promise<void>$ O O O O O $any$ O $any$ O $any$ O $undefined$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $Promise<void>$ O O O O $any$ O $Promise<void>$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $Promise<void>$ O O $any$ O $Promise<string[]>$ O O O O O $any$ O $Promise<void>$ O $any$ O $complex$ O $string$ O O O O O
<s> 's' ; import * as vscode from 's' ; import * as fs from 's' ; import * as _ from 's' ; import { attach } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Position } from 's' ; import { Globals } from 's' ; import { Configuration } from 's' ; import { spawn } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { TextEditor } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; interface _UNKNOWN_ { key : string ; command : string ; when : string ; _UNKNOWN_ : string ; } const _UNKNOWN_ : { contributes : { keybindings : _UNKNOWN_ [ ] ; } ; } = require ( 's' ) ; export namespace _UNKNOWN_ { export let _UNKNOWN_ ; export let channelId ; export let mode : { mode : string ; _UNKNOWN_ : boolean } = { mode : 's' , _UNKNOWN_ : false } ; export let screen ; export let prevState : { _UNKNOWN_ : number } = { _UNKNOWN_ : - 0 , } ; export let _UNKNOWN_ = 0 ; export let taskQueue = new _UNKNOWN_ ( ) ; export let DEBUG ; } export async function activate ( context : vscode . ExtensionContext ) { vscode . workspace . onDidCloseTextDocument ( async event => { const _UNKNOWN_ = event . fileName ; let _UNKNOWN_ = await nvim . call ( 's' , [ `template` ] ) ; if ( _UNKNOWN_ === - 0 ) { return ; } } ) ; vscode . window . onDidChangeActiveTextEditor ( _UNKNOWN_ . _UNKNOWN_ , this ) ; vscode . window . _UNKNOWN_ ( async e => { if ( e . kind === vscode . _UNKNOWN_ . _UNKNOWN_ ) { if ( e . selections [ 0 ] ) { await _UNKNOWN_ . _UNKNOWN_ ( e . selections [ 0 ] ) ; } } } ) ; vscode . workspace . onDidChangeTextDocument ( _UNKNOWN_ . _UNKNOWN_ ) ; vscode . workspace . onDidChangeConfiguration ( ( e ) => { Configuration . _UNKNOWN_ ( ) ; } ) ; _UNKNOWN_ ( context , 's' , async args => { _UNKNOWN_ . taskQueue . _UNKNOWN_ ( ( ) => { _UNKNOWN_ . _UNKNOWN_ ( args . text ) ; } ) ; } ) ; const _UNKNOWN_ = _UNKNOWN_ . contributes . keybindings ; const _UNKNOWN_ = Configuration . _UNKNOWN_ ; for ( let key of _UNKNOWN_ ) { if ( _UNKNOWN_ . all . indexOf ( key . _UNKNOWN_ ) !== - 0 ) { continue ; } vscode . commands . executeCommand ( 's' , `template` , true ) ; registerCommand ( context , key . command , ( ) => { _UNKNOWN_ . taskQueue . _UNKNOWN_ ( ( ) => { _UNKNOWN_ . _UNKNOWN_ ( `template` ) ; } ) ; } ) ; } const proc = spawn ( Configuration . _UNKNOWN_ , [ 's' , 's' , vscode . window . activeTextEditor ? vscode . window . activeTextEditor ! . document . fileName : 's' , ] , { cwd : __dirname , } ) ; proc . on ( 's' , function ( err ) { console . log ( err ) ; vscode . window . showErrorMessage ( 's' ) ; } ) ; let nvim ; if ( fs . existsSync ( 's' ) && fs . lstatSync ( 's' ) . _UNKNOWN_ ( ) ) { nvim = attach ( { socket : 's' } ) ; _UNKNOWN_ . DEBUG = true ; } else { nvim = attach ( { proc : proc } ) ; _UNKNOWN_ . DEBUG = false ; } _UNKNOWN_ . _UNKNOWN_ = nvim ; _UNKNOWN_ . channelId = ( await nvim . _UNKNOWN_ ( ) ) [ 0 ] as number ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = 0 ; nvim . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , { _UNKNOWN_ : true , _UNKNOWN_ : true } ) ; _UNKNOWN_ . screen = new _UNKNOWN_ ( { width : _UNKNOWN_ , height : _UNKNOWN_ } ) ; const code = `template` ; await _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( code , [ ] ) ; await nvim . command ( 's' ) ; const _UNKNOWN_ : { [ _UNKNOWN_ ] : string } = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } ; for ( const _UNKNOWN_ of Object . keys ( _UNKNOWN_ ) ) { await nvim . command ( `template` ) ; } await _UNKNOWN_ . _UNKNOWN_ ( [ 's' , 's' ] ) ; nvim . on ( 's' , ( method , args ) => { if ( vscode . window . activeTextEditor && method === 's' ) { _UNKNOWN_ . screen . _UNKNOWN_ ( args ) ; } } ) ; nvim . on ( 's' , async ( method , args < any > , resp ) => { if ( _UNKNOWN_ [ method ] !== undefined ) { const f = _UNKNOWN_ [ method ] ; f ( args , resp ) ; } else { console . log ( `template` ) ; } } ) ; if ( vscode . window . activeTextEditor ) { await _UNKNOWN_ . _UNKNOWN_ ( ) ; } } function _UNKNOWN_ ( context : vscode . ExtensionContext , command , callback : ( ... args : any [ ] ) => any ) { let disposable = vscode . commands . registerCommand ( command , async args => { if ( ! vscode . window . activeTextEditor ) { return ; } if ( vscode . window . activeTextEditor . document && vscode . window . activeTextEditor . document . uri . toString ( ) === 's' ) { await vscode . commands . executeCommand ( 's' + command , args ) ; return ; } callback ( args ) ; } ) ; context . subscriptions . push ( disposable ) ; } function registerCommand ( context : vscode . ExtensionContext , command , callback : ( ... args : any [ ] ) => any ) { let disposable = vscode . commands . registerCommand ( command , async args => { if ( ! vscode . window . activeTextEditor ) { return ; } callback ( args ) ; } ) ; context . subscriptions . push ( disposable ) ; } process . on ( 's' , function ( reason , p ) { console . log ( 's' , p , 's' , reason ) ; } ) ; </s>	O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O $any$ O O O $number$ O O O $complex$ O O $string$ O O O $boolean$ O O O O O $string$ O O O $false$ O O O O O O $Screen$ O O O $complex$ O O $number$ O O O O O $number$ O O O O O O O O $number$ O O O O O $any$ O O $any$ O O O O O $boolean$ O O O O O $Promise<void>$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $Promise<void>$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $Promise<void>$ O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $Promise<void>$ O O $any$ O $any$ O $any$ O O $void$ O O O $any$ O $void$ O O O O O O $void$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $Promise<void>$ O $any$ O $any$ O O O O O O O O O $any$ O $complex$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $string[]$ O $number$ O $any$ O $string$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $Promise<void>$ O O O O O O O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O $Console$ O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O $string$ O O O O O $any$ O $boolean$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $boolean$ O O O O $any$ O $any$ O $any$ O $any$ O $number$ O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O $boolean$ O O O O O $any$ O $Screen$ O O $any$ O O $number$ O O O $number$ O O O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O $complex$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O $ObjectConstructor$ O $complex$ O $complex$ O O O O $any$ O $any$ O O O O O O $any$ O $Promise<void>$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $Screen$ O $Promise<void>$ O $any$ O O O O O O $any$ O $any$ O O O O O $string$ O $Array$ O O O O $any$ O O O O O $any$ O $string$ O O $undefined$ O O O $any$ O $any$ O $string$ O O $any$ O $any[]$ O $any$ O O O O O $Console$ O $void$ O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $Promise<void>$ O O O O O O $void$ O $any$ O $any$ O $any$ O $string$ O $any$ O O O $any[]$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $string$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O $string$ O $any$ O O O $any[]$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O $Console$ O $void$ O O O $any$ O O O $any$ O O O O O O
<s> import { Options } from 's' ; export interface _UNKNOWN_ extends Options { database : string ; username : string ; password : string ; _UNKNOWN_ ? : string [ ] ; _UNKNOWN_ ? : false ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O O $false$ O O O O O O
<s> import { Options } from 's' ; export interface _UNKNOWN_ extends Options { url : string ; _UNKNOWN_ ? : string [ ] ; _UNKNOWN_ ? : false ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O $false$ O O O O O O
<s> import { Options } from 's' ; export interface _UNKNOWN_ extends Options { name : string ; username : string ; password : string ; _UNKNOWN_ ? : string [ ] ; _UNKNOWN_ ? : false ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O O $false$ O O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export type _UNKNOWN_ = _UNKNOWN_ | _UNKNOWN_ | _UNKNOWN_ ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O
<s> import { Options } from 's' ; export interface _UNKNOWN_ extends Options { _UNKNOWN_ : true ; _UNKNOWN_ ? : string [ ] ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O $true$ O O O $string[]$ O O O O O O O O
<s> import { Model } from "s" ; export interface _UNKNOWN_ { source : typeof Model ; target : typeof Model ; identifier : string ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $string$ O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { as ? : string ; where ? : _UNKNOWN_ < any > ; attributes ? : _UNKNOWN_ | { include ? : _UNKNOWN_ , exclude ? : string [ ] } ; required ? : boolean ; _UNKNOWN_ ? : _UNKNOWN_ ; all ? : boolean | string ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $string$ O O O O $any$ O O $any$ O O O O $any$ O O $any$ O O $any$ O O $any$ O $string[]$ O O O O O O O $boolean$ O O O O $any$ O O $any$ O $complex$ O O O O O O O O
<s> import { Model } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ extends _UNKNOWN_ { model ? : typeof Model ; _UNKNOWN_ ? : _UNKNOWN_ ; include ? : Array < typeof Model | _UNKNOWN_ > ; _UNKNOWN_ ? : boolean ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $complex$ O O $ArrayConstructor$ O O $any$ O $any$ O O $boolean$ O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , col , _UNKNOWN_ , literal , fn , and , or , where } from 's' ; import { Model } from "s" ; import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ < T > extends _UNKNOWN_ , _UNKNOWN_ { where ? : _UNKNOWN_ < T > | where | fn | or | Array < col | and | or | string > ; attributes ? : _UNKNOWN_ | { include ? : _UNKNOWN_ , exclude ? : Array < string > } ; _UNKNOWN_ ? : boolean ; include ? : Array < typeof Model | _UNKNOWN_ > ; order ? : string | col | fn | literal | Array < string | number | typeof Model | { model : typeof Model , as ? : string } > | Array < string | col | fn | literal | Array < string | number | typeof Model | { model : typeof Model , as ? : string } > > ; limit ? : number ; offset ? : number ; lock ? : string | { level : string , of : typeof Model } ; raw ? : boolean ; _UNKNOWN_ ? : _UNKNOWN_ < any > ; group ? : string | string [ ] | Object ; distinct ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean | Error ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $ArrayConstructor$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O $any$ O O $any$ O $string[]$ O O $ArrayConstructor$ O O O O O $boolean$ O O O O $complex$ O O $ArrayConstructor$ O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $ArrayConstructor$ O O O O O O $any$ O O $any$ O O $any$ O $string$ O O O O O O $ArrayConstructor$ O O O $any$ O $any$ O $any$ O $ArrayConstructor$ O O O O O O $any$ O O $any$ O O $any$ O $string$ O O O O O O O $number$ O O O O $number$ O O O O $complex$ O O O O O $string$ O O O $any$ O O $any$ O O $boolean$ O O O O $any$ O O $any$ O O O O $complex$ O O O O O O O O $ObjectConstructor$ O $boolean$ O O O O $boolean$ O O O O $complex$ O O O O $ErrorConstructor$ O O O
<s> export interface _UNKNOWN_ { _UNKNOWN_ ? : any ; transaction ? : any ; } </s>	O O O $any$ O $any$ O O O O $any$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { Model } from "s" ; export interface _UNKNOWN_ extends _UNKNOWN_ { raw ? : boolean ; _UNKNOWN_ ? : boolean ; include ? : Array < typeof Model | _UNKNOWN_ > ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $boolean$ O O O O $boolean$ O O O O $complex$ O O $ArrayConstructor$ O O $any$ O $any$ O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ extends _UNKNOWN_ , _UNKNOWN_ { _UNKNOWN_ ? : string ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O
<s> import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ < _UNKNOWN_ > extends _UNKNOWN_ < _UNKNOWN_ > { defaults ? : _UNKNOWN_ ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $any$ O O O
<s> import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ < _UNKNOWN_ > extends _UNKNOWN_ < _UNKNOWN_ > { defaults ? : Partial < _UNKNOWN_ > ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Model } from 's' ; export interface _UNKNOWN_ < T > extends _UNKNOWN_ , _UNKNOWN_ { where ? : _UNKNOWN_ < T > | string [ ] ; include ? : Array < typeof Model | _UNKNOWN_ > ; distinct ? : boolean ; attributes ? : Array < string | [ string , string ] > ; group ? : Object ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $complex$ O O $ArrayConstructor$ O O $any$ O $any$ O O $boolean$ O O O O $complex$ O O $ArrayConstructor$ O O O O O O O O O O $Object$ O O $ObjectConstructor$ O O O
<s> export type _UNKNOWN_ < T extends string , U extends string > = ( { [ P in T ] : P } & { [ P in U ] : never } & { [ x ] : never } ) [ T ] ; export type _UNKNOWN_ < T , K extends keyof T > = { [ P in _UNKNOWN_ < keyof T , K > ] : T [ P ] } ; export type _UNKNOWN_ < T > = { [ P in keyof T ] ? : _UNKNOWN_ < T [ P ] > } ; export type _UNKNOWN_ < T > = { [ P in keyof T ] : T [ P ] } ; </s>	O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O O $string$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O O $any$ O $any$ O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { Model } from "s" ; export interface _UNKNOWN_ extends _UNKNOWN_ { type ? : string | _UNKNOWN_ ; unique ? : boolean | string | { name : string , msg : string } ; primaryKey ? : boolean ; _UNKNOWN_ ? : boolean ; comment ? : string ; references ? : _UNKNOWN_ ; onUpdate ? : string ; onDelete ? : string ; get ? : ( this < any > ) => any ; set ? : ( this < any > , val ) => void ; validate ? : _UNKNOWN_ ; values ? : string [ ] ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $complex$ O O O O O O O $string$ O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $any$ O O $any$ O $string$ O O O O $string$ O O O O $any$ O O O $Model$ O O O O O O O $void$ O O O $Model$ O O O O $any$ O O O O $any$ O O $any$ O $string[]$ O O O O O O O O
<s> import Sequelize = require ( "s" ) ; import { _UNKNOWN_ } from "s" ; export const DataType = ( Sequelize as any ) ; </s>	O O $any$ O O O O O O O O $any$ O O O O O O $any$ O O $any$ O O O O O
<s> import { DataType } from "s" ; import { _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( value ) { return value === DataType . _UNKNOWN_ || value === DataType . NUMBER || ( typeof value === 's' && value ( { } ) instanceof ( DataType . _UNKNOWN_ as any ) ) || value instanceof ( DataType . _UNKNOWN_ as any ) ; } export function _UNKNOWN_ ( _UNKNOWN_ ) : _UNKNOWN_ | undefined { switch ( _UNKNOWN_ ) { case String : return DataType . STRING ; case Number : return DataType . INTEGER ; case Boolean : return DataType . BOOLEAN ; case Date : return DataType . _UNKNOWN_ ; case Buffer : return DataType . _UNKNOWN_ ; default : return void 0 ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O O $any$ O O O $StringConstructor$ O O $any$ O $any$ O O $NumberConstructor$ O O $any$ O $any$ O O $BooleanConstructor$ O O $any$ O $any$ O O $DateConstructor$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O O O O O O
<s> export function _UNKNOWN_ < T , 0 , 0 , 0 > ( target : T , 0 , 0 , 0 ) : T & 0 & 0 & 0 ; export function _UNKNOWN_ < T , 0 , 0 > ( target : T , 0 , 0 ) : T & 0 & 0 ; export function _UNKNOWN_ < T , S > ( target : T , source : S ) : T & S ; export function _UNKNOWN_ < S > ( target : { } , source : S ) : S ; export function _UNKNOWN_ ( target , ... sources : any [ ] ) { sources . forEach ( source => { Object . getOwnPropertyNames ( source ) . forEach ( key => assign ( key , target , source ) ) ; if ( Object . _UNKNOWN_ ) { Object . _UNKNOWN_ ( source ) . forEach ( key => assign ( key , target , source ) ) ; } } ) ; return target ; function assign ( key : string | number | symbol , _target , _source ) { const sourceValue = _source [ key ] ; if ( sourceValue !== void 0 ) { let _UNKNOWN_ = _target [ key ] ; if ( Array . isArray ( sourceValue ) ) { if ( ! Array . isArray ( _UNKNOWN_ ) ) { _UNKNOWN_ = [ ] ; } const length = _UNKNOWN_ . length ; sourceValue . forEach ( ( _ , index ) => assign ( length + index , _UNKNOWN_ , sourceValue ) ) ; } else if ( typeof sourceValue === 's' ) { if ( sourceValue instanceof RegExp ) { _UNKNOWN_ = _UNKNOWN_ ( sourceValue ) ; } else if ( sourceValue instanceof Date ) { _UNKNOWN_ = new Date ( sourceValue ) ; } else if ( sourceValue === null ) { _UNKNOWN_ = null ; } else { if ( ! _UNKNOWN_ ) { _UNKNOWN_ = Object . create ( sourceValue . constructor . prototype ) ; } _UNKNOWN_ ( _UNKNOWN_ , sourceValue ) ; } } else { _UNKNOWN_ = sourceValue ; } _target [ key ] = _UNKNOWN_ ; } } } export function _UNKNOWN_ ( input , _UNKNOWN_ ? ) { const pattern = input . source ; let flags = "s" ; _UNKNOWN_ = ( _UNKNOWN_ || "s" ) ; if ( input . global || ( "s" ) . test ( _UNKNOWN_ ) ) { flags += "s" ; } if ( input . ignoreCase || ( "s" ) . test ( _UNKNOWN_ ) ) { flags += "s" ; } if ( input . _UNKNOWN_ || ( "s" ) . test ( _UNKNOWN_ ) ) { flags += "s" ; } return ( new RegExp ( pattern , flags ) ) ; } export function _UNKNOWN_ ( obj ) : string [ ] { const names : string [ ] = [ ] ; do { names . push . apply ( names , Object . getOwnPropertyNames ( obj ) ) ; obj = Object . getPrototypeOf ( obj ) ; } while ( obj !== Object . prototype ) ; const exists : { [ name ] : boolean | undefined } = { } ; return names . filter ( name => { const isValid = ! exists [ name ] && name !== 's' ; exists [ name ] = true ; return isValid ; } ) ; } export function extend ( target , source ) { Object . keys ( source . prototype ) . forEach ( name => target . prototype [ name ] = source . prototype [ name ] ) ; Object . keys ( source ) . forEach ( name => target [ name ] = source [ name ] ) ; } </s>	O O O O O $any$ O $any$ O $any$ O $any$ O O $T$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $T$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $T$ O $any$ O $S$ O $any$ O O $any$ O $any$ O O O O O $any$ O O ${}$ O O O O $S$ O $any$ O O $any$ O O O $any$ O $any$ O O $any[]$ O O O O O O $any[]$ O $void$ O $any$ O O $ObjectConstructor$ O $string[]$ O $any$ O O $void$ O $string$ O $void$ O $string$ O $any$ O $any$ O O O O O $ObjectConstructor$ O $any$ O O $ObjectConstructor$ O $any$ O $any$ O O $void$ O $symbol$ O $void$ O $symbol$ O $any$ O $any$ O O O O O O O O $any$ O O $void$ O $complex$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $complex$ O O O O $any$ O O O O O O $any$ O $any$ O $complex$ O O O O $ArrayConstructor$ O $complex$ O $any$ O O O O O O $ArrayConstructor$ O $complex$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any[]$ O $void$ O O $any$ O $number$ O O $void$ O $any$ O $number$ O $any$ O $any[]$ O O O O O O O O $any$ O O O O O O $any$ O $RegExpConstructor$ O O $any$ O $RegExp$ O $RegExp$ O O O O O O $any$ O $DateConstructor$ O O $any$ O O $DateConstructor$ O $Date$ O O O O O O $any$ O O O O $any$ O O O O O O O O O $any$ O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O O O O O $RegExp$ O $RegExp$ O $string$ $string$ O O O $string$ O $RegExp$ O $string$ O O $string$ O O O $string$ O O $string$ O O O O O O $RegExp$ O $boolean$ O O O O O $boolean$ O $string$ O O O $string$ O O O O O O $RegExp$ O $boolean$ O O O O O $boolean$ O $string$ O O O $string$ O O O O O O $RegExp$ O $boolean$ O O O O O $boolean$ O $string$ O O O $string$ O O O O O O O $RegExpConstructor$ O $string$ O $string$ O O O O O O $string[]$ O $any$ O O O O O O O $string[]$ O O O O O O O O O O $string[]$ O $number$ O $any$ O $string[]$ O $ObjectConstructor$ O $string[]$ O $any$ O O O $any$ O $ObjectConstructor$ O $any$ O $any$ O O O O O $any$ O $ObjectConstructor$ O $Object$ O O O $complex$ O O O $string$ O O O O O O O O O O O $string[]$ O $complex$ O $string$ O O O $boolean$ O O $complex$ O $string$ O O $string$ O O O $complex$ O $string$ O O O O O $boolean$ O O O O O O O $void$ O $Function$ O $Function$ O O $ObjectConstructor$ O $complex$ O $Function$ O $any$ O O $void$ O $string$ O $Function$ O $any$ O $string$ O O $Function$ O $any$ O $string$ O O O $ObjectConstructor$ O $complex$ O $Function$ O O $void$ O $string$ O $Function$ O $string$ O O $Function$ O $string$ O O O O O
<s> import { Model } from "s" ; export type _UNKNOWN_ = ( ) => typeof Model ; </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O
<s> import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ { _UNKNOWN_ : _UNKNOWN_ ; foreignKey : string ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { Model } from 's' ; export interface _UNKNOWN_ { model : typeof Model ; scope ? : _UNKNOWN_ ; unique ? : boolean ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $boolean$ O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ : _UNKNOWN_ ; _UNKNOWN_ ? : string | _UNKNOWN_ ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export type _UNKNOWN_ = _UNKNOWN_ | _UNKNOWN_ | _UNKNOWN_ | _UNKNOWN_ | _UNKNOWN_ ; </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O
<s> import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ { source : _UNKNOWN_ ; target : _UNKNOWN_ ; identifier : string ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ extends _UNKNOWN_ { model ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; include ? : Array < _UNKNOWN_ | _UNKNOWN_ > ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $complex$ O O $ArrayConstructor$ O $any$ O $any$ O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , col , and , or , _UNKNOWN_ , literal } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ extends _UNKNOWN_ , _UNKNOWN_ { where ? : _UNKNOWN_ < any > | Array < col | and | or | string > | col | and | or | string ; attributes ? : _UNKNOWN_ | { include ? : _UNKNOWN_ , exclude ? : Array < string > } ; _UNKNOWN_ ? : boolean ; include ? : Array < _UNKNOWN_ | _UNKNOWN_ > ; order ? : string | col | literal | Array < string | col | number | _UNKNOWN_ | { model : _UNKNOWN_ , as ? : string } > | Array < string | col | literal | Array < string | col | number | _UNKNOWN_ | { model : _UNKNOWN_ , as ? : string } > > ; limit ? : number ; offset ? : number ; lock ? : string | { level : string , of : _UNKNOWN_ } ; raw ? : boolean ; _UNKNOWN_ ? : _UNKNOWN_ < any > ; group ? : string | string [ ] | Object ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $ArrayConstructor$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O $any$ O O $any$ O $string[]$ O O $ArrayConstructor$ O O O O O $boolean$ O O O O $complex$ O O $ArrayConstructor$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $ArrayConstructor$ O O O $any$ O O O $any$ O O $any$ O $any$ O $string$ O O O O O O $ArrayConstructor$ O O O $any$ O $any$ O $ArrayConstructor$ O O O $any$ O O O $any$ O O $any$ O $any$ O $string$ O O O O O O O $number$ O O O O $number$ O O O O $complex$ O O O O O $string$ O O O $any$ O $any$ O O $boolean$ O O O O $any$ O O $any$ O O O O $complex$ O O O O O O O O $ObjectConstructor$ O O O
<s> import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ { [ scopeName ] : _UNKNOWN_ | Function | undefined ; } </s>	O O O $any$ O O O O O O $any$ O O $string$ O O $any$ O $FunctionConstructor$ O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ ? : _UNKNOWN_ | Function ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $complex$ O O $any$ O $FunctionConstructor$ O O O
<s> import 's' ; import { Model } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; const _UNKNOWN_ = 's' ; export function _UNKNOWN_ ( models < typeof Model > ) { models . forEach ( model => { const options = _UNKNOWN_ ( model . prototype ) ; if ( options ) { Object . keys ( options ) . forEach ( key => _UNKNOWN_ ( key , model , options [ key ] ) ) ; } } ) ; } export function _UNKNOWN_ ( target , options ) { const _options = _UNKNOWN_ ( target ) || { } ; _UNKNOWN_ ( target , _UNKNOWN_ ( { } , _options , options ) ) ; } export function _UNKNOWN_ ( target ) : _UNKNOWN_ | undefined { const options = Reflect . getMetadata ( _UNKNOWN_ , target ) ; if ( options ) { return _UNKNOWN_ ( { } , options ) ; } } function _UNKNOWN_ ( scopeName , model : typeof Model , options : _UNKNOWN_ | Function | undefined ) { _UNKNOWN_ ( options ) ; if ( typeof options === 's' ) { const fn = options ; options = ( ... args : any [ ] ) => _UNKNOWN_ ( fn ( ... args ) , model ) ; } else { options = _UNKNOWN_ ( options , model ) ; } model . _UNKNOWN_ ( scopeName , options as _UNKNOWN_ < typeof Model > , { override : true } ) ; } function _UNKNOWN_ ( target , options ) { Reflect . _UNKNOWN_ ( _UNKNOWN_ , options , target ) ; } </s>	O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $void$ O O O O O O O O O O O $void$ O $Array$ O O $any$ O O O $complex$ O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O $string$ O $void$ O $string$ O $any$ O $any$ O $string$ O O O O O O O O O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O O O $any$ O O O O O $void$ O $string$ O $any$ O O $any$ O $complex$ O $any$ O $FunctionConstructor$ O O O O $void$ O $complex$ O O O O O $complex$ O O O O O $Function$ O $Function$ O $complex$ O O O $any[]$ O O O O O O $any$ O $Function$ O O $any[]$ O O $any$ O O O O O $complex$ O $any$ O $any$ O $any$ O O O $any$ O $void$ O $string$ O $complex$ O $any$ O O $any$ O O O $boolean$ O O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O
<s> export interface _UNKNOWN_ { name ? : string ; } </s>	O O O $any$ O $string$ O O O O O O
<s> import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ { _UNKNOWN_ : string ; methodName : string ; options ? : _UNKNOWN_ ; } </s>	O O O $any$ O O O O O O $any$ O $string$ O O O $string$ O O O $any$ O O $any$ O O O
<s> import 's' ; import { Model } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; const _UNKNOWN_ = 's' ; export function _UNKNOWN_ ( models < typeof Model > ) { models . forEach ( model => { const hooks = _UNKNOWN_ ( model ) ; if ( hooks ) { hooks . forEach ( hook => { _UNKNOWN_ ( model , hook ) ; } ) ; } } ) ; } export function _UNKNOWN_ ( _UNKNOWN_ , args : any [ ] ) : Function | void { if ( args . length === 0 ) { const options = args [ 0 ] ; return ( target , propertyName ) => _UNKNOWN_ ( target , _UNKNOWN_ , propertyName , options ) ; } else { const target = args [ 0 ] ; const propertyName = args [ 0 ] ; _UNKNOWN_ ( target , _UNKNOWN_ , propertyName ) ; } } export function _UNKNOWN_ ( target , _UNKNOWN_ , methodName , options = { } ) { if ( typeof target !== 's' ) { throw new Error ( `template` + `template` ) ; } if ( methodName === _UNKNOWN_ ) { throw new Error ( `template` + `template` ) ; } const hooks = _UNKNOWN_ ( target ) || [ ] ; hooks . push ( { _UNKNOWN_ , methodName , options } ) ; _UNKNOWN_ ( target , hooks ) ; } function _UNKNOWN_ ( model : typeof Model , hook ) { if ( hook . options && hook . options . name ) { model . _UNKNOWN_ ( hook . _UNKNOWN_ , hook . options . name , model [ hook . methodName ] ) ; return ; } model . _UNKNOWN_ ( hook . _UNKNOWN_ , model [ hook . methodName ] ) ; } export function _UNKNOWN_ ( target ) : _UNKNOWN_ [ ] | undefined { const hooks = Reflect . getMetadata ( _UNKNOWN_ , target ) ; if ( hooks ) { return [ ... hooks ] ; } } export function _UNKNOWN_ ( target , hooks : _UNKNOWN_ [ ] ) { Reflect . _UNKNOWN_ ( _UNKNOWN_ , hooks , target ) ; } </s>	O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O $void$ O $Array$ O O $any$ O O O $complex$ O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $void$ O $any$ O O $void$ O $any$ O $any$ O O O O O O O O O O O O $complex$ O $string$ O $any[]$ O O O O O O $FunctionConstructor$ O O O O O $any[]$ O $number$ O O O O O $any$ O $any[]$ O O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O $string$ O $any$ O O O O O O $any$ O $any[]$ O O O O O $any$ O $any[]$ O O O O $void$ O $any$ O $string$ O $any$ O O O O O O $void$ O $any$ O $string$ O $string$ O $any$ O O O O O O O O $any$ O O O O O O $ErrorConstructor$ O O O O O O O O O $string$ O $string$ O O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $number$ O O $string$ O $string$ O $any$ O O O $void$ O $any$ O $any$ O O O O $void$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O $complex$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O O O O $any$ O $complex$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O
<s> import { Model } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { extend } from "s" ; import { _UNKNOWN_ } from 's' ; export abstract class _UNKNOWN_ { _UNKNOWN_ : { [ _UNKNOWN_ ] : any } = { } ; _ : { [ modelName ] : ( typeof Model ) } = { } ; static _UNKNOWN_ ( obj ) : obj is _UNKNOWN_ { return obj . hasOwnProperty ( "s" ) && obj . hasOwnProperty ( "s" ) ; } static _UNKNOWN_ ( obj ) : obj is _UNKNOWN_ { return obj . hasOwnProperty ( "s" ) ; } static extend ( target ) { extend ( target , this ) ; } static _UNKNOWN_ ( config : _UNKNOWN_ | _UNKNOWN_ ) { if ( ! config . define ) { config . define = { } ; } config . define = { ... _UNKNOWN_ , ... config . define } ; if ( config . _UNKNOWN_ ) { return this . _UNKNOWN_ ( config ) ; } if ( _UNKNOWN_ . _UNKNOWN_ ( config ) ) { return { ... config , database : config . name } as _UNKNOWN_ ; } return { ... config as _UNKNOWN_ } ; } static _UNKNOWN_ ( config : _UNKNOWN_ | _UNKNOWN_ ) { return { ... config , database : 's' , username : 's' , password : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : __dirname + 's' } as _UNKNOWN_ ; } _UNKNOWN_ ( models < typeof Model > ) ; _UNKNOWN_ ( _UNKNOWN_ : string [ ] ) ; _UNKNOWN_ ( arg < typeof Model | string > ) { const models = _UNKNOWN_ ( arg ) ; this . _UNKNOWN_ ( models ) ; models . forEach ( model => model . _UNKNOWN_ = true ) ; this . _UNKNOWN_ ( models ) ; _UNKNOWN_ ( models ) ; _UNKNOWN_ ( models ) ; models . forEach ( model => this . _ [ model . name ] = model ) ; } init ( config ) { if ( config . _UNKNOWN_ ) this . _UNKNOWN_ ( config . _UNKNOWN_ ) ; } _UNKNOWN_ ( models < typeof Model > ) { models . forEach ( model => { const associations = _UNKNOWN_ ( model . prototype ) ; if ( ! associations ) return ; associations . forEach ( _UNKNOWN_ => { _UNKNOWN_ . init ( model , this ) ; const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) ; const relation = _UNKNOWN_ . _UNKNOWN_ ( ) ; const options = _UNKNOWN_ . _UNKNOWN_ ( ) ; model [ relation ] ( _UNKNOWN_ , options ) ; this . _UNKNOWN_ ( model , _UNKNOWN_ ) ; } ) ; } ) ; } abstract _UNKNOWN_ ( _UNKNOWN_ ) : typeof Model ; abstract _UNKNOWN_ ( model , _UNKNOWN_ ) ; abstract _UNKNOWN_ ( models < typeof Model > ) ; } </s>	O O O $any$ O O O O O O $any$ O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $void$ O O O O O O $void$ O O O O O O $any$ O O O O O O $void$ O O O O O O $any$ O O O O O O O $any$ O $complex$ O O O $string$ O O O O O O O O $complex$ O O O $string$ O O O O $any$ O O O O O O O $complex$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $complex$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O O O $void$ O $any$ O O $void$ O $any$ O O O O O O $any$ O $complex$ O $any$ O $any$ O O O O O $complex$ O $any$ O O $complex$ O $any$ O O O O O $complex$ O $any$ O O O $any$ O O $complex$ O $any$ O O O O $complex$ O $boolean$ O O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $complex$ O O O O O O $any$ O $string$ O $any$ O $string$ O O $any$ O O O O O $complex$ O $any$ O O O O $any$ O $complex$ O $any$ O $any$ O O O O O $complex$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O $any$ O O O O $any$ O O $void$ O $Array$ O O $any$ O O O $void$ O $string[]$ O O O O O O $void$ O $Array$ O O $any$ O O O O O O $complex$ O $complex$ O $complex$ O O O O $void$ O $complex$ O O $complex$ O $void$ O $any$ O $any$ O $boolean$ O O O O O O $void$ O $complex$ O O $void$ O $complex$ O O $void$ O $complex$ O O $complex$ O $void$ O $any$ O O O $complex$ O $any$ O $string$ O O $any$ O O O $void$ O $any$ O O O O $any$ O $string[]$ O O O $complex$ O $any$ O $string[]$ O O O $void$ O $Array$ O O $any$ O O O $complex$ O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $void$ O $any$ O O $any$ O $void$ O $any$ O O O O O $any$ O $any$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O O O O O O O $complex$ O $string$ O O O $any$ O O $void$ O $any$ O $any$ O O O $void$ O $Array$ O O $any$ O O O O O
<s> export enum _UNKNOWN_ { _UNKNOWN_ = 's' , BelongsTo = 's' , HasMany = 's' , _UNKNOWN_ = 's' , } </s>	O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O O
<s> import { Model } from 's' ; export type _UNKNOWN_ = { _UNKNOWN_ : string } | { _UNKNOWN_ : string } ; export class _UNKNOWN_ extends Error { message : string ; constructor ( _UNKNOWN_ : typeof Model , options ) { super ( ) ; let _UNKNOWN_ = options [ 's' ] ; if ( ! ( 's' in options ) ) { _UNKNOWN_ = `template` ; } this . message = `template` + `template` ; } } </s>	O O O $any$ O O O O O O $any$ O O $string$ O O O O O $string$ O O O O O O $any$ O $ErrorConstructor$ O $string$ O O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O $any$ O O O O O O $string$ O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Model } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export abstract class _UNKNOWN_ { private _options : _UNKNOWN_ ; constructor ( private _UNKNOWN_ ) { } abstract _UNKNOWN_ ( ) ; protected abstract _UNKNOWN_ ( model : typeof Model , sequelize ) ; _UNKNOWN_ ( ) : typeof Model { const _UNKNOWN_ = this . _UNKNOWN_ ( ) ; if ( ! _UNKNOWN_ . _UNKNOWN_ ) { throw new _UNKNOWN_ ( _UNKNOWN_ , { _UNKNOWN_ : 's' } ) ; } return _UNKNOWN_ ; } init ( model : typeof Model , sequelize ) { if ( ! this . _options ) { this . _options = this . _UNKNOWN_ ( model , sequelize ) ; } } _UNKNOWN_ ( ) { if ( ! this . _options ) { throw new Error ( `template` ) ; } return this . _options ; } protected _UNKNOWN_ ( _UNKNOWN_ : typeof Model , _UNKNOWN_ : typeof Model , foreignKey ? : string | _UNKNOWN_ ) { let _UNKNOWN_ = { } ; if ( typeof foreignKey === 's' ) { _UNKNOWN_ . name = foreignKey ; } else if ( foreignKey && typeof foreignKey === 's' ) { _UNKNOWN_ = { ... foreignKey } ; } if ( ! _UNKNOWN_ . name ) { const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ . prototype ) || [ ] ; for ( const key of _UNKNOWN_ ) { if ( key . _UNKNOWN_ ( ) === _UNKNOWN_ ) { _UNKNOWN_ . name = key . foreignKey ; break ; } } if ( ! _UNKNOWN_ . name ) { throw new Error ( `template` + `template` ) ; } } return _UNKNOWN_ ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O $complex$ O O O O $any$ O O $any$ O O O $any$ O O O O O O $any$ O $boolean$ O O O O $any$ O $any$ O O $string$ O O O O O O O $any$ O O $void$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O O $any$ O O $any$ O O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O O O O $ErrorConstructor$ O O O O O O O O O $any$ O O O O
<s> import 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; export type _UNKNOWN_ = _UNKNOWN_ | _UNKNOWN_ | _UNKNOWN_ | _UNKNOWN_ ; export function _UNKNOWN_ ( _UNKNOWN_ ? : string | _UNKNOWN_ ) { let options = { } ; if ( _UNKNOWN_ ) { if ( typeof _UNKNOWN_ === 's' ) { options . foreignKey = _UNKNOWN_ ; } else { options = { ... _UNKNOWN_ } ; } } return options ; } export function _UNKNOWN_ ( target , _UNKNOWN_ ) { let associations = _UNKNOWN_ ( target ) ; if ( ! associations ) { associations = [ ] ; } associations . push ( _UNKNOWN_ ) ; _UNKNOWN_ ( target , associations ) ; } export function _UNKNOWN_ ( target ) : _UNKNOWN_ [ ] | undefined { const associations = Reflect . getMetadata ( _UNKNOWN_ , target ) ; if ( associations ) { return [ ... associations ] ; } } export function _UNKNOWN_ ( target , associations : _UNKNOWN_ [ ] ) { Reflect . _UNKNOWN_ ( _UNKNOWN_ , associations , target ) ; } export function _UNKNOWN_ ( target , _UNKNOWN_ ) : _UNKNOWN_ [ ] { const associations = _UNKNOWN_ ( target ) ; return ( associations || [ ] ) . filter ( _UNKNOWN_ => { const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) ; return ( _UNKNOWN_ . prototype === _UNKNOWN_ . prototype || _UNKNOWN_ . prototype instanceof _UNKNOWN_ ) ; } ) ; } export function _UNKNOWN_ ( target , _UNKNOWN_ , foreignKey ) { let _UNKNOWN_ = _UNKNOWN_ ( target ) ; if ( ! _UNKNOWN_ ) { _UNKNOWN_ = [ ] ; } _UNKNOWN_ . push ( { _UNKNOWN_ , foreignKey } ) ; _UNKNOWN_ ( target , _UNKNOWN_ ) ; } export function _UNKNOWN_ ( target ) : _UNKNOWN_ [ ] | undefined { const _UNKNOWN_ = Reflect . getMetadata ( _UNKNOWN_ , target ) ; if ( _UNKNOWN_ ) { return [ ... _UNKNOWN_ ] ; } } function _UNKNOWN_ ( target , _UNKNOWN_ : any [ ] ) { Reflect . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , target ) ; } </s>	O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O O O $any$ O O O O O $any$ O O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O $any$ O $number$ O $any$ O O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O $complex$ O $any$ O O O $any$ O $any$ O $complex$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O $any$ O $number$ O O $any$ O $string$ O O O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O $any$ O O O O O $void$ O $any$ O $any[]$ O O O O O O $any$ O $any$ O O O $any[]$ O $any$ O O O O
<s> export function unique < T > ( arr : T [ ] ) : T [ ] { return arr . filter ( _UNKNOWN_ ) ; } export const _UNKNOWN_ = ( item , index , arr ) => arr . indexOf ( item ) === index ; </s>	O O O $T[]$ O $any$ O O $T[]$ O $any$ O O O O $any$ O O O O $T[]$ O $complex$ O $boolean$ O O O O O $boolean$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O
<s> import 's' ; import * as glob from 's' ; import * as path from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { Model } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; export const _UNKNOWN_ < any > = { timestamps : false } ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = { _UNKNOWN_ : 0 , build : 0 , create : 0 , _UNKNOWN_ : 0 , all : 0 , find : 0 , findAll : 0 , _UNKNOWN_ : 0 , findAndCountAll : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , findOne : 0 , _UNKNOWN_ : 0 , findOrCreate : 0 , _UNKNOWN_ : 0 , reload : 0 , } ; export function _UNKNOWN_ ( target , modelName ) { Reflect . _UNKNOWN_ ( _UNKNOWN_ , modelName , target ) ; } export function _UNKNOWN_ ( target ) { return Reflect . getMetadata ( _UNKNOWN_ , target ) ; } export function getAttributes ( target ) : any | undefined { const attributes = Reflect . getMetadata ( _UNKNOWN_ , target ) ; if ( attributes ) { return Object . keys ( attributes ) . reduce ( ( copy , key ) => { copy [ key ] = { ... attributes [ key ] } ; return copy ; } , { } ) ; } } export function _UNKNOWN_ ( target , attributes ) { Reflect . _UNKNOWN_ ( _UNKNOWN_ , { ... attributes } , target ) ; } export function addAttribute ( target , name , options ) { let attributes = getAttributes ( target ) ; if ( ! attributes ) { attributes = { } ; } attributes [ name ] = { ... options } ; _UNKNOWN_ ( target , attributes ) ; } export function _UNKNOWN_ ( target , propertyName , options ) { const attributes = getAttributes ( target ) ; if ( ! attributes || ! attributes [ propertyName ] ) { throw new Error ( `template` + `template` ) ; } attributes [ propertyName ] = _UNKNOWN_ ( attributes [ propertyName ] , options ) ; _UNKNOWN_ ( target , attributes ) ; } export function getOptions ( target ) : _UNKNOWN_ < any > | undefined { const options = Reflect . getMetadata ( _UNKNOWN_ , target ) ; if ( options ) { return { ... options } ; } } export function setOptions ( target , options < any > ) { Reflect . _UNKNOWN_ ( _UNKNOWN_ , { ... options } , target ) ; } export function _UNKNOWN_ ( target , options < any > ) { let _options = getOptions ( target ) ; if ( ! _options ) { _options = { } ; } setOptions ( target , { ... _options , ... options , validate : { ... ( _options . validate || { } ) , ... ( options . validate || { } ) , } } ) ; } export function _UNKNOWN_ ( target , propertyName ) { const type = Reflect . getMetadata ( 's' , target , propertyName ) ; const dataType = _UNKNOWN_ ( type ) ; if ( dataType ) { return dataType ; } throw new Error ( `template` ) ; } export function _UNKNOWN_ ( arg < typeof Model | string > ) < typeof Model > { if ( arg && typeof arg [ 0 ] === 's' ) { return arg . reduce ( ( models : any [ ] , dir ) => { if ( ! glob . _UNKNOWN_ ( dir ) ) dir = path . join ( dir , 's' ) ; const _UNKNOWN_ = glob . sync ( dir as string ) . filter ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . filter ( _UNKNOWN_ ) . map ( fullPath => { const module = require ( fullPath ) ; const fileName = _UNKNOWN_ ( fullPath ) ; if ( ! module [ fileName ] && ! module . default ) { throw new Error ( `template` + `template` ) ; } return module [ fileName ] || module . default ; } ) ; models . push ( ... _UNKNOWN_ ) ; return models ; } , [ ] ) ; } return arg as Array < typeof Model > ; } export function _UNKNOWN_ ( options ) { const _UNKNOWN_ = value => typeof value === 's' && value . length === 0 ; const _UNKNOWN_ = value => value && value . prototype && value . prototype instanceof Model ; const _UNKNOWN_ = value => value && typeof value === 's' ; Object . keys ( options ) . forEach ( key => { const value = options [ key ] ; if ( _UNKNOWN_ ( value ) ) { const _UNKNOWN_ = value ( ) ; if ( _UNKNOWN_ ( _UNKNOWN_ ) ) { options [ key ] = _UNKNOWN_ ; } } else if ( _UNKNOWN_ ( value ) ) { _UNKNOWN_ ( value ) ; } } ) ; } export function _UNKNOWN_ ( options , source ) { options = { ... options } ; if ( ! options . include ) { return options ; } if ( ! Array . isArray ( options . include ) ) { options . include = [ options . include ] ; } else if ( ! options . include . length ) { delete options . include ; return options ; } options . include = options . include . map ( ( include ) => { include = _UNKNOWN_ ( include , source ) ; return include ; } ) ; return options ; } function _UNKNOWN_ ( include , source ) { const _UNKNOWN_ = ! ! ( include . model && ! include . as ) ; const _UNKNOWN_ = ! ! include . include ; const _UNKNOWN_ = include instanceof Function ; if ( _UNKNOWN_ || _UNKNOWN_ ) { if ( _UNKNOWN_ ) { include = { model : include } ; } const _UNKNOWN_ = ( source [ _UNKNOWN_ ] || source ) . prototype || source ; const _UNKNOWN_ = include . model ; const associations = _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; if ( associations . length > 0 ) { if ( associations . length > 0 ) { throw new Error ( `template` + `template` ) ; } include . as = associations [ 0 ] . _UNKNOWN_ ( ) . as ; } } if ( ! _UNKNOWN_ && _UNKNOWN_ ) { include = _UNKNOWN_ ( include , include . model ) ; } return include ; } function _UNKNOWN_ ( file ) { const _UNKNOWN_ = file . slice ( - 0 ) ; return _UNKNOWN_ === 's' || ( _UNKNOWN_ === 's' && file . slice ( - 0 ) !== 's' ) ; } function _UNKNOWN_ ( file ) { return path . parse ( file ) . name ; } function _UNKNOWN_ ( file ) { const _UNKNOWN_ = path . parse ( file ) ; return path . join ( _UNKNOWN_ . dir , _UNKNOWN_ . name ) ; } </s>	O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O $boolean$ O O O O O O O O O O O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O O $void$ O $any$ O $string$ O O $any$ O $any$ O O O $string$ O $any$ O O O O O $string$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O $ObjectConstructor$ O $complex$ O $any$ O O $complex$ O O ${}$ O $string$ O O O ${}$ O $string$ O O O O $any$ O $string$ O O O O ${}$ O O O O O O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O $void$ O $any$ O $string$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O $any$ O $string$ O O O O $any$ O O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O $string$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $string$ O O O O O $ErrorConstructor$ O O O O O O O $any$ O $string$ O O O O $any$ O $string$ O O $any$ O O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O $any$ O O O O O O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O $void$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O $void$ O $any$ O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O O $ErrorConstructor$ O O O O O O O $Array$ O $Array$ O O $any$ O O O O O O $any$ O O O O $complex$ O O $complex$ O O O O O O O O $complex$ O $complex$ O O $any[]$ O O O O O $complex$ O O O O O O $any$ O $any$ O $complex$ O O $complex$ O $any$ O $any$ O $complex$ O O O O O $any$ O $any$ O $any$ O $complex$ O O O O $any$ O $boolean$ O O $any$ O $string$ O O $any$ O $boolean$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $string$ O $string$ O $any$ O O O O O $any$ O $string$ O O O $any$ O $any$ O O O O $ErrorConstructor$ O O O O O O O O $any$ O $string$ O O $any$ O $any$ O O O O $any[]$ O $number$ O O $any$ O O O $any[]$ O O O O O O O O O $complex$ O $ArrayConstructor$ O O $any$ O O O O O $void$ O $any$ O O O $boolean$ O $any$ O O $any$ O O O $any$ O $any$ O O O O $boolean$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O $any$ O $any$ O O $any$ O O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O $string$ O O O $any$ O $any$ O $string$ O O O O $boolean$ O $any$ O O O O $any$ O $any$ O O O O O $boolean$ O $any$ O O O $any$ O $string$ O O $any$ O O O O O O $boolean$ O $any$ O O O $void$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O O $ArrayConstructor$ O $complex$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $boolean$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $boolean$ O O O $any$ O $any$ O O $boolean$ O $any$ O $FunctionConstructor$ O O O $boolean$ O $boolean$ O O O O $boolean$ O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $number$ O O O O O O $any$ O $number$ O O O O O O $ErrorConstructor$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O O $boolean$ O $boolean$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $boolean$ O $string$ O O O $string$ O $string$ O $string$ O O O O O O $string$ O O O O $string$ O O O $string$ O $string$ O O O O O O O O O O $string$ O $string$ O O O $any$ O $any$ O $string$ O O $any$ O O O $string$ O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { _UNKNOWN_ : true } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $true$ O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function AllowNull ( target , propertyName ) ; export function AllowNull ( allowNull ) ; export function AllowNull ( ... args : any [ ] ) : void | Function { if ( args . length === 0 ) { const allowNull = args [ 0 ] ; return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { allowNull } ) ; } else { const target = args [ 0 ] ; const propertyName = args [ 0 ] ; _UNKNOWN_ ( target , propertyName , { allowNull : true } ) ; } } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $boolean$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O O $any[]$ O $number$ O O O O O $any$ O $any[]$ O O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $any$ O O O O O O O $any$ O $any[]$ O O O O O $any$ O $any[]$ O O O O $void$ O $any$ O $any$ O O $boolean$ O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { Model } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( _UNKNOWN_ , private options ) { super ( _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { return _UNKNOWN_ . BelongsTo ; } protected _UNKNOWN_ ( model : typeof Model , sequelize ) { const options = { ... this . options } ; const _UNKNOWN_ = this . _UNKNOWN_ ( ) ; options . foreignKey = this . _UNKNOWN_ ( _UNKNOWN_ , model , options . foreignKey ) ; return options ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O $any$ O O O $complex$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; export function BelongsTo ( _UNKNOWN_ , foreignKey ? ) ; export function BelongsTo ( _UNKNOWN_ , options ? ) ; export function BelongsTo ( _UNKNOWN_ , _UNKNOWN_ ? : string | _UNKNOWN_ ) { return ( target , propertyName ) => { const options = _UNKNOWN_ ( _UNKNOWN_ ) ; if ( ! options . as ) options . as = propertyName ; _UNKNOWN_ ( target , new _UNKNOWN_ ( _UNKNOWN_ , options , ) ) ; } ; } </s>	O O O $any$ O O O O O O $void$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $Function$ O $any$ O $string$ $string$ O O O O $Function$ O $any$ O $any$ $any$ O O O O $Function$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $string$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { model : _UNKNOWN_ | string ; scope ? : _UNKNOWN_ ; unique ? : boolean ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $complex$ O $any$ O O O $any$ O O $any$ O $boolean$ O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ : _UNKNOWN_ | string | _UNKNOWN_ ; _UNKNOWN_ ? : string | _UNKNOWN_ ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $complex$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Model } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( _UNKNOWN_ , private options ) { super ( _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { return _UNKNOWN_ . _UNKNOWN_ ; } protected _UNKNOWN_ ( _UNKNOWN_ : typeof Model , sequelize ) { const options = { ... this . options as any } ; const _UNKNOWN_ = this . _UNKNOWN_ ( ) ; const _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ , sequelize ) ; options . _UNKNOWN_ = _UNKNOWN_ ; options . foreignKey = this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ . model , this . options . foreignKey ) ; options . _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ . model , this . options . _UNKNOWN_ ) ; return options ; } private _UNKNOWN_ ( _UNKNOWN_ : typeof Model , sequelize ) { const _UNKNOWN_ = this . options . _UNKNOWN_ ; const model = typeof _UNKNOWN_ === 's' ? _UNKNOWN_ . model : _UNKNOWN_ ; const _UNKNOWN_ = typeof _UNKNOWN_ === 's' ? { ... _UNKNOWN_ } : { } as any ; if ( typeof model === 's' ) { const _UNKNOWN_ = model ( ) ; if ( ! _UNKNOWN_ . _UNKNOWN_ ) { throw new _UNKNOWN_ ( _UNKNOWN_ , { _UNKNOWN_ : 's' } ) ; } _UNKNOWN_ . model = _UNKNOWN_ ; } else if ( typeof model === 's' ) { if ( ! sequelize . _UNKNOWN_ [ model ] ) { const _UNKNOWN_ = sequelize . _UNKNOWN_ ( model ) ; sequelize . _UNKNOWN_ ( [ _UNKNOWN_ ] ) ; sequelize . _UNKNOWN_ [ model ] = _UNKNOWN_ ; } _UNKNOWN_ . model = sequelize . _UNKNOWN_ [ model ] ; } else { throw new Error ( `template` ) ; } return _UNKNOWN_ ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O O $any$ O O O $complex$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $complex$ O O O $any$ O $complex$ O O $complex$ O O $complex$ O O O $any$ O $complex$ O $complex$ O O $any$ O O $complex$ O O O O O $any$ O O O O O O O O O O $complex$ O O O O O $any$ O $any$ O O O O O O $any$ O $boolean$ O O O O $any$ O $any$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O O O $string$ O O O O O O O $any$ O $complex$ O $string$ O O O O $any$ O $any$ O $complex$ O $string$ O O $any$ O $complex$ O O $any$ O O O $any$ O $complex$ O $string$ O O $any$ O O $any$ O $any$ O $any$ O $complex$ O $string$ O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ | string , foreignKey ? , _UNKNOWN_ ? ) ; export function _UNKNOWN_ ( _UNKNOWN_ , options ) ; export function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ | string | _UNKNOWN_ , foreignKey ? , _UNKNOWN_ ? ) { return ( target , propertyName ) => { let options < _UNKNOWN_ > = { foreignKey , _UNKNOWN_ } ; if ( typeof _UNKNOWN_ === 's' || typeof _UNKNOWN_ === 's' ) { options . _UNKNOWN_ = _UNKNOWN_ ; } else { options = { ... _UNKNOWN_ } ; } if ( ! options . as ) options . as = propertyName ; _UNKNOWN_ ( target , new _UNKNOWN_ ( _UNKNOWN_ , options as _UNKNOWN_ , ) ) ; } ; } </s>	O O O $void$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $Function$ O $any$ O $complex$ O $any$ O O O $string$ $string$ O $string$ $string$ O O O O $Function$ O $any$ O $any$ O O O O $Function$ O $any$ O $complex$ O $any$ O O O $any$ O $string$ $string$ O $string$ $string$ O O O O $any$ O $string$ O O O O $Partial$ O $any$ O O O $string$ O $string$ O O O O O $complex$ O O O O $complex$ O O O O $any$ O $complex$ O $complex$ O O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $void$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , addAttribute } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function Column ( dataType ) ; export function Column ( options ) ; export function Column ( target , propertyName , _UNKNOWN_ ? ) ; export function Column ( ... args : any [ ] ) : Function | void { if ( args . length >= 0 ) { const target = args [ 0 ] ; const propertyName = args [ 0 ] ; const _UNKNOWN_ = args [ 0 ] ; annotate ( target , propertyName , _UNKNOWN_ ) ; return ; } return ( target , propertyName , _UNKNOWN_ ? ) => { annotate ( target , propertyName , _UNKNOWN_ , args [ 0 ] ) ; } ; } function annotate ( target , propertyName , _UNKNOWN_ ? , _UNKNOWN_ : _UNKNOWN_ | _UNKNOWN_ = { } ) { let options ; if ( _UNKNOWN_ ( _UNKNOWN_ ) ) { options = { type : _UNKNOWN_ as _UNKNOWN_ } ; } else { options = Object . assign ( { } , _UNKNOWN_ as _UNKNOWN_ ) ; if ( ! options . type ) { options . type = _UNKNOWN_ ( target , propertyName ) ; } } if ( _UNKNOWN_ ) { if ( _UNKNOWN_ . get ) { options . get = _UNKNOWN_ . get ; } if ( _UNKNOWN_ . set ) { options . set = _UNKNOWN_ . set ; } } addAttribute ( target , propertyName , options ) ; } </s>	O O O O O O $any$ O O O O O O $any$ O $void$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $Function$ O $any$ O O O O $Function$ O $any$ O O O O $void$ O $any$ O $string$ O $PropertyDescriptor$ $PropertyDescriptor$ O O O O $complex$ O O $any[]$ O O O O O O $FunctionConstructor$ O O O O O $any[]$ O $number$ O O O O O $any$ O $any[]$ O O O O O $any$ O $any[]$ O O O O O $any$ O $any[]$ O O O O $void$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $string$ O $PropertyDescriptor$ $PropertyDescriptor$ O O O $void$ O $any$ O $string$ O $PropertyDescriptor$ O $any[]$ O O O O O O O O O $void$ O $any$ O $string$ O $PropertyDescriptor$ $PropertyDescriptor$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O $boolean$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $ObjectConstructor$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O $PropertyDescriptor$ O O O O $PropertyDescriptor$ O $any$ O O $any$ O $any$ O $PropertyDescriptor$ O $any$ O O O O $PropertyDescriptor$ O $void$ O O $any$ O $void$ O $PropertyDescriptor$ O $void$ O O O $void$ O $any$ O $string$ O $any$ O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function Default ( value ) { return ( target , propertyName ) => { _UNKNOWN_ ( target , propertyName , { defaultValue : value } ) ; } ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $any$ O O O O $any$ O $string$ O O O $void$ O $any$ O $string$ O O $any$ O $any$ O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function DefaultScope ( scope : _UNKNOWN_ | Function ) { return ( target ) => { _UNKNOWN_ ( target . prototype , { _UNKNOWN_ : scope } ) ; } ; } </s>	O O O O O O $void$ O O O O O O $any$ O O O O O O $Function$ O $complex$ O $any$ O $FunctionConstructor$ O O O O $any$ O O O $void$ O $any$ O $any$ O O $complex$ O $complex$ O O O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function ForeignKey ( _UNKNOWN_ ) { return ( target , propertyName ) => { _UNKNOWN_ ( target , _UNKNOWN_ , propertyName ) ; } ; } </s>	O O O $void$ O O O O O O $any$ O O O O O O $Function$ O $any$ O O O O $any$ O $string$ O O O $void$ O $any$ O $any$ O $string$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { Model } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( _UNKNOWN_ , private options : _UNKNOWN_ | _UNKNOWN_ , private _UNKNOWN_ ) { super ( _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } protected _UNKNOWN_ ( model : typeof Model , sequelize ) { const options = { ... this . options } ; const _UNKNOWN_ = this . _UNKNOWN_ ( ) ; options . foreignKey = this . _UNKNOWN_ ( model , _UNKNOWN_ , options . foreignKey ) ; return options ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O $any$ O O O $complex$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; export function HasMany ( _UNKNOWN_ , foreignKey ? ) ; export function HasMany ( _UNKNOWN_ , options ? ) ; export function HasMany ( _UNKNOWN_ , _UNKNOWN_ ? : string | _UNKNOWN_ ) { return ( target , propertyName ) => { const options = _UNKNOWN_ ( _UNKNOWN_ ) ; if ( ! options . as ) options . as = propertyName ; _UNKNOWN_ ( target , new _UNKNOWN_ ( _UNKNOWN_ , options , _UNKNOWN_ . HasMany , ) ) ; } ; } </s>	O O O $any$ O O O O O O $void$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $Function$ O $any$ O $string$ $string$ O O O O $Function$ O $any$ O $any$ $any$ O O O O $Function$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $string$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $void$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( _UNKNOWN_ , foreignKey ? ) ; export function _UNKNOWN_ ( _UNKNOWN_ , options ? ) ; export function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ? : string | _UNKNOWN_ ) { return ( target , propertyName ) => { const options = _UNKNOWN_ ( _UNKNOWN_ ) ; if ( ! options . as ) options . as = propertyName ; _UNKNOWN_ ( target , new _UNKNOWN_ ( _UNKNOWN_ , options , _UNKNOWN_ . _UNKNOWN_ , ) ) ; } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $void$ O $any$ O O O O O O $any$ O O O O O O $Function$ O $any$ O $string$ $string$ O O O O $Function$ O $any$ O $any$ $any$ O O O O $Function$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $string$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $void$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { primaryKey : true } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $true$ O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function Scopes ( scopes ) { return ( target ) => { _UNKNOWN_ ( target . prototype , scopes ) ; } ; } </s>	O O O O O O $void$ O O O O O O $any$ O O O O O O $Function$ O $any$ O O O O $any$ O O O $void$ O $any$ O $any$ O $any$ O O O O O O
<s> import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ extends _UNKNOWN_ < any > { modelName ? : string ; version ? : boolean | string ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O $string$ O O O O $complex$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function Table ( options ) ; export function Table ( target ) ; export function Table ( arg ) : void | Function { if ( typeof arg === 's' ) { const target = arg ; annotate ( target ) ; } else { const options = Object . assign ( { } , arg ) ; return ( target ) => annotate ( target , options ) ; } } function annotate ( target , options = { } ) { if ( options . _UNKNOWN_ === undefined ) options . _UNKNOWN_ = true ; options . _UNKNOWN_ = target . prototype ; options . _UNKNOWN_ = target ; _UNKNOWN_ ( target . prototype , options . modelName || target . name ) ; _UNKNOWN_ ( target . prototype , options ) ; } </s>	O O O O O O $void$ O $void$ O O O O O O $any$ O O O O O O $Function$ O $any$ O O O O $void$ O $any$ O O O O $complex$ O $any$ O O O O $FunctionConstructor$ O O O O $any$ O O O O O $any$ O $any$ O $void$ O $any$ O O O O O O $any$ O $ObjectConstructor$ O O O O O O $any$ O O O O $any$ O O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $undefined$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $void$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O O $void$ O $any$ O $any$ O $any$ O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function CreatedAt ( target , propertyName ) { _UNKNOWN_ ( target , { createdAt : propertyName , timestamps : true } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O O $string$ O $string$ O $boolean$ O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , { _UNKNOWN_ : propertyName , timestamps : true , _UNKNOWN_ : true } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O O $string$ O $string$ O $boolean$ O O O $boolean$ O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function UpdatedAt ( target , propertyName ) { _UNKNOWN_ ( target , { updatedAt : propertyName , timestamps : true } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O O $string$ O $string$ O $boolean$ O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { unique : true } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $true$ O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( value : string | { msg : string , args : string } ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { contains : value } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $complex$ O O O O $string$ O O O $string$ O O O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $complex$ O $complex$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( value : string | { msg : string , args : string } ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { equals : value } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $complex$ O O O O $string$ O O O $string$ O O O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $complex$ O $complex$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; export function Is ( name , validator : ( value ) => any ) ; export function Is ( validator : ( value ) => any ) ; export function Is ( arg : string | Array < string | RegExp > | RegExp | { msg : string , args : string | Array < string | RegExp > | RegExp } ) ; export function Is ( ... args : any [ ] ) { const options = { } ; const _UNKNOWN_ = typeof args [ 0 ] === 's' ; if ( _UNKNOWN_ || ( typeof args [ 0 ] === 's' && typeof args [ 0 ] === 's' ) ) { let validator : ( value ) => any ; let name ; if ( _UNKNOWN_ ) { validator = ( args [ 0 ] as ( value ) => any ) ; name = validator . name ; if ( ! name ) throw new Error ( `template` ) ; } else { name = args [ 0 ] ; validator = args [ 0 ] ; } options [ `template` ] = validator ; } else { options . is = args [ 0 ] ; } return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : options } ) ; } </s>	O O O O O O $any$ O O O O O O $void$ O O O O O O $Function$ O $string$ O $any$ O O $any$ O O O O O O O $Function$ O $any$ O O $any$ O O O O O O O $Function$ O $complex$ O O O $ArrayConstructor$ O O O $RegExpConstructor$ O O $RegExpConstructor$ O O $string$ O O O $complex$ O O O $ArrayConstructor$ O O O $RegExpConstructor$ O O $RegExpConstructor$ O O O O O $Function$ O O $any[]$ O O O O O O O $any$ O O O O O $boolean$ O O $any[]$ O O O O O O O O $boolean$ O O O $any[]$ O O O O O O O $any[]$ O O O O O O O O O $any$ O O $any$ O O O O O $string$ O O O $boolean$ O O $any$ O O $any[]$ O O O O O $any$ O O O O O $string$ O $any$ O $string$ O O O O $string$ O O O $ErrorConstructor$ O O O O O O O $string$ O $any[]$ O O O O $any$ O $any[]$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any[]$ O O O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $any$ O $any$ O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( date ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { isAfter : date } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $string$ O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $string$ O $string$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( date ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { isBefore : date } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $string$ O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $string$ O $string$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { isDate : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { isEmail : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( arg : string [ ] [ ] | { msg : string , args : string [ ] [ ] } ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : arg } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $complex$ O O O O O O O O $string$ O O O $string[][]$ O O O O O O O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $complex$ O $complex$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { isInt : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function 0 ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { 0 : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O O O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { isArray : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function 0 ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { 0 : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O O O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { isNull : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { isNumeric : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( version : 0 | 0 | 0 | "s" | "s" | "s" | "s" ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : version } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O O O O O O O O O O O O O O O O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O O O O O O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function Length ( { msg , min , max } : { msg ? : string ; min ? : number ; max ? : number } ) { let options : [ number , number ] | { msg : string , args : [ number , number ] } ; const length = [ min || 0 , max ] as [ number , number ] ; if ( msg ) { options = { args : length , msg : msg as string } ; } else { options = length ; } return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { len : options } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O O $string$ O $number$ O $number$ O O O $string$ O O O O $number$ O O O O $number$ O O O O O O O $complex$ O O O O O O O O $string$ O O O $complex$ O O O O O O O O O $complex$ O O $number$ O O O $number$ O O O O O O O O O O $string$ O O $complex$ O O $complex$ O $complex$ O $string$ O $string$ O O O O O O O $complex$ O $complex$ O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $complex$ O $complex$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( limit ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { max : limit } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $number$ O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $number$ O $number$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( limit ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { min : limit } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $number$ O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $number$ O $number$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( arg : string | Array < string | RegExp > | RegExp | { msg : string , args : string | Array < string | RegExp > | RegExp } ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { not : arg } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $complex$ O O O $ArrayConstructor$ O O O $RegExpConstructor$ O O $RegExpConstructor$ O O $string$ O O O $complex$ O O O $ArrayConstructor$ O O O $RegExpConstructor$ O O $RegExpConstructor$ O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $complex$ O $complex$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( value : string | { msg : string , args : string } ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : value } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $complex$ O O O O $string$ O O O $string$ O O O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $complex$ O $complex$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options : { msg : string } ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { if ( args . length === 0 ) { const options = args [ 0 ] ; return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { notEmpty : options , } } ) ; } else { const target = args [ 0 ] ; const propertyName = args [ 0 ] ; _UNKNOWN_ ( target , propertyName , { validate : { notEmpty : true } } ) ; } } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $complex$ O O $string$ O O O O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O O $any[]$ O $number$ O O O O O $any$ O $any[]$ O O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $any$ O $any$ O O O O O O O O O $any$ O $any[]$ O O O O O $any$ O $any[]$ O O O O $void$ O $any$ O $any$ O O $complex$ O O $boolean$ O O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( arg : string [ ] [ ] | { msg : string , args : string [ ] [ ] } ) { return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : { _UNKNOWN_ : arg } } ) ; } </s>	O O O O O O $void$ O O O O O O $Function$ O $complex$ O O O O O O O O $string$ O O O $string[][]$ O O O O O O O O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $complex$ O $complex$ O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) { _UNKNOWN_ ( target , propertyName , { validate : { notNull : true } } ) ; } </s>	O O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O $void$ O $any$ O $string$ O O $complex$ O O $boolean$ O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( options ) { options = Object . assign ( { } , options ) ; return ( target , propertyName ) => _UNKNOWN_ ( target , propertyName , { validate : options } ) ; } </s>	O O O O O O $any$ O O O O O O $void$ O O O O O O $Function$ O $any$ O O $any$ O $ObjectConstructor$ O O O O O O $any$ O O O O $any$ O $string$ O O $void$ O $any$ O $string$ O O $any$ O $any$ O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> export { _UNKNOWN_ } from "s" ; export { AllowNull } from "s" ; export { BelongsTo } from "s" ; export { _UNKNOWN_ } from "s" ; export { Column } from "s" ; export { Default } from "s" ; export { DefaultScope } from "s" ; export { ForeignKey } from "s" ; export { HasMany } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { Scopes } from "s" ; export { Table } from "s" ; export { CreatedAt } from "s" ; export { _UNKNOWN_ } from "s" ; export { UpdatedAt } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { Is } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { 0 } from "s" ; export { _UNKNOWN_ } from "s" ; export { 0 } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { Length } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { _UNKNOWN_ } from "s" ; export { DataType } from "s" ; export { Model } from "s" ; export { Sequelize } from "s" ; </s>	O O O $void$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $Function$ O O O O O O $Function$ O O O O O O $Function$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $void$ O O O O O O $Function$ O O O O O O $complex$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $Function$ O O O O O O $Function$ O O O O O O $complex$ O O O O O O $Function$ O O O O O O $void$ O O O O O O $void$ O O O O O O $Function$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $Function$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O O O O O O O O $Function$ O O O O O O $Function$ O O O O O O $Function$ O O O O O O $Function$ O O O O O O $Function$ O O O O O O $complex$ O O O O O O $Function$ O O O O O O $void$ O O O O O O $Function$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O
<s> import { Model , Table , _UNKNOWN_ , Column , ForeignKey } from "s" ; import { Author } from "s" ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ ForeignKey ( ( ) => Author ) @ _UNKNOWN_ @ Column _UNKNOWN_ : number ; @ ForeignKey ( ( ) => Author ) @ _UNKNOWN_ @ Column _UNKNOWN_ : number ; } </s>	O O O $any$ O $complex$ O $void$ O $complex$ O $Function$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $Function$ O O O O $any$ O O $void$ O $complex$ $number$ O O O O $Function$ O O O O $any$ O O $void$ O $complex$ $number$ O O O O O
<s> import { Model , Table , Column , _UNKNOWN_ , Scopes , DataType } from 's' ; import { Author } from "s" ; @ Scopes ( { _UNKNOWN_ : { include : [ { model : ( ) => Author , _UNKNOWN_ : { attributes : [ ] } } ] } } ) @ Table export default class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column ( { type : DataType . STRING ( 0 ) } ) title : string ; @ _UNKNOWN_ ( ( ) => Author , 's' , 's' , 's' ) authors : Author [ ] ; @ Column ( DataType . INTEGER ) get year ( ) : number | string { return 's' + this . _UNKNOWN_ ( 's' ) ; } ; set year ( year : number | string ) { this . _UNKNOWN_ ( 's' , year ) ; } ; } </s>	O O O $any$ O $complex$ O $complex$ O $complex$ O $Function$ O $any$ O O O O O O $any$ O O O O O $Function$ O O $complex$ O O $complex$ O O O $complex$ O O O O $any$ O $complex$ O O $undefined[]$ O O O O O O O O O O $complex$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $string$ O O O O $complex$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O $complex$ O $any$ O $any$ O O $complex$ O O O O O O O O O O O O $any$ O O O O O O O $complex$ O $complex$ O O O O O O O O $void$ O O O $complex$ O O O O O O
<s> import { Table , Model , _UNKNOWN_ , Column , _UNKNOWN_ , _UNKNOWN_ , DefaultScope , Scopes } from "s" ; import { _UNKNOWN_ } from "s" ; import _UNKNOWN_ from "s" ; @ DefaultScope ( { attributes : [ 's' , 's' ] } ) @ Scopes ( { full : { include : [ ( ) => Author , ( ) => _UNKNOWN_ ] } } ) @ Table export class Author extends Model < Author > { @ _UNKNOWN_ @ _UNKNOWN_ @ Column id : number ; @ Column name : string ; @ Column ( { field : 's' } ) secret : string ; @ _UNKNOWN_ ( ( ) => Author , ( ) => _UNKNOWN_ , 's' , 's' ) _UNKNOWN_ : Author [ ] ; @ _UNKNOWN_ ( ( ) => _UNKNOWN_ , 's' , 's' , 's' ) _UNKNOWN_ : _UNKNOWN_ [ ] ; } </s>	O O O $complex$ O $any$ O $void$ O $complex$ O $void$ O $complex$ O $Function$ O $Function$ O O O O O O $any$ O O O O O $any$ O O O O $Function$ O O $string[]$ O O O O O O O O O $Function$ O O $complex$ O O $complex$ O O O O O $any$ O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $void$ O $void$ O $complex$ $number$ O O O O $complex$ $string$ O O O O $complex$ O O $string$ O O O O $string$ O O O O $complex$ O O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O $complex$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O
<s> import { Table , Model , _UNKNOWN_ , Column , _UNKNOWN_ , BelongsTo , ForeignKey , Length } from "s" ; import { Post } from "s" ; import { Author } from "s" ; import { DataType } from "s" ; @ Table export class Comment extends Model < Comment > { @ _UNKNOWN_ @ _UNKNOWN_ @ Column id : number ; @ Length ( { min : 0 , max : 0 , msg : 's' } ) @ Column ( DataType . _UNKNOWN_ ) text : string ; @ ForeignKey ( ( ) => Post ) @ Column _UNKNOWN_ : number ; @ BelongsTo ( ( ) => Post ) post ; @ ForeignKey ( ( ) => Author ) @ Column _UNKNOWN_ : number ; @ BelongsTo ( ( ) => Author ) author ; } </s>	O O O $complex$ O $any$ O $void$ O $complex$ O $void$ O $complex$ O $Function$ O $Function$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $void$ O $void$ O $complex$ $number$ O O O O $Function$ O O $number$ O O O $number$ O O O $string$ O O O O O $complex$ O $any$ O $any$ O $string$ O O O O $Function$ O O O O $any$ O O $complex$ $number$ O O O O $complex$ O O O O $any$ O $any$ O O $Function$ O O O O $any$ O O $complex$ $number$ O O O O $complex$ O O O O $any$ O $any$ O O O
<s> import { Table , Model , _UNKNOWN_ , _UNKNOWN_ , Column , _UNKNOWN_ } from "s" ; import { Post } from "s" ; import { _UNKNOWN_ } from "s" ; @ Table ( { tableName : 's' } ) export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ _UNKNOWN_ @ _UNKNOWN_ @ Column id : number ; @ Column name : string ; @ Column ( { field : 's' } ) description : string ; @ _UNKNOWN_ ( ( ) => Post , ( ) => _UNKNOWN_ ) post : Post [ ] ; } </s>	O O O $complex$ O $any$ O $void$ O $void$ O $complex$ O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $void$ O $void$ O $complex$ $number$ O O O O $complex$ $string$ O O O O $complex$ O O $string$ O O O O $string$ O O O O $complex$ O O O O $any$ O O O O $any$ O $Post[]$ O $any$ O O O O O
<s> import { Model , Table , _UNKNOWN_ , Column , ForeignKey } from "s" ; import { Post } from "s" ; import { _UNKNOWN_ } from "s" ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ ForeignKey ( ( ) => Post ) @ _UNKNOWN_ @ Column _UNKNOWN_ : number ; @ ForeignKey ( ( ) => _UNKNOWN_ ) @ _UNKNOWN_ @ Column _UNKNOWN_ : number ; } </s>	O O O $any$ O $complex$ O $void$ O $complex$ O $Function$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $Function$ O O O O $any$ O O $void$ O $complex$ $number$ O O O O $Function$ O O O O $any$ O O $void$ O $complex$ $number$ O O O O O
<s> import { Table , Model , _UNKNOWN_ , Column , _UNKNOWN_ , _UNKNOWN_ , ForeignKey , BelongsTo , HasMany , Scopes } from "s" ; import { Comment } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { Author } from "s" ; @ Scopes ( { full : { include : [ { model : ( ) => Comment , include : [ ( ) => Author ] } , { model : ( ) => Author } ] } } ) @ Table export class Post extends Model < Post > { @ _UNKNOWN_ @ _UNKNOWN_ @ Column id : number ; @ Column ( { field : 's' } ) text : string ; @ HasMany ( ( ) => Comment ) comments ; @ _UNKNOWN_ ( ( ) => _UNKNOWN_ , ( ) => _UNKNOWN_ ) topics : _UNKNOWN_ [ ] ; @ ForeignKey ( ( ) => Author ) @ Column _UNKNOWN_ : number ; @ BelongsTo ( ( ) => Author ) author ? : Author ; } </s>	O O O $complex$ O $any$ O $void$ O $complex$ O $void$ O $complex$ O $Function$ O $complex$ O $complex$ O $Function$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Function$ O O $complex$ O O $complex$ O O O $complex$ O O O O $any$ O $complex$ O O O O O $any$ O O O O $complex$ O O O O $any$ O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $void$ O $void$ O $complex$ $number$ O O O O $complex$ O O $string$ O O O O $string$ O O O O $complex$ O O O O $any$ O $any$ O O $complex$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $Function$ O O O O $any$ O O $complex$ $number$ O O O O $complex$ O O O O $any$ O $any$ O O $any$ O O O
<s> import { Table , Model , DataType , Column , Length } from "s" ; @ Table export class Person extends Model < Person > { @ Length ( { min : 0 , max : 0 , msg : 's' } ) @ Column ( DataType . _UNKNOWN_ ) name : string ; } </s>	O O O $complex$ O $any$ O $any$ O $complex$ O $Function$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $Function$ O O $number$ O O O $number$ O O O $string$ O O O O O $complex$ O $any$ O $any$ O $string$ O O O O O
<s> import { Promise } from 's' ; import { Author } from 's' ; import { Post } from 's' ; import { Comment } from 's' ; import { Sequelize } from "s" ; import * as _UNKNOWN_ from 's' ; import { Person } from "s" ; import _UNKNOWN_ from "s" ; new Sequelize ( { _UNKNOWN_ : true , _UNKNOWN_ : [ __dirname + 's' ] } ) ; const person = new Person ( { name : 's' } ) ; person . validate ( ) . then ( err => { console . error ( err ) ; } ) . catch ( err => { console . error ( err ) ; } ) ; const sequelize = new Sequelize ( { name : 's' , _UNKNOWN_ : 's' , host : 's' , username : 's' , password : 's' , _UNKNOWN_ : [ __dirname + 's' ] } ) ; sequelize . sync ( { force : true } ) . then ( ( ) => Promise . all ( [ Author . create < Author > ( { name : 's' , secret : 's' } ) , Author . create < Author > ( { name : 's' } ) , Author . create < Author > ( { name : 's' } ) ] ) ) . then ( ( [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] ) => Post . create < Post > ( { text : 's' , _UNKNOWN_ : _UNKNOWN_ . id } ) . then ( post => Comment . create < Comment > ( { _UNKNOWN_ : post . id , text : 's' , _UNKNOWN_ : _UNKNOWN_ . id } ) ) . then ( ( ) => { _UNKNOWN_ . name = 's' ; return Promise . all ( [ _UNKNOWN_ . save ( ) , _UNKNOWN_ . _UNKNOWN_ ( 's' , _UNKNOWN_ ) , _UNKNOWN_ . _UNKNOWN_ ( 's' , _UNKNOWN_ ) ] ) ; } ) ) . then ( ( ) => { const post = new Post ( { text : 's' , author : { name : 's' } } , { include : [ Author ] } ) ; return post . save ( { validate : true } ) . catch ( err => { 's' ; } ) ; } ) . then ( ( ) => Post . build < Post > ( { text : 's' } ) . save ( ) ) . then ( ( ) => Post . findAll < Post > ( { attributes : [ 's' , 's' ] , include : [ { model : Comment , attributes : [ 's' , 's' ] , include : [ { model : Author , include : [ { model : Author , _UNKNOWN_ : { attributes : [ ] } } ] } ] } , { model : Author , include : [ { model : Author , _UNKNOWN_ : { attributes : [ ] } } ] } ] } ) . then ( posts => { console . log ( _UNKNOWN_ . _UNKNOWN_ ( JSON . stringify ( posts ) ) ) ; posts . forEach ( post => { console . log ( post instanceof Post ) ; } ) ; } ) . then ( ( ) => Author . findAll ( ) ) . then ( authors => { console . log ( 's' ) ; console . log ( _UNKNOWN_ . _UNKNOWN_ ( JSON . stringify ( authors ) ) ) ; } ) . then ( ( ) => Author . scope ( 's' ) . findAll ( ) ) . then ( authors => { console . log ( 's' ) ; console . log ( _UNKNOWN_ . _UNKNOWN_ ( JSON . stringify ( authors ) ) ) ; } ) . then ( ( ) => Author . unscoped ( ) . findAll ( ) ) . then ( authors => { console . log ( 's' ) ; console . log ( _UNKNOWN_ . _UNKNOWN_ ( JSON . stringify ( authors ) ) ) ; } ) . then ( ( ) => Post . scope ( 's' ) . findAll ( ) ) . then ( posts => { console . log ( 's' ) ; console . log ( _UNKNOWN_ . _UNKNOWN_ ( JSON . stringify ( posts ) ) ) ; } ) ) . then ( ( ) => Promise . all ( [ _UNKNOWN_ . create < _UNKNOWN_ > ( { title : 's' , year : 0 } ) , Author . create < Author > ( { name : 's' } ) , Author . create < Author > ( { name : 's' } ) , ] ) ) . then ( ( [ _UNKNOWN_ , ... authors ] ) => _UNKNOWN_ . $set ( 's' , authors ) . then ( ( ) => _UNKNOWN_ . scope ( 's' ) . _UNKNOWN_ < _UNKNOWN_ > ( _UNKNOWN_ . id ) ) . then ( _UNKNOWN_ => { console . log ( 's' ) ; console . log ( _UNKNOWN_ . _UNKNOWN_ ( JSON . stringify ( _UNKNOWN_ ) ) ) ; } ) . then ( ( ) => _UNKNOWN_ . _UNKNOWN_ < _UNKNOWN_ > ( _UNKNOWN_ . id ) ) . then ( _UNKNOWN_ => _UNKNOWN_ . $get ( 's' ) ) . then ( _UNKNOWN_ => { console . log ( 's' ) ; console . log ( _UNKNOWN_ . _UNKNOWN_ ( JSON . stringify ( _UNKNOWN_ ) ) ) ; } ) . then ( ( ) => { _UNKNOWN_ . year = 0 ; return _UNKNOWN_ . save ( ) ; } ) . then ( ( ) => _UNKNOWN_ . _UNKNOWN_ < _UNKNOWN_ > ( _UNKNOWN_ . id ) ) . then ( _UNKNOWN_ => { console . log ( 's' ) ; console . log ( _UNKNOWN_ . _UNKNOWN_ ( JSON . stringify ( _UNKNOWN_ ) ) ) ; } ) ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O $true$ O O O $string[]$ O O $any$ O O O O O O O $Person$ O O $any$ O O $string$ O O O O O $Person$ O $any$ O O O $any$ O $any$ O O $Console$ O $void$ O $any$ O O O O O $any$ O $any$ O O $Console$ O $void$ O $any$ O O O O O O $any$ O O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O $any$ O O O O O O $any$ O $any$ O O $boolean$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $complex$ O $any$ O O O $string$ O O O $string$ O O O O O $any$ O $complex$ O $any$ O O O $string$ O O O O O $any$ O $complex$ O $any$ O O O $string$ O O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $complex$ O $any$ O O O $string$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O O O O O O $Post$ O O $any$ O O $string$ O O O $complex$ O O $string$ O O O O O O $complex$ O O $any$ O O O O O $Post$ O $any$ O O $boolean$ O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O $any$ O $complex$ O $any$ O O O $string$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O $string[]$ O O O O O O O $complex$ O O O $any$ O $any$ O $string[]$ O O O O O O O $complex$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O $undefined[]$ O O O O O O O O O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O $undefined[]$ O O O O O O O O O O O $any$ O $any$ O O $Console$ O $void$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O $any$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O O O $any$ O O O O $any$ O $complex$ O O O O $any$ O O O O $any$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O O O $any$ O O O O $any$ O $complex$ O O O O $any$ O O O O $any$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $complex$ O $any$ O O O $string$ O O O $number$ O O O O O $any$ O $complex$ O $any$ O O O $string$ O O O O O $any$ O $complex$ O $any$ O O O $string$ O O O O O O O O O $any$ O O O $any$ O O $any[]$ O O O $any$ O $any$ O O O $any[]$ O O $any$ O O O O $any$ O $complex$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( target , propertyName ) ; export function _UNKNOWN_ ( options ) ; export function _UNKNOWN_ ( ... args : any [ ] ) : void | Function { return _UNKNOWN_ ( 's' , args ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O O O O $void$ O $any$ O $string$ O O O O $Function$ O $any$ O O O O $complex$ O O $any[]$ O O O O O O O O $FunctionConstructor$ O O $complex$ O O O $any[]$ O O O O
<s> import 's' ; import { _UNKNOWN_ } from "s" ; export const Validator = ( target , propertyName , descriptor < any > ) => { _UNKNOWN_ ( target , { validate : { [ propertyName ] : descriptor . value } } ) ; } ; </s>	O O O O O O $void$ O O O O O O $MethodDecorator$ O O $Object$ O $string$ O $TypedPropertyDescriptor$ O O O O O O $void$ O $Object$ O O $complex$ O O O $string$ O O $TypedPropertyDescriptor<any>$ O $any$ O O O O O O O
<s> export interface _UNKNOWN_ { new ( ... args : any [ ] ) : Object ; } </s>	O O O $any$ O O O O $any[]$ O O O O O O $ObjectConstructor$ O O O
<s> import * as sequelize from 's' ; export const version = sequelize [ 's' ] ; export const majorVersion = parseInt ( version , 0 ) ; </s>	O O O O $any$ O O O O O $any$ O $any$ O O O O O O $number$ O $number$ O $any$ O O O O O
<s> export function capitalize ( value ) { return value . charAt ( 0 ) . toUpperCase ( ) + value . substr ( 0 , value . length ) ; } </s>	O O O $string$ O $string$ O O O $string$ O $string$ O O O O $string$ O O O $string$ O $string$ O O O $string$ O $number$ O O O O
<s> import * as Promise from "s" ; import { Model , Instance , BuildOptions } from "s" ; import { majorVersion } from "s" ; import { capitalize } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { extend , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = majorVersion === 0 ? ( Instance as any ) . prototype : ( Model as any ) . prototype ; export abstract class _UNKNOWN_ { static _UNKNOWN_ : boolean = false ; static extend ( target ) { extend ( target , this ) ; _UNKNOWN_ ( target ) ; function _UNKNOWN_ ( _target ) { const _UNKNOWN_ = key => typeof _target [ key ] !== 's' ; _UNKNOWN_ ( _target ) . filter ( key => ! _UNKNOWN_ ( key ) ) . forEach ( key => { if ( _UNKNOWN_ ( key ) ) return ; const _UNKNOWN_ = _target [ key ] ; _target [ key ] = function ( this : typeof _UNKNOWN_ , ... args : any [ ] ) : any { _UNKNOWN_ ( this , key ) ; _UNKNOWN_ ( this , key , args ) ; return _UNKNOWN_ . call ( this , ... args ) ; } ; } ) ; } function _UNKNOWN_ ( propertyKey ) { if ( _UNKNOWN_ ( propertyKey ) ) { return true ; } const _UNKNOWN_ = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ; return _UNKNOWN_ . indexOf ( propertyKey ) !== - 0 ; } function _UNKNOWN_ ( propertyKey ) { return ( propertyKey . charAt ( 0 ) === 's' ) ; } function _UNKNOWN_ ( model : typeof _UNKNOWN_ , propertyKey ) { if ( ! model . _UNKNOWN_ ) { throw new _UNKNOWN_ ( model as any , { _UNKNOWN_ : propertyKey } ) ; } } function _UNKNOWN_ ( model : typeof _UNKNOWN_ , propertyKey , args : any [ ] ) { const optionIndex = _UNKNOWN_ [ propertyKey ] ; if ( optionIndex !== undefined ) { const options = args [ optionIndex ] ; if ( options ) { args [ optionIndex ] = _UNKNOWN_ ( options , model ) ; } } } } static _UNKNOWN_ ( options , source ) { options = _UNKNOWN_ ( options , source ) ; if ( ! ( 's' in options ) ) options . _UNKNOWN_ = true ; if ( ! ( 's' in options ) && this [ 's' ] ) options [ 's' ] = this [ 's' ] ; if ( ! ( 's' in options ) && this [ 's' ] ) options [ 's' ] = this [ 's' ] ; const _UNKNOWN_ = majorVersion === 0 ? 's' : 's' ; if ( ! options [ 's' ] ) options [ 's' ] = [ ] ; if ( ! options [ 's' ] ) { Model [ _UNKNOWN_ + 's' ] ( options , source ) ; if ( options . include ) { Model [ _UNKNOWN_ + 's' ] . call ( source , options ) ; Model [ _UNKNOWN_ + 's' ] . call ( source , options ) ; } } return options ; } _UNKNOWN_ ( propertyKey , instances , options ? ) < this > { return this [ 's' + capitalize ( propertyKey ) ] ( instances , options ) ; } ; $set ( propertyKey , instances , options ) < this > { return this [ 's' + capitalize ( propertyKey ) ] ( instances , options ) ; } ; $get ( propertyKey , options ) < this > { return this [ 's' + capitalize ( propertyKey ) ] ( options ) ; } ; _UNKNOWN_ ( propertyKey , options ) < this > { return this [ 's' + capitalize ( propertyKey ) ] ( options ) ; } ; _UNKNOWN_ ( propertyKey , values , options ) < this > { return this [ 's' + capitalize ( propertyKey ) ] ( values , options ) ; } ; _UNKNOWN_ ( propertyKey , instances , options ) < this > { return this [ 's' + capitalize ( propertyKey ) ] ( instances , options ) ; } ; _UNKNOWN_ ( propertyKey , instances , options ) < this > { return this [ 's' + capitalize ( propertyKey ) ] ( instances , options ) ; } ; reload ( options ? < typeof _UNKNOWN_ > ) < this > { return _UNKNOWN_ . reload . call ( this , _UNKNOWN_ ( options , this ) ) ; } ; } </s>	O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $number$ O O O O O O $string$ O O O O O O $any$ O O O O O O O O $any$ O O O O O O $void$ O $string[]$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $number$ O O O O $any$ O O O O $any$ O O $any$ O O O O $any$ O O O O $any$ O O $boolean$ O O O O O O $void$ O $any$ O O $void$ O $any$ O O O O $void$ O $any$ O O O $void$ O $Function$ O O O $boolean$ O $any$ O O $Function$ O $any$ O O O O $string[]$ O $Function$ O O $complex$ O $string$ O O $boolean$ O $string$ O O O $void$ O $string$ O O O O $boolean$ O $string$ O O O O O $any$ O $Function$ O $string$ O O $Function$ O $string$ O O O O $any$ O O $any$ O O $any[]$ O O O O O O O O $void$ O O O $string$ O O $void$ O O O $string$ O $any[]$ O O O $any$ O $any$ O O O O $any[]$ O O O O O O O O O $boolean$ O $string$ O O O O $boolean$ O $string$ O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string[]$ O $number$ O $string$ O O O O O O O $boolean$ O $string$ O O O O $string$ O $string$ O O O O O O O O O $void$ O $any$ O O $any$ O $string$ O O O O O $any$ O $boolean$ O O O O $any$ O $any$ O O O O $string$ O $string$ O O O O O O $void$ O $any$ O O $any$ O $string$ O $any[]$ O O O O O O O $any$ O O O $string$ O O O O $any$ O $undefined$ O O O $any$ O $any[]$ O $any$ O O O O $any$ O O $any[]$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $BuildOptions$ O $BuildOptions$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O $number$ O O O O O O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $Promise$ O $string$ O $any$ O $any$ $any$ O O O O O O O O O O $string$ O $string$ O O O $any$ O $any$ O O O O $Promise$ O $string$ O $any$ O $any$ O O O O O O O O O O $string$ O $string$ O O O $any$ O $any$ O O O O $Promise$ O $string$ O $any$ O O O O O O O O O O $string$ O $string$ O O O $any$ O O O O $Promise$ O $string$ O $any$ O O O O O O O O O O $string$ O $string$ O O O $any$ O O O O $Promise$ O $string$ O $any$ O $any$ O O O O O O O O O O $string$ O $string$ O O O $any$ O $any$ O O O O $Promise$ O $string$ O $any$ O $any$ O O O O O O O O O O $string$ O $string$ O O O $any$ O $any$ O O O O $Promise$ O $string$ O $any$ O $any$ O O O O O O O O O O $string$ O $string$ O O O $any$ O $any$ O O O O $Promise$ O $complex$ $any$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $complex$ O O O O O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { Instance , Model as _UNKNOWN_ } from 's' ; const _UNKNOWN_ = ( Instance as any ) ; const _UNKNOWN_ = ( _UNKNOWN_ as any ) . prototype ; _UNKNOWN_ . prototype . _UNKNOWN_ = { } ; export const Model = ( ( ) => { const _UNKNOWN_ = class extends _UNKNOWN_ { constructor ( values , options ? ) { super ( values , _UNKNOWN_ . _UNKNOWN_ ( options , new . target ) ) ; } } ; Object . keys ( _UNKNOWN_ ) . forEach ( key => { if ( typeof _UNKNOWN_ [ key ] === 's' ) { _UNKNOWN_ [ key ] = function ( ... args : any [ ] ) : any { let _UNKNOWN_ = this . Model ; if ( this . _UNKNOWN_ !== undefined ) { _UNKNOWN_ = Object . create ( _UNKNOWN_ ) ; _UNKNOWN_ . $scope = this . $scope ; _UNKNOWN_ . _UNKNOWN_ = this . _UNKNOWN_ ; } return _UNKNOWN_ [ key ] . call ( _UNKNOWN_ , ... args ) ; } ; } } ) ; _UNKNOWN_ [ 's' ] = _UNKNOWN_ [ 's' ] = function ( ... args : any [ ] ) : any { return _UNKNOWN_ . scope . call ( this , ... args ) ; } ; return _UNKNOWN_ ; } ) ( ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O $string$ O O O O O $any$ O $string$ O O O O O $any$ O $string$ O O O O O $any[]$ O O O O O O O O O $any$ O O O $any$ O O O O O $any$ O $undefined$ O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $string$ O O $any$ O $any$ O O $any[]$ O O O O O O O O $any$ O O O O $any$ O O O O O O O $any[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any[]$ O O O O O $any$ O O O O O O O
<s> import 's' ; import * as _UNKNOWN_ from 's' ; import { Model } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , getAttributes , getOptions } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { Table } from "s" ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class Sequelize extends _UNKNOWN_ implements _UNKNOWN_ { Model : any ; _UNKNOWN_ : { [ _UNKNOWN_ ] : any } ; _ : { [ modelName ] : typeof Model } ; init : ( config ) => void ; _UNKNOWN_ : ( models : Array < typeof Model > | string [ ] ) => void ; _UNKNOWN_ : ( models < typeof Model > ) => void ; connectionManager : any ; constructor ( config : _UNKNOWN_ | string ) { if ( typeof config === "s" ) { super ( config ) ; } else if ( _UNKNOWN_ . _UNKNOWN_ ( config ) ) { super ( config . url , config ) ; } else { super ( _UNKNOWN_ . _UNKNOWN_ ( config ) ) ; } this . _UNKNOWN_ = { } ; this . _ = { } ; this . Model = Function ; if ( typeof config !== "s" ) { this . init ( config ) ; } } _UNKNOWN_ ( _UNKNOWN_ ) : typeof Model { @ Table ( { tableName : _UNKNOWN_ , modelName : _UNKNOWN_ } ) class _UNKNOWN_ extends Model < _UNKNOWN_ > { } return _UNKNOWN_ ; } _UNKNOWN_ ( model , _UNKNOWN_ ) { const options = _UNKNOWN_ . _UNKNOWN_ ( ) ; const _UNKNOWN_ = model [ 's' ] [ options . as as string ] ; if ( _UNKNOWN_ . _UNKNOWN_ && _UNKNOWN_ . _UNKNOWN_ . as === 's' ) { const _UNKNOWN_ = options as _UNKNOWN_ ; const tableName = _UNKNOWN_ . _UNKNOWN_ . model . getTableName ( ) ; _UNKNOWN_ . _UNKNOWN_ . as = tableName ; _UNKNOWN_ . _UNKNOWN_ . options . as = tableName ; _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ = tableName ; _UNKNOWN_ . _UNKNOWN_ . as = tableName ; _UNKNOWN_ . _UNKNOWN_ . options . as = tableName ; _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ = tableName ; } if ( _UNKNOWN_ . _UNKNOWN_ && _UNKNOWN_ . _UNKNOWN_ . Model ) { const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ . Model ; const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ; Object . keys ( _UNKNOWN_ ) . forEach ( key => { if ( key !== 's' ) _UNKNOWN_ [ key ] = _UNKNOWN_ [ key ] ; } ) ; _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ . model = _UNKNOWN_ . _UNKNOWN_ . Model ; } } _UNKNOWN_ ( classes < typeof Model > ) { classes . forEach ( _class => { const modelName = _UNKNOWN_ ( _class . prototype ) ; const attributes = getAttributes ( _class . prototype ) ; const options = getOptions ( _class . prototype ) ; if ( ! options ) throw new Error ( `template` ) ; const model = this . define ( modelName , attributes , options ) ; ( model as any ) . Instance = _class ; ( model as any ) . Instance . prototype . Model = _class ; ( model as any ) . Instance . prototype . _UNKNOWN_ = _class ; model [ 's' ] ( ) ; Object . keys ( model ) . forEach ( key => key !== 's' && ( _class [ key ] = model [ key ] ) ) ; _class [ 's' ] = model ; ( _class as any ) . prototype [ 's' ] = _class . prototype [ 's' ] = model ; ( model as any ) [ _UNKNOWN_ ] = _class ; _class [ 's' ] = this ; } ) ; } } </s>	O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $string$ O $any$ O $any$ O O O O O O O O O O O O O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $complex$ O O O $string$ O O O O O $complex$ O O O $string$ O O O $any$ O O $void$ O O $any$ O O O O $void$ O O $complex$ O $ArrayConstructor$ O O $any$ O O O O O O O O O $void$ O O $Array$ O O $any$ O O O O O $any$ O O O O O $complex$ O $any$ O O O O O O O $complex$ O O O O O O $string$ O O O O O O $any$ O $complex$ O $any$ O O O O O $any$ O $string$ O $any$ O O O O O O O $any$ O $any$ O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $any$ O $FunctionConstructor$ O O O O $complex$ O O O O O O $void$ O $any$ O O O O $complex$ O $string$ O O O $any$ O O $complex$ O O $string$ O $string$ O $string$ O $string$ O O O $any$ O $any$ O $any$ O O O O $any$ O O $void$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $complex$ O $any$ O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O $complex$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O $string$ O O O O $string$ O O O $any$ O $string$ O O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $void$ O $Array$ O O $any$ O O O $complex$ O $void$ O $any$ O O O $string$ O $string$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $ErrorConstructor$ O O O O O $any$ O O O $any$ O $string$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O $string$ O $string$ O O O O $any$ O $string$ O O $any$ O $string$ O O O O $any$ O O O O $any$ O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O O
<s> import { Model as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export const _UNKNOWN_ = ( _UNKNOWN_ as any ) ; export class Model extends _UNKNOWN_ { constructor ( values ? , options ? ) { super ( values , _UNKNOWN_ . _UNKNOWN_ ( options , new . target ) ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O O O O O O $any$ O $any$ O O O $any$ $any$ O $any$ $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O
<s> import 's' ; import * as _UNKNOWN_ from 's' ; import { Model } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , getAttributes , getOptions } from "s" ; import { _UNKNOWN_ } from "s" ; import { Table } from "s" ; import { _UNKNOWN_ } from 's' ; export class Sequelize extends _UNKNOWN_ implements _UNKNOWN_ { _UNKNOWN_ : { [ _UNKNOWN_ ] : any } ; _ : { [ modelName ] : typeof Model } ; init : ( config ) => void ; _UNKNOWN_ : ( models : Array < typeof Model > | string [ ] ) => void ; _UNKNOWN_ : ( models < typeof Model > ) => void ; connectionManager : any ; constructor ( config : _UNKNOWN_ | string ) { if ( typeof config === "s" ) { super ( config ) ; } else if ( _UNKNOWN_ . _UNKNOWN_ ( config ) ) { super ( config . url , config ) ; } else { super ( _UNKNOWN_ . _UNKNOWN_ ( config ) ) ; } this . _UNKNOWN_ = { } ; this . _ = { } ; if ( typeof config !== "s" ) { this . init ( config ) ; } } _UNKNOWN_ ( _UNKNOWN_ ) : typeof Model { @ Table ( { tableName : _UNKNOWN_ , modelName : _UNKNOWN_ } ) class _UNKNOWN_ extends Model < _UNKNOWN_ > { } return _UNKNOWN_ ; } _UNKNOWN_ ( model , _UNKNOWN_ ) { } _UNKNOWN_ ( models < typeof Model > ) { models . forEach ( model => { const modelName = _UNKNOWN_ ( model . prototype ) ; const attributes = getAttributes ( model . prototype ) ; const options = getOptions ( model . prototype ) ; if ( ! options ) throw new Error ( `template` ) ; options [ 's' ] = modelName ; options [ 's' ] = this ; model [ 's' ] ( attributes , options ) ; } ) ; } } </s>	O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $string$ O $any$ O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $complex$ O O O $string$ O O O O O $complex$ O O O $string$ O O O $any$ O O $void$ O O $any$ O O O O $void$ O O $complex$ O $ArrayConstructor$ O O $any$ O O O O O O O O O $void$ O O $Array$ O O $any$ O O O O O $any$ O O O O O $complex$ O $any$ O O O O O O O $complex$ O O O O O O $string$ O O O O O O $any$ O $complex$ O $any$ O O O O O $any$ O $string$ O $any$ O O O O O O O $any$ O $any$ O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O O $complex$ O O O O O O $void$ O $any$ O O O O $complex$ O $string$ O O O $any$ O O $complex$ O O $string$ O $string$ O $string$ O $string$ O O O $any$ O $any$ O $any$ O O O O $any$ O O $void$ O $any$ O $any$ O O O $void$ O $Array$ O O $any$ O O O $complex$ O $void$ O $any$ O O O $string$ O $string$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $ErrorConstructor$ O O O O $any$ O O O O $string$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O
<s> export function verbose ( ) { return { } ; } </s>	O O O $any$ O O O O O O O O O
<s> import { Table , Model , ForeignKey , Column , BelongsTo , DataType } from "s" ; import { _UNKNOWN_ } from "s" ; @ Table export class Page extends Model < Page > { @ Column ( DataType . _UNKNOWN_ ) content : string ; @ ForeignKey ( ( ) => _UNKNOWN_ ) @ Column _UNKNOWN_ : number ; @ BelongsTo ( ( ) => _UNKNOWN_ ) _UNKNOWN_ : _UNKNOWN_ ; } </s>	O O O $complex$ O $any$ O $Function$ O $complex$ O $complex$ O $any$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ O $any$ O $any$ O $string$ O O O O $Function$ O O O O $any$ O O $complex$ $number$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O O O
<s> import { Table , Model , Column , HasMany } from "s" ; import { Page } from "s" ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column title : string ; @ HasMany ( ( ) => Page ) pages : Page [ ] ; } </s>	O O O $complex$ O $any$ O $complex$ O $complex$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O O O O O
<s> import { Table , Model , Column } from "s" ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column length : number ; @ Column width : number ; @ Column height : number ; } </s>	O O O $complex$ O $any$ O $complex$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ $number$ O O O O $complex$ $number$ O O O O $complex$ $number$ O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , Column , Model , Table } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column name : string ; @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options , err ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options , err ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instance , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( instances : _UNKNOWN_ [ ] , options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } @ _UNKNOWN_ ( { name : 's' } ) static _UNKNOWN_ ( options ) { } } </s>	O O O $complex$ O $complex$ O $complex$ O $complex$ O O O O O O $complex$ O $complex$ O $complex$ O O O O O O $complex$ O $complex$ O $complex$ O O O O O O $complex$ O $complex$ O $complex$ O O O O O O $complex$ O $complex$ O $complex$ O $complex$ O O O O O O $complex$ O $complex$ O $complex$ O O O O O O $complex$ O $complex$ O $complex$ O $complex$ O O O O O O $complex$ O $complex$ O $complex$ O $any$ O $complex$ O O O O O O $complex$ O $complex$ O O O O O O $complex$ O $complex$ O $complex$ O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $complex$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O $any$ O O O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O O $string$ O O O O O $void$ O $any$ O O O O O
<s> import { Table , Model , Column , _UNKNOWN_ , DataType , Default } from "s" ; @ Table export class Person extends Model < Person > { @ _UNKNOWN_ @ Default ( DataType . 0 ) @ Column ( DataType . UUID ) id : string ; } </s>	O O O $complex$ O $any$ O $complex$ O $void$ O $any$ O $Function$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $void$ O $Function$ O $any$ O $any$ O O $complex$ O $any$ O $any$ O $string$ O O O O O
<s> import { Table , Model , Column , ForeignKey , BelongsTo , DefaultScope , Scopes } from "s" ; import { _UNKNOWN_ } from "s" ; import { Person } from "s" ; export const _UNKNOWN_ = { attributes : [ 's' , 's' , 's' , 's' ] } ; export const _UNKNOWN_ = { full : { include : [ ( ) => _UNKNOWN_ ] } , yellow : { where : { primaryColor : 's' } } , red : { where : { primaryColor : 's' } } , _UNKNOWN_ : { where : { img : null } } , _UNKNOWN_ : { include : [ ( ) => _UNKNOWN_ . scope ( 's' ) ] } , primaryColor => ( { where : { primaryColor } } ) , _UNKNOWN_ => ( { include : [ _UNKNOWN_ ] , where : { primaryColor } , } ) } ; @ DefaultScope ( _UNKNOWN_ ) @ Scopes ( _UNKNOWN_ ) @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column readonly _UNKNOWN_ : string ; @ Column primaryColor : string ; @ Column _UNKNOWN_ : string ; @ Column img : Buffer ; @ Column _UNKNOWN_ : Date ; @ ForeignKey ( ( ) => _UNKNOWN_ ) @ Column _UNKNOWN_ : number ; @ BelongsTo ( ( ) => _UNKNOWN_ ) _UNKNOWN_ : _UNKNOWN_ ; @ ForeignKey ( ( ) => Person ) @ Column _UNKNOWN_ : number ; @ BelongsTo ( ( ) => Person ) owner : Person ; } </s>	O O O $complex$ O $any$ O $complex$ O $Function$ O $complex$ O $Function$ O $Function$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O $string[]$ O O O O O O O O O O O O O O $complex$ O O $complex$ O O $complex$ O O O O O $any$ O O O $complex$ O O $complex$ O O $string$ O O O O O $complex$ O O $complex$ O O $string$ O O O O O $complex$ O O $complex$ O O $null$ O O O O O $complex$ O O $any$ O O O O O $any$ O $complex$ O O O O O O $any$ O O O $complex$ O O $any$ O O O O $any$ O O O $complex$ O O $any$ O O $complex$ O O $any$ O O O O O O O $Function$ O $complex$ O O $Function$ O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ O $string$ O O O O $complex$ $string$ O O O O $complex$ $string$ O O O O $complex$ $any$ O $any$ O O $complex$ $Date$ O $DateConstructor$ O O $Function$ O O O O $any$ O O $complex$ $number$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O O $Function$ O O O O $any$ O O $complex$ $number$ O O O O $complex$ O O O O $any$ O $Person$ O $any$ O O O
<s> import { Table , Model , Column , HasMany , Scopes } from "s" ; import { _UNKNOWN_ } from "s" ; @ Scopes ( { _UNKNOWN_ : { attributes : { exclude : [ 's' ] } } } ) @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column _UNKNOWN_ : string ; @ Column _UNKNOWN_ : string ; @ HasMany ( ( ) => _UNKNOWN_ ) _UNKNOWN_ : _UNKNOWN_ [ ] ; } </s>	O O O $complex$ O $any$ O $complex$ O $complex$ O $Function$ O O O O O O $any$ O O O O O $Function$ O O $complex$ O O $complex$ O O $string[]$ O O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ $string$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O O O O O
<s> import { Table , Model , _UNKNOWN_ , _UNKNOWN_ , Column , HasMany } from "s" ; import { _UNKNOWN_ } from "s" ; @ Table export class Team extends Model < Team > { @ _UNKNOWN_ @ _UNKNOWN_ @ Column id : number ; @ Column name : string ; @ HasMany ( ( ) => _UNKNOWN_ ) _UNKNOWN_ : _UNKNOWN_ [ ] ; } </s>	O O O $complex$ O $any$ O $void$ O $void$ O $complex$ O $complex$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $void$ O $void$ O $complex$ $number$ O O O O $complex$ $string$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O O O O O
<s> import { Table , Model , ForeignKey , Column , BelongsTo } from "s" ; import { _UNKNOWN_ } from "s" ; export const _UNKNOWN_ = 's' ; @ Table ( { tableName : _UNKNOWN_ } ) export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column _UNKNOWN_ : string ; @ ForeignKey ( ( ) => _UNKNOWN_ ) @ Column _UNKNOWN_ : number ; @ BelongsTo ( ( ) => _UNKNOWN_ ) player : _UNKNOWN_ ; } </s>	O O O $complex$ O $any$ O $Function$ O $complex$ O $complex$ O O O O O O $any$ O O O O O O O O O O O $complex$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $Function$ O O O O $any$ O O $complex$ $number$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O O O
<s> import { Table , Model , _UNKNOWN_ , ForeignKey , Column , _UNKNOWN_ , _UNKNOWN_ , BelongsTo } from "s" ; import { Team } from "s" ; import { _UNKNOWN_ } from "s" ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ _UNKNOWN_ @ _UNKNOWN_ @ Column id : number ; @ Column name : string ; @ _UNKNOWN_ ( ( ) => _UNKNOWN_ ) _UNKNOWN_ : _UNKNOWN_ ; @ ForeignKey ( ( ) => Team ) @ Column teamId : number ; @ BelongsTo ( ( ) => Team ) team : Team ; } </s>	O O O $complex$ O $any$ O $void$ O $Function$ O $complex$ O $void$ O $complex$ O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $void$ O $void$ O $complex$ $number$ O O O O $complex$ $string$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O O $Function$ O O O O $any$ O O $complex$ $number$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O O O
<s> import { Table , Model , Column , _UNKNOWN_ , DataType , _UNKNOWN_ , _UNKNOWN_ , Is , _UNKNOWN_ , Length , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , 0 , 0 , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export const _UNKNOWN_ = "s" ; export function _UNKNOWN_ ( value ) { if ( ! _UNKNOWN_ . test ( value ) ) { throw new Error ( `template` ) ; } } export const _UNKNOWN_ = 0 ; export const _UNKNOWN_ = [ [ 's' , 's' ] ] ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = "s" ; export const MAX = 0 ; export const _UNKNOWN_ = - 0 ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = { min : 0 , max : 0 } ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ _UNKNOWN_ ( _UNKNOWN_ ) @ _UNKNOWN_ @ Column id : string ; @ _UNKNOWN_ ( _UNKNOWN_ ) @ Column readonly key : string ; @ _UNKNOWN_ ( _UNKNOWN_ ) @ Column _UNKNOWN_ : string ; @ Length ( _UNKNOWN_ ) @ Column _UNKNOWN_ : string ; @ _UNKNOWN_ @ Column _UNKNOWN_ : string ; @ Is ( 's' , _UNKNOWN_ ) @ Length ( { min : 0 , msg : 's' } ) @ Column primaryColor : string ; @ Is ( _UNKNOWN_ ) @ Column _UNKNOWN_ : string ; @ Is ( _UNKNOWN_ ) @ Column _UNKNOWN_ : string ; @ _UNKNOWN_ @ _UNKNOWN_ ( _UNKNOWN_ ) @ _UNKNOWN_ ( _UNKNOWN_ ) @ Column _UNKNOWN_ : Date ; @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ 0 @ 0 @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ @ _UNKNOWN_ ( MAX ) @ _UNKNOWN_ ( _UNKNOWN_ ) @ _UNKNOWN_ ( _UNKNOWN_ ) @ _UNKNOWN_ ( _UNKNOWN_ ) @ _UNKNOWN_ ( _UNKNOWN_ ) @ _UNKNOWN_ ( _UNKNOWN_ ) @ _UNKNOWN_ ( { isArray : true } ) @ Column ( DataType . STRING ) dummy : any ; } </s>	O O O $complex$ O $any$ O $complex$ O $void$ O $any$ O $Function$ O $Function$ O $complex$ O $void$ O $Function$ O $void$ O $Function$ O $Function$ O O O $void$ O $void$ O $void$ O $void$ O $void$ O $void$ O $Function$ O $void$ O $void$ O $void$ O $void$ O $void$ O $Function$ O $Function$ O $Function$ O $Function$ O $Function$ O $void$ O $Function$ O $complex$ O $void$ O $void$ O $void$ O O O O O O $void$ O O O O O O $RegExp$ O O O O O $void$ O $string$ O O O O O $RegExp$ O $boolean$ O $string$ O O O O O $ErrorConstructor$ O O O O O O O O O O O O O O $string[][]$ O O O O O O O O O O O O O O O O O $RegExp$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $complex$ O O $number$ O O O $number$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O $void$ O $complex$ $string$ O O O O $Function$ O O O O $complex$ O $string$ O O O O $Function$ O O O O $complex$ $string$ O O O O $Function$ O $complex$ O O $complex$ $string$ O O O O $void$ O $complex$ $string$ O O O O $complex$ O O O $void$ O O $Function$ O O $number$ O O O $string$ O O O O O $complex$ $string$ O O O O $complex$ O $void$ O O $complex$ $string$ O O O O $complex$ O $RegExp$ O O $complex$ $string$ O O O O $void$ O $Function$ O O O O $Function$ O O O O $complex$ $Date$ O $DateConstructor$ O O $void$ O $void$ O $void$ O $void$ O $void$ O $void$ O $void$ O $void$ O $void$ O $void$ O $void$ O $void$ O $void$ O $complex$ O $void$ O $void$ O $void$ O $Function$ O O O O $Function$ O O O O $Function$ O $RegExp$ O O $Function$ O $string[][]$ O O $Function$ O $string[][]$ O O $Function$ O O O O $Function$ O O $boolean$ O O O O O $complex$ O $any$ O $any$ O $any$ O O O O O
<s> import { Table , Model , _UNKNOWN_ , _UNKNOWN_ , Column } from "s" ; @ Table ( { timestamps : true } ) export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ _UNKNOWN_ @ _UNKNOWN_ @ Column id : number ; @ Column _UNKNOWN_ : number ; @ Column username : string ; @ Column updatedAt : Date ; } </s>	O O O $complex$ O $any$ O $void$ O $void$ O $complex$ O O O O O $complex$ O O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O $void$ O $void$ O $complex$ $number$ O O O O $complex$ $number$ O O O O $complex$ $string$ O O O O $complex$ $Date$ O $DateConstructor$ O O O
<s> import { Table , Model , _UNKNOWN_ , Column , _UNKNOWN_ , DataType , Default , AllowNull , _UNKNOWN_ } from "s" ; @ Table export class User extends Model < User > { @ _UNKNOWN_ @ _UNKNOWN_ @ Column id : number ; @ Column ( { type : DataType . UUID , defaultValue : DataType . 0 } ) 0 : string ; @ _UNKNOWN_ @ Default ( DataType . 0 ) @ Column ( DataType . UUID ) 0 : string ; @ Column username : string ; @ Column ( DataType . STRING ( 0 ) ) 0 : string ; @ Column _UNKNOWN_ : number ; @ Column _UNKNOWN_ : number ; @ Column isAdmin : boolean ; @ Default ( false ) @ AllowNull ( false ) @ Column ( DataType . BOOLEAN ) _UNKNOWN_ : boolean | number ; @ Column ( { defaultValue : DataType . NOW } ) _UNKNOWN_ : Date ; @ Column _UNKNOWN_ : Date ; @ Column ( { allowNull : true } ) _UNKNOWN_ : Date ; @ Column name : string ; @ Column ( DataType . _UNKNOWN_ ) _UNKNOWN_ : string ; @ Column email : string ; _UNKNOWN_ : string ; 0 : boolean ; 0 : number ; } </s>	O O O $complex$ O $any$ O $void$ O $complex$ O $void$ O $any$ O $Function$ O $complex$ O $void$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $void$ O $void$ O $complex$ $number$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $string$ O O O O $void$ O $Function$ O $any$ O $any$ O O $complex$ O $any$ O $any$ O $string$ O O O O $complex$ $string$ O O O O $complex$ O $any$ O $any$ O O O O $string$ O O O O $complex$ $number$ O O O O $complex$ $number$ O O O O $complex$ $boolean$ O O O O $Function$ O O O O $complex$ O O O O $complex$ O $any$ O $any$ O $complex$ O O O O O O $complex$ O O $any$ O $any$ O $any$ O O $Date$ O $DateConstructor$ O O $complex$ $Date$ O $DateConstructor$ O O $complex$ O O $boolean$ O O O O $Date$ O $DateConstructor$ O O $complex$ $string$ O O O O $complex$ O $any$ O $any$ O $string$ O O O O $complex$ $string$ O O O $string$ O O O $boolean$ O O O $number$ O O O O O
<s> import { Table , Model , Column } from "s" ; @ Table ( { timestamps : true , updatedAt : false } ) export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column name : string ; } </s>	O O O $complex$ O $any$ O $complex$ O O O O O $complex$ O O $boolean$ O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O O
<s> import { Table , Model , Column } from "s" ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column name : string ; @ Column updatedAt : Date ; } </s>	O O O $complex$ O $any$ O $complex$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ $Date$ O $DateConstructor$ O O O
<s> import { Table , Model , Column , DataType } from "s" ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column ( { type : DataType . INTEGER . _UNKNOWN_ , _UNKNOWN_ : false , primaryKey : true } ) id : number ; @ Column username : string ; } </s>	O O O $complex$ O $any$ O $complex$ O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O $boolean$ O O O O $number$ O O O O $complex$ $string$ O O O O O
<s> import { Table , Model , Column , DataType } from "s" ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column name : string ; @ Column ( { type : DataType . _UNKNOWN_ , get ( ) { return 's' ; } } ) _UNKNOWN_ : string ; @ Column ( { validate : { isEmail : true } } ) email : string ; } </s>	O O O $complex$ O $any$ O $complex$ O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ O O $any$ O $any$ O $any$ O $string$ O O O O O O O O O $string$ O O O O $complex$ O O $complex$ O O $boolean$ O O O O O $string$ O O O O O
<s> import { Table , Model , Column , DataType } from "s" ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column name : string ; @ Column ( { type : DataType . _UNKNOWN_ } ) _UNKNOWN_ : string ; @ Column ( { validate : { isEmail : true } } ) email : string ; } </s>	O O O $complex$ O $any$ O $complex$ O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ O O $any$ O $any$ O $any$ O O $string$ O O O O $complex$ O O $complex$ O O $boolean$ O O O O O $string$ O O O O O
<s> import { Column , Model , Table } from "s" ; @ Table ( { version : true } ) export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column name : string ; } </s>	O O O $complex$ O $any$ O $complex$ O O O O O $complex$ O O $true$ O O O O O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O O
<s> import { Table , Column , Model } from 's' ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column title : string ; } </s>	O O O $complex$ O $complex$ O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O O
<s> import { Table , Column , Model } from 's' ; @ Table export default class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column _UNKNOWN_ : string ; } </s>	O O O $complex$ O $complex$ O $any$ O O O O O $complex$ O O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O O
<s> import { Table , Model } from 's' ; @ Table export class _UNKNOWN_ extends Model < _UNKNOWN_ > { } </s>	O O O $complex$ O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O O O
<s> import { Table , Model , Column , } from "s" ; @ Table export default class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column name : string ; } </s>	O O O $complex$ O $any$ O $complex$ O O O O O O $complex$ O O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O O
<s> import { Table , Model , Column } from "s" ; @ Table export default class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column _UNKNOWN_ : string ; } </s>	O O O $complex$ O $any$ O $complex$ O O O O O $complex$ O O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O O
<s> import { Table , Model , Column } from "s" ; @ Table export default class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column name : string ; } </s>	O O O $complex$ O $any$ O $complex$ O O O O O $complex$ O O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O O
<s> import { Table , Model , Column , } from "s" ; @ Table export default class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column name : string ; } </s>	O O O $complex$ O $any$ O $complex$ O O O O O O $complex$ O O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O O
<s> import { Table , Model , Column } from "s" ; @ Table export default class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column _UNKNOWN_ : string ; } </s>	O O O $complex$ O $any$ O $complex$ O O O O O $complex$ O O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O O
<s> import { Table , Model , Column } from "s" ; @ Table export default class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column name : string ; } </s>	O O O $complex$ O $any$ O $complex$ O O O O O $complex$ O O O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O O
<s> import { Sequelize } from "s" ; import * as _UNKNOWN_ from "s" ; import { _UNKNOWN_ , Sequelize as _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( _UNKNOWN_ < _UNKNOWN_ > ) ; export function _UNKNOWN_ ( _UNKNOWN_ ? , define ? < any > ) ; export function _UNKNOWN_ ( _UNKNOWN_ ? : boolean | Partial < _UNKNOWN_ > , define < any > = { } ) { let _UNKNOWN_ = true ; let _UNKNOWN_ = { } ; if ( typeof _UNKNOWN_ === 's' ) { _UNKNOWN_ = _UNKNOWN_ ; } else if ( typeof _UNKNOWN_ === 's' ) { _UNKNOWN_ = _UNKNOWN_ ; } return new Sequelize ( { database : 's' , _UNKNOWN_ : 's' , username : 's' , password : 's' , define , storage : 's' , logging : ! ( 's' in process . env ) , _UNKNOWN_ : _UNKNOWN_ ? [ __dirname + 's' ] : [ ] , ... _UNKNOWN_ , } ) ; } export function _UNKNOWN_ ( _UNKNOWN_ = true ) { return new Sequelize ( { _UNKNOWN_ : true , logging : ! ( 's' in process . env ) , _UNKNOWN_ : _UNKNOWN_ ? [ __dirname + 's' ] : [ ] } ) ; } export function _UNKNOWN_ ( ) { return new _UNKNOWN_ ( 's' , 's' , 's' , { _UNKNOWN_ : 's' , storage : 's' , logging : ! ( 's' in process . env ) } ) ; } </s>	O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $Partial$ O $any$ O O O O O $any$ O $boolean$ $boolean$ O $any$ $any$ O O O O O O O $any$ O $complex$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O $boolean$ O O O O ${}$ O O O O O O O $complex$ O O O O ${}$ O $complex$ O O O O O O $boolean$ O O O O $boolean$ O $boolean$ O O O O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $any$ O $string$ O O O $boolean$ O O O O O $any$ O $any$ O O $string[]$ O $boolean$ O O $any$ O O O O O O O O ${}$ O O O O O O O $any$ O $boolean$ O O O O O O $any$ O O $true$ O O O $boolean$ O O O O O $any$ O $any$ O O $string[]$ O $boolean$ O O $any$ O O O O O O O O O O O O $any$ O O O O O $any$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O $any$ O $any$ O O O O O O
<s> import { expect , use } from 's' ; import * as chaiAsPromised from 's' ; import { Table } from 's' ; import { Model } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; use ( chaiAsPromised ) ; describe ( 's' , ( ) => { const as = 's' ; const sequelize = _UNKNOWN_ ( false ) ; @ Table class Team extends Model < Team > { } @ Table class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ _UNKNOWN_ ( ( ) => Team , { as , _UNKNOWN_ : 's' , foreignKey : 's' , _UNKNOWN_ : 's' , } ) _UNKNOWN_ : Team [ ] ; } sequelize . _UNKNOWN_ ( [ Team , _UNKNOWN_ ] ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ [ 's' ] ) . to . have . property ( as ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O $complex$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $any$ O $complex$ O O O O O $complex$ O $any$ O $any$ O $any$ O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O O O O $any$ O O $string$ O $string$ O O O $string$ O O O $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import { expect , use } from 's' ; import * as chaiAsPromised from 's' ; import { Table } from 's' ; import { BelongsTo } from 's' ; import { Model } from 's' ; import { _UNKNOWN_ } from 's' ; use ( chaiAsPromised ) ; describe ( 's' , ( ) => { const as = 's' ; const sequelize = _UNKNOWN_ ( false ) ; @ Table class Team extends Model < Team > { } @ Table class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ BelongsTo ( ( ) => Team , { as , foreignKey : 's' } ) team : Team ; } sequelize . _UNKNOWN_ ( [ Team , _UNKNOWN_ ] ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ [ 's' ] ) . to . have . property ( as ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( false ) ; @ Table class Team extends Model < Team > { } @ Table class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ BelongsTo ( ( ) => Team ) team : Team ; } expect ( ( ) => _UNKNOWN_ . _UNKNOWN_ ( [ Team , _UNKNOWN_ ] ) ) . to . throw ( "s" ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O $complex$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $complex$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $any$ O $complex$ O O O O O $complex$ O $any$ O $any$ O $any$ O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O O O O $any$ O O $string$ O $string$ O O O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $complex$ O O O O O $complex$ O $any$ O $any$ O $any$ O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $complex$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O O
<s> import { expect , use } from 's' ; import * as chaiAsPromised from 's' ; import { Table } from 's' ; import { Model } from 's' ; import { _UNKNOWN_ } from 's' ; import { HasMany } from 's' ; use ( chaiAsPromised ) ; describe ( 's' , ( ) => { const as = 's' ; const sequelize = _UNKNOWN_ ( false ) ; @ Table class _UNKNOWN_ extends Model < _UNKNOWN_ > { } @ Table class Team extends Model < Team > { @ HasMany ( ( ) => _UNKNOWN_ , { as , foreignKey : 's' } ) _UNKNOWN_ : _UNKNOWN_ [ ] ; } sequelize . _UNKNOWN_ ( [ Team , _UNKNOWN_ ] ) ; it ( 's' , ( ) => { expect ( Team [ 's' ] ) . to . have . property ( as ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O $complex$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $any$ O $complex$ O O O O O $complex$ O $any$ O $any$ O $any$ O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O O O O $any$ O O $string$ O $string$ O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import { expect , use } from 's' ; import * as chaiAsPromised from 's' ; import { Table } from 's' ; import { Model } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; use ( chaiAsPromised ) ; describe ( 's' , ( ) => { const as = 's' ; const sequelize = _UNKNOWN_ ( false ) ; @ Table class _UNKNOWN_ extends Model < _UNKNOWN_ > { } @ Table class Team extends Model < Team > { @ _UNKNOWN_ ( ( ) => _UNKNOWN_ , { as , foreignKey : 's' } ) player : _UNKNOWN_ ; } sequelize . _UNKNOWN_ ( [ Team , _UNKNOWN_ ] ) ; it ( 's' , ( ) => { expect ( Team [ 's' ] ) . to . have . property ( as ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O $complex$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $any$ O $complex$ O O O O O $complex$ O $any$ O $any$ O $any$ O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O O O O $any$ O O $string$ O $string$ O O O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import { expect } from 's' ; import { capitalize } from "s" ; export function _UNKNOWN_ ( target , keys : { _UNKNOWN_ : string ; _UNKNOWN_ ? : string } ) { const _UNKNOWN_ : { [ type ] : { _UNKNOWN_ : string [ ] , _UNKNOWN_ : string [ ] } } = { _UNKNOWN_ : { _UNKNOWN_ : [ 's' , 's' , 's' ] , _UNKNOWN_ : [ 's' , 's' , 's' , 's' , 's' , 's' ] } , _UNKNOWN_ : { _UNKNOWN_ : [ 's' , 's' , 's' ] , _UNKNOWN_ : [ ] } } ; const _UNKNOWN_ = _UNKNOWN_ [ keys . _UNKNOWN_ ? 's' : 's' ] ; Object . keys ( keys ) . forEach ( key => { _UNKNOWN_ [ key ] . forEach ( prefix => { expect ( target . prototype ) . to . have . property ( prefix + capitalize ( keys [ key ] ) ) . that . is . a ( 's' ) ; } ) ; } ) ; } </s>	O O O $any$ O O O O O O $string$ O O O O O O $void$ O $any$ O $complex$ O O $string$ O O O $string$ O O O O O O O $complex$ O O O $string$ O O O $string[]$ O O O O O $string[]$ O O O O O O O O $complex$ O O $string[]$ O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O $complex$ O O $string[]$ O O O O O O O O O $undefined[]$ O O O O O O O $complex$ O $complex$ O $complex$ O $string$ O O O O O O $ObjectConstructor$ O $complex$ O $complex$ O O $void$ O $string$ O O $complex$ O $string$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $string$ O $complex$ O $string$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O
<s> import { expect } from 's' ; export function _UNKNOWN_ ( instance : any | any [ ] , expectedValues : any | any [ ] ) { if ( Array . isArray ( expectedValues ) ) { expect ( instance ) . to . have . property ( 's' , expectedValues . length ) ; return instance . forEach ( ( _instance , i ) => _UNKNOWN_ ( _instance , expectedValues [ i ] ) ) ; } expect ( instance ) . to . have . property ( 's' ) . that . is . not . null ; Object . keys ( expectedValues ) . forEach ( key => { const value = instance [ key ] ; const expectedValue = expectedValues [ key ] ; expect ( instance ) . to . have . property ( key ) . that . is . not . null . and . not . undefined ; if ( typeof expectedValue === 's' ) { _UNKNOWN_ ( value , expectedValue ) ; } else { expect ( instance ) . to . have . property ( key , expectedValue ) ; } } ) ; } export function 0 ( value ) { const 0 = "s" ; return 0 . test ( value . replace ( "s" , 's' ) . replace ( "s" , 's' ) ) ; } </s>	O O O $any$ O O O O O O $void$ O $any$ O O O O O O O $any$ O O O O O O O O O O $ArrayConstructor$ O $complex$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any[]$ O $number$ O O O $any$ O $any$ O O $any$ O $any$ O O $void$ O $any$ O $any[]$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O $string$ O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O $string$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O $any$ O O O O O O O O O $boolean$ O $string$ O O O $RegExp$ O O O O $RegExp$ O $boolean$ O $string$ O $complex$ O O O O O O $complex$ O O O O O O O O O
<s> import * as _UNKNOWN_ from 's' ; import * as chai from 's' ; import * as sinon from 's' ; import * as sinonChai from 's' ; import { _UNKNOWN_ , Sequelize } from "s" ; import { Column , Model , Table } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; const expect = chai . expect ; chai . use ( sinonChai ) ; describe ( 's' , ( ) => { const sequelize = _UNKNOWN_ ( false ) ; beforeEach ( ( ) => { return sequelize . sync ( { force : true } ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => { @ Table class User extends Model < User > { @ Column firstName : string ; @ Column lastName : string ; @ _UNKNOWN_ _UNKNOWN_ ( ) { } } } ) . to . throw ( Error , "s" ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => { @ Table class User extends Model < User > { @ Column firstName : string ; @ Column lastName : string ; @ _UNKNOWN_ static _UNKNOWN_ ( ) { } } } ) . to . throw ( Error , "s" ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; let _UNKNOWN_ : sinon . SinonStub ; let _UNKNOWN_ : sinon . SinonStub ; let _UNKNOWN_ : sinon . SinonStub ; let _UNKNOWN_ : sinon . SinonStub ; if ( _UNKNOWN_ [ 's' ] . split ( 's' ) [ 0 ] === 's' ) { _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; } const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; let _UNKNOWN_ : sinon . SinonStub ; let _UNKNOWN_ : sinon . SinonStub ; let _UNKNOWN_ : sinon . SinonStub ; let _UNKNOWN_ : sinon . SinonStub ; if ( _UNKNOWN_ [ 's' ] . split ( 's' ) [ 0 ] === 's' ) { _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ = sinon . stub ( _UNKNOWN_ , 's' ) ; } sequelize . _UNKNOWN_ ( [ _UNKNOWN_ ] ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; if ( _UNKNOWN_ [ 's' ] . split ( 's' ) [ 0 ] === 's' ) { expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( _UNKNOWN_ ) ; } expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; if ( _UNKNOWN_ [ 's' ] . split ( 's' ) [ 0 ] === 's' ) { expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; expect ( _UNKNOWN_ [ 's' ] . hooks [ 's' ] ) . to . include ( { name : 's' , fn : _UNKNOWN_ } ) ; } } ) ; } ) ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O $any$ O O O O O O $complex$ O $any$ O $complex$ O O O O O O $any$ O O O O O O $complex$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O $complex$ O O O O $any$ O O O O O O $any$ O $any$ O O $boolean$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ $string$ O O O O $complex$ $void$ O O O O O O O O $any$ O $any$ O $ErrorConstructor$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ $string$ O O O O $complex$ O $void$ O O O O O O O O $any$ O $any$ O $ErrorConstructor$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $complex$ O O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O O O O O O O O O
<s> import { expect } from 's' ; import * as Promise from 's' ; import { Model , Table , Column } from "s" ; import { _UNKNOWN_ } from "s" ; describe ( 's' , ( ) => { const sequelize = _UNKNOWN_ ( ) ; @ Table class User extends Model < User > { @ Column firstName : string ; @ Column lastName : string ; _UNKNOWN_ ( ) { return this . firstName + 's' + this . lastName ; } _UNKNOWN_ ( name ) { const split = name . split ( 's' ) ; this . lastName = split . pop ( ) ; this . firstName = split . join ( 's' ) ; } } sequelize . _UNKNOWN_ ( [ User ] ) ; beforeEach ( ( ) => sequelize . sync ( { force : true } ) ) ; const suites < [ string , ( ) => Promise < User > ] > = [ [ 's' , ( ) => Promise . resolve < User > ( User . build ( { firstName : 's' , lastName : 's' } ) ) ] , [ 's' , ( ) => Promise . resolve < User > ( new User ( { firstName : 's' , lastName : 's' } ) ) ] , [ 's' , ( ) => ( User . create ( { firstName : 's' , lastName : 's' } ) ) ] , ] ; suites . forEach ( ( [ name , create ] ) => { describe ( name , ( ) => { let user ; beforeEach ( ( ) => create ( ) . then ( _UNKNOWN_ => user = _UNKNOWN_ ) ) ; it ( 's' , ( ) => { Object . keys ( User . prototype ) . forEach ( key => { expect ( user ) . to . have . property ( key , User . prototype [ key ] ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( user . _UNKNOWN_ ( ) ) . to . equal ( user . firstName + 's' + user . lastName ) ; } ) ; } ) ; describe ( 's' , ( ) => { const firstName = 's' ; const lastName = 's' ; const fullName = firstName + 's' + lastName ; it ( 's' , ( ) => { user . _UNKNOWN_ ( fullName ) ; expect ( user . firstName ) . to . equal ( firstName ) ; expect ( user . lastName ) . to . equal ( lastName ) ; } ) ; it ( 's' , ( ) => { user . _UNKNOWN_ ( fullName ) ; return user . save ( ) . then ( ( ) => User . _UNKNOWN_ ( user . id ) ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ . firstName ) . to . equal ( firstName ) ; expect ( _UNKNOWN_ . lastName ) . to . equal ( lastName ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O O $any$ O O O O O $any$ O $complex$ O $complex$ O O O O O O $complex$ O O O O $any$ O O O O O O O O $any$ O $complex$ O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ $string$ O O O $string$ O O O O O O $string$ O O O O O $string$ O O $void$ O $string$ O O O $string[]$ O $string$ O $complex$ O O O O O O $string$ O $string[]$ O $string$ O O O O O $string$ O $string[]$ O $string$ O O O O O O $any$ O $complex$ O O $any$ O O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O O O O O $Array$ O O O O O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $string$ O O O $string$ O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O O O O O O O O O O $any$ O $complex$ O O $string$ O O O $string$ O O O O O O O O O $any$ O $void$ O O O $string$ O $any$ O O O O $any$ O $string$ O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O $ObjectConstructor$ O $complex$ O $any$ O $User$ O O $void$ O $string$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O $any$ O $User$ O $string$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O $string$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O
<s> import { expect } from 's' ; import * as Promise from 's' ; import { Model , Table , Column } from "s" ; import { _UNKNOWN_ } from "s" ; describe ( 's' , ( ) => { const sequelize = _UNKNOWN_ ( ) ; @ Table class User extends Model < User > { @ Column firstName : string ; @ Column lastName : string ; static _UNKNOWN_ ( ) { return new User ( { firstName : 's' , lastName : 's' } ) ; } static _UNKNOWN_ ( ) < User > { return this . findOne ( { where : { firstName : 's' , lastName : 's' } } ) ; } } sequelize . _UNKNOWN_ ( [ User ] ) ; beforeEach ( ( ) => sequelize . sync ( { force : true } ) ) ; it ( 's' , ( ) => { const user = User . _UNKNOWN_ ( ) ; expect ( user ) . to . be . an . instanceOf ( User ) ; return user . save ( ) . then ( ( ) => User . _UNKNOWN_ ( ) ) . then ( _UNKNOWN_ => expect ( _UNKNOWN_ . equals ( user ) ) . to . be . true ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O O $any$ O O O O O $any$ O $complex$ O $complex$ O O O O O O $complex$ O O O O $any$ O O O O O O O O $any$ O $complex$ O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ $string$ O O O O $User$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $Promise$ O O O $any$ O O O O O $any$ O O $complex$ O O $string$ O O O $string$ O O O O O O O O $any$ O $complex$ O O $any$ O O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O O O O $any$ O O O O O O O O $User$ O $any$ O $User$ O O O $any$ O $User$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $User$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $User$ O O O $any$ O $any$ O $any$ O O O O O O O O O
<s> import { expect } from 's' ; import { Model } from "s" ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( Model . prototype . constructor ) . to . equal ( Model ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $Function$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O
<s> import { expect } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import _UNKNOWN_ from "s" ; import { Sequelize } from "s" ; import { Model } from 's' ; import { Table } from 's' ; import _UNKNOWN_ from "s" ; import _UNKNOWN_ from "s" ; import _UNKNOWN_ from "s" ; import _UNKNOWN_ from "s" ; import _UNKNOWN_ from "s" ; import _UNKNOWN_ from "s" ; describe ( 's' , ( ) => { const sequelize = _UNKNOWN_ ( false ) ; const _UNKNOWN_ = "s" ; function _UNKNOWN_ ( instance ) { expect ( instance ) . to . have . property ( 's' ) . that . have . property ( 's' ) . that . _UNKNOWN_ ( 's' ) ; expect ( instance ) . to . have . property ( 's' ) . that . have . property ( 's' ) . that . _UNKNOWN_ ( 's' ) ; expect ( instance ) . to . have . property ( 's' ) . that . have . property ( 's' ) . that . _UNKNOWN_ ( 's' ) ; expect ( instance ) . to . have . property ( 's' ) . that . have . property ( 's' ) . that . _UNKNOWN_ ( 's' ) ; } describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( sequelize . constructor ) . to . equal ( Sequelize ) ; } ) ; } ) ; describe ( 's' , ( ) => { const db = 's' ; const _UNKNOWN_ = new Sequelize ( { name : db , _UNKNOWN_ : 's' , username : 's' , password : 's' , storage : 's' , logging : ! ( 's' in process . env ) } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . constructor ) . to . equal ( Sequelize ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . that . have . property ( 's' ) . that . _UNKNOWN_ ( db ) ; } ) ; } ) ; describe ( 's' , ( ) => { const _UNKNOWN_ = new Sequelize ( { url : _UNKNOWN_ , storage : 's' , logging : ! ( 's' in process . env ) , pool : { max : 0 , min : 0 } } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . constructor ) . to . equal ( Sequelize ) ; } ) ; it ( 's' , ( ) => { _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . that . have . property ( 's' ) . that . have . property ( 's' ) . that . _UNKNOWN_ ( 0 ) ; } ) ; } ) ; describe ( 's' , ( ) => { const _UNKNOWN_ = new Sequelize ( _UNKNOWN_ ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . constructor ) . to . equal ( Sequelize ) ; } ) ; it ( 's' , ( ) => { _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; } ) ; describe ( 's' , ( ) => { const _UNKNOWN_ = { timestamps : true , _UNKNOWN_ : true } ; const _UNKNOWN_ = _UNKNOWN_ ( false , _UNKNOWN_ ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . that . has . property ( 's' ) . that . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { @ Table class User extends Model < User > { } _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; Object . keys ( _UNKNOWN_ ) . forEach ( key => { expect ( User ) . to . have . property ( 's' ) . that . have . property ( key , _UNKNOWN_ [ key ] ) ; } ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( ( ) => sequelize . _UNKNOWN_ ( [ __dirname + 's' ] ) ) . not . to . throw ( ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => sequelize . _UNKNOWN_ ( [ __dirname + 's' ] ) ) . to . throw ( ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { sequelize . _UNKNOWN_ ( [ __dirname + 's' ] ) ; expect ( ( ) => _UNKNOWN_ . build ( { } ) ) . not . to . throw ; const _UNKNOWN_ = _UNKNOWN_ . build ( { _UNKNOWN_ : 's' } ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . to . equal ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { sequelize . _UNKNOWN_ ( [ __dirname + 's' ] ) ; expect ( ( ) => _UNKNOWN_ . build ( { } ) ) . not . to . throw ; const game = _UNKNOWN_ . build ( { title : 's' } ) ; expect ( game . title ) . to . equal ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { sequelize . _UNKNOWN_ ( [ __dirname + 's' ] ) ; expect ( ( ) => _UNKNOWN_ . build ( { } ) ) . not . to . throw ; expect ( Object . keys ( sequelize . models ) . length ) . to . equal ( 0 ) ; } ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { sequelize . _UNKNOWN_ ( [ __dirname + 's' ] ) ; expect ( sequelize . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; expect ( sequelize . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const db = 's' ; const _UNKNOWN_ = new Sequelize ( { name : db , _UNKNOWN_ : 's' , username : 's' , password : 's' , storage : 's' , logging : ! ( 's' in process . env ) , _UNKNOWN_ : [ __dirname + 's' ] } ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { const db = 's' ; const _UNKNOWN_ = new Sequelize ( { name : db , _UNKNOWN_ : 's' , username : 's' , password : 's' , storage : 's' , logging : ! ( 's' in process . env ) , _UNKNOWN_ : [ __dirname + 's' ] } ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { const db = 's' ; const _UNKNOWN_ = new Sequelize ( { name : db , _UNKNOWN_ : 's' , username : 's' , password : 's' , storage : 's' , logging : ! ( 's' in process . env ) , _UNKNOWN_ : [ __dirname + 's' , __dirname + 's' ] } ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _ ) . to . have . property ( 's' , _UNKNOWN_ ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O $any$ O O O O O O O O $any$ O $complex$ O O O O O O O O O O $void$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $Function$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $Function$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O O $any$ O O $any$ O O $string$ O O O $string$ O O O $boolean$ O O O O O $any$ O $any$ O O $complex$ O O $number$ O O O $number$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $Function$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $void$ O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $Function$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $void$ O $any$ O O O O O O O O $any$ O O O O O O O O $complex$ O O $boolean$ O O O $boolean$ O O O O O $any$ O $complex$ O O O $complex$ O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $any$ O $complex$ O O $any$ O O O $ObjectConstructor$ O $complex$ O $complex$ O O $void$ O $string$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $string$ O $complex$ O $string$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O $complex$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O $complex$ O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $complex$ O O $any$ O O O O O $any$ O O O O $any$ O $complex$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $string$ O O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $complex$ O O $any$ O O O O O $any$ O O O O $any$ O $complex$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $string$ O O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $complex$ O O $any$ O O O O O $any$ O O O O $any$ O $complex$ O O O O O O $any$ O $any$ O $any$ O $any$ O $ObjectConstructor$ O $complex$ O $any$ O $any$ O O $number$ O O $any$ O $any$ O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $complex$ O O $any$ O O O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $any$ O $any$ O O $string[]$ O O $any$ O O O O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O O O O O O O O O O $any$ O O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $any$ O $any$ O O $string[]$ O O $any$ O O O O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O O O O O O O O O O $any$ O O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $any$ O $any$ O O $string[]$ O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O O O O O
<s> import { expect , use } from 's' ; import * as chaiAsPromised from 's' ; import { useFakeTimers } from 's' ; import { Op } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { Person } from "s" ; import { Model } from 's' ; import { Table } from 's' ; import { Scopes } from 's' ; import { majorVersion } from 's' ; import { Column } from 's' ; import { UpdatedAt } from 's' ; import _UNKNOWN_ = require ( 's' ) ; use ( chaiAsPromised ) ; use ( _UNKNOWN_ ) ; describe ( 's' , ( ) => { const sequelize = _UNKNOWN_ ( ) ; beforeEach ( ( ) => sequelize . sync ( { force : true } ) ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ . prototype ) ; expect ( _UNKNOWN_ ) . not . to . be . undefined ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ . prototype ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . that . _UNKNOWN_ ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . that . _UNKNOWN_ ( _UNKNOWN_ . full ) ; } ) ; } ) ; describe ( 's' , ( ) => { const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; beforeEach ( ( ) => _UNKNOWN_ . create ( { _UNKNOWN_ : 's' , primaryColor : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : new Date ( ) , _UNKNOWN_ : { _UNKNOWN_ : _UNKNOWN_ , _UNKNOWN_ : 's' , } , owner : { name : _UNKNOWN_ } } , { include : [ _UNKNOWN_ , Person ] } ) ) ; it ( 's' , ( ) => _UNKNOWN_ . findOne ( ) . then ( _UNKNOWN_ => { expect ( Object . keys ( _UNKNOWN_ [ 's' ] ) ) . to . eql ( _UNKNOWN_ . attributes ) ; } ) ) ; it ( 's' , ( ) => _UNKNOWN_ . scope ( 's' ) . findOne ( ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . is . not . null ; expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . have . property ( 's' , _UNKNOWN_ ) ; } ) . then ( ( ) => ( _UNKNOWN_ . scope ( 's' ) as typeof _UNKNOWN_ ) . findAll ( ) ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . be . empty ; } ) . then ( ( ) => ( _UNKNOWN_ . scope ( 's' ) as typeof _UNKNOWN_ ) . findAll ( ) ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . be . not . empty ; } ) ) ; it ( 's' , ( ) => _UNKNOWN_ . unscoped ( ) . findOne ( ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . is . a ( 's' ) ; } ) ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => expect ( _UNKNOWN_ . scope ( 's' ) . findOne ( { include : [ { model : Person , } ] } ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . is . not . null ; expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . is . not . null ; } ) ) . not . to . be . rejected ) ; it ( 's' , ( ) => expect ( _UNKNOWN_ . scope ( 's' ) . findOne ( { include : [ Person ] } ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . is . not . null ; expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . have . property ( 's' , _UNKNOWN_ ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . is . not . null ; } ) ) . not . to . be . rejected ) ; it ( 's' , ( ) => _UNKNOWN_ . unscoped ( ) . findOne ( { include : [ { model : Person } ] } ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . is . not . null ; expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . is . not . null ; } ) ) ; it ( 's' , ( ) => _UNKNOWN_ . unscoped ( ) . findOne ( { include : [ Person ] } ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . is . not . null ; expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . which . is . not . null ; } ) ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => _UNKNOWN_ . findOne ( { include : [ _UNKNOWN_ . scope ( 's' ) ] } ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . that . have . property ( 's' ) . which . is . undefined ; } ) ) ; it ( 's' , ( ) => _UNKNOWN_ . scope ( 's' ) . findOne ( { include : [ _UNKNOWN_ . scope ( 's' ) as typeof _UNKNOWN_ ] } ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . that . have . property ( 's' ) . which . is . undefined ; } ) ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => _UNKNOWN_ . scope ( 's' ) . findOne ( ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . that . have . property ( 's' ) . which . is . undefined ; } ) ) ; it ( 's' , ( ) => _UNKNOWN_ . scope ( 's' ) . findOne ( ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . that . have . property ( 's' ) . which . is . a ( 's' ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => _UNKNOWN_ . scope ( { method : [ 's' , 's' ] } ) . findOne ( ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' , 's' ) ; } ) ) ; it ( 's' , ( ) => _UNKNOWN_ . scope ( { method : [ 's' , 's' ] } ) . findOne ( ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ ) . to . have . property ( 's' , 's' ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' ) . that . is . an ( 's' ) ; } ) ) ; } ) ; if ( majorVersion > 0 ) { describe ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( false ) ; @ Scopes ( { bob : { where : { name : { [ Op . _UNKNOWN_ ] : 's' } } } , updated : { where : { updated : { [ Op . gt ] : new Date ( 0 , 0 ) } } } , } ) @ Table class Person extends Model < Person > { @ Column name : string ; @ UpdatedAt updated : Date ; } _UNKNOWN_ . _UNKNOWN_ ( [ Person ] ) ; beforeEach ( ( ) => _UNKNOWN_ . sync ( { force : true } ) ) ; it ( 's' , ( ) => { return Person . create ( { name : 's' } ) . then ( ( ) => Person . create ( { name : 's' } ) ) . then ( ( ) => Person . create ( { name : 's' } ) ) . then ( ( ) => Person . create ( { name : 's' } ) ) . then ( ( ) => ( Person . scope ( 's' ) as typeof Person ) . findAll ( ) ) . then ( _UNKNOWN_ => expect ( _UNKNOWN_ ) . to . have . property ( 's' , 0 ) ) ; } ) ; it ( 's' , ( ) => { const clock = useFakeTimers ( + new Date ( ) ) ; return Person . create ( { name : 's' } ) . then ( ( ) => ( Person . scope ( 's' ) as typeof Person ) . findAll ( ) ) . then ( ( ) => Person . findAll ( ) ) . then ( _UNKNOWN_ => expect ( _UNKNOWN_ ) . to . have . property ( 's' , 0 ) ) . then ( ( ) => clock . restore ( ) ) ; } ) ; } ) ; } } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $any$ O $complex$ O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $Function$ O O O O O O $number$ O O O O O O $complex$ O O O O O O $void$ O O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O O O $any$ O $complex$ O O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O $complex$ O O O O O O O O $any$ O O O O O O O O O O O O O O O O O $any$ O O O O $any$ O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $Date$ O O $DateConstructor$ O O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O O O O $complex$ O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O O O O O $any$ O $any$ O $complex$ O $string[]$ O O O O O O $any$ O O O O O O $any$ O $complex$ O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O O O O $any$ O $complex$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O O $any$ O $complex$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $complex$ O O O O $any$ O O $complex$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $complex$ O O O O $any$ O O $complex$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O $complex$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O $complex$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O O $any$ O $complex$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $complex$ O O O O $any$ O O $complex$ O O $any$ O $complex$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O $complex$ O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $complex$ O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O $complex$ O O $string[]$ O O O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O $any$ O $complex$ O O $string[]$ O O O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O $number$ O O O O $any$ O O O O O O O O $any$ O $complex$ O O O O O $Function$ O O $complex$ O O $complex$ O O $complex$ O O O $any$ O $any$ O O O O O O O $complex$ O O $complex$ O O $complex$ O O O $any$ O $any$ O O O $DateConstructor$ O O O O O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $void$ $Date$ O $DateConstructor$ O O $any$ O $complex$ O O $any$ O O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O O O O $any$ O O O O O O O O $any$ O $complex$ O O $string$ O O O O O $any$ O O O O $any$ O $complex$ O O $string$ O O O O O O $any$ O O O O $any$ O $complex$ O O $string$ O O O O O O $any$ O O O O $any$ O $complex$ O O $string$ O O O O O O $any$ O O O O O $any$ O $complex$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $DateConstructor$ O O O O O $any$ O $complex$ O O $string$ O O O O O $any$ O O O O O $any$ O $complex$ O O O O O $any$ O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O
<s> import { expect } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { Model } from "s" ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { const target = { } ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = ( ) => class T extends Model < T > { } ; _UNKNOWN_ ( target , _UNKNOWN_ , _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ ( target ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' , 0 ) ; expect ( _UNKNOWN_ [ 0 ] ) . to . eql ( { foreignKey : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , } ) ; } ) ; it ( 's' , ( ) => { const parent = { } ; const target = Object . create ( parent ) ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = ( ) => class T extends Model < T > { } ; _UNKNOWN_ ( parent , _UNKNOWN_ , _UNKNOWN_ ) ; _UNKNOWN_ ( target , _UNKNOWN_ , _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ ( target ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' , 0 ) ; expect ( _UNKNOWN_ [ 0 ] ) . to . eql ( { foreignKey : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , } ) ; expect ( _UNKNOWN_ [ 0 ] ) . to . eql ( { foreignKey : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , } ) ; const _UNKNOWN_ = _UNKNOWN_ ( parent ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' , 0 ) ; expect ( _UNKNOWN_ [ 0 ] ) . to . eql ( { foreignKey : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $void$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O ${}$ O O O O O O O O O O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O ${}$ O $complex$ O O O O O $any$ O $any$ O ${}$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O $complex$ O O O O O O O $any$ O O O O O O O O ${}$ O O O O O $any$ O $ObjectConstructor$ O $complex$ O ${}$ O O O O O O O O O O O O O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O ${}$ O $complex$ O O O O $void$ O $any$ O $complex$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O $complex$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O $complex$ O O O O O $any$ O $any$ O ${}$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O $complex$ O O O O O O O O O O O O O O
<s> import { expect } from 's' ; import { addAttribute , _UNKNOWN_ , getAttributes , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { DataType } from "s" ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { const options = { a : ( ) => _UNKNOWN_ , b : ( ) => null , c : { 0 : ( ) => _UNKNOWN_ , 0 : ( ) => null } } ; _UNKNOWN_ ( options ) ; it ( 's' , ( ) => { expect ( options . a ) . to . be . equal ( _UNKNOWN_ ) ; expect ( options . c . 0 ) . to . be . equal ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { expect ( options . b ) . to . be . a ( 's' ) ; expect ( options . c . 0 ) . to . be . a ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( ( ) => addAttribute ( { } , 's' , { } ) ) . to . not . throw ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { const target = { } ; const _UNKNOWN_ = { name : { primaryKey : true } , age : { type : DataType . NUMBER } } ; _UNKNOWN_ ( target , _UNKNOWN_ ) ; it ( 's' , ( ) => { const attributes = getAttributes ( target ) ; expect ( attributes ) . to . not . equal ( _UNKNOWN_ ) ; } ) ; } ) ; describe ( 's' , ( ) => { const target = { } ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = { allowNull : true } ; addAttribute ( target , _UNKNOWN_ , { } ) ; _UNKNOWN_ ( target , _UNKNOWN_ , _UNKNOWN_ ) ; it ( 's' , ( ) => { const attributes = getAttributes ( target ) ; expect ( Object . keys ( attributes ) ) . to . have . property ( 's' , 0 ) ; expect ( Object . keys ( attributes [ _UNKNOWN_ ] ) ) . to . have . property ( 's' , Object . keys ( _UNKNOWN_ ) . length ) ; expect ( attributes ) . to . have . property ( _UNKNOWN_ ) . that . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { const child = Object . create ( target ) ; const attributes = getAttributes ( child ) ; expect ( Object . keys ( attributes ) ) . to . have . property ( 's' , 0 ) ; expect ( Object . keys ( attributes [ _UNKNOWN_ ] ) ) . to . have . property ( 's' , Object . keys ( _UNKNOWN_ ) . length ) ; expect ( attributes ) . to . have . property ( _UNKNOWN_ ) . that . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { const child = Object . create ( target ) ; const _UNKNOWN_ = { primaryKey : true } ; _UNKNOWN_ ( child , _UNKNOWN_ , _UNKNOWN_ ) ; const attributes = getAttributes ( child ) ; expect ( Object . keys ( attributes ) ) . to . have . property ( 's' , 0 ) ; expect ( Object . keys ( attributes [ _UNKNOWN_ ] ) ) . to . have . property ( 's' , Object . keys ( _UNKNOWN_ ) . length + Object . keys ( _UNKNOWN_ ) . length ) ; expect ( attributes ) . to . have . property ( _UNKNOWN_ ) . that . _UNKNOWN_ ( { ... _UNKNOWN_ , ... _UNKNOWN_ } ) ; const _UNKNOWN_ = getAttributes ( target ) ; expect ( Object . keys ( _UNKNOWN_ ) ) . to . have . property ( 's' , 0 ) ; expect ( Object . keys ( _UNKNOWN_ [ _UNKNOWN_ ] ) ) . to . have . property ( 's' , Object . keys ( _UNKNOWN_ ) . length ) ; expect ( _UNKNOWN_ ) . to . have . property ( _UNKNOWN_ ) . that . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $void$ O $void$ O $any$ O $void$ O $void$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O $complex$ O O O O $any$ O $any$ O O O O O O O O O $complex$ O O O O $any$ O $any$ O O O O O O O O $void$ O O O O $any$ O O O O O O O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O $void$ O O O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O O ${}$ O O O O O $complex$ O O $complex$ O O $boolean$ O O O O $complex$ O O $any$ O $any$ O $any$ O O O $void$ O ${}$ O $complex$ O O $any$ O O O O O O O O $any$ O $any$ O ${}$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $complex$ O O O O O O O O $any$ O O O O O O O O ${}$ O O O O O O O O O O $complex$ O O $boolean$ O O O O $void$ O ${}$ O O O O O O O $void$ O ${}$ O O O $complex$ O O $any$ O O O O O O O O $any$ O $any$ O ${}$ O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $ObjectConstructor$ O $complex$ O $complex$ O O $number$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O O O O O $any$ O O O O O O O O $any$ O $ObjectConstructor$ O $complex$ O ${}$ O O O $any$ O $any$ O $any$ O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $ObjectConstructor$ O $complex$ O $complex$ O O $number$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O O O O O $any$ O O O O O O O O $any$ O $ObjectConstructor$ O $complex$ O ${}$ O O O $complex$ O O $boolean$ O O O O $void$ O $any$ O O O $complex$ O O O $any$ O $any$ O $any$ O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $ObjectConstructor$ O $complex$ O $complex$ O O $number$ O $ObjectConstructor$ O $complex$ O $complex$ O O $number$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $complex$ O O $complex$ O O O O $any$ O $any$ O ${}$ O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $ObjectConstructor$ O $complex$ O $complex$ O O $number$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O O O O O O O O O O O O
<s> import { expect , use } from 's' ; import * as chaiAsPromised from 's' ; import { _UNKNOWN_ } from 's' ; import { Model , Table , Column , DataType } from "s" ; import { _UNKNOWN_ } from "s" ; import { User } from "s" ; import { getOptions , getAttributes } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import * as _ from 's' ; use ( chaiAsPromised ) ; describe ( 's' , ( ) => { const sequelize = _UNKNOWN_ ( ) ; const _UNKNOWN_ = { id : { primaryKey : true , _UNKNOWN_ : true , type : DataType . INTEGER } , 0 : { type : DataType . UUID , defaultValue : DataType . 0 } , 0 : { type : DataType . UUID , unique : true , defaultValue : DataType . 0 } , username : { type : DataType . STRING } , 0 : { type : DataType . STRING ( 0 ) } , _UNKNOWN_ : { type : DataType . INTEGER } , _UNKNOWN_ : { type : DataType . INTEGER } , isAdmin : { type : DataType . BOOLEAN } , _UNKNOWN_ : { type : DataType . BOOLEAN , defaultValue : false , allowNull : false } , _UNKNOWN_ : { type : DataType . _UNKNOWN_ , defaultValue : DataType . NOW } , _UNKNOWN_ : { type : DataType . _UNKNOWN_ } , _UNKNOWN_ : { allowNull : true , type : DataType . _UNKNOWN_ } , name : { type : DataType . STRING } , _UNKNOWN_ : { type : DataType . _UNKNOWN_ } , email : { type : DataType . STRING } } ; beforeEach ( ( ) => sequelize . sync ( { force : true } ) ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const _UNKNOWN_ = getOptions ( User . prototype ) ; expect ( _UNKNOWN_ ) . not . to . be . undefined ; const _UNKNOWN_ = getOptions ( _UNKNOWN_ . prototype ) ; expect ( _UNKNOWN_ ) . not . to . be . undefined ; } ) ; it ( 's' , ( ) => { const user = new User ( ) ; const _UNKNOWN_ = getOptions ( user ) ; expect ( _UNKNOWN_ ) . not . to . be . undefined ; const _UNKNOWN_ = new _UNKNOWN_ ( ) ; const _UNKNOWN_ = getOptions ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ ) . not . to . be . undefined ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = getOptions ( User . prototype ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' , true ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = getOptions ( _UNKNOWN_ . prototype ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' , _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = getOptions ( User . prototype ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' , User ) ; const _UNKNOWN_ = getOptions ( _UNKNOWN_ . prototype ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' , _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = getOptions ( User . prototype ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' , User . prototype ) ; const _UNKNOWN_ = getOptions ( _UNKNOWN_ . prototype ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' , _UNKNOWN_ . prototype ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const attributes = getAttributes ( User . prototype ) ; expect ( attributes ) . not . to . be . undefined ; } ) ; it ( 's' , ( ) => { const user = new User ( ) ; const attributes = getAttributes ( user ) ; expect ( attributes ) . not . to . be . undefined ; } ) ; it ( 's' , ( ) => { const attributes = getAttributes ( User . prototype ) ; Object . keys ( _UNKNOWN_ ) . forEach ( key => { expect ( attributes ) . to . have . property ( key ) ; Object . keys ( _UNKNOWN_ [ key ] ) . forEach ( _UNKNOWN_ => { try { expect ( attributes [ key ] ) . to . have . property ( _UNKNOWN_ ) . that . eql ( _UNKNOWN_ [ key ] [ _UNKNOWN_ ] ) ; } catch ( e ) { e . message += `template` ; throw e ; } } ) ; } ) ; } ) ; } ) ; describe ( 's' , ( ) => { const _UNKNOWN_ = User [ 's' ] ; it ( 's' , ( ) => { Object . keys ( _UNKNOWN_ ) . forEach ( key => { expect ( _UNKNOWN_ ) . to . have . property ( key ) ; } ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ ) . not . to . have . property ( 's' ) ; expect ( _UNKNOWN_ ) . not . to . have . property ( 's' ) ; expect ( _UNKNOWN_ ) . not . to . have . property ( 's' ) ; } ) ; it ( 's' , ( ) => { const 0 = _UNKNOWN_ . 0 ; expect ( 0 ) . to . have . property ( 's' ) ; expect ( 0 . type ) . to . be . an . instanceOf ( DataType . UUID ) ; expect ( 0 ) . to . have . property ( 's' ) ; expect ( 0 . defaultValue ) . to . be . an . instanceof ( DataType . 0 ) ; const 0 = _UNKNOWN_ . 0 ; expect ( 0 ) . to . have . property ( 's' ) ; expect ( 0 . type ) . to . be . an . instanceOf ( DataType . UUID ) ; expect ( 0 ) . to . have . property ( 's' ) ; expect ( 0 . defaultValue ) . to . be . an . instanceof ( DataType . 0 ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const seq = _UNKNOWN_ ( false ) ; @ Table class _UNKNOWN_ extends Model < _UNKNOWN_ > { @ Column ( DataType . STRING ( 0 ) ) _UNKNOWN_ : string ; @ Column ( DataType . _UNKNOWN_ ( 0 ) ) key : string ; @ Column ( DataType . INTEGER ( 0 ) ) num : number ; } seq . _UNKNOWN_ ( [ _UNKNOWN_ ] ) ; return _UNKNOWN_ . sync ( { force : true , logging : _ . after ( 0 , _ . once ( ( sql ) => { expect ( sql ) . to . match ( "s" ) ; } ) ) } ) ; } ) ; } ) ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { @ Table class User extends Model < User > { @ Column get name ( ) : string { return 's' + this . _UNKNOWN_ ( 's' ) ; } set name ( value ) { this . _UNKNOWN_ ( 's' , value ) ; } } sequelize . _UNKNOWN_ ( [ User ] ) ; it ( 's' , ( ) => { const user = new User ( { } ) ; user . name = 's' ; expect ( user . name ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { const user = new User ( { } ) ; user . name = 's' ; return user . save ( ) . then ( ( ) => User . _UNKNOWN_ ( user . id ) ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) ) . to . equal ( 's' ) ; } ) ; } ) ; } ) ; describe ( 's' , ( ) => { @ Table class User extends Model < User > { @ Column get name ( ) : string { return this . _UNKNOWN_ ( 's' ) ; } set name ( value ) { this . _UNKNOWN_ ( 's' , value . toUpperCase ( ) ) ; } } sequelize . _UNKNOWN_ ( [ User ] ) ; it ( 's' , ( ) => { const name = 's' ; const user = new User ( { } ) ; user . name = name ; expect ( user . name ) . to . equal ( name . toUpperCase ( ) ) ; } ) ; it ( 's' , ( ) => { const name = 's' ; const user = new User ( { } ) ; user . name = name ; return user . save ( ) . then ( ( ) => User . _UNKNOWN_ ( user . id ) ) . then ( _UNKNOWN_ => { expect ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) ) . to . equal ( name . toUpperCase ( ) ) ; } ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $complex$ O $complex$ O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O O O O O O $any$ O $complex$ O O O O $any$ O O $complex$ O O $boolean$ O O O $boolean$ O O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $boolean$ O O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $boolean$ O O O $boolean$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $boolean$ O O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $User$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $User$ O O $any$ O O O O $any$ O $any$ O $User$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $User$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $User$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $User$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $User$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $User$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $User$ O O $any$ O O O O $any$ O $any$ O $User$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $User$ O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O $string$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O $ObjectConstructor$ O $complex$ O $any$ O $string$ O O O $void$ O $string$ O O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O $string$ O O $string$ O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O $string$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $complex$ O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O $any$ O $any$ O O O O $string$ O O O O $complex$ O $any$ O $any$ O O O O $string$ O O O O $complex$ O $any$ O $any$ O O O O $number$ O O O O $any$ O $complex$ O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O $string$ O O O O O O O O O O $any$ O O O O O O $string$ O $string$ O O O O $void$ O O O $string$ O O O O $any$ O $complex$ O O $any$ O O O $any$ O O O O O O O O $User$ O O $any$ O O O O O $User$ O $string$ O O O $any$ O $User$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $User$ O O $any$ O O O O O $User$ O $string$ O O O O $User$ O $any$ O O O $any$ O O O O $any$ O $any$ O $User$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O $string$ O O O O O O O O $any$ O O O O O O $string$ O $string$ O O O O $void$ O O O $string$ O $string$ O O O O O O $any$ O $complex$ O O $any$ O O O $any$ O O O O O O O O O O O O O $User$ O O $any$ O O O O O $User$ O $string$ O O O $any$ O $User$ O $string$ O O $any$ O $any$ O O O $string$ O O O O O O O $any$ O O O O O O O O O O O O O $User$ O O $any$ O O O O O $User$ O $string$ O O O O $User$ O $any$ O O O $any$ O O O O $any$ O $any$ O $User$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $string$ O O O O O O O O O O O O O O O O O O O O
<s> import { expect , use } from 's' ; import { readFileSync , readdirSync , statSync } from 's' ; import * as chaiAsPromised from 's' ; import { 0 } from "s" ; use ( chaiAsPromised ) ; describe ( 's' , ( ) => { const 0 = [ 's' , 's' , ] ; ( function run ( path ) : void { readdirSync ( path ) . forEach ( name => { const targetPath = path + 's' + name ; if ( statSync ( targetPath ) . isDirectory ( ) ) { run ( targetPath ) ; } else if ( name . slice ( - 0 ) === 's' ) { const parentDir = path . split ( 's' ) . pop ( ) ; const target = parentDir + 's' + name ; const 0 = 0 . indexOf ( target ) !== - 0 ; describe ( target , ( ) => { it ( `template` , ( ) => { const content = readFileSync ( targetPath ) . toString ( ) ; try { expect ( 0 ( content ) ) . to . be [ 0 . toString ( ) ] ; } catch ( e ) { e . message = e . message + 's' + content + 's' ; throw e ; } } ) ; } ) ; } } ) ; } ) ( __dirname + 's' ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $boolean$ O O O O $any$ O $any$ O O $any$ O O O O O O O O $string[]$ O O O O O O O O O O $void$ O $string$ O O O O $any$ O $string$ O O $any$ O $any$ O O O $string$ O $string$ O O O $any$ O O O $any$ O $string$ O O $any$ O O O O $void$ O $string$ O O O O O O $any$ O $any$ O O O O O O O O O $string$ O $string$ O $complex$ O O O O $string$ O O O O $string$ O $string$ O O O $any$ O O $boolean$ O $string[]$ O $number$ O $string$ O O O O O $any$ O $string$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $string$ O O $any$ O O O O O $any$ O $boolean$ O $any$ O O O $any$ O $any$ O $boolean$ O $string$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O O
<s> import { expect } from 's' ; import { unique } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { describe ( 's' , ( ) => { const _UNKNOWN_ = [ 0 , 's' , 's' , 0 , 's' , 's' , 0 , 's' , 's' , 0 , 0 , 's' , 's' ] ; it ( 's' , ( ) => { expect ( ( ) => unique ( _UNKNOWN_ ) ) . not . to . throw ( ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = unique ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ ) . to . have . property ( 's' , 0 ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $T[]$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O $T[]$ O $complex$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $complex$ O $T[]$ O $complex$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O
<s> import { expect } from 's' ; import { DataType } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { Object . keys ( DataType ) . forEach ( key => { if ( key . toUpperCase ( ) === key ) { expect ( _UNKNOWN_ ( DataType [ key ] ) ) . to . be . true ; } } ) ; expect ( _UNKNOWN_ ( DataType . STRING ( 0 ) ) ) . to . be . true ; expect ( _UNKNOWN_ ( DataType . ENUM ( 's' , 's' ) ) ) . to . be . true ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ ( 's' ) ) . to . be . false ; expect ( _UNKNOWN_ ( function ( ) : void { } ) ) . to . be . false ; expect ( _UNKNOWN_ ( ( ) => null ) ) . to . be . false ; expect ( _UNKNOWN_ ( { } ) ) . to . be . false ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( _UNKNOWN_ ( Number ) ) . to . equal ( DataType . INTEGER ) ; expect ( _UNKNOWN_ ( Boolean ) ) . to . equal ( DataType . BOOLEAN ) ; expect ( _UNKNOWN_ ( Date ) ) . to . equal ( DataType . _UNKNOWN_ ) ; expect ( _UNKNOWN_ ( String ) ) . to . equal ( DataType . STRING ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ ( 's' ) ) . to . be . undefined ; expect ( _UNKNOWN_ ( function ( ) : void { } ) ) . to . be . undefined ; expect ( _UNKNOWN_ ( ( ) => null ) ) . to . be . undefined ; expect ( _UNKNOWN_ ( { } ) ) . to . be . undefined ; expect ( _UNKNOWN_ ( class _UNKNOWN_ { } ) ) . to . be . undefined ; } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O $string$ O O O O $string$ O $string$ O O O $string$ O O $any$ O $boolean$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $boolean$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $boolean$ O O O O O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $NumberConstructor$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $BooleanConstructor$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $DateConstructor$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $StringConstructor$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O
<s> import { expect } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { describe ( 's' , ( ) => { const _UNKNOWN_ = { } ; const _UNKNOWN_ = { f : _UNKNOWN_ } ; const _UNKNOWN_ = { } ; const 0 = { a : _UNKNOWN_ , b : _UNKNOWN_ , c : 0 , d : 's' , _UNKNOWN_ : 's' , regex : "s" , notNull : null } ; const 0 = { e : 's' , g : ( ) => null , arr : [ { h : 0 } , { } , 's' ] , _UNKNOWN_ : 's' , nullable : null , notNull : 's' } ; const _UNKNOWN_ = [ ] . concat ( Object . keys ( 0 ) , Object . keys ( 0 ) ) ; it ( 's' , ( ) => { const copy = _UNKNOWN_ ( { } , 0 , 0 ) ; expect ( copy ) . not . to . be . undefined ; } ) ; it ( 's' , ( ) => { const copy = _UNKNOWN_ ( { } , 0 , 0 ) ; _UNKNOWN_ . forEach ( key => expect ( copy ) . to . have . property ( key ) ) ; } ) ; it ( 's' , ( ) => { const copy = _UNKNOWN_ ( { } , 0 , 0 ) ; expect ( copy ) . to . have . property ( 's' , 's' ) ; } ) ; it ( 's' , ( ) => { const copy = _UNKNOWN_ ( { } , 0 , 0 ) ; _UNKNOWN_ . forEach ( key => { if ( typeof copy [ key ] !== 's' ) { expect ( copy [ key ] ) . to . equal ( 0 [ key ] || 0 [ key ] ) ; } } ) ; } ) ; it ( 's' , ( ) => { const copy = _UNKNOWN_ ( { } , 0 , 0 ) ; _UNKNOWN_ . forEach ( key => { if ( typeof copy [ key ] === 's' && copy [ key ] !== null ) { expect ( copy [ key ] ) . not . to . equal ( 0 [ key ] || 0 [ key ] ) ; expect ( copy [ key ] ) . to . eql ( 0 [ key ] || 0 [ key ] ) ; } } ) ; } ) ; it ( 's' , ( ) => { const copy = _UNKNOWN_ ( { } , 0 , 0 ) ; expect ( copy . a ) . to . have . property ( 's' ) ; expect ( copy . a . f ) . to . not . equal ( 0 . a . f ) ; expect ( copy . a . f ) . to . eql ( 0 . a . f ) ; } ) ; it ( 's' , ( ) => { const copy = _UNKNOWN_ ( { } , 0 , 0 ) ; expect ( copy . arr ) . to . be . an ( 's' ) ; copy . arr . forEach ( ( value , index ) => { const isObject = typeof value === 's' ; if ( isObject ) { expect ( value ) . not . to . equal ( 0 . arr [ index ] ) ; expect ( value ) . to . eql ( 0 . arr [ index ] ) ; } else { expect ( value ) . to . equal ( 0 . arr [ index ] ) ; } } ) ; } ) ; it ( 's' , ( ) => { const copy = _UNKNOWN_ ( { } , 0 , 0 ) ; expect ( copy . nullable ) . to . equals ( null ) ; expect ( copy . notNull ) . to . not . equals ( null ) ; } ) ; it ( 's' , ( ) => { class Test { _UNKNOWN_ ( ) { } } const copy = _UNKNOWN_ ( { } , { test : new Test ( ) } ) ; expect ( copy . test ) . to . have . property ( 's' ) . that . is . a ( 's' ) ; } ) ; if ( Object . _UNKNOWN_ ) { it ( 's' , ( ) => { const symbol = Symbol ( 's' ) ; const value = 's' ; const copy = _UNKNOWN_ ( { } , { [ symbol ] : value } ) ; expect ( copy [ symbol ] ) . to . equal ( value ) ; } ) ; } } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O ${}$ O O O O O $complex$ O O ${}$ O ${}$ O O O ${}$ O O O O O $complex$ O O $complex$ O $complex$ O ${}$ O ${}$ O $number$ O O O $string$ O O O $string$ O O O $RegExp$ O O O $null$ O O O O O $complex$ O O $string$ O O O $any$ O O O O O O $complex$ O O O $number$ O O O O O O O O O O $string$ O O O $null$ O O O $string$ O O O O O $any[]$ O O O O $complex$ O $ObjectConstructor$ O $complex$ O $complex$ O O $ObjectConstructor$ O $complex$ O $complex$ O O O $any$ O O O O O O O O $complex$ O O O O O O $complex$ O $complex$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $complex$ O O O O O O $complex$ O $complex$ O O $any[]$ O $void$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $complex$ O O O O O O $complex$ O $complex$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O O $complex$ O O O O O O $complex$ O $complex$ O O $any[]$ O $void$ O $any$ O O O O O $complex$ O $any$ O O O O O $any$ O $complex$ O $any$ O O O $any$ O $any$ O $complex$ O $any$ O O $complex$ O $any$ O O O O O O O O O O $any$ O O O O O O O O $complex$ O O O O O O $complex$ O $complex$ O O $any[]$ O $void$ O $any$ O O O O O $complex$ O $any$ O O O O $complex$ O $any$ O O O O O $any$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O $complex$ O $any$ O O $complex$ O $any$ O O O $any$ O $complex$ O $any$ O O O $any$ O $any$ O $complex$ O $any$ O O $complex$ O $any$ O O O O O O O O O O $any$ O O O O O O O O $complex$ O O O O O O $complex$ O $complex$ O O $any$ O $complex$ O $complex$ O O $any$ O $any$ O $any$ O O O O $any$ O $complex$ O $complex$ O ${}$ O O $any$ O $any$ O $any$ O $complex$ O $complex$ O ${}$ O O $any$ O $complex$ O $complex$ O ${}$ O O $any$ O $any$ O $complex$ O $complex$ O ${}$ O O O O O $any$ O O O O O O O O $complex$ O O O O O O $complex$ O $complex$ O O $any$ O $complex$ O $complex$ O O $any$ O $any$ O $any$ O O O O $complex$ O $complex$ O $void$ O O $complex$ O $number$ O O O O $boolean$ O O $complex$ O O O O O $boolean$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O $complex$ O $complex$ O $number$ O O O $any$ O $complex$ O O $any$ O $any$ O $complex$ O $complex$ O $number$ O O O O O O $any$ O $complex$ O O $any$ O $any$ O $complex$ O $complex$ O $number$ O O O O O O O O O O $any$ O O O O O O O O $complex$ O O O O O O $complex$ O $complex$ O O $any$ O $complex$ O $any$ O O $any$ O $any$ O O O O $any$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O $complex$ O O O O O O O $Test$ O O $any$ O O O O O $any$ O $complex$ O $Test$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O $ObjectConstructor$ O $any$ O O $any$ O O O O O O O O $complex$ O $SymbolConstructor$ O O O O O O O O O O $complex$ O O O O O O O O $complex$ O O O O O O $any$ O $complex$ O $complex$ O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O
<s> import { expect } from 's' ; import { capitalize } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { const value = 's' ; expect ( ( ) => capitalize ( value ) ) . not . to . throw ( ) ; } ) ; it ( 's' , ( ) => { const value = 's' ; expect ( capitalize ( value ) ) . to . equal ( 's' ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $string$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O $any$ O O O O $string$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O O O O $any$ O $string$ O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O
<s> import { expect } from 's' ; import { version , majorVersion } from "s" ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( version ) . to . be . a ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( majorVersion ) . to . be . a ( 's' ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O $number$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $number$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O
<s> import { expect , use } from 's' ; import * as chaiAsPromised from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , MAX , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { majorVersion } from "s" ; import { Is } from "s" ; import { Model } from "s" ; import { Table } from "s" ; import { Column } from "s" ; import { Length } from "s" ; import { _UNKNOWN_ } from "s" ; import { Validator } from 's' ; use ( chaiAsPromised ) ; describe ( 's' , ( ) => { const sequelize = _UNKNOWN_ ( ) ; beforeEach ( ( ) => sequelize . sync ( { force : true } ) ) ; describe ( `template` , ( ) => { const _UNKNOWN_ = _UNKNOWN_ [ 's' ] ; const _UNKNOWN_ : { [ key ] : _UNKNOWN_ } = { id : { _UNKNOWN_ : _UNKNOWN_ } , key : { equals : _UNKNOWN_ } , _UNKNOWN_ : { contains : _UNKNOWN_ } , _UNKNOWN_ : { len : [ _UNKNOWN_ . min , _UNKNOWN_ . max ] } , _UNKNOWN_ : { _UNKNOWN_ : true } , primaryColor : { _UNKNOWN_ : _UNKNOWN_ } , _UNKNOWN_ : { _UNKNOWN_ : _UNKNOWN_ } , _UNKNOWN_ : { is : _UNKNOWN_ } , _UNKNOWN_ : { isDate : true , isAfter : _UNKNOWN_ , isBefore : _UNKNOWN_ , } , dummy : { _UNKNOWN_ : true , _UNKNOWN_ : true , _UNKNOWN_ : true , isEmail : true , _UNKNOWN_ : true , _UNKNOWN_ : true , isInt : true , _UNKNOWN_ : true , 0 : true , 0 : true , _UNKNOWN_ : true , _UNKNOWN_ : true , notNull : true , max : MAX , min : _UNKNOWN_ , not : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , isArray : true , } } ; it ( `template` , ( ) => { Object . keys ( _UNKNOWN_ ) . forEach ( key => { expect ( _UNKNOWN_ [ key ] ) . to . have . property ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ [ key ] ; Object . keys ( _UNKNOWN_ ) . forEach ( _UNKNOWN_ => { expect ( _UNKNOWN_ [ key ] . validate ) . to . have . property ( _UNKNOWN_ ) . that . _UNKNOWN_ ( _UNKNOWN_ [ _UNKNOWN_ ] ) ; } ) ; } ) ; } ) ; } ) ; describe ( 's' , ( ) => { const data : { [ key ] : { valid : any [ ] ; invalid : any [ ] } } = { id : { valid : [ 's' , null , undefined ] , invalid : [ 's' , 's' , 0 ] , } , key : { valid : [ _UNKNOWN_ , null , undefined ] , invalid : [ 's' , 's' , 's' , 0 ] , } , _UNKNOWN_ : { valid : [ `template` , `template` , `template` , `template` ] , invalid : [ 's' , 's' , 's' , 0 ] , } , _UNKNOWN_ : { valid : [ 's' , 's' , 's' , null , undefined ] , invalid : [ 's' , 's' , 's' , 0 ] , } , _UNKNOWN_ : { valid : [ 's' , 's' , null , undefined ] , invalid : [ 's' , 's' , 's' , 0 ] , } , primaryColor : { valid : [ 's' , 's' , null , undefined ] , invalid : [ 's' , 's' , 's' , 0 ] , } , _UNKNOWN_ : { valid : [ 's' , 's' , null , undefined ] , invalid : [ 's' , 's' , 's' , 0 ] , } , _UNKNOWN_ : { valid : [ 's' , 's' , null , undefined ] , invalid : [ 's' , 's' , 's' , 0 ] , } , _UNKNOWN_ : { valid : [ new Date ( 0 , 0 , 0 ) , null , undefined ] , invalid : [ 's' , 's' , 's' , 0 , new Date ( 0 , 0 , 0 ) ] , } } ; const _UNKNOWN_ < Promise < any > > = [ ] ; const _UNKNOWN_ < Promise < any > > = [ ] ; Object . keys ( data ) . forEach ( key => { const valid = data [ key ] . valid ; const invalid = data [ key ] . invalid ; _UNKNOWN_ . push ( Promise . all ( valid . map ( value => { const _UNKNOWN_ = new _UNKNOWN_ ( { [ key ] : value } ) ; if ( majorVersion === 0 ) { return _UNKNOWN_ . validate ( ) . then ( err => expect ( err ) . to . be . null ) ; } else if ( majorVersion === 0 ) { return expect ( _UNKNOWN_ . validate ( ) ) . to . be . fulfilled ; } } ) ) ) ; _UNKNOWN_ . push ( Promise . all ( invalid . map ( value => { const _UNKNOWN_ = new _UNKNOWN_ ( { [ key ] : value } ) ; if ( majorVersion === 0 ) { return _UNKNOWN_ . validate ( ) . then ( err => expect ( err ) . to . be . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( _UNKNOWN_ . validate ( ) ) . to . be . rejected ; } } ) ) ) ; } ) ; it ( `template` , ( ) => Promise . all ( _UNKNOWN_ ) ) ; it ( `template` , ( ) => Promise . all ( _UNKNOWN_ ) ) ; } ) ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( ( ) => Is ( ( ) => null ) ) . to . throw ( "s" ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { @ Table class User extends Model < User > { @ Length ( { min : 0 , max : 0 } ) @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . not . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . not . rejected ; } } ) ; it ( 's' , ( ) => { @ Table class User extends Model < User > { @ Length ( { min : 0 , max : 0 } ) @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . rejected ; } } ) ; it ( 's' , ( ) => { @ Table class User extends Model < User > { @ Length ( { min : 0 , max : 0 } ) @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . rejected ; } } ) ; it ( 's' , ( ) => { @ Table class User extends Model < User > { @ Length ( { max : 0 } ) @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . not . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . not . rejected ; } } ) ; it ( 's' , ( ) => { @ Table class User extends Model < User > { @ Length ( { max : 0 } ) @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . rejected ; } } ) ; it ( 's' , ( ) => { @ Table class User extends Model < User > { @ Length ( { min : 0 } ) @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . not . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . not . rejected ; } } ) ; it ( 's' , ( ) => { @ Table class User extends Model < User > { @ Length ( { min : 0 } ) @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . rejected ; } } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { @ Table class User extends Model < User > { @ _UNKNOWN_ @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . not . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . not . rejected ; } } ) ; it ( 's' , ( ) => { @ Table class User extends Model < User > { @ _UNKNOWN_ @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . rejected ; } } ) ; it ( 's' , ( ) => { @ Table class User extends Model < User > { @ _UNKNOWN_ ( { msg : 's' } ) @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . not . an ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . not . rejected ; } } ) ; it ( 's' , ( ) => { @ Table class User extends Model < User > { @ _UNKNOWN_ ( { msg : 's' } ) @ Column name : string ; } const _UNKNOWN_ = _UNKNOWN_ ( false ) ; _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err . errors [ 0 ] . message ) . to . eq ( 's' ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . rejected ; } } ) ; } ) ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { const _UNKNOWN_ = 's' ; const ERROR_MESSAGE = `template` ; const _UNKNOWN_ = _UNKNOWN_ ( { _UNKNOWN_ : [ ] } ) ; @ Table class User extends Model < User > { @ Column name : string ; @ Validator _UNKNOWN_ ( ) { if ( this . name !== _UNKNOWN_ ) { throw new Error ( ERROR_MESSAGE ) ; } } } _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; it ( 's' , ( ) => { const user = new User ( { name : 's' } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err . errors [ 0 ] . message ) . to . eq ( ERROR_MESSAGE ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . rejected ; } } ) ; it ( 's' , ( ) => { const user = new User ( { name : _UNKNOWN_ } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err ) . to . be . null ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . fulfilled ; } } ) ; } ) ; describe ( 's' , ( ) => { const _UNKNOWN_ = 's' ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = _UNKNOWN_ ( { _UNKNOWN_ : [ ] } ) ; @ Table class User extends Model < User > { @ Column name : string ; @ Column age : number ; @ Validator _UNKNOWN_ ( ) { if ( this . name !== _UNKNOWN_ ) { throw new Error ( _UNKNOWN_ ) ; } } @ Validator _UNKNOWN_ ( ) { if ( this . age !== _UNKNOWN_ ) { throw new Error ( _UNKNOWN_ ) ; } } } _UNKNOWN_ . _UNKNOWN_ ( [ User ] ) ; it ( 's' , ( ) => { const { validate } = Reflect . getMetadata ( 's' , User . prototype ) ; expect ( validate ) . to . have . property ( 's' ) ; expect ( validate ) . to . have . property ( 's' ) ; } ) ; it ( 's' , ( ) => { const user = new User ( { name : 's' , age : _UNKNOWN_ } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err . errors [ 0 ] . message ) . to . eq ( _UNKNOWN_ ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . rejectedWith ( _UNKNOWN_ ) ; } } ) ; it ( 's' , ( ) => { const user = new User ( { name : _UNKNOWN_ , age : 0 } ) ; if ( majorVersion === 0 ) { return user . validate ( ) . then ( err => expect ( err . errors [ 0 ] . message ) . to . eq ( _UNKNOWN_ ) ) ; } else if ( majorVersion === 0 ) { return expect ( user . validate ( ) ) . to . be . rejectedWith ( _UNKNOWN_ ) ; } } ) ; } ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( ( ) => _UNKNOWN_ ( ) ) . not . to . throw ( ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $complex$ O $any$ O O O O O O $any$ O O O O O $complex$ O $void$ O $RegExp$ O O O O O O O O O O O $RegExp$ O $string[][]$ O O O O O O O O $number$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O O O O O O $Function$ O O O O O O $complex$ O O O O O O $MethodDecorator$ O O O O $any$ O $any$ O O $any$ O O O O O O O O $any$ O $complex$ O O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O $complex$ O O O $string$ O O $any$ O O O $complex$ O O $number$ O O O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O $complex$ O O $number[]$ O O $complex$ O $number$ O $complex$ O $number$ O O O $complex$ O O $boolean$ O O O O $complex$ O O $void$ O $void$ O O $complex$ O O $void$ O $void$ O O $complex$ O O $RegExp$ O $RegExp$ O O $complex$ O O $boolean$ O O O $string$ O O O $string$ O O O O O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $number$ O O O $number$ O O O $RegExp$ O $RegExp$ O $string[][]$ O $string[][]$ O $string[][]$ O $string[][]$ O $string$ O O O $boolean$ O O O O O O $any$ O O O O O O O $ObjectConstructor$ O $complex$ O $complex$ O O $void$ O $string$ O O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O $string$ O O $any$ O $any$ O $string$ O O $any$ O O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O $any$ O O O O O O O O $complex$ O O O $string$ O O O $any[]$ O O O O O $any[]$ O O O O O O O O $complex$ O O $string[]$ O O O O O O $undefined$ O O $complex$ O O O O O O O O O O O $complex$ O O $string[]$ O O O O O O $undefined$ O O $complex$ O O O O O O O O O O O O O $complex$ O O $string[]$ O O O O O O O O O O O $complex$ O O O O O O O O O O O O O $complex$ O O $string[]$ O O O O O O O O O O $undefined$ O O $complex$ O O O O O O O O O O O O O $complex$ O O $string[]$ O O O O O O O O $undefined$ O O $complex$ O O O O O O O O O O O O O $complex$ O O $string[]$ O O O O O O O O $undefined$ O O $complex$ O O O O O O O O O O O O O $complex$ O O $string[]$ O O O O O O O O $undefined$ O O $complex$ O O O O O O O O O O O O O $complex$ O O $string[]$ O O O O O O O O $undefined$ O O $complex$ O O O O O O O O O O O O O $complex$ O O $Date[]$ O O O $DateConstructor$ O O O O O O O O O O $undefined$ O O $complex$ O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O $Array$ O $PromiseConstructor$ O O O O O O O O O $Array$ O $PromiseConstructor$ O O O O O O O O $ObjectConstructor$ O $complex$ O $complex$ O O $void$ O $string$ O O O $any[]$ O $complex$ O $string$ O O $any[]$ O O $any[]$ O $complex$ O $string$ O O $any[]$ O $Promise<any>[]$ O $number$ O $PromiseConstructor$ O O O $any[]$ O $U[]$ O $any$ O O O $any$ O O $any$ O O O $string$ O O $any$ O O O O O $number$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $number$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $Promise<any>[]$ O $number$ O $PromiseConstructor$ O O O $any[]$ O $U[]$ O $any$ O O O $any$ O O $any$ O O O $string$ O O $any$ O O O O O $number$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O $PromiseConstructor$ O O O $Promise<any>[]$ O O O $any$ O O O O O O $PromiseConstructor$ O O O $Promise<any>[]$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O $complex$ O O O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $Function$ O O $number$ O O O $number$ O O O O O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $Function$ O O $number$ O O O $number$ O O O O O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $Function$ O O $number$ O O O $number$ O O O O O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $Function$ O O $number$ O O O O O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $Function$ O O $number$ O O O O O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $Function$ O O $number$ O O O O O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $Function$ O O $number$ O O O O O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O O O O O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O O O O O $complex$ $string$ O O O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $string$ O O O O $any$ O $complex$ O O $undefined[]$ O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $MethodDecorator$ $void$ O O O O O O O $string$ O O O O O O $ErrorConstructor$ O $string$ O O O O O $any$ O $complex$ O O $any$ O O O $any$ O O O O O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $string$ O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $User$ O O $any$ O O $string$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O $string$ O O O O O O O O O $string$ O O O O $any$ O $complex$ O O $undefined[]$ O O O O O O O $complex$ O $any$ O $any$ O $any$ O O O $complex$ $string$ O O O O $complex$ $number$ O O O O $MethodDecorator$ $void$ O O O O O O O $string$ O O O O O O $ErrorConstructor$ O $string$ O O O O O $MethodDecorator$ $void$ O O O O O O O $number$ O O O O O O $ErrorConstructor$ O $string$ O O O O O $any$ O $complex$ O O $any$ O O O $any$ O O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $User$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $User$ O O $any$ O O $string$ O O O $number$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $string$ O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O O O O O O O O $User$ O O $any$ O O $string$ O O O $number$ O O O O O O O $number$ O O O O O $User$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $string$ O O O O O O O $number$ O O O O O $any$ O $User$ O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O
<s> import { Injectable } from 's' ; import { Observable } from 's' ; import { Subject } from 's' ; import { Request , Response , ResponseOptions } from 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import { Storage } from 's' ; export const MESSAGES = { 0 : 's' , 0 : 's' , 0 : 's' , 0 : 's' , 0 : 's' } ; export type _UNKNOWN_ < T > = ( ) => Promise < T > ; @ Injectable ( ) export class _UNKNOWN_ { private ttl : number = 0 * 0 ; private _UNKNOWN_ : boolean = true ; private _UNKNOWN_ : boolean = false ; private _UNKNOWN_ : Observable < boolean > ; private _UNKNOWN_ : boolean = true ; constructor ( private _UNKNOWN_ ) { try { this . _UNKNOWN_ ( ) ; _UNKNOWN_ . ready ( ) . then ( ( ) => { this . _UNKNOWN_ = true ; } ) ; } catch ( e ) { this . _UNKNOWN_ = false ; console . error ( MESSAGES [ 0 ] , e ) ; } } ready ( ) < any > { return this . _UNKNOWN_ . ready ( ) . then ( ( ) => Promise . resolve ( ) ) ; } _UNKNOWN_ ( enable = true ) { this . _UNKNOWN_ = enable ; } private _UNKNOWN_ ( ) < any > { return this . ready ( ) . then ( ( ) => this . _UNKNOWN_ . clear ( ) ) ; } _UNKNOWN_ ( ttl ) { return this . ttl = ttl ; } _UNKNOWN_ ( _UNKNOWN_ ) { this . _UNKNOWN_ = ! _UNKNOWN_ ; } private _UNKNOWN_ ( ) { this . _UNKNOWN_ = navigator . onLine ; const connect = Observable . fromEvent ( window , 's' ) . map ( ( ) => true ) , disconnect = Observable . fromEvent ( window , 's' ) . map ( ( ) => false ) ; this . _UNKNOWN_ = Observable . merge ( connect , disconnect ) . share ( ) ; this . _UNKNOWN_ . subscribe ( status => { this . _UNKNOWN_ = status ; } ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } isOnline ( ) { return this . _UNKNOWN_ ; } _UNKNOWN_ ( key , data , _UNKNOWN_ = 's' , ttl = this . ttl ) < any > { if ( ! this . _UNKNOWN_ ) { return Promise . reject ( MESSAGES [ 0 ] ) ; } const expires = new Date ( ) . getTime ( ) + ( ttl * 0 ) , type = _UNKNOWN_ . _UNKNOWN_ ( data ) ? 's' : typeof data , value = JSON . stringify ( data ) ; return this . _UNKNOWN_ . set ( key , { value , expires , type , _UNKNOWN_ } ) ; } removeItem ( key ) < any > { if ( ! this . _UNKNOWN_ ) { return Promise . reject ( MESSAGES [ 0 ] ) ; } return this . _UNKNOWN_ . remove ( key ) ; } _UNKNOWN_ ( key ) < any > { if ( ! this . _UNKNOWN_ ) { return Promise . reject ( MESSAGES [ 0 ] ) ; } return this . _UNKNOWN_ . get ( key ) . then ( data => { if ( ! data ) return Promise . reject ( 's' ) ; return data ; } ) . catch ( ( ) => Promise . reject ( MESSAGES [ 0 ] + key ) ) ; } getItem ( key ) < any > { if ( ! this . _UNKNOWN_ ) { return Promise . reject ( MESSAGES [ 0 ] ) ; } return this . _UNKNOWN_ ( key ) . then ( data => { if ( data . expires < new Date ( ) . getTime ( ) ) { if ( this . _UNKNOWN_ ) { return Promise . reject ( MESSAGES [ 0 ] + key ) ; } else if ( this . isOnline ( ) ) { return Promise . reject ( MESSAGES [ 0 ] + key ) ; } } return _UNKNOWN_ . _UNKNOWN_ ( data ) ; } ) ; } async _UNKNOWN_ < T > ( key , factory < T > , _UNKNOWN_ = 's' , ttl = this . ttl ) < T > { let val : T ; try { val = await this . getItem ( key ) ; } catch ( error ) { val = await factory ( ) ; await this . _UNKNOWN_ ( key , val ) ; } return val ; } static _UNKNOWN_ ( data ) { let _UNKNOWN_ = JSON . parse ( data . value ) ; if ( _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) { const requestOptions = new ResponseOptions ( { body : _UNKNOWN_ . _body , status : _UNKNOWN_ . status , headers : _UNKNOWN_ . headers , statusText : _UNKNOWN_ . statusText , type : _UNKNOWN_ . type , url : _UNKNOWN_ . url } ) ; return new Response ( requestOptions ) ; } else { return _UNKNOWN_ ; } } _UNKNOWN_ ( key , observable , _UNKNOWN_ ? , ttl ? ) < any > { if ( ! this . _UNKNOWN_ ) return observable ; observable = observable . share ( ) ; return Observable . fromPromise ( this . getItem ( key ) ) . catch ( ( e ) => { observable . subscribe ( res => this . _UNKNOWN_ ( key , res , _UNKNOWN_ , ttl ) , error => Observable . throw ( error ) ) ; return observable ; } ) ; } _UNKNOWN_ ( key , observable , _UNKNOWN_ ? , ttl = this . ttl , _UNKNOWN_ = 's' ) < any > { if ( ! this . _UNKNOWN_ ) return observable ; const _UNKNOWN_ = new Subject ( ) ; observable = observable . share ( ) ; const _UNKNOWN_ = ( ) => { observable . subscribe ( res => { this . _UNKNOWN_ ( key , res , _UNKNOWN_ , ttl ) ; _UNKNOWN_ . next ( res ) ; _UNKNOWN_ . complete ( ) ; } , ( err ) => { _UNKNOWN_ . error ( err ) ; } , ( ) => { _UNKNOWN_ . complete ( ) ; } ) ; } ; this . getItem ( key ) . then ( ( data ) => { _UNKNOWN_ . next ( data ) ; if ( _UNKNOWN_ === 's' ) { _UNKNOWN_ ( ) ; } } ) . catch ( ( e ) => { this . _UNKNOWN_ ( key ) . then ( res => { _UNKNOWN_ . next ( _UNKNOWN_ . _UNKNOWN_ ( res ) ) ; _UNKNOWN_ ( ) ; } ) . catch ( ( ) => _UNKNOWN_ ( ) ) ; } ) ; return _UNKNOWN_ . asObservable ( ) ; } clearAll ( ) < any > { if ( ! this . _UNKNOWN_ ) { return Promise . reject ( MESSAGES [ 0 ] ) ; } return this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( _UNKNOWN_ = false ) < any > { if ( ! this . _UNKNOWN_ ) { return Promise . reject ( MESSAGES [ 0 ] ) ; } if ( ! this . isOnline ( ) && ! _UNKNOWN_ ) { return Promise . reject ( MESSAGES [ 0 ] ) ; } let _UNKNOWN_ = new Date ( ) . getTime ( ) ; let promises : Promise < any > [ ] = [ ] ; this . _UNKNOWN_ . forEach ( ( val , key ) => { if ( val && val . expires < _UNKNOWN_ ) promises . push ( this . removeItem ( key ) ) ; } ) ; return Promise . all ( promises ) ; } async _UNKNOWN_ ( _UNKNOWN_ ) < any > { if ( ! this . _UNKNOWN_ ) { return Promise . reject ( MESSAGES [ 0 ] ) ; } let promises : Promise < any > [ ] = [ ] ; await this . _UNKNOWN_ . forEach ( ( val , key ) => { if ( val && val . _UNKNOWN_ === _UNKNOWN_ ) promises . push ( this . removeItem ( key ) ) ; } ) ; return Promise . all ( promises ) ; } static _UNKNOWN_ ( data ) { return ( data && ( data instanceof Request || ( typeof data === 's' && data . hasOwnProperty ( 's' ) && data . hasOwnProperty ( 's' ) && data . hasOwnProperty ( 's' ) && data . hasOwnProperty ( 's' ) && data . hasOwnProperty ( 's' ) && data . hasOwnProperty ( 's' ) ) ) ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O O O $PromiseConstructor$ O $any$ O O O $any$ O O O O $any$ O O $number$ O O O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O $boolean$ O O O O O O O O $Storage$ O O O O O O $void$ O O O $any$ O $any$ O O O $any$ O O O O O O O $boolean$ O O O O O O O O O $any$ O O O O $boolean$ O O O $Console$ O $void$ O O O O O O $any$ O O O O $Promise$ O O O O O O O O O $any$ O $any$ O O O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $void$ O $boolean$ O O O O O O $boolean$ O $boolean$ O O O $Promise$ O O O O O O O O O $Promise<any>$ O O O O O O O O O O $any$ O $any$ O O O O O $number$ O $number$ O O O O O $number$ O $number$ O O $void$ O $boolean$ O O O O $boolean$ O O $boolean$ O O O $void$ O O O O O $boolean$ O $Navigator$ O $boolean$ O O $any$ O $any$ O $any$ O $complex$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $complex$ O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $boolean$ O $any$ O O O O O $any$ O O O O O O $any$ O O $boolean$ O O O O O O $boolean$ O O $Promise$ O $string$ O $any$ O $string$ O O O $number$ O O O $number$ O O O O O O O O O O $boolean$ O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O O $number$ O O $DateConstructor$ O O O $number$ O O O O $number$ O O O O O O $any$ O $boolean$ O $any$ O O O O O $any$ O $string$ O $JSON$ O $complex$ O $any$ O O O O O $any$ O $any$ O $string$ O O $string$ O $number$ O $string$ O $string$ O O O O $Promise$ O $string$ O O O O O O O O O O $boolean$ O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O O O O $any$ O $any$ O $string$ O O O $Promise$ O $string$ O O O O O O O O O O $boolean$ O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O O O O O $any$ O O $PromiseConstructor$ O $Promise<T>$ O O O O O $any$ O O O O $any$ O O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O $string$ O O O O $Promise$ O $string$ O O O O O O O O O O $boolean$ O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O O O O $Promise<any>$ O $string$ O O O O $any$ O O O O $any$ O $any$ O O $DateConstructor$ O O O $number$ O O O O O O O O $boolean$ O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O $string$ O O O O O O O O $boolean$ O O O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O $string$ O O O O O $any$ O $any$ O $any$ O O O O O O O $Promise$ O $any$ O O $string$ O $any$ O $any$ O O $string$ O O O $number$ O O O $number$ O O $any$ O O O $T$ O $any$ O O O $T$ O O O O $Promise<any>$ O $string$ O O O O O $any$ O O $T$ O O $any$ O O O O O O $Promise<any>$ O $string$ O $T$ O O O O $T$ O O O $any$ O $any$ O O O $any$ O $JSON$ O $any$ O $any$ O $any$ O O O O $any$ O $boolean$ O $any$ O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O $Observable$ O $string$ O $any$ O $string$ $string$ O $number$ $number$ O O O O O O O O O O $boolean$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $Promise<any>$ O $string$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O $Promise<any>$ O $string$ O $any$ O $string$ O $number$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $Observable$ O $string$ O $any$ O $string$ $string$ O $number$ O O O $number$ O $string$ O O O O O O O O O O O O $boolean$ O O $any$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O $void$ O O O O O $any$ O $any$ O $any$ O O O O $Promise<any>$ O $string$ O $any$ O $string$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O O $Promise<any>$ O $string$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $string$ O O O O $void$ O O O O O O O $complex$ O O $any$ O O O O O $Promise<any>$ O $string$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $void$ O O O O O O $complex$ O O O O $void$ O O O O O O O O $any$ O $any$ O O O O $Promise$ O O O O O O O O O O O $boolean$ O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O O O O $Promise<any>$ O O O O $Promise$ O $boolean$ O O O O O O O O O O O O $boolean$ O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O O O O O O $boolean$ O O O O $boolean$ O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O O $number$ O O $DateConstructor$ O O O $number$ O O O O $Promise<any>[]$ O $PromiseConstructor$ O O O O O O O O O O O $any$ O $any$ O O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O $number$ O $Promise<any>[]$ O $number$ O O O $Promise<any>$ O $string$ O O O O O O O $PromiseConstructor$ O O O $Promise<any>[]$ O O O O $Promise$ O $string$ O O O O O O O O O O $boolean$ O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O O $Promise<any>[]$ O $PromiseConstructor$ O O O O O O O O O O O O $any$ O $any$ O O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O $Promise<any>[]$ O $number$ O O O $Promise<any>$ O $string$ O O O O O O O $PromiseConstructor$ O O O $Promise<any>[]$ O O O O $boolean$ O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O
<s> import { NgModule , ModuleWithProviders } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ . forRoot ( { name : 's' , _UNKNOWN_ : [ 's' , 's' , 's' ] } ) ] } ) export class _UNKNOWN_ { static forRoot ( ) { return { ngModule : _UNKNOWN_ , providers : [ _UNKNOWN_ ] } ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O O O O O O $any$ O O $ModuleWithProviders$ O O O O O $any$ O $any$ O $complex$ O O $any$ O O O O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import { _UNKNOWN_ , MESSAGES } from 's' ; import { TestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; import { Observable } from 's' ; import 's' ; import 's' ; import 's' ; import { Storage } from 's' ; TestBed . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; describe ( 's' , ( ) => { let service ; const ttl = 0 ; const key = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; const cacheValue = 's' ; const _UNKNOWN_ = 0 ; beforeAll ( function ( done ) { service = new _UNKNOWN_ ( new Storage ( { name : 's' , _UNKNOWN_ : [ 's' , 's' , 's' ] } ) ) ; service . ready ( ) . then ( done ) ; } ) ; it ( 's' , ( ) => expect ( service ) . toBeDefined ( ) ) ; it ( 's' , done => { service . _UNKNOWN_ ( key , cacheValue , _UNKNOWN_ , ttl ) . then ( ( ) => { expect ( true ) . toBeTruthy ( ) ; done ( ) ; } ) . catch ( ( e ) => { expect ( e ) . toBeUndefined ( ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { service . getItem ( key ) . then ( value => { expect ( value ) . toEqual ( cacheValue ) ; done ( ) ; } ) . catch ( ( e ) => { expect ( e ) . toBeUndefined ( ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { service . _UNKNOWN_ ( _UNKNOWN_ , ( ) => Promise . resolve ( 0 * 0 ) ) . then ( ( ) => { service . getItem ( _UNKNOWN_ ) . then ( value => { expect ( value ) . toEqual ( _UNKNOWN_ ) ; done ( ) ; } ) ; } ) . catch ( ( e ) => { expect ( e ) . toBeUndefined ( ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { let executed = false ; service . _UNKNOWN_ ( _UNKNOWN_ , ( ) => { executed = true ; return Promise . resolve ( 0 * 0 ) ; } ) . then ( ( ) => { service . getItem ( _UNKNOWN_ ) . then ( value => { expect ( value ) . toEqual ( _UNKNOWN_ ) ; expect ( executed ) . toBe ( false ) ; done ( ) ; } ) ; } ) . catch ( ( e ) => { expect ( e ) . toBeUndefined ( ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { setTimeout ( ( ) => { service . getItem ( key ) . then ( value => { expect ( false ) . toBeTruthy ( ) ; done ( ) ; } ) . catch ( ( e ) => { expect ( e ) . not . toBeUndefined ( ) ; done ( ) ; } ) ; } , ttl * 0 + 0 ) ; } ) ; it ( 's' , ( ) => { service . _UNKNOWN_ ( false ) ; expect ( ( < any > service ) . _UNKNOWN_ === false ) . toBeTruthy ( ) ; } ) ; it ( 's' , done => { expect ( ( < any > service ) . _UNKNOWN_ === false ) . toBeTruthy ( ) ; return service . getItem ( 's' ) . then ( ( res ) => { expect ( res ) . toBeUndefined ( ) ; done ( ) ; } ) . catch ( ( e ) => { expect ( e ) . toEqual ( MESSAGES [ 0 ] ) ; done ( ) ; } ) ; } ) ; it ( 's' , ( ) => { service . _UNKNOWN_ ( true ) ; expect ( ( < any > service ) . _UNKNOWN_ === true ) . toBeTruthy ( ) ; } ) ; afterAll ( function ( done ) { console . info ( 's' ) ; service . clearAll ( ) . then ( done ) . catch ( done ) ; } ) ; } ) ; describe ( 's' , ( ) => { const key = 's' ; let _UNKNOWN_ = { hello : 's' , world : "s" } ; let observable = Observable . of ( _UNKNOWN_ ) ; let service ; beforeAll ( done => { service = new _UNKNOWN_ ( new Storage ( { name : 's' , _UNKNOWN_ : [ 's' , 's' , 's' ] } ) ) ; service . ready ( ) . then ( done ) ; } ) ; beforeEach ( ( ) => { spyOn ( observable , 's' ) . and . callThrough ( ) ; } ) ; it ( 's' , ( ) => { expect ( service ) . toBeDefined ( ) ; } ) ; it ( 's' , ( done ) => { service . _UNKNOWN_ ( key , observable ) . subscribe ( res => { expect ( res ) . toBeDefined ( ) ; expect ( observable . subscribe ) . toHaveBeenCalled ( ) ; expect ( res ) . toEqual ( _UNKNOWN_ ) ; done ( ) ; } , err => { console . info ( 's' , err ) ; done ( err ) ; } ) ; } ) ; it ( 's' , done => { service . _UNKNOWN_ ( key , observable ) . subscribe ( res => { expect ( observable . subscribe ) . not . toHaveBeenCalled ( ) ; expect ( res ) . toEqual ( _UNKNOWN_ ) ; done ( ) ; } ) ; } ) ; afterAll ( done => { service . clearAll ( ) . then ( done ) . catch ( done ) ; } ) ; } ) ; describe ( 's' , ( ) => { const key = 's' ; let _UNKNOWN_ = { hello : 's' , world : "s" } ; let _UNKNOWN_ = Observable . throw ( _UNKNOWN_ ) ; let service ; beforeAll ( done => { service = new _UNKNOWN_ ( new Storage ( { name : 's' , _UNKNOWN_ : [ 's' , 's' , 's' ] } ) ) ; service . ready ( ) . then ( done ) ; } ) ; beforeEach ( ( ) => { spyOn ( _UNKNOWN_ , 's' ) . and . callThrough ( ) ; } ) ; it ( 's' , ( ) => { expect ( service ) . toBeDefined ( ) ; } ) ; it ( 's' , ( done ) => { service . _UNKNOWN_ ( key , _UNKNOWN_ ) . subscribe ( res => { expect ( true ) . toBeFalsy ( ) ; done ( ) ; } , err => { expect ( err ) . toBeDefined ( ) ; done ( err ) ; } ) ; } ) ; afterAll ( done => { service . clearAll ( ) . then ( done ) . catch ( done ) ; } ) ; } ) ; describe ( 's' , ( ) => { const ttl = 0 ; const key = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = { hello : 's' } ; const 0 = { hello : 's' } ; const observable = Observable . of ( _UNKNOWN_ ) ; const 0 = Observable . of ( 0 ) ; let service ; beforeAll ( done => { service = new _UNKNOWN_ ( new Storage ( { name : 's' , _UNKNOWN_ : [ 's' , 's' , 's' ] } ) ) ; service . ready ( ) . then ( done ) ; } ) ; beforeEach ( ( ) => { spyOn ( observable , 's' ) . and . callThrough ( ) ; spyOn ( 0 , 's' ) . and . callThrough ( ) ; } ) ; it ( 's' , ( ) => { expect ( service ) . toBeDefined ( ) ; } ) ; it ( 's' , ( done ) => { service . _UNKNOWN_ ( key , observable , _UNKNOWN_ , ttl ) . subscribe ( res => { expect ( res ) . toBeDefined ( ) ; expect ( observable . subscribe ) . toHaveBeenCalled ( ) ; expect ( res ) . toEqual ( _UNKNOWN_ ) ; done ( ) ; } , err => { done ( err ) ; } ) ; } ) ; it ( 's' , done => { service . _UNKNOWN_ ( key , 0 , _UNKNOWN_ , ttl ) . subscribe ( res => { expect ( 0 . subscribe ) . not . toHaveBeenCalled ( ) ; expect ( res ) . toEqual ( _UNKNOWN_ ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { service . _UNKNOWN_ ( key , 0 , _UNKNOWN_ , ttl , 's' ) . count ( ( ) => true ) . subscribe ( count => { expect ( 0 . subscribe ) . toHaveBeenCalled ( ) ; expect ( count ) . toEqual ( 0 ) ; done ( ) ; } , done , done ) ; } ) ; it ( 's' , done => { service . _UNKNOWN_ ( key , 0 , _UNKNOWN_ , ttl , 's' ) . subscribe ( res => { expect ( res ) . toEqual ( 0 ) ; done ( ) ; } , done , done ) ; } ) ; afterAll ( done => { service . clearAll ( ) . then ( done ) . catch ( done ) ; } ) ; } ) ; describe ( 's' , ( ) => { const ttl = 0 ; const key = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = { hello : 's' } ; const 0 = { hello : 's' } ; const observable = Observable . of ( _UNKNOWN_ ) ; const 0 = Observable . of ( 0 ) ; const _UNKNOWN_ = Observable . throw ( _UNKNOWN_ ) ; let service ; beforeAll ( done => { service = new _UNKNOWN_ ( new Storage ( { name : 's' , _UNKNOWN_ : [ 's' , 's' , 's' ] } ) ) ; service . ready ( ) . then ( done ) ; } ) ; beforeEach ( ( ) => { spyOn ( observable , 's' ) . and . callThrough ( ) ; spyOn ( 0 , 's' ) . and . callThrough ( ) ; } ) ; it ( 's' , ( ) => { expect ( service ) . toBeDefined ( ) ; } ) ; it ( 's' , ( done ) => { service . _UNKNOWN_ ( key , _UNKNOWN_ , _UNKNOWN_ , ttl ) . subscribe ( res => { expect ( true ) . toBeFalsy ( ) ; done ( ) ; } , err => { expect ( err ) . toBeDefined ( ) ; expect ( err ) . toEqual ( _UNKNOWN_ ) ; done ( err ) ; } , done ) ; } ) ; it ( 's' , ( done ) => { service . _UNKNOWN_ ( key , observable , _UNKNOWN_ , ttl ) . subscribe ( res => { expect ( res ) . toBeDefined ( ) ; expect ( observable . subscribe ) . toHaveBeenCalled ( ) ; expect ( res ) . toEqual ( _UNKNOWN_ ) ; done ( ) ; } , err => { done ( err ) ; } ) ; } ) ; it ( 's' , ( done ) => { service . _UNKNOWN_ ( key , _UNKNOWN_ , _UNKNOWN_ , ttl , 's' ) . subscribe ( res => { expect ( res ) . toEqual ( _UNKNOWN_ ) ; } , err => { expect ( err ) . toBeDefined ( ) ; expect ( err ) . toEqual ( _UNKNOWN_ ) ; done ( err ) ; } , done ) ; } ) ; afterAll ( done => { service . clearAll ( ) . then ( done ) . catch ( done ) ; } ) ; } ) ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O O O $any$ O $Promise<any>$ O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O $any$ O O $any$ O $Promise<any>$ O O O O O O O O O O O O O O O O $any$ O O O O $any$ O O O $any$ O O O O O O $complex$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O O O O O O O $any$ O O O $any$ O O $any$ O $Promise<any>$ O O O O O O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O $complex$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O O O O O O O $any$ O O O $any$ O O $any$ O $Promise<T>$ O O O O O O $PromiseConstructor$ O $complex$ O O O O O O O O O O O O O $any$ O $Promise<any>$ O O O O O O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O $complex$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $boolean$ O O O $any$ O $Promise<T>$ O O O O O O O $boolean$ O O O O $PromiseConstructor$ O $complex$ O O O O O O O O O O O O O O O $any$ O $Promise<any>$ O O O O O O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O $boolean$ O O $any$ O O O O $any$ O O O O O O O O O $complex$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O O O O O O O $any$ O O O $any$ O O $number$ O O O O O $any$ O $Promise<any>$ O O O O O O $any$ O O $any$ O O O O $any$ O O O $any$ O O O O O O $complex$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $void$ O O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O O O O O O $any$ O O O $any$ O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O O O O $any$ O $Promise<any>$ O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $complex$ O O $any$ O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O $void$ O O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O O O O O O $any$ O O O $any$ O O $Console$ O $void$ O O O O $any$ O $Promise<any>$ O O O O O $any$ O O $Promise<any>$ O $any$ O O O O O O O O $any$ O O O O O O O O $string$ O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O O O $any$ O $Promise<any>$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $string$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O $any$ O O $Console$ O $void$ O O O $any$ O O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O O $any$ O $any$ O $string$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O $any$ O O $any$ O $Promise<any>$ O O O O O $any$ O O $Promise<any>$ O $any$ O O O O O O O O $any$ O O O O O O O O $string$ O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O O O $any$ O $Promise<any>$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $string$ O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O O O $any$ O O O O O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $Promise<any>$ O O O O O $any$ O O $Promise<any>$ O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O $any$ O O $string$ O O O O O $any$ O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O O O $any$ O $Promise<any>$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $Promise<any>$ O O O O O $any$ O O $Promise<any>$ O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O $any$ O O $string$ O O O O O $any$ O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O O O $any$ O $Promise<any>$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O $any$ O O O O O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $any$ O $Promise<any>$ O O O O O $any$ O O $Promise<any>$ O $any$ O O O O O O O O O
<s> export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O
<s> const path = require ( 's' ) ; const merge = require ( 's' ) ; const common = require ( 's' ) ; const webpackConfig = merge ( common , { devtool : 's' } ) ; module . exports = ( config ) => { config . set ( { basePath : 's' , frameworks : [ 's' ] , client : { _UNKNOWN_ : false } , files : [ 's' ] , _UNKNOWN_ : { 's' : [ 's' , 's' ] } , mime : { 's' : [ 's' , 's' ] } , webpack : webpackConfig , _UNKNOWN_ : { _UNKNOWN_ : true } , _UNKNOWN_ : { stats : 's' } , _UNKNOWN_ : { 's' : { base : 's' , browserName : 's' } } , _UNKNOWN_ : { testName : 's' , _UNKNOWN_ : 0 , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : false , options : { 's' : 's' , 's' : 0 , 's' : 0 , 's' : 0 , } } , reporters : [ 's' , 's' ] , port : 0 , colors : true , logLevel : config . _UNKNOWN_ , _UNKNOWN_ : true , browsers : [ 's' ] , singleRun : false } ) ; if ( process . env . _UNKNOWN_ ) { var buildId = 's' + process . env . _UNKNOWN_ + 's' + process . env . _UNKNOWN_ + 's' ; config . _UNKNOWN_ . build = buildId ; config . _UNKNOWN_ . _UNKNOWN_ = process . env . _UNKNOWN_ ; config . browsers = Object . keys ( config . _UNKNOWN_ ) ; config . singleRun = true ; config . reporters = config . reporters . concat ( [ 's' ] ) ; config . transports = [ 's' ] ; } } </s>	O O $unknown$ O $complex$ O O O O O $unknown$ O $complex$ O O O O O $unknown$ O $complex$ O O O O O $any$ O $unknown$ O $unknown$ O O $string$ O O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $string$ O O O $string[]$ O O O O O $complex$ O O $boolean$ O O O O $string[]$ O O O O O $complex$ O O O O O O O O O O O $complex$ O O O O O O O O O O O $any$ O $any$ O $complex$ O O $boolean$ O O O O $complex$ O O $string$ O O O O $complex$ O O O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $number$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $complex$ O O O O O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O $number$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $boolean$ O O O $string[]$ O O O O O $boolean$ O O O O O O O $any$ O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $ObjectConstructor$ O $complex$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O
<s> import { EventTarget } from 's' ; export interface _UNKNOWN_ { src : Object | EventTarget | undefined ; type : string ; listener : Function ; capture : boolean ; handler ? : Object ; key : number ; proxy : Function | undefined ; } let _counter = 0 ; export function _UNKNOWN_ ( ) { return ++ _counter ; } </s>	O O O $any$ O O O O O O $any$ O $complex$ O $ObjectConstructor$ O $any$ O O O $string$ O O O $Function$ O $FunctionConstructor$ O $boolean$ O O O $Object$ O O $ObjectConstructor$ O $number$ O O O $Function$ O $FunctionConstructor$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O
<s> export class Event { public currentTarget : Object | undefined ; public defaultPrevented : boolean = false ; private _UNKNOWN_ : boolean = false ; private _UNKNOWN_ : boolean = true ; constructor ( public type , public target ? ) { this . currentTarget = this . target ; } stopPropagation ( ) { this . _UNKNOWN_ = true ; } preventDefault ( ) { this . defaultPrevented = true ; this . _UNKNOWN_ = false ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } } export type _UNKNOWN_ = string | Object | Event ; </s>	O O O $any$ O O $Object$ O $ObjectConstructor$ O O O O $boolean$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O O O $string$ O O $Object$ $Object$ O O O O $Object$ O O O $Object$ O O $void$ O O O O O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O $boolean$ O O O O $boolean$ O O O O O O $boolean$ O O $boolean$ O O O O O O $boolean$ O O O O O $any$ O O O $ObjectConstructor$ O $any$ O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Event , _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { listen ( type , listener , _UNKNOWN_ ? , _UNKNOWN_ ? ) : _UNKNOWN_ ; _UNKNOWN_ ( type , listener , _UNKNOWN_ ? , _UNKNOWN_ ? ) : _UNKNOWN_ ; _UNKNOWN_ ( type , listener , _UNKNOWN_ ? , _UNKNOWN_ ? ) : boolean ; _UNKNOWN_ ( key ) : boolean ; dispatchEvent ( event ) : boolean ; removeAllListeners ( type ? ) : number ; _UNKNOWN_ ( ) : _UNKNOWN_ | undefined ; _UNKNOWN_ ( type , capture , event ) : boolean ; _UNKNOWN_ ( type , capture ) : _UNKNOWN_ [ ] ; _UNKNOWN_ ( type , listener , capture , _UNKNOWN_ ? ) : _UNKNOWN_ | undefined ; _UNKNOWN_ ( type ? , capture ? ) : boolean ; } const _UNKNOWN_ = 's' + ( ( Math . random ( ) * 0 ) | 0 ) ; export function _UNKNOWN_ ( cls ) { cls . prototype [ _UNKNOWN_ ] = true ; } export function _UNKNOWN_ ( obj ) { return ! ! ( obj && obj [ _UNKNOWN_ ] ) ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $string$ O $Function$ O $boolean$ $boolean$ O $Object$ $Object$ O O $any$ O $any$ O $string$ O $Function$ O $boolean$ $boolean$ O $Object$ $Object$ O O $any$ O $boolean$ O $string$ O $Function$ O $boolean$ $boolean$ O $Object$ $Object$ O O O O $boolean$ O $any$ O O O O $boolean$ O $any$ O O O O $number$ O $string$ $string$ O O O O $any$ O O O $any$ O O O $boolean$ O $string$ O $boolean$ O $Event$ O O O O $any$ O $string$ O $boolean$ O O $any$ O O O $any$ O $string$ O $Function$ O $boolean$ O $Object$ $Object$ O O $any$ O O O $boolean$ O $string$ $string$ O $boolean$ $boolean$ O O O O O O $string$ O O O O O $Math$ O $number$ O O O O O O O O O O O $void$ O $Function$ O O $Function$ O $any$ O $string$ O O O O O O O $boolean$ O $any$ O O O O O O $any$ O $any$ O $string$ O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export class _UNKNOWN_ implements _UNKNOWN_ { public key : number ; public removed : boolean = false ; public _UNKNOWN_ : boolean = false ; constructor ( public listener , public proxy : Function | undefined , public src : _UNKNOWN_ | EventTarget | undefined , public type , public capture , public handler ? ) { this . key = _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . removed = true ; this . proxy = undefined ; this . handler = undefined ; } } _UNKNOWN_ ( _UNKNOWN_ ) ; </s>	O O O $any$ O $void$ O O O O O O $any$ O $number$ O O O O O O $any$ O $any$ O O $number$ O O O O $boolean$ O O O O O O $boolean$ O O O O O O O O $Function$ O O $Function$ O $FunctionConstructor$ O O O O $complex$ O $any$ O $complex$ O O O O $string$ O O $boolean$ O O $any$ $any$ O O O O $number$ O $number$ O O O O $void$ O O O O O $boolean$ O O O O O $Function$ O $undefined$ O O O $any$ O $undefined$ O O O $void$ O $any$ O O O
<s> export class Disposable { private _UNKNOWN_ : boolean = false ; private _UNKNOWN_ : Function [ ] = [ ] ; protected _UNKNOWN_ ( ) { while ( this . _UNKNOWN_ . length ) { ( this . _UNKNOWN_ . shift ( ) as Function ) ( ) ; } } dispose ( ) { if ( this . _UNKNOWN_ ( ) ) return ; this . _UNKNOWN_ = true ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } _UNKNOWN_ ( callback , scope ? ) { if ( this . _UNKNOWN_ ) { scope !== undefined ? callback . call ( scope ) : callback ( ) ; return ; } this . _UNKNOWN_ . push ( scope !== undefined ? callback . bind ( scope ) : callback ) ; } } </s>	O O O $any$ O O $boolean$ O O O O O O $Function[]$ O $FunctionConstructor$ O O O O O O O $void$ O O O O O O O $Function[]$ O $number$ O O O O O $Function[]$ O $Function$ O O O $FunctionConstructor$ O O O O O O $void$ O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O $void$ O O O O $boolean$ O O O O O O $boolean$ O O $void$ O $Function$ O $Object$ $Object$ O O O O O O $boolean$ O O $Object$ O $undefined$ O $Function$ O $any$ O $Object$ O O $Function$ O O O O O O O O $Function[]$ O $number$ O $Object$ O $undefined$ O $Function$ O $any$ O $Object$ O O $Function$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ { public listeners : { [ key ] : _UNKNOWN_ [ ] } = { } ; private _UNKNOWN_ : number = 0 ; constructor ( public src : EventTarget | _UNKNOWN_ | undefined ) { } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { let count = 0 ; for ( let type in this . listeners ) { count += this . listeners [ type ] . length ; } return count ; } add ( type , listener , _UNKNOWN_ , _UNKNOWN_ ? , _UNKNOWN_ ? ) { let _UNKNOWN_ = this . listeners [ type ] ; if ( ! _UNKNOWN_ ) { _UNKNOWN_ = this . listeners [ type ] = [ ] ; this . _UNKNOWN_ ++ ; } let _UNKNOWN_ ; let index = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , listener , _UNKNOWN_ , _UNKNOWN_ ) ; if ( index > - 0 ) { _UNKNOWN_ = _UNKNOWN_ [ index ] ; if ( ! _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ = false ; } } else { _UNKNOWN_ = new _UNKNOWN_ ( listener , undefined , this . src , type , ! ! _UNKNOWN_ , _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ . push ( _UNKNOWN_ ) ; } return _UNKNOWN_ ; } remove ( type , listener , _UNKNOWN_ ? , _UNKNOWN_ ? ) { if ( ! ( type in this . listeners ) ) { return false ; } let _UNKNOWN_ = this . listeners [ type ] ; let index = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , listener , _UNKNOWN_ , _UNKNOWN_ ) ; if ( index > - 0 ) { let _UNKNOWN_ = _UNKNOWN_ [ index ] ; if ( _UNKNOWN_ instanceof _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( ) ; } _UNKNOWN_ . splice ( index , 0 ) ; if ( _UNKNOWN_ . length == 0 ) { delete this . listeners [ type ] ; this . _UNKNOWN_ -- ; } return true ; } return false ; } _UNKNOWN_ ( listener ) { let type = listener . type ; if ( ! ( type in this . listeners ) ) { return false ; } let index = ( < _UNKNOWN_ [ ] > this . listeners [ type ] ) . indexOf ( listener ) ; if ( index !== - 0 ) { this . listeners [ type ] . splice ( index , 0 ) ; if ( listener instanceof _UNKNOWN_ ) { listener . _UNKNOWN_ ( ) ; } if ( this . listeners [ type ] . length == 0 ) { delete this . listeners [ type ] ; this . _UNKNOWN_ -- ; } } return index !== - 0 ; } removeAll ( type ? ) { let count = 0 ; for ( let _type in this . listeners ) { if ( ! type || _type === type ) { let _UNKNOWN_ = this . listeners [ _type ] ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { ++ count ; _UNKNOWN_ [ i ] . _UNKNOWN_ ( ) ; } delete this . listeners [ _type ] ; this . _UNKNOWN_ -- ; } } return count ; } _UNKNOWN_ ( type , capture ) : _UNKNOWN_ [ ] { let _UNKNOWN_ = this . listeners [ type . toString ( ) ] ; let rv : _UNKNOWN_ [ ] = [ ] ; if ( _UNKNOWN_ ) { for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { let _UNKNOWN_ = _UNKNOWN_ [ i ] ; if ( _UNKNOWN_ . capture === capture ) { rv . push ( _UNKNOWN_ ) ; } } } return rv ; } _UNKNOWN_ ( type , listener , capture , _UNKNOWN_ ? ) : _UNKNOWN_ | undefined { let _UNKNOWN_ = this . listeners [ type ] ; let i = - 0 ; if ( _UNKNOWN_ ) { i = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , listener , capture , _UNKNOWN_ ) ; } return i > - 0 ? _UNKNOWN_ [ i ] : undefined ; } _UNKNOWN_ ( type ? , capture ? ) { let _UNKNOWN_ = type !== undefined ; let typeStr = _UNKNOWN_ ? type : 's' ; let _UNKNOWN_ = capture !== undefined ; for ( let type in this . listeners ) { let _UNKNOWN_ = this . listeners [ type ] ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { if ( ( ! _UNKNOWN_ || _UNKNOWN_ [ i ] . type === typeStr ) && ( ! _UNKNOWN_ || _UNKNOWN_ [ i ] . capture === capture ) ) { return true ; } } } return false ; } private static _UNKNOWN_ ( _UNKNOWN_ : _UNKNOWN_ [ ] , listener , _UNKNOWN_ ? , _UNKNOWN_ ? ) { for ( let i = 0 ; i < _UNKNOWN_ . length ; ++ i ) { let _UNKNOWN_ = _UNKNOWN_ [ i ] ; if ( ! _UNKNOWN_ . removed && _UNKNOWN_ . listener === listener && _UNKNOWN_ . capture === ! ! _UNKNOWN_ && _UNKNOWN_ . handler === _UNKNOWN_ ) { return i ; } } return - 0 ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $complex$ O O O $string$ O O $any$ O O O O O O O O $number$ O O O O O O O O $complex$ O $complex$ O $any$ O O O O O $number$ O O O O O O $number$ O O $number$ O O O O $number$ O O O O O O $string$ O O O $complex$ O O $number$ O O O $complex$ O $string$ O O $number$ O O O $number$ O O $any$ O $string$ O $Function$ O $boolean$ O $boolean$ $boolean$ O $Object$ $Object$ O O O $any$ O O O $complex$ O $string$ O O O O O $any$ O O $any$ O O O $complex$ O $string$ O O O O O O O $number$ O O O O $any$ O O $number$ O $any$ O $number$ O $any$ O $Function$ O $boolean$ O $Object$ O O O O $number$ O O O O O $any$ O $any$ O $number$ O O O O O $boolean$ O O $any$ O $any$ O O O O O O O $any$ O O $any$ O $Function$ O $undefined$ O O O $complex$ O $string$ O O O $boolean$ O $Object$ O O $any$ O $any$ O $boolean$ O $any$ O $number$ O $any$ O O O O $any$ O O $boolean$ O $string$ O $Function$ O $boolean$ $boolean$ O $Object$ $Object$ O O O O O O $string$ O O O $complex$ O O O O O O O O $any$ O O O $complex$ O $string$ O O O $number$ O $any$ O $number$ O $any$ O $Function$ O $boolean$ O $Object$ O O O O $number$ O O O O O O $any$ O $any$ O $number$ O O O O $any$ O $any$ O O $any$ O $void$ O O O O $any$ O $complex$ O $number$ O O O O O O $any$ O $number$ O O O O O O O $complex$ O $string$ O O O O $number$ O O O O O O O O O O O $boolean$ O $any$ O O O $string$ O $any$ O $string$ O O O O O $string$ O O O $complex$ O O O O O O O O $number$ O O O $any$ O O O O O $complex$ O $string$ O O O $number$ O $any$ O O O O $number$ O O O O O O O $complex$ O $string$ O O $complex$ O $number$ O O O O O O $any$ O $any$ O O $any$ O $void$ O O O O O O O O $complex$ O $string$ O O $number$ O O O O O O O $complex$ O $string$ O O O O $number$ O O O O O $number$ O O O O O $number$ O $string$ $string$ O O O $number$ O O O O O O $string$ O O O $complex$ O O O O O $string$ O $string$ O $string$ O O O $any$ O O O $complex$ O $string$ O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O $number$ O $any$ O $number$ O O $void$ O O O O O O O $complex$ O $string$ O O O O $number$ O O O O O $number$ O O $any$ O $string$ O $boolean$ O O $any$ O O O O $any$ O O O $complex$ O $string$ O $string$ O O O O O $any$ O $any$ O O O O O O O O $any$ O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O $any$ O $any$ O $number$ O O O O $any$ O $boolean$ O $boolean$ O O $any$ O $number$ O $any$ O O O O O O $any$ O O $any$ O $string$ O $Function$ O $boolean$ O $Object$ $Object$ O O $any$ O O O O $any$ O O O $complex$ O $string$ O O O $number$ O O O O O O $any$ O O $number$ O $any$ O $number$ O $any$ O $Function$ O $boolean$ O $Object$ O O O O $number$ O O O O $any$ O $number$ O O $undefined$ O O $boolean$ O $string$ $string$ O $boolean$ $boolean$ O O O $boolean$ O $string$ O $undefined$ O O $string$ O $boolean$ O $string$ O O O O $boolean$ O $boolean$ O $undefined$ O O O O $string$ O O O $complex$ O O O $any$ O O O $complex$ O $string$ O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O O O O $boolean$ O $any$ O $number$ O O $string$ O $string$ O O O O $boolean$ O $any$ O $number$ O O $boolean$ O $boolean$ O O O O O O O O O O O O O O O $number$ O $any$ O $any$ O O O $Function$ O $boolean$ $boolean$ O $Object$ $Object$ O O O O O $number$ O O O $number$ O $any$ O $number$ O O $number$ O O O $any$ O $any$ O $number$ O O O O O $any$ O $boolean$ O $any$ O $Function$ O $Function$ O $any$ O $boolean$ O O O $boolean$ O $any$ O $any$ O $Object$ O O O $number$ O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Disposable } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Event , _UNKNOWN_ } from 's' ; import _UNKNOWN_ = require ( 's' ) ; const _UNKNOWN_ = 0 ; export class EventTarget extends Disposable implements _UNKNOWN_ { private _UNKNOWN_ : _UNKNOWN_ = new _UNKNOWN_ ( this ) ; private _UNKNOWN_ : EventTarget ; private _UNKNOWN_ : EventTarget = this ; constructor ( ) { super ( ) ; } protected _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; this . removeAllListeners ( ) ; } _UNKNOWN_ ( parent ) { this . _UNKNOWN_ = parent ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } dispatchEvent ( event ) { let _UNKNOWN_ : EventTarget [ ] | undefined , _UNKNOWN_ = this . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ ) { _UNKNOWN_ = [ ] ; let _UNKNOWN_ = 0 ; for ( ; _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) ) { _UNKNOWN_ . push ( _UNKNOWN_ ) ; console . assert ( ( ++ _UNKNOWN_ < _UNKNOWN_ ) , 's' ) ; } } return this . _UNKNOWN_ ( this . _UNKNOWN_ , event , _UNKNOWN_ ) ; } listen ( type , listener , _UNKNOWN_ ? , _UNKNOWN_ ? ) { return this . _UNKNOWN_ . add ( type , listener , false , _UNKNOWN_ , _UNKNOWN_ ) ; } _UNKNOWN_ ( type , listener , _UNKNOWN_ ? , _UNKNOWN_ ? ) { return this . _UNKNOWN_ . add ( type , listener , true , _UNKNOWN_ , _UNKNOWN_ ) ; } _UNKNOWN_ ( type , listener , _UNKNOWN_ ? , _UNKNOWN_ ? ) { return this . _UNKNOWN_ . remove ( type , listener , _UNKNOWN_ , _UNKNOWN_ ) ; } _UNKNOWN_ ( key ) { return this . _UNKNOWN_ . _UNKNOWN_ ( key ) ; } removeAllListeners ( ) { if ( ! this . _UNKNOWN_ ) { return 0 ; } return this . _UNKNOWN_ . removeAll ( ) ; } _UNKNOWN_ ( type , capture , event ) { let _UNKNOWN_ = this . _UNKNOWN_ . listeners [ String ( type ) ] ; if ( ! _UNKNOWN_ ) { return true ; } _UNKNOWN_ = _UNKNOWN_ . concat ( ) ; let rv = true ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { let listener = _UNKNOWN_ [ i ] ; if ( listener && ! listener . removed && listener . capture === capture ) { let _UNKNOWN_ = listener . listener ; let _UNKNOWN_ = listener . handler || listener . src ; if ( listener . _UNKNOWN_ ) { this . _UNKNOWN_ ( listener ) ; } rv = _UNKNOWN_ . call ( _UNKNOWN_ , event ) !== false && rv ; } } return rv && ! event . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( type , capture ) : _UNKNOWN_ [ ] { return this . _UNKNOWN_ . _UNKNOWN_ ( type , capture ) ; } _UNKNOWN_ ( type , listener , capture , _UNKNOWN_ ? ) : _UNKNOWN_ | undefined { return this . _UNKNOWN_ . _UNKNOWN_ ( type , listener , capture , _UNKNOWN_ ) ; } _UNKNOWN_ ( type ? , capture ? ) { return this . _UNKNOWN_ . _UNKNOWN_ ( type , capture ) ; } private _UNKNOWN_ ( target , _UNKNOWN_ , _UNKNOWN_ ? : EventTarget [ ] ) { let event ; if ( typeof _UNKNOWN_ === 's' ) { event = new Event ( _UNKNOWN_ , target ) ; } else if ( ! ( _UNKNOWN_ instanceof Event ) ) { event = _UNKNOWN_ ( new Event ( ( _UNKNOWN_ as { type : string } ) . type , target ) , _UNKNOWN_ ) ; } else { event = _UNKNOWN_ ; event . target = _UNKNOWN_ . target || target ; } let type = event . type , returnValue = true ; if ( _UNKNOWN_ ) { for ( let i = _UNKNOWN_ . length - 0 ; ! event . _UNKNOWN_ ( ) && i >= 0 ; i -- ) { let currentTarget = event . currentTarget = _UNKNOWN_ [ i ] ; returnValue = currentTarget . _UNKNOWN_ ( type , true , event ) && returnValue ; } } if ( ! event . _UNKNOWN_ ( ) ) { let currentTarget = event . currentTarget = target ; returnValue = currentTarget . _UNKNOWN_ ( type , true , event ) && returnValue ; if ( ! event . _UNKNOWN_ ( ) ) { returnValue = currentTarget . _UNKNOWN_ ( type , false , event ) && returnValue ; } } if ( _UNKNOWN_ ) { for ( let i = 0 ; ! event . _UNKNOWN_ ( ) && i < _UNKNOWN_ . length ; i ++ ) { let currentTarget = event . currentTarget = _UNKNOWN_ [ i ] ; returnValue = currentTarget . _UNKNOWN_ ( type , false , event ) && returnValue ; } } return returnValue ; } } _UNKNOWN_ ( EventTarget ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $void$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O $EventTarget$ O $any$ O O $EventTarget$ O $any$ O O O O O O O O O O O O O $void$ O O O O O $void$ O O O O O $number$ O O O O $void$ O $EventTarget$ O O O O $EventTarget$ O $EventTarget$ O O $EventTarget$ O O O O O O $EventTarget$ O O $boolean$ O $any$ O O O $any$ O $any$ O O O O O $EventTarget$ O O O $EventTarget$ O O O O O $EventTarget$ O O $any$ O O O O O $number$ O O O O O O $EventTarget$ O $EventTarget$ O $EventTarget$ O $EventTarget$ O O O O $any$ O $number$ O $EventTarget$ O O $Console$ O $void$ O O O $number$ O O O O O O O O O O O O $boolean$ O O O $EventTarget$ O $any$ O $any$ O O O $any$ O $string$ O $Function$ O $boolean$ $boolean$ O $Object$ $Object$ O O O O O $any$ O $any$ O $string$ O $Function$ O O O $boolean$ O $Object$ O O O $any$ O $string$ O $Function$ O $boolean$ $boolean$ O $Object$ $Object$ O O O O O $any$ O $any$ O $string$ O $Function$ O O O $boolean$ O $Object$ O O O $boolean$ O $string$ O $Function$ O $boolean$ $boolean$ O $Object$ $Object$ O O O O O $any$ O $boolean$ O $string$ O $Function$ O $boolean$ O $Object$ O O O $boolean$ O $any$ O O O O O $any$ O $boolean$ O $any$ O O O $number$ O O O O O O O O $any$ O O O O O O O O O $any$ O $number$ O O O O $boolean$ O $string$ O $boolean$ O $Event$ O O O $any$ O O O $any$ O $complex$ O $StringConstructor$ O $string$ O O O O O O $any$ O O O O O O $any$ O $any$ O $complex$ O O O O $boolean$ O O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O $any$ O $any$ O $number$ O O O O $any$ O O $any$ O $boolean$ O $any$ O $boolean$ O $boolean$ O O O $Function$ O $any$ O $Function$ O O $any$ O $any$ O $any$ O $any$ O $complex$ O O O $any$ O $boolean$ O O O O $boolean$ O $any$ O O O $boolean$ O $Function$ O $any$ O $any$ O $Event$ O O O O $boolean$ O O O O $boolean$ O O $Event$ O $boolean$ O O O O $any$ O $string$ O $boolean$ O O $any$ O O O O O O $any$ O $any$ O $string$ O $boolean$ O O O $any$ O $string$ O $Function$ O $boolean$ O $Object$ $Object$ O O $any$ O O O O O O $any$ O $any$ O $string$ O $Function$ O $boolean$ O $Object$ O O O $boolean$ O $string$ $string$ O $boolean$ $boolean$ O O O O O $any$ O $boolean$ O $string$ O $boolean$ O O O O $boolean$ O $EventTarget$ O $any$ O $any$ O O $any$ O O O O O $Event$ O O O O $any$ O O O O $Event$ O O $any$ O $string$ O $EventTarget$ O O O O O O O O $complex$ O $any$ O O O $Event$ O $any$ O O $any$ O O $Object$ O O $string$ O O O O O $string$ O $EventTarget$ O O $Object$ O O O O O $Event$ O $Event$ O $Event$ O $Object$ O $Event$ O $Object$ O $EventTarget$ O O O $string$ O $Event$ O $string$ O $boolean$ O O O O O $any$ O O O O O $number$ O $any$ O $number$ O O O O $Event$ O $boolean$ O O O $number$ O O O $number$ O O O O $EventTarget$ O $Event$ O $Object$ O $any$ O $number$ O O $boolean$ O $EventTarget$ O $boolean$ O $string$ O O O $Event$ O O $boolean$ O O O O O O $Event$ O $boolean$ O O O O O $EventTarget$ O $Event$ O $Object$ O $EventTarget$ O $boolean$ O $EventTarget$ O $boolean$ O $string$ O O O $Event$ O O $boolean$ O O O O $Event$ O $boolean$ O O O O $boolean$ O $EventTarget$ O $boolean$ O $string$ O O O $Event$ O O $boolean$ O O O O O $any$ O O O O O $number$ O O O O $Event$ O $boolean$ O O O $number$ O $any$ O $number$ O $number$ O O O O $EventTarget$ O $Event$ O $Object$ O $any$ O $number$ O O $boolean$ O $EventTarget$ O $boolean$ O $string$ O O O $Event$ O O $boolean$ O O O O $boolean$ O O O $void$ O $any$ O O O
<s> function _UNKNOWN_ < T > ( fn ) : T { return ( { valueOf : fn } ) . valueOf ( ) ; } const _UNKNOWN_ = window ; export const _UNKNOWN_ = _UNKNOWN_ ( ( ) => { if ( ! _UNKNOWN_ . addEventListener || ! Object . defineProperty ) { return false ; } let passive = false ; const options = Object . defineProperty ( { } , 's' , { get : function ( ) { passive = true ; } } ) ; _UNKNOWN_ . addEventListener ( 's' , ( ) => { } , options ) ; _UNKNOWN_ . removeEventListener ( 's' , ( ) => { } , options ) ; return passive ; } ) ; </s>	O O $T$ O $any$ O O $Function$ O O $any$ O O O O $Function$ O $Function$ O O O $Function$ O O O O O $complex$ O $complex$ O O O $boolean$ O $T$ O O O O O O O O $complex$ O O O O $ObjectConstructor$ O $any$ O O O O O O O $boolean$ O O O O $any$ O $ObjectConstructor$ O $any$ O O O O O O O $void$ O O O O O $boolean$ O O O O O O O $complex$ O O O O O O O O O O O $any$ O O $complex$ O O O O O O O O O O O $any$ O O O $false$ O O O O O
<s> export enum _UNKNOWN_ { LEFT = 0 , _UNKNOWN_ = 0 , RIGHT = 0 } </s>	O O O $any$ O $any$ O O O $any$ O O O $any$ O O O O
<s> export const _UNKNOWN_ = ( window . navigator && window . navigator . userAgent ) || 's' ; export const isMac = _UNKNOWN_ . indexOf ( 's' ) !== - 0 ; </s>	O O O $string$ O O $complex$ O $Navigator$ O $complex$ O $Navigator$ O $string$ O O O O O O $boolean$ O $string$ O $number$ O O O O O O O O
<s> import { Event as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { isMac } from 's' ; declare interface _UNKNOWN_ extends Event { keyCode : number ; ctrlKey : boolean ; } export class _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ : EventTarget | null = null ; offsetX : number = 0 ; offsetY : number = 0 ; clientX : number = 0 ; clientY : number = 0 ; _UNKNOWN_ : number = 0 ; _UNKNOWN_ : number = 0 ; button : _UNKNOWN_ = _UNKNOWN_ . LEFT ; key : string = 's' ; keyCode : number = 0 ; charCode : number = 0 ; ctrlKey : boolean = false ; altKey : boolean = false ; shiftKey : boolean = false ; metaKey : boolean = false ; state : Object | null = null ; _UNKNOWN_ : boolean = false ; detail : any = undefined ; private _event : Event ; constructor ( event ? , currentTarget ? ) { super ( event ? event . type : 's' ) ; if ( event ) { this . init ( event , currentTarget ) ; } } init ( event , currentTarget ? ) { let type = this . type = event . type ; let touchEvent = event as _UNKNOWN_ ; let _UNKNOWN_ : Touch | undefined = ( touchEvent . changedTouches ? touchEvent . changedTouches [ 0 ] : undefined ) ; this . target = event . target || event . _UNKNOWN_ ; this . currentTarget = currentTarget ; let mouseEvent = event as MouseEvent ; let _UNKNOWN_ = mouseEvent . _UNKNOWN_ ; if ( _UNKNOWN_ ) { } else if ( type === 's' ) { _UNKNOWN_ = mouseEvent . _UNKNOWN_ ; } else if ( type === 's' ) { _UNKNOWN_ = mouseEvent . _UNKNOWN_ ; } this . _UNKNOWN_ = _UNKNOWN_ ; if ( ! ! _UNKNOWN_ ) { this . clientX = _UNKNOWN_ . clientX !== undefined ? _UNKNOWN_ . clientX : _UNKNOWN_ . pageX ; this . clientY = _UNKNOWN_ . clientY !== undefined ? _UNKNOWN_ . clientY : _UNKNOWN_ . pageY ; this . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ || 0 ; this . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ || 0 ; } else { this . offsetX = mouseEvent . offsetX !== undefined ? mouseEvent . offsetX : mouseEvent . _UNKNOWN_ ; this . offsetY = mouseEvent . offsetY !== undefined ? mouseEvent . offsetY : mouseEvent . _UNKNOWN_ ; this . clientX = mouseEvent . clientX !== undefined ? mouseEvent . clientX : mouseEvent . pageX ; this . clientY = mouseEvent . clientY !== undefined ? mouseEvent . clientY : mouseEvent . pageY ; this . _UNKNOWN_ = mouseEvent . _UNKNOWN_ || 0 ; this . _UNKNOWN_ = mouseEvent . _UNKNOWN_ || 0 ; } this . button = mouseEvent . button ; let keyEvent = event as KeyboardEvent ; this . keyCode = keyEvent . keyCode || 0 ; this . key = keyEvent . key || 's' ; this . charCode = keyEvent . charCode || ( type === 's' ? keyEvent . keyCode : 0 ) ; this . ctrlKey = keyEvent . ctrlKey ; this . altKey = keyEvent . altKey ; this . shiftKey = keyEvent . shiftKey ; this . metaKey = keyEvent . metaKey ; this . _UNKNOWN_ = isMac ? keyEvent . metaKey : keyEvent . ctrlKey ; let _UNKNOWN_ = event as _UNKNOWN_ ; this . state = _UNKNOWN_ . state ; let customEvent = event as CustomEvent ; this . detail = customEvent . detail ; this . _event = event ; if ( event . defaultPrevented ) { this . preventDefault ( ) ; } } stopPropagation ( ) { super . stopPropagation ( ) ; if ( this . _event . stopPropagation ) { this . _event . stopPropagation ( ) ; } else { this . _event . _UNKNOWN_ = true ; } } preventDefault ( ) { super . preventDefault ( ) ; if ( ! this . _event . preventDefault ) { this . _event . returnValue = false ; try { const 0 = 0 ; const 0 = 0 ; let keyEvent = this . _event as _UNKNOWN_ ; if ( keyEvent . ctrlKey || keyEvent . keyCode >= 0 && keyEvent . keyCode <= 0 ) { keyEvent . keyCode = - 0 ; } } catch ( ex ) { } } else { this . _event . preventDefault ( ) ; } } _UNKNOWN_ ( ) { return this . _event ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O $complex$ O $number$ O O O $boolean$ O O O O O O $any$ O $any$ O $EventTarget$ O $complex$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $number$ O O O O O $number$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $Object$ O $ObjectConstructor$ O O O O O $boolean$ O O O O O $any$ O O O $undefined$ O O $Event$ O $complex$ O O O $Event$ $Event$ O $EventTarget$ $EventTarget$ O O O O $Event$ O $Event$ O $string$ O O O O O O $Event$ O O O O $void$ O $Event$ O $EventTarget$ O O O O $void$ O $Event$ O $EventTarget$ $EventTarget$ O O O $string$ O O O $string$ O $Event$ O $string$ O O $TouchEvent$ O $Event$ O $complex$ O O $Touch$ O $complex$ O O O O $TouchEvent$ O $TouchList$ O $TouchEvent$ O $TouchList$ O O O O $undefined$ O O O O $Object$ O $Event$ O $EventTarget$ O $Event$ O $EventTarget$ O O O $Object$ O $EventTarget$ O O $MouseEvent$ O $Event$ O $complex$ O O $EventTarget$ O $MouseEvent$ O $EventTarget$ O O O $EventTarget$ O O O O O O $string$ O O O O $EventTarget$ O $MouseEvent$ O $any$ O O O O O $string$ O O O O $EventTarget$ O $MouseEvent$ O $any$ O O O O $EventTarget$ O $EventTarget$ O O O O O $Touch$ O O O O $number$ O $Touch$ O $number$ O $undefined$ O $Touch$ O $number$ O $Touch$ O $number$ O O O $number$ O $Touch$ O $number$ O $undefined$ O $Touch$ O $number$ O $Touch$ O $number$ O O O $number$ O $Touch$ O $number$ O O O O O $number$ O $Touch$ O $number$ O O O O O O O O $number$ O $MouseEvent$ O $number$ O $undefined$ O $MouseEvent$ O $number$ O $MouseEvent$ O $any$ O O O $number$ O $MouseEvent$ O $number$ O $undefined$ O $MouseEvent$ O $number$ O $MouseEvent$ O $any$ O O O $number$ O $MouseEvent$ O $number$ O $undefined$ O $MouseEvent$ O $number$ O $MouseEvent$ O $number$ O O O $number$ O $MouseEvent$ O $number$ O $undefined$ O $MouseEvent$ O $number$ O $MouseEvent$ O $number$ O O O $number$ O $MouseEvent$ O $number$ O O O O O $number$ O $MouseEvent$ O $number$ O O O O O O $any$ O $MouseEvent$ O $number$ O O $KeyboardEvent$ O $Event$ O $complex$ O O O $number$ O $KeyboardEvent$ O $number$ O O O O O $string$ O $KeyboardEvent$ O $string$ O O O O O $number$ O $KeyboardEvent$ O $number$ O O $string$ O O O $KeyboardEvent$ O $number$ O O O O O O $boolean$ O $KeyboardEvent$ O $boolean$ O O O $boolean$ O $KeyboardEvent$ O $boolean$ O O O $boolean$ O $KeyboardEvent$ O $boolean$ O O O $boolean$ O $KeyboardEvent$ O $boolean$ O O O $boolean$ O $boolean$ O $KeyboardEvent$ O $boolean$ O $KeyboardEvent$ O $boolean$ O O $any$ O $Event$ O $complex$ O O O $Object$ O $any$ O $any$ O O $CustomEvent<any>$ O $Event$ O $complex$ O O O $any$ O $CustomEvent<any>$ O $any$ O O O $Event$ O $Event$ O O O $Event$ O $boolean$ O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O O O $Event$ O $void$ O O O O $Event$ O $void$ O O O O O O O O $Event$ O $boolean$ O O O O O $void$ O O O O O $void$ O O O O O O O O $Event$ O $void$ O O O O $Event$ O $boolean$ O O O O O O O O O O O O O O O O $any$ O O O $Event$ O $any$ O O O $any$ O $boolean$ O $any$ O $number$ O O O $any$ O $number$ O O O O $any$ O $number$ O O O O O O O O $any$ O O O O O O O O $Event$ O $void$ O O O O O $Event$ O O O O O O $Event$ O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { EventTarget as 0 } from 's' ; export declare interface _UNKNOWN_ extends Function { src ? : EventTarget ; listener ? : _UNKNOWN_ ; } declare interface _UNKNOWN_ extends _UNKNOWN_ { removed : boolean ; } const _UNKNOWN_ = 's' + ( ( Math . random ( ) * 0 ) | 0 ) ; const _UNKNOWN_ = ( src : EventTarget | undefined , listener : _UNKNOWN_ | undefined , event ? ) : any => { if ( ! listener ) return ; if ( listener . removed ) { return true ; } return _UNKNOWN_ ( listener , new _UNKNOWN_ ( event , src ) ) ; } let _UNKNOWN_ = 0 ; function _UNKNOWN_ ( src , type , listener , _UNKNOWN_ = false , options : boolean | _UNKNOWN_ = false , scope ? ) { let _UNKNOWN_ : _UNKNOWN_ | undefined = _UNKNOWN_ ( src ) ; if ( ! _UNKNOWN_ ) { ( src as any ) [ _UNKNOWN_ ] = _UNKNOWN_ = new _UNKNOWN_ ( src ) ; } let capture = typeof options === 's' ? ! ! options . capture : ! ! options ; let _UNKNOWN_ = _UNKNOWN_ . add ( type , listener , _UNKNOWN_ , capture , scope ) ; if ( _UNKNOWN_ . proxy ) { return _UNKNOWN_ ; } let proxy = _UNKNOWN_ ( ) ; _UNKNOWN_ . proxy = proxy ; proxy . src = src ; proxy . listener = _UNKNOWN_ ; if ( ! _UNKNOWN_ ) { options = capture ; } src . addEventListener ( type . toString ( ) , proxy as EventListener , options ) ; _UNKNOWN_ ++ ; return _UNKNOWN_ ; } function _UNKNOWN_ ( src ) : _UNKNOWN_ | undefined { let _UNKNOWN_ = ( src as any ) [ _UNKNOWN_ ] ; return _UNKNOWN_ instanceof _UNKNOWN_ ? _UNKNOWN_ : undefined ; } export function _UNKNOWN_ ( listener , _UNKNOWN_ ) { let _UNKNOWN_ = listener . listener ; let _UNKNOWN_ = listener . handler || listener . src ; if ( listener . _UNKNOWN_ ) { _UNKNOWN_ ( listener ) ; } return _UNKNOWN_ . call ( _UNKNOWN_ , _UNKNOWN_ ) ; } export function _UNKNOWN_ ( ) { let _UNKNOWN_ = _UNKNOWN_ ; let f = ( _UNKNOWN_ ) => _UNKNOWN_ . call ( null , f . src , f . listener , _UNKNOWN_ ) ; return f ; } export function listen ( src , type , listener , options : boolean | _UNKNOWN_ = false , scope ? ) { if ( _UNKNOWN_ ( src ) ) { let capture = typeof options === 's' ? ! ! options . capture : ! ! options ; return ( < _UNKNOWN_ > src ) . listen ( type , listener , capture , scope ) ; } else { return _UNKNOWN_ ( ( < EventTarget > src ) , type , listener , false , options , scope ) ; } } export function _UNKNOWN_ ( src , type , listener , options : boolean | _UNKNOWN_ = false , scope ? ) { if ( _UNKNOWN_ ( src ) ) { let capture = typeof options === 's' ? ! ! options . capture : ! ! options ; return ( < _UNKNOWN_ > src ) . _UNKNOWN_ ( type , listener , capture , scope ) ; } else { return _UNKNOWN_ ( ( < EventTarget > src ) , type , listener , true , options , scope ) ; } } export function _UNKNOWN_ ( src , type , listener , options : boolean | _UNKNOWN_ = false , scope ? ) { let capture = typeof options === 's' ? ! ! options . capture : ! ! options ; if ( _UNKNOWN_ ( src ) ) { return ( < _UNKNOWN_ > src ) . _UNKNOWN_ ( type , listener , capture , scope ) ; } let _UNKNOWN_ = _UNKNOWN_ ( < EventTarget > src ) ; if ( _UNKNOWN_ ) { let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( type , listener , capture , scope ) ; if ( _UNKNOWN_ ) { return _UNKNOWN_ ( _UNKNOWN_ ) ; } } return false ; } export function _UNKNOWN_ ( listener ) { if ( ! listener || ( listener as _UNKNOWN_ ) . removed ) { return false ; } let src = listener . src ; if ( _UNKNOWN_ ( src ) ) { return ( < _UNKNOWN_ > src ) . _UNKNOWN_ ( listener ) ; } let type = listener . type ; let proxy = < EventListener > listener . proxy ; let _UNKNOWN_ = < EventTarget > src ; _UNKNOWN_ . removeEventListener ( type , proxy , listener . capture ) ; _UNKNOWN_ -- ; let _UNKNOWN_ = _UNKNOWN_ ( < EventTarget > src ) ; if ( _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( listener ) ; if ( _UNKNOWN_ . _UNKNOWN_ ( ) == 0 ) { _UNKNOWN_ . src = undefined ; ( src as any ) [ _UNKNOWN_ ] = undefined ; } } else { ( < _UNKNOWN_ > listener ) . _UNKNOWN_ ( ) ; } return true ; } export function removeAll ( src ? , type ? ) { if ( ! src ) return 0 ; if ( _UNKNOWN_ ( src ) ) { return ( < _UNKNOWN_ > src ) . removeAllListeners ( type ) ; } let _UNKNOWN_ = _UNKNOWN_ ( < EventTarget > src ) ; if ( ! _UNKNOWN_ ) { return 0 ; } let count = 0 ; let typeStr = type ; for ( let type in _UNKNOWN_ . listeners ) { if ( ! typeStr || type == typeStr ) { let listeners = _UNKNOWN_ . listeners [ type ] . concat ( ) ; for ( let i = 0 ; i < listeners . length ; ++ i ) { if ( _UNKNOWN_ ( listeners [ i ] ) ) { ++ count ; } } } } return count ; } export function _UNKNOWN_ ( src , type , capture ) : _UNKNOWN_ [ ] { if ( _UNKNOWN_ ( src ) ) { return ( < _UNKNOWN_ > src ) . _UNKNOWN_ ( type , capture ) ; } else { let _UNKNOWN_ = _UNKNOWN_ ( < EventTarget > src ) ; return _UNKNOWN_ ? _UNKNOWN_ . _UNKNOWN_ ( type , capture ) : [ ] ; } } export function _UNKNOWN_ ( src , type , listener , capture = false , scope ? ) : _UNKNOWN_ | undefined { if ( _UNKNOWN_ ( src ) ) { return ( < _UNKNOWN_ > src ) . _UNKNOWN_ ( type , listener , capture , scope ) ; } let _UNKNOWN_ = _UNKNOWN_ ( < EventTarget > src ) ; if ( _UNKNOWN_ ) { return _UNKNOWN_ . _UNKNOWN_ ( type , listener , capture , scope ) ; } return undefined ; } export function _UNKNOWN_ ( src , type ? , capture ? ) { if ( _UNKNOWN_ ( src ) ) { return ( < _UNKNOWN_ > src ) . _UNKNOWN_ ( type || 's' , capture ) ; } let _UNKNOWN_ = _UNKNOWN_ ( < EventTarget > src ) ; return ! ! _UNKNOWN_ && _UNKNOWN_ . _UNKNOWN_ ( type , capture ) ; } export function dispatchEvent ( src , event ) { return src . dispatchEvent ( event ) ; } export function _UNKNOWN_ ( ) { return _UNKNOWN_ ; } export type _UNKNOWN_ = EventTarget | _UNKNOWN_ ; export type Key = number | _UNKNOWN_ ; </s>	O O O $any$ O O O O O O $any$ O $boolean$ O $boolean$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $FunctionConstructor$ O $EventTarget$ O O $complex$ O $any$ O O $any$ O O O O $any$ O $any$ O $boolean$ O O O O O $string$ O O O O O $Math$ O $number$ O O O O O O O O O O $Function$ O O $EventTarget$ O $complex$ O O O $any$ O $any$ O O O $Event$ $Event$ O O O O O O O O $any$ O O O O O $any$ O $boolean$ O O O O O O O $any$ O $any$ O O $any$ O $Event$ O $EventTarget$ O O O O O $number$ O O O O $any$ O $EventTarget$ O $string$ O $Function$ O $boolean$ O O O $complex$ O O O $any$ O O O $Object$ $Object$ O O O $any$ O $any$ O O O $any$ O $EventTarget$ O O O O O $any$ O O O $EventTarget$ O O O O $string$ O O $any$ O O $any$ O $EventTarget$ O O O O $boolean$ O O $complex$ O O O O O $any$ O $boolean$ O O O $boolean$ O O $any$ O $any$ O $any$ O $string$ O $Function$ O $boolean$ O $boolean$ O $Object$ O O O O $any$ O $Function$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $Function$ O $any$ O $any$ O $EventTarget$ O $EventTarget$ O $any$ O $any$ O $any$ O O O O $boolean$ O O $complex$ O $boolean$ O O $EventTarget$ O $void$ O $string$ O $string$ O O O $any$ O $any$ O $complex$ O O $number$ O O O $any$ O O O $any$ O $EventTarget$ O O $any$ O O O O $any$ O O $EventTarget$ O O O O $string$ O O O $any$ O $any$ O $any$ O $undefined$ O O O O $any$ O $any$ O $Object$ O O O $Function$ O $any$ O $Function$ O O $any$ O $any$ O $any$ O $any$ O $complex$ O O O $any$ O $boolean$ O O $boolean$ O $any$ O O O O $Function$ O $any$ O $any$ O $Object$ O O O O O $any$ O O O O $Function$ O $Function$ O O $any$ O O $Event$ O O $Function$ O $any$ O O O $any$ O $EventTarget$ O $any$ O $any$ O $Event$ O O O $any$ O O O O $any$ O $any$ O $string$ O $Function$ O $complex$ O O O $any$ O O O $Object$ $Object$ O O O O $boolean$ O $complex$ O O O O $boolean$ O O $complex$ O O O O O $any$ O $boolean$ O O O $boolean$ O O O O $any$ O $complex$ O O $any$ O $string$ O $Function$ O $boolean$ O $Object$ O O O O O O $any$ O O O $complex$ O $complex$ O O $string$ O $Function$ O O O $complex$ O $Object$ O O O O O O $any$ O $any$ O $string$ O $Function$ O $complex$ O O O $any$ O O O $Object$ $Object$ O O O O $boolean$ O $complex$ O O O O $boolean$ O O $complex$ O O O O O $any$ O $boolean$ O O O $boolean$ O O O O $any$ O $complex$ O O $any$ O $string$ O $Function$ O $boolean$ O $Object$ O O O O O O $any$ O O O $complex$ O $complex$ O O $string$ O $Function$ O O O $complex$ O $Object$ O O O O O O $boolean$ O $any$ O $string$ O $Function$ O $complex$ O O O $any$ O O O $Object$ $Object$ O O O $boolean$ O O $complex$ O O O O O $any$ O $boolean$ O O O $boolean$ O O O $boolean$ O $complex$ O O O O O O $any$ O $complex$ O O $boolean$ O $string$ O $Function$ O $boolean$ O $Object$ O O O O $any$ O $any$ O O $complex$ O $complex$ O O O O $any$ O O O $any$ O $any$ O $any$ O $string$ O $Function$ O $boolean$ O $Object$ O O O O $any$ O O O $boolean$ O $any$ O O O O O O O O O O $boolean$ O $any$ O O O O O $any$ O O $any$ O $any$ O O $boolean$ O O O O O O O $complex$ O $any$ O $complex$ O O O $boolean$ O $complex$ O O O O O O $any$ O $complex$ O O $boolean$ O $any$ O O O O $string$ O $any$ O $string$ O O $EventListener$ O O $any$ O $any$ O $Function$ O O $EventTarget$ O O $complex$ O $complex$ O $EventTarget$ O $void$ O $string$ O $EventListener$ O $any$ O $boolean$ O O $number$ O O O $any$ O $any$ O O $complex$ O $complex$ O O O O $any$ O O $any$ O $boolean$ O $any$ O O O O $any$ O $number$ O O O O O O $any$ O $complex$ O $undefined$ O O $complex$ O O O O $string$ O O $undefined$ O O O O O O O $any$ O $any$ O O $void$ O O O O O O O O O O $number$ O $complex$ $any$ O $string$ $string$ O O O O O $complex$ O O O O O O $boolean$ O $complex$ O O O O O O $any$ O $complex$ O O $number$ O $string$ O O O O $any$ O $any$ O O $complex$ O $complex$ O O O O O $any$ O O O O O O O $number$ O O O O $string$ O $string$ O O O O $string$ O $any$ O $complex$ O O O O O $string$ O $string$ O $string$ O O O $any$ O $any$ O $complex$ O $string$ O O $complex$ O O O O O O $number$ O O O $number$ O $any$ O $number$ O O $number$ O O O O $boolean$ O $any$ O $number$ O O O O O $number$ O O O O O O $number$ O O O O $any$ O $any$ O $string$ O $boolean$ O O $any$ O O O O O $boolean$ O $complex$ O O O O O O $any$ O $complex$ O O $any$ O $string$ O $boolean$ O O O O O O $any$ O $any$ O O $complex$ O $complex$ O O O $any$ O $any$ O $any$ O $string$ O $boolean$ O O O O O O O O O $any$ O $any$ O $string$ O $Function$ O $boolean$ O O O $Object$ $Object$ O O $any$ O O O O O $boolean$ O $complex$ O O O O O O $any$ O $complex$ O O $any$ O $string$ O $Function$ O $boolean$ O $Object$ O O O O $any$ O $any$ O O $complex$ O $complex$ O O O O $any$ O O O $any$ O $any$ O $string$ O $Function$ O $boolean$ O $Object$ O O O O $undefined$ O O O O $boolean$ O $any$ O $string$ $string$ O $boolean$ $boolean$ O O O O $boolean$ O $complex$ O O O O O O $any$ O $complex$ O O $boolean$ O $string$ O O O $boolean$ O O O O $any$ O $any$ O O $complex$ O $complex$ O O O O O $any$ O $any$ O $boolean$ O $string$ O $boolean$ O O O O O $boolean$ O $any$ O $any$ O O O $any$ O $boolean$ O $any$ O O O O O $number$ O O O O $number$ O O O O $any$ O $complex$ O $any$ O O O $any$ O O O $any$ O O
<s> import { Disposable } from 's' ; import { _UNKNOWN_ } from 's' ; import { Key , _UNKNOWN_ , listen , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { EventTarget as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class EventHandler extends Disposable { private _UNKNOWN_ : Object ; private _keys : { [ key ] : _UNKNOWN_ } = { } ; constructor ( scope ? ) { super ( ) ; this . _UNKNOWN_ = scope ; } protected _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; this . removeAll ( ) ; } listen ( src , type , fn ? , options : boolean | _UNKNOWN_ = false , scope ? ) { const _UNKNOWN_ = listen ( src , type , fn || this . handleEvent , options , scope || this . _UNKNOWN_ || this ) ; if ( ! _UNKNOWN_ ) { return this ; } const key = _UNKNOWN_ . key ; this . _keys [ key ] = _UNKNOWN_ ; return this ; } _UNKNOWN_ ( src , type , fn ? , options : boolean | _UNKNOWN_ = false , scope ? ) { const _UNKNOWN_ = _UNKNOWN_ ( src , type , fn || this . handleEvent , options , scope || this . _UNKNOWN_ || this ) ; if ( ! _UNKNOWN_ ) { return this ; } const key = _UNKNOWN_ . key ; this . _keys [ key ] = _UNKNOWN_ ; return this ; } _UNKNOWN_ ( src , type , fn ? , options : boolean | _UNKNOWN_ = false , scope ? ) { const capture = typeof options === 's' ? ! ! options . capture : ! ! options ; const listener = _UNKNOWN_ ( src , type , fn || this . handleEvent , capture , scope || this . _UNKNOWN_ || this ) ; if ( listener ) { _UNKNOWN_ ( listener ) ; delete this . _keys [ listener . key ] ; } return this ; } removeAll ( ) { for ( let key in this . _keys ) { let _UNKNOWN_ = this . _keys [ key ] ; if ( this . _keys . hasOwnProperty ( key ) ) { _UNKNOWN_ ( _UNKNOWN_ ) ; } } this . _keys = { } ; } _UNKNOWN_ ( ) { let count = 0 ; for ( let key in this . _keys ) { if ( Object . prototype . hasOwnProperty . call ( this . _keys , key ) ) { count ++ ; } } return count ; } handleEvent ( ) { throw new Error ( 's' ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O $Object$ O $ObjectConstructor$ O O $complex$ O O O $string$ O O $any$ O O O O O O O $any$ $any$ O O O O O O O O $Object$ O $any$ O O O $void$ O O O O O $void$ O O O O O $void$ O O O O $EventHandler$ O $any$ O $string$ O $Function$ $Function$ O $complex$ O O O $any$ O O O $Object$ $Object$ O O O $any$ O $any$ O $complex$ O $string$ O $Function$ O O O $void$ O $complex$ O $Object$ O O O $Object$ O O O O O O O $any$ O O O O O O O $number$ O $any$ O $number$ O O O $complex$ O $number$ O O $any$ O O O O O $EventHandler$ O $any$ O $string$ O $Function$ $Function$ O $complex$ O O O $any$ O O O $Object$ $Object$ O O O $any$ O $any$ O $complex$ O $string$ O $Function$ O O O $void$ O $complex$ O $Object$ O O O $Object$ O O O O O O O $any$ O O O O O O O $number$ O $any$ O $number$ O O O $complex$ O $number$ O O $any$ O O O O O $this$ O $any$ O $string$ O $Function$ $Function$ O $complex$ O O O $any$ O O O $Object$ $Object$ O O O $boolean$ O O $complex$ O O O O O $any$ O $boolean$ O O O $boolean$ O O $any$ O $any$ O $complex$ O $string$ O $Function$ O O O $void$ O $boolean$ O $Object$ O O O $Object$ O O O O O O $any$ O O $boolean$ O $any$ O O O O O $complex$ O $any$ O $number$ O O O O O O O $void$ O O O O O O $string$ O O O $complex$ O O O $any$ O O O $complex$ O $string$ O O O O O O $complex$ O $boolean$ O $string$ O O O $boolean$ O $any$ O O O O O O $complex$ O O O O O $number$ O O O O $number$ O O O O O O $string$ O O O $complex$ O O O O $ObjectConstructor$ O $Object$ O $boolean$ O $any$ O O O $complex$ O $string$ O O O $number$ O O O O O $number$ O O $void$ O O O O O $ErrorConstructor$ O O O O O O O
<s> import { EventTarget } from 's' ; import { EventHandler } from 's' ; export class _UNKNOWN_ extends EventTarget { private _handler : EventHandler ; private _UNKNOWN_ : boolean = false ; protected _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } if ( this . _handler ) { this . _handler . dispose ( ) ; } } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; } _UNKNOWN_ ( ) { if ( this . _handler ) { this . _handler . removeAll ( ) ; } this . _UNKNOWN_ = false ; } _UNKNOWN_ ( ) { if ( ! this . _handler ) { this . _handler = new EventHandler ( this ) ; } return this . _handler ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O $EventHandler$ O $any$ O O $boolean$ O O O O O O $void$ O O O O O $void$ O O O O O O O $boolean$ O O O O $void$ O O O O O O O O $EventHandler$ O O O O $EventHandler$ O $void$ O O O O O $boolean$ O O O O O O $boolean$ O O $void$ O O O O O $boolean$ O O O O $void$ O O O O O O O $EventHandler$ O O O O $EventHandler$ O $void$ O O O O O O $boolean$ O O O O $EventHandler$ O O O O O O O O $EventHandler$ O O O O $EventHandler$ O O $any$ O O O O O O O O $EventHandler$ O O O O
<s> export enum _UNKNOWN_ { MESSAGE = 's' , _UNKNOWN_ = 's' } export enum _UNKNOWN_ { _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , CONNECTED = 's' , MESSAGE = 's' } </s>	O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O
<s> import { EventHandler } from 's' ; import { _UNKNOWN_ } from 's' ; declare interface _UNKNOWN_ extends Event { detail : any ; } let _UNKNOWN_ = false ; try { let eventType = 's' ; let _UNKNOWN_ = 's' ; let evt = new CustomEvent ( eventType , { 's' : _UNKNOWN_ } ) ; let el = document . createElement ( "s" ) ; let handler = new EventHandler ( ) ; handler . listen ( el , eventType , function ( e ) { let _UNKNOWN_ = e . _UNKNOWN_ ( ) as CustomEvent ; let payload = _UNKNOWN_ . detail ; _UNKNOWN_ = payload === _UNKNOWN_ ; handler . dispose ( ) ; } , false ) ; el . dispatchEvent ( evt ) ; handler . dispose ( ) ; } catch ( e ) { } export function _UNKNOWN_ ( type , payload ) { if ( _UNKNOWN_ ) { return new CustomEvent ( type , { 's' : payload } ) ; } else { let evt = document . createEvent ( 's' ) as _UNKNOWN_ ; evt . detail = payload ; evt . initEvent ( type , true , true ) ; return evt as CustomEvent ; } } export function getPath ( node ) : Node [ ] { const nodes : Node [ ] = [ ] ; let currentNode : Node | null = node ; while ( currentNode ) { nodes . push ( currentNode ) ; currentNode = currentNode . parentNode ; } return nodes ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $complex$ O $any$ O O O O O $boolean$ O O O O O O $string$ O O O O $string$ O O O O $any$ O O $complex$ O $string$ O O O O $string$ O O O O $HTMLDivElement$ O $Document$ O O O O O O O $EventHandler$ O O $any$ O O O $EventHandler$ O $EventHandler$ O $HTMLDivElement$ O $string$ O O O $any$ O O O $any$ O $any$ O $Event$ O O O $complex$ O O $any$ O $CustomEvent<any>$ O $any$ O $boolean$ O $any$ O $string$ O $EventHandler$ O $void$ O O O O O O O O $HTMLDivElement$ O $boolean$ O $any$ O O $EventHandler$ O $void$ O O O O O O $any$ O O O O O $any$ O $string$ O $string$ O O O O $boolean$ O O O O $complex$ O $string$ O O O O $string$ O O O O O O O $any$ O $Document$ O $complex$ O O O O $any$ O $any$ O $any$ O $string$ O $any$ O $void$ O $string$ O O O O O O O $any$ O $complex$ O O O O O $Node[]$ O $Node$ O O O O O O O $Node[]$ O O O O O O O O O $Node$ O O O O O $Node$ O O O $Node$ O O $Node[]$ O $number$ O $Node$ O O $Node$ O $Node$ O $complex$ O O O $Node[]$ O O O
<s> export enum _UNKNOWN_ { _UNKNOWN_ , _UNKNOWN_ , CONNECTED } </s>	O O O $any$ O $any$ O $any$ O $any$ O O
<s> import { Event } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends Event { constructor ( public payload , target ? ) { super ( _UNKNOWN_ . MESSAGE , target ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $Object$ O $Object$ $Object$ O O O O $any$ O $any$ O $Object$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { 0 as 0 } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { private _id : string = 0 ( ) ; private _UNKNOWN_ : string ; private _state : _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) . listen ( document . documentElement , _UNKNOWN_ . MESSAGE , this . _UNKNOWN_ , false ) ; } protected _UNKNOWN_ ( e ) { let _UNKNOWN_ = e . _UNKNOWN_ ( ) as CustomEvent ; let detail = _UNKNOWN_ . detail as string ; let payload = JSON . parse ( detail ) as _UNKNOWN_ ; if ( typeof payload !== "s" ) throw new Error ( "s" ) ; if ( payload . id !== this . getId ( ) ) return ; if ( payload . _UNKNOWN_ !== this . _UNKNOWN_ ( ) ) return ; this . dispatchEvent ( new _UNKNOWN_ ( payload . payload , this ) ) ; } protected _UNKNOWN_ ( e ) { let _UNKNOWN_ = e . _UNKNOWN_ ( ) as CustomEvent ; let detail = _UNKNOWN_ . detail as string ; let payload = JSON . parse ( detail ) as _UNKNOWN_ ; if ( typeof payload !== "s" ) throw new Error ( "s" ) ; let _UNKNOWN_ = payload . id ; if ( _UNKNOWN_ !== this . getId ( ) ) return ; let _UNKNOWN_ = payload . _UNKNOWN_ ; this . _UNKNOWN_ ( _UNKNOWN_ ) ; this . setState ( _UNKNOWN_ . CONNECTED ) ; this . _UNKNOWN_ ( ) . _UNKNOWN_ ( document . documentElement , _UNKNOWN_ . _UNKNOWN_ , this . _UNKNOWN_ , false ) ; let _UNKNOWN_ = { 's' : _UNKNOWN_ , 's' : _UNKNOWN_ } ; document . documentElement . dispatchEvent ( _UNKNOWN_ ( _UNKNOWN_ . CONNECTED , JSON . stringify ( _UNKNOWN_ ) ) ) ; } getId ( ) { return this . _id ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } _UNKNOWN_ ( _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ ; } getState ( ) { return this . _state ; } setState ( state ) { this . _state = state ; } send ( payload ) { if ( this . getState ( ) !== _UNKNOWN_ . CONNECTED ) throw new Error ( "s" ) ; let detail = { id : this . _UNKNOWN_ ( ) , _UNKNOWN_ : this . getId ( ) , payload : payload } ; document . documentElement . dispatchEvent ( _UNKNOWN_ ( _UNKNOWN_ . MESSAGE , JSON . stringify ( detail ) ) ) ; } connect ( channel ) { if ( this . getState ( ) !== _UNKNOWN_ . _UNKNOWN_ ) if ( this . getState ( ) === _UNKNOWN_ . _UNKNOWN_ ) throw new Error ( "s" ) ; else if ( this . getState ( ) === _UNKNOWN_ . CONNECTED ) throw new Error ( "s" ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) . listen ( document . documentElement , _UNKNOWN_ . _UNKNOWN_ , this . _UNKNOWN_ , false ) ; let detail = { id : this . getId ( ) , channel : channel } ; document . documentElement . dispatchEvent ( _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ , JSON . stringify ( detail ) ) ) ; } static connect ( channel ) { let port = new _UNKNOWN_ ( ) ; port . connect ( channel ) ; return port ; } } </s>	O O O $any$ O O O O O O $CustomEvent<any>$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O $string$ O O O $any$ O O O O $string$ O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O O O O $void$ O O O O O $EventHandler$ O O O $EventHandler$ O $Document$ O $HTMLElement$ O $any$ O $any$ O O O $void$ O O O O O O $void$ O $any$ O O O $CustomEvent<any>$ O $any$ O $Event$ O O O $complex$ O O $string$ O $CustomEvent<any>$ O $any$ O O O O $any$ O $JSON$ O $any$ O $string$ O O $any$ O O O O $any$ O O O O O $ErrorConstructor$ O O O O O O $any$ O $string$ O O O $string$ O O O O O O O $any$ O $string$ O O O $string$ O O O O O O O $boolean$ O O $any$ O $any$ O $any$ O O O O O O O $void$ O $any$ O O O $CustomEvent<any>$ O $any$ O $Event$ O O O $complex$ O O $string$ O $CustomEvent<any>$ O $any$ O O O O $any$ O $JSON$ O $any$ O $string$ O O $any$ O O O O $any$ O O O O O $ErrorConstructor$ O O O O O $string$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O $any$ O $string$ O O O $void$ O $string$ O O O O $void$ O $any$ O $any$ O O O O $EventHandler$ O O O $EventHandler$ O $Document$ O $HTMLElement$ O $any$ O $any$ O O O $void$ O O O O O $any$ O O O O $string$ O O O $string$ O O $Document$ O $HTMLElement$ O $boolean$ O $CustomEvent<any>$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O $string$ O O O O O O $string$ O O $string$ O O O O O O $string$ O O $void$ O $string$ O O O O $string$ O $string$ O O $any$ O O O O O O $any$ O O $void$ O $any$ O O O O $any$ O $any$ O O $void$ O $Object$ O O O O O O $any$ O O O $any$ O $any$ O O O $ErrorConstructor$ O O O O O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $Object$ O $Object$ O O $Document$ O $HTMLElement$ O $boolean$ O $CustomEvent<any>$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O $void$ O $string$ O O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $ErrorConstructor$ O O O O O O O O O $any$ O O O $any$ O $any$ O O O $ErrorConstructor$ O O O O O O $void$ O O O O O $EventHandler$ O O O $EventHandler$ O $Document$ O $HTMLElement$ O $any$ O $any$ O O O $void$ O O O O O $any$ O O $string$ O O O $string$ O O O $string$ O $string$ O O $Document$ O $HTMLElement$ O $boolean$ O $CustomEvent<any>$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O O $any$ O $string$ O O O $any$ O O $any$ O O O $any$ O $void$ O $string$ O O O $any$ O O O O
<s> import { Event } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends Event { constructor ( public port , target ? ) { super ( _UNKNOWN_ . _UNKNOWN_ , target ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $Object$ $Object$ O O O O $any$ O $any$ O $Object$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { private _name : string ; private _UNKNOWN_ : { [ key ] : _UNKNOWN_ } = { } ; constructor ( name ) { super ( ) ; this . _name = name ; } protected _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; for ( let key in this . _UNKNOWN_ ) { if ( this . _UNKNOWN_ [ key ] . hasOwnProperty ( key ) ) { this . _UNKNOWN_ [ key ] . dispose ( ) ; } } } _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) . listen ( document . documentElement , _UNKNOWN_ . _UNKNOWN_ , this . _UNKNOWN_ , false ) . listen ( document . documentElement , _UNKNOWN_ . CONNECTED , this . _UNKNOWN_ , false ) ; } getName ( ) { return this . _name ; } protected _UNKNOWN_ ( e ) { let _UNKNOWN_ = e . _UNKNOWN_ ( ) as CustomEvent ; let detail = _UNKNOWN_ . detail as string ; let payload = JSON . parse ( detail ) as _UNKNOWN_ ; if ( typeof payload !== "s" ) throw new Error ( "s" ) ; let channel = payload . channel ; if ( channel !== this . getName ( ) ) return ; let id = payload . id ; let port = new _UNKNOWN_ ( ) ; port . _UNKNOWN_ ( id ) ; port . _UNKNOWN_ ( ) ; this . _UNKNOWN_ [ port . getId ( ) ] = port ; let response = { 's' : port . getId ( ) , 's' : id } document . documentElement . dispatchEvent ( _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ , JSON . stringify ( response ) ) ) ; } protected _UNKNOWN_ ( e ) { let _UNKNOWN_ = e . _UNKNOWN_ ( ) as CustomEvent ; let detail = _UNKNOWN_ . detail as string ; let payload = JSON . parse ( detail ) as _UNKNOWN_ ; if ( typeof payload !== "s" ) throw new Error ( "s" ) ; let id = payload . id ; if ( ! this . _UNKNOWN_ . hasOwnProperty ( id ) ) return ; let port = this . _UNKNOWN_ [ id ] ; if ( port . _UNKNOWN_ ( ) !== payload . _UNKNOWN_ ) return ; delete this . _UNKNOWN_ [ id ] ; port . setState ( _UNKNOWN_ . CONNECTED ) ; this . dispatchEvent ( new _UNKNOWN_ ( port , this ) ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $CustomEvent<any>$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $string$ O O O O $complex$ O O O $string$ O O $any$ O O O O O O O $string$ O O O O O O O O $string$ O $string$ O O O $void$ O O O O O $void$ O O O O O O $string$ O O O $complex$ O O O O O O $complex$ O $string$ O O $boolean$ O $string$ O O O O O $complex$ O $string$ O O $void$ O O O O O O $void$ O O O O O $void$ O O O O O $EventHandler$ O O O $EventHandler$ O $Document$ O $HTMLElement$ O $any$ O $any$ O O O $void$ O O O O $EventHandler$ O $Document$ O $HTMLElement$ O $any$ O $any$ O O O $void$ O O O O O $string$ O O O O O O $string$ O O O $void$ O $any$ O O O $CustomEvent<any>$ O $any$ O $Event$ O O O $complex$ O O $string$ O $CustomEvent<any>$ O $any$ O O O O $any$ O $JSON$ O $any$ O $string$ O O $any$ O O O O $any$ O O O O O $ErrorConstructor$ O O O O O $string$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O $any$ O $string$ O O $any$ O O $any$ O O O $any$ O $void$ O $string$ O O $any$ O $void$ O O O O O $complex$ O $any$ O $string$ O O O O $any$ O O $any$ O O O O $any$ O $string$ O O O O O $string$ O $Document$ O $HTMLElement$ O $boolean$ O $CustomEvent<any>$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O O $void$ O $any$ O O O $CustomEvent<any>$ O $any$ O $Event$ O O O $complex$ O O $string$ O $CustomEvent<any>$ O $any$ O O O O $any$ O $JSON$ O $any$ O $string$ O O $any$ O O O O $any$ O O O O O $ErrorConstructor$ O O O O O $string$ O $any$ O $string$ O O O O O O $complex$ O $boolean$ O $string$ O O O O O $any$ O O O $complex$ O $string$ O O O O $any$ O $string$ O O O $any$ O $string$ O O O O O O $complex$ O $string$ O O $any$ O $void$ O $any$ O $any$ O O O O $boolean$ O O $any$ O $any$ O O O O O O O O
<s> export class _UNKNOWN_ extends Error { constructor ( name , message , stack ? ) { super ( message ) ; this . name = name ; this . stack = stack || ( new Error ( message ) ) . stack ; } } </s>	O O O $any$ O $ErrorConstructor$ O O O $string$ O $string$ O $string$ $string$ O O O O $string$ O O O O $string$ O $string$ O O O $string$ O $string$ O O O $ErrorConstructor$ O $string$ O O O $string$ O O O O
<s> import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ { public async : boolean = false ; public _UNKNOWN_ : Function ; public _UNKNOWN_ : Function ; public returnValue : any ; public _UNKNOWN_ : _UNKNOWN_ ; public _UNKNOWN_ : boolean = false ; } </s>	O O O $any$ O O O O O O $any$ O O $boolean$ O O O O O O $Function$ O $FunctionConstructor$ O O $Function$ O $FunctionConstructor$ O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; declare interface _UNKNOWN_ { type : _UNKNOWN_ ; } declare interface _UNKNOWN_ extends _UNKNOWN_ { id : string ; } declare interface _UNKNOWN_ extends _UNKNOWN_ { name : string ; arguments : any [ ] ; } declare interface _UNKNOWN_ extends _UNKNOWN_ { returnValue : any ; } declare interface _UNKNOWN_ extends _UNKNOWN_ { name : string ; message : string ; stack ? : string ; } export enum _UNKNOWN_ { _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' } ; export class _UNKNOWN_ extends _UNKNOWN_ { private _port : _UNKNOWN_ ; private _UNKNOWN_ : { [ key ] : { fn : Function , scope : Object | null | undefined } } = { } ; private _UNKNOWN_ : { [ key ] : _UNKNOWN_ } = { } ; private _UNKNOWN_ : number = 0 ; private _UNKNOWN_ : boolean = false ; constructor ( port ) { super ( ) ; this . _port = port ; } _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; if ( this . _port ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = true ; let detail = { type : _UNKNOWN_ . _UNKNOWN_ } ; this . _port . send ( detail ) ; } this . _port . dispose ( ) ; } delete this . _port ; this . _UNKNOWN_ = { } ; this . _UNKNOWN_ = { } ; this . _UNKNOWN_ = 0 ; } _UNKNOWN_ ( ) { return this . _port ; } _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) . listen ( this . _UNKNOWN_ ( ) , _UNKNOWN_ . MESSAGE , this . _UNKNOWN_ , false ) ; } _UNKNOWN_ ( name , fn , scope : Object | null | undefined = null ) { this . _UNKNOWN_ [ name ] = { fn : fn , scope : scope } ; } _UNKNOWN_ ( name ) { delete this . _UNKNOWN_ [ name ] ; } call ( name , ... args : any [ ] ) : Promise < any > | any { let id = ++ this . _UNKNOWN_ + 's' ; let request = { } as _UNKNOWN_ ; request . type = _UNKNOWN_ . _UNKNOWN_ ; request . id = id ; request . name = name ; request . arguments = args ; let instance = new _UNKNOWN_ ( ) ; this . _UNKNOWN_ [ id ] = instance ; this . _port . send ( request ) ; if ( instance . _UNKNOWN_ ) { delete this . _UNKNOWN_ [ id ] ; if ( instance . _UNKNOWN_ ) { throw instance . _UNKNOWN_ ; } else { return instance . returnValue ; } } else { instance . async = true ; return new Promise ( ( resolve , reject ) => { instance . _UNKNOWN_ = resolve ; instance . _UNKNOWN_ = reject ; } ) ; } } _UNKNOWN_ ( name , ... args : any [ ] ) { let id = ++ this . _UNKNOWN_ + 's' ; let request = { } as _UNKNOWN_ ; request . type = _UNKNOWN_ . _UNKNOWN_ ; request . id = id ; request . name = name ; request . arguments = args ; let instance = new _UNKNOWN_ ( ) ; this . _UNKNOWN_ [ id ] = instance ; this . _port . send ( request ) ; if ( instance . _UNKNOWN_ ) { delete this . _UNKNOWN_ [ id ] ; if ( instance . _UNKNOWN_ ) { console . error ( instance . _UNKNOWN_ ) ; throw instance . _UNKNOWN_ ; } else { return instance . returnValue ; } } else { instance . async = true ; instance . _UNKNOWN_ = function ( ) { } ; instance . _UNKNOWN_ = function ( ) { } ; throw new Error ( "s" ) ; } } callAsync ( name , ... args : any [ ] ) < any > { let id = ++ this . _UNKNOWN_ + 's' ; let request = { } as _UNKNOWN_ ; request . type = _UNKNOWN_ . _UNKNOWN_ ; request . id = id ; request . name = name ; request . arguments = args ; let instance = new _UNKNOWN_ ( ) ; this . _UNKNOWN_ [ id ] = instance ; this . _port . send ( request ) ; if ( instance . _UNKNOWN_ ) { delete this . _UNKNOWN_ [ id ] ; throw new Error ( "s" ) ; } else { instance . async = true ; return new Promise ( ( resolve , reject ) => { instance . _UNKNOWN_ = resolve ; instance . _UNKNOWN_ = reject ; } ) ; } } private _UNKNOWN_ ( e ) { let detail = e . payload as _UNKNOWN_ ; let type = detail . type ; switch ( type ) { case _UNKNOWN_ . _UNKNOWN_ : this . _UNKNOWN_ ( detail as _UNKNOWN_ ) ; break ; case _UNKNOWN_ . _UNKNOWN_ : this . _UNKNOWN_ ( detail as _UNKNOWN_ ) ; break ; case _UNKNOWN_ . _UNKNOWN_ : this . _UNKNOWN_ ( detail as _UNKNOWN_ ) ; break ; case _UNKNOWN_ . _UNKNOWN_ : this . _UNKNOWN_ = true ; this . dispose ( ) ; default : break ; } } private _UNKNOWN_ ( detail ) { let id = detail . id ; let name = detail . name ; if ( this . _UNKNOWN_ . hasOwnProperty ( name ) ) { try { let service = this . _UNKNOWN_ [ name ] ; let returnValue = service . fn . apply ( service . scope , detail [ 's' ] ) ; if ( returnValue instanceof Promise ) { returnValue . then ( ( returnValue ) => { let response = { } as _UNKNOWN_ ; response . id = id ; response . type = _UNKNOWN_ . _UNKNOWN_ ; response . returnValue = returnValue ; this . _port . send ( response ) ; } , ( err ) => { console . error ( err ) ; let response = { } as _UNKNOWN_ ; response . id = id ; response . type = _UNKNOWN_ . _UNKNOWN_ ; response . name = err . name ; response . message = err . message ; response . stack = err . stack ; this . _port . send ( response ) ; } ) } else { let response = { } as _UNKNOWN_ ; response . id = id ; response . type = _UNKNOWN_ . _UNKNOWN_ ; response . returnValue = returnValue ; this . _port . send ( response ) ; } } catch ( err ) { let response = { } as _UNKNOWN_ ; response . id = id ; response . type = _UNKNOWN_ . _UNKNOWN_ ; response . name = err . name ; response . message = err . message ; response . stack = err . stack ; this . _port . send ( response ) ; } } else { let response = { } as _UNKNOWN_ ; response . id = id ; response . type = _UNKNOWN_ . _UNKNOWN_ ; response . name = "s" ; response . message = "s" + name + "s" ; this . _port . send ( response ) ; } } private _UNKNOWN_ ( detail ) { let id = detail . id ; let returnValue = detail . returnValue ; let instance = this . _UNKNOWN_ [ id ] ; instance . _UNKNOWN_ = true ; if ( instance . async ) { delete this . _UNKNOWN_ [ id ] ; instance . _UNKNOWN_ ( returnValue ) ; } else { instance . returnValue = returnValue ; } } private _UNKNOWN_ ( detail ) { let id = detail . id ; let _UNKNOWN_ = detail . name ; let errorMessage = detail . message ; let stack = detail . stack ; let err = new _UNKNOWN_ ( _UNKNOWN_ , errorMessage , stack ) ; let instance = this . _UNKNOWN_ [ id ] ; instance . _UNKNOWN_ = true ; if ( instance . async ) { delete this . _UNKNOWN_ [ id ] ; instance . _UNKNOWN_ ( err ) ; } else { instance . _UNKNOWN_ = err ; } } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O $any[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $complex$ O O O $string$ O O O $Function$ O $FunctionConstructor$ O $Object$ O $ObjectConstructor$ O O O O O O O O O O O $complex$ O O O $string$ O O $any$ O O O O O O $number$ O O O O O O $boolean$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O $void$ O O O O O $void$ O O O O O O O $any$ O O O O O O O $boolean$ O O O O $boolean$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $void$ O $any$ O O O O O $any$ O $void$ O O O O O O O $any$ O O O $complex$ O O O O O O $complex$ O O O O O O $number$ O O O O $any$ O O O O O O $any$ O O $void$ O O O O O $void$ O O O O O $EventHandler$ O O O $EventHandler$ O O O $any$ O O O $any$ O $any$ O O O $void$ O O O O O $void$ O $string$ O $Function$ O $Object$ O $ObjectConstructor$ O O O O O O O O O O $complex$ O $string$ O O O $Function$ O $Function$ O $Object$ O $Object$ O O O $void$ O $string$ O O O O O $complex$ O $string$ O O O $any$ O $string$ O O $any[]$ O O O O O O $PromiseConstructor$ O O O O O O O $string$ O O O O $number$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $string$ O $any$ O $string$ O $string$ O $any$ O $any[]$ O $any[]$ O O $any$ O O $any$ O O O O O $complex$ O $string$ O O $any$ O O O $any$ O $void$ O $any$ O O O O $any$ O $boolean$ O O O O O $complex$ O $string$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $boolean$ O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $any$ O $Function$ O $void$ O $any$ O $Function$ O $void$ O O O O O O $any$ O $string$ O O $any[]$ O O O O O O O $string$ O O O O $number$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $string$ O $any$ O $string$ O $string$ O $any$ O $any[]$ O $any[]$ O O $any$ O O $any$ O O O O O $complex$ O $string$ O O $any$ O O O $any$ O $void$ O $any$ O O O O $any$ O $boolean$ O O O O O $complex$ O $string$ O O O O $any$ O $any$ O O $Console$ O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $boolean$ O O O $any$ O $Function$ O O O O O O O $any$ O $Function$ O O O O O O O O O $ErrorConstructor$ O O O O O O $Promise$ O $string$ O O $any[]$ O O O O O O O O O O $string$ O O O O $number$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $string$ O $any$ O $string$ O $string$ O $any$ O $any[]$ O $any[]$ O O $any$ O O $any$ O O O O O $complex$ O $string$ O O $any$ O O O $any$ O $void$ O $any$ O O O O $any$ O $boolean$ O O O O O $complex$ O $string$ O O O O $ErrorConstructor$ O O O O O O O $any$ O $boolean$ O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $any$ O $Function$ O $void$ O $any$ O $Function$ O $void$ O O O O O O O $void$ O $MessageEvent$ O O O $any$ O $MessageEvent$ O $Object$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $boolean$ O O O O O $void$ O O O O O O O O O O $void$ O $any$ O O O $string$ O $any$ O $string$ O O $string$ O $any$ O $string$ O O O O O $complex$ O $boolean$ O $string$ O O O O O O $complex$ O O O $complex$ O $string$ O O O $any$ O $complex$ O $Function$ O $any$ O $complex$ O $Object$ O $any$ O O O O O O O $any$ O $PromiseConstructor$ O O $Promise<any>$ O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $string$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O O O O O $Error$ O O O $Console$ O $void$ O $Error$ O O O $any$ O O O O $any$ O $any$ O $string$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $Error$ O $string$ O $any$ O $string$ O $Error$ O $string$ O $any$ O $string$ O $Error$ O $string$ O O O $any$ O $void$ O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O O O O O O $any$ O O O $any$ O O O O $any$ O $any$ O $string$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O $string$ O O O O O $any$ O $void$ O $any$ O O O O O $void$ O $any$ O O O $string$ O $any$ O $string$ O O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O $string$ O O $any$ O $boolean$ O O O O O $any$ O $boolean$ O O O O O $complex$ O $string$ O O $any$ O $Function$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O $string$ O $any$ O $string$ O O $string$ O $any$ O $string$ O O $string$ O $any$ O $string$ O O $string$ O $any$ O $string$ O O $any$ O O $any$ O $string$ O $string$ O $string$ O O O $any$ O O O $complex$ O $string$ O O $any$ O $boolean$ O O O O O $any$ O $boolean$ O O O O O $complex$ O $string$ O O $any$ O $Function$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; export enum _UNKNOWN_ { _UNKNOWN_ = - 0 , _UNKNOWN_ = 0 , _UNKNOWN_ = 0 , _UNKNOWN_ = 0 , _UNKNOWN_ = 0 , _UNKNOWN_ = 0 } export enum _UNKNOWN_ { _UNKNOWN_ = 0 , _UNKNOWN_ = 0 } export enum _UNKNOWN_ { _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , 0 = 's' , 0 = 's' , 0 = 's' , 0 = 's' , _UNKNOWN_ = 's' } export module _UNKNOWN_ { export function getValues ( ) : _UNKNOWN_ [ ] { return [ _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ . 0 , _UNKNOWN_ . 0 , _UNKNOWN_ . 0 , _UNKNOWN_ . 0 , _UNKNOWN_ . _UNKNOWN_ ] ; } } export declare interface _UNKNOWN_ { _UNKNOWN_ : { ( videoId , _UNKNOWN_ ? , _UNKNOWN_ ? ) : void ; ( options : { videoId : string , _UNKNOWN_ ? : number , _UNKNOWN_ ? : number , _UNKNOWN_ ? : _UNKNOWN_ } ) : void ; } ; _UNKNOWN_ : { ( videoId , _UNKNOWN_ ? , _UNKNOWN_ ? ) : void ; ( options : { videoId : string , _UNKNOWN_ ? : number , _UNKNOWN_ ? : number , _UNKNOWN_ ? : _UNKNOWN_ } ) : void ; } ; _UNKNOWN_ : { ( _UNKNOWN_ , _UNKNOWN_ ? , _UNKNOWN_ ? ) : void ; ( options : { _UNKNOWN_ : string , _UNKNOWN_ ? : number , _UNKNOWN_ ? : number , _UNKNOWN_ ? : _UNKNOWN_ } ) : void ; } ; _UNKNOWN_ : { ( _UNKNOWN_ , _UNKNOWN_ ? , _UNKNOWN_ ? ) : void ; ( options : { _UNKNOWN_ : string , _UNKNOWN_ ? : number , _UNKNOWN_ ? : number , _UNKNOWN_ ? : _UNKNOWN_ } ) : void ; } ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( ) => number ; _UNKNOWN_ : ( ) => number ; _UNKNOWN_ : ( ) => number ; _UNKNOWN_ : ( ) => number ; _UNKNOWN_ : { ( _UNKNOWN_ : string | string [ ] , index ? , _UNKNOWN_ ? , _UNKNOWN_ ? ) : void ; ( options : { _UNKNOWN_ ? : 's' | 's' | 's' , list : string , index ? : number , _UNKNOWN_ ? : number , _UNKNOWN_ ? : _UNKNOWN_ } ) : void ; } ; _UNKNOWN_ : { ( _UNKNOWN_ : string | string [ ] , index ? , _UNKNOWN_ ? , _UNKNOWN_ ? ) : void ; ( options : { _UNKNOWN_ ? : 's' | 's' | 's' , list : string , index ? : number , _UNKNOWN_ ? : number , _UNKNOWN_ ? : _UNKNOWN_ } ) : void ; } ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( time ) => void ; _UNKNOWN_ : ( _UNKNOWN_ ) => void ; _UNKNOWN_ : ( loop ) => void ; _UNKNOWN_ : ( ) => string [ ] ; _UNKNOWN_ : ( ) => number ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; setOption : Function ; _UNKNOWN_ : Function ; getOptions : Function ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( ) => boolean ; _UNKNOWN_ : ( volume ) => void ; _UNKNOWN_ : ( ) => number ; _UNKNOWN_ : ( time , _UNKNOWN_ ? ) => void ; _UNKNOWN_ : ( ) => _UNKNOWN_ ; _UNKNOWN_ : ( ) => number ; _UNKNOWN_ : ( rate ) => void ; _UNKNOWN_ : ( ) => number [ ] ; _UNKNOWN_ : ( ) => _UNKNOWN_ ; _UNKNOWN_ : ( quality ) => void ; _UNKNOWN_ : ( ) => _UNKNOWN_ [ ] ; getCurrentTime : ( ) => number ; getDuration : ( ) => number ; addEventListener : ( type , fn : Function | string ) => void ; removeEventListener : ( type , fn : Function | string ) => void ; _UNKNOWN_ : ( ) => string ; _UNKNOWN_ : ( ) => string ; _UNKNOWN_ : ( ) => string ; _UNKNOWN_ : ( ) => any ; _UNKNOWN_ : ( id , start , end ) => boolean ; _UNKNOWN_ : ( id ) => boolean ; setSize : ( width , height ) => void ; _UNKNOWN_ : ( ) => _UNKNOWN_ ; destroy : ( ) => void ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( ) => number ; _UNKNOWN_ : ( ) => number ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( _UNKNOWN_ ) => void ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( seconds ) => void ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( ) => string ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( start , end ) => void ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( mediaType ) => boolean ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( ) => _UNKNOWN_ ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( state ) => void ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( ) => number ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( ) => { left : number , top : number , width : number , height : number } ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( _UNKNOWN_ ) => void ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( ) => boolean ; _UNKNOWN_ : ( ) => boolean ; _UNKNOWN_ : ( _UNKNOWN_ ) => void ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( ) => { width : number , height : number } ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : ( ) => boolean ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O O O O O O O O O O O O O O O O $any$ O O O O O $any$ O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O $complex$ O O O $string$ O $number$ $number$ O $any$ $any$ O O O O O $complex$ O O $string$ O O O $number$ O O O O $number$ O O O O $any$ O O $any$ O O O O O O O $complex$ O O O $string$ O $number$ $number$ O $any$ $any$ O O O O O $complex$ O O $string$ O O O $number$ O O O O $number$ O O O O $any$ O O $any$ O O O O O O O $complex$ O O O $string$ O $number$ $number$ O $any$ $any$ O O O O O $complex$ O O $string$ O O O $number$ O O O O $number$ O O O O $any$ O O $any$ O O O O O O O $complex$ O O O $string$ O $number$ $number$ O $any$ $any$ O O O O O $complex$ O O $string$ O O O $number$ O O O O $number$ O O O O $any$ O O $any$ O O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $complex$ O O O $complex$ O O O O O O O $number$ $number$ O $number$ $number$ O $any$ $any$ O O O O O $complex$ O O O O O O O O O O O $string$ O O O $number$ O O O O $number$ O O O O $any$ O O $any$ O O O O O O O $complex$ O O O $complex$ O O O O O O O $number$ $number$ O $number$ $number$ O $any$ $any$ O O O O O $complex$ O O O O O O O O O O O $string$ O O O $number$ O O O O $number$ O O O O $any$ O O $any$ O O O O O O O $void$ O O O O O O $void$ O O O O O O $void$ O O $number$ O O O O $void$ O O $boolean$ O O O O $void$ O O $boolean$ O O O O $string[]$ O O O O O O O O $number$ O O O O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $void$ O O O O O O $void$ O O O O O O $boolean$ O O O O O O $void$ O O $number$ O O O O $number$ O O O O O O $void$ O O $number$ O $boolean$ $boolean$ O O O O $any$ O O O O $any$ O $number$ O O O O O O $void$ O O $number$ O O O O $number[]$ O O O O O O O O $any$ O O O O $any$ O $void$ O O $any$ O O O O $any$ O O O O $any$ O O O $number$ O O O O O O $number$ O O O O O O $void$ O O $string$ O $complex$ O $FunctionConstructor$ O O O O O O $void$ O O $string$ O $complex$ O $FunctionConstructor$ O O O O O O $string$ O O O O O O $string$ O O O O O O $string$ O O O O O O $any$ O O O O O O $boolean$ O O $string$ O $number$ O $number$ O O O O $boolean$ O O $string$ O O O O $void$ O O $number$ O $number$ O O O O $any$ O O O O $any$ O $void$ O O O O O O $void$ O O O O O O $void$ O O O O O O $number$ O O O O O O $number$ O O O O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $void$ O O $any$ O O O O $Function$ O $FunctionConstructor$ O $void$ O O $number$ O O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $string$ O O O O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $void$ O O $any$ O $any$ O O O O $Function$ O $FunctionConstructor$ O $boolean$ O O $string$ O O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $any$ O O O O $any$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $void$ O O $any$ O O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $number$ O O O O O O $Function$ O $FunctionConstructor$ O $complex$ O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O $Function$ O $FunctionConstructor$ O $void$ O O $boolean$ O O O O $void$ O O O O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $boolean$ O O O O O O $boolean$ O O O O O O $void$ O O $boolean$ O O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $complex$ O O O O O $number$ O O O $number$ O O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $boolean$ O O O O O O O O
<s> import { _UNKNOWN_ } from "s" ; export declare interface _UNKNOWN_ { url : string ; attrs : { id : string , _UNKNOWN_ : string } ; assets : { css : string , js : string } ; 0 : boolean ; params : { _UNKNOWN_ : string , _UNKNOWN_ : string , _UNKNOWN_ : string } ; _UNKNOWN_ : number ; _UNKNOWN_ : string ; messages : { _UNKNOWN_ : string [ ] } ; args : _UNKNOWN_ ; loaded : boolean ; } export enum _UNKNOWN_ { _UNKNOWN_ = "s" , _UNKNOWN_ = "s" , _UNKNOWN_ = "s" , _UNKNOWN_ = "s" , _UNKNOWN_ = "s" , _UNKNOWN_ = "s" , _UNKNOWN_ = "s" , _UNKNOWN_ = "s" } export declare interface _UNKNOWN_ { _UNKNOWN_ ? : string ; 0 ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; 0 ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; author ? : string ; _UNKNOWN_ ? : number ; autoplay ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; baseUrl ? : string ; c ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; cid ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; cos ? : string ; _UNKNOWN_ ? : string ; cr ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; delay ? : number ; el ? : _UNKNOWN_ ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; feature ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; 0 ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; keywords ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; of ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; ps ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; ssl ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; t ? : string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; timestamp ? : string ; title ? : string ; _UNKNOWN_ ? : string ; token ? : string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; uid ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; vid ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; vm ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; watermark ? : string ; _UNKNOWN_ ? : string ; subscribed ? : string ; } </s>	O O O $any$ O O O O O O O $any$ O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O $string$ O O O $string$ O O O O $boolean$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O $number$ O O O $string$ O O O $complex$ O O $string[]$ O O O O O O $any$ O $any$ O $boolean$ O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $number$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $number$ O O O O $any$ O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $any$ O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O O
<s> export enum _UNKNOWN_ { _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , ERROR = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' } ; </s>	O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O O
<s> export interface _UNKNOWN_ { play ( ) : void ; pause ( ) : void ; stop ( ) : void ; _UNKNOWN_ ( time ) : void ; _UNKNOWN_ ( time ) : void ; } </s>	O O O $any$ O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O $number$ O O O O $void$ O $number$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { EventTarget } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import merge = require ( 's' ) ; export class _UNKNOWN_ extends EventTarget implements _UNKNOWN_ { private _id : string ; private _UNKNOWN_ : string ; private _port : _UNKNOWN_ ; private _data : _UNKNOWN_ = { } ; private _UNKNOWN_ : boolean = false ; constructor ( id , _UNKNOWN_ , port ) { super ( ) ; this . _id = id ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _port = port ; } protected _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; delete this . _id ; delete this . _port ; } private _UNKNOWN_ ( name , ... args : any [ ] ) { return this . _port . _UNKNOWN_ ( "s" , this . _id , name , ... args ) ; } _UNKNOWN_ ( loaded ) { return this . _port . _UNKNOWN_ ( "s" , this . _id , loaded ) ; } triggerKeyDown ( keyCode , bubbles ) { return this . _port . _UNKNOWN_ ( "s" , this . _id , keyCode , bubbles ) ; } setData ( data ) { merge ( this . _data , data ) ; } getData ( ) { return this . _data ; } _UNKNOWN_ ( ) { return this . _data . el === _UNKNOWN_ . _UNKNOWN_ || ! this . _data . el ; } _UNKNOWN_ ( ) { return this . _data . el === _UNKNOWN_ . _UNKNOWN_ ; } _UNKNOWN_ ( ) { return this . _data . el === _UNKNOWN_ . _UNKNOWN_ ; } _UNKNOWN_ ( state ) { this . _UNKNOWN_ ( 's' , state ) ; } getId ( ) { return this . _id ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } getElement ( ) : Element | null { return document . getElementById ( this . _UNKNOWN_ ( ) ) ; } ready ( ) { this . _UNKNOWN_ = true ; } isReady ( ) { return this . _UNKNOWN_ ; } play ( ) { this . _UNKNOWN_ ( "s" ) ; } pause ( ) { this . _UNKNOWN_ ( "s" ) ; } stop ( ) { this . _UNKNOWN_ ( "s" ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( "s" ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( "s" ) ; } _UNKNOWN_ ( time ) { this . _UNKNOWN_ ( "s" , time ) ; } _UNKNOWN_ ( time ) { this . _UNKNOWN_ ( "s" , time ) ; } _UNKNOWN_ ( data ) { this . _UNKNOWN_ ( "s" , data ) ; } _UNKNOWN_ ( data ) { this . _UNKNOWN_ ( "s" , data ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( "s" ) ; } _UNKNOWN_ ( quality ) { return this . _UNKNOWN_ ( "s" , quality ) ; } _UNKNOWN_ ( start , end ) { return this . _UNKNOWN_ ( "s" , start , end ) ; } _UNKNOWN_ ( ) : _UNKNOWN_ [ ] { return this . _UNKNOWN_ ( "s" ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( "s" ) ; } _UNKNOWN_ ( keyCode , _UNKNOWN_ ) { return this . _UNKNOWN_ ( "s" , keyCode , _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( "s" ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O $string$ O O O O $string$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $boolean$ O O O O O O O $string$ O $string$ O $any$ O O O O O O O O $string$ O $string$ O O O $string$ O $string$ O O O $any$ O $any$ O O O $void$ O O O O O $void$ O O O O O O $string$ O O O O $any$ O O O $any$ O $string$ O O $any[]$ O O O O O O O O O $any$ O $any$ O O O O O $string$ O $string$ O O $any[]$ O O O $any$ O $boolean$ O O O O O $any$ O $any$ O O O O O $string$ O $boolean$ O O O $void$ O $number$ O $boolean$ O O O O O $any$ O $any$ O O O O O $string$ O $number$ O $boolean$ O O O $void$ O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $complex$ O O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $void$ O $any$ O O O O $any$ O O O $any$ O O O $string$ O O O O O O $string$ O O $string$ O O O O O O $string$ O O $Element$ O O O $complex$ O O O O $Document$ O $HTMLElement$ O O O $string$ O O O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O O O O O $boolean$ O O $void$ O O O O O $any$ O O O O O $void$ O O O O O $any$ O O O O O $void$ O O O O O $any$ O O O O O $void$ O O O O O $any$ O O O O O $void$ O O O O O $any$ O O O O O $void$ O $number$ O O O O $any$ O O O $number$ O O O $void$ O $number$ O O O O $any$ O O O $number$ O O O $void$ O $any$ O O O O $any$ O O O $any$ O O O $void$ O $any$ O O O O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O O O O O $void$ O $any$ O O O O O $any$ O O O $any$ O O O $void$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $void$ O $number$ O $boolean$ O O O O O $any$ O O O $number$ O $boolean$ O O O $any$ O O O O O O $any$ O O O O O O O
<s> import { Event } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends Event { constructor ( public quality , target ? ) { super ( _UNKNOWN_ . _UNKNOWN_ , target ) ; } } export class _UNKNOWN_ extends Event { constructor ( public rate , target ? ) { super ( _UNKNOWN_ . _UNKNOWN_ , target ) ; } } export class _UNKNOWN_ extends Event { constructor ( public _UNKNOWN_ , target ? ) { super ( _UNKNOWN_ . _UNKNOWN_ , target ) ; } } export class _UNKNOWN_ extends Event { constructor ( public volume , public _UNKNOWN_ , target ? ) { super ( _UNKNOWN_ . _UNKNOWN_ , target ) ; } } export class _UNKNOWN_ extends Event { constructor ( public _UNKNOWN_ , type , target ? ) { super ( type , target ) ; } } export class _UNKNOWN_ extends Event { constructor ( public dataType , public _UNKNOWN_ , target ? ) { super ( _UNKNOWN_ . _UNKNOWN_ , target ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $Object$ $Object$ O O O O $any$ O $any$ O $Object$ O O O O O O $any$ O $any$ O O O O $number$ O $Object$ $Object$ O O O O $any$ O $any$ O $Object$ O O O O O O $any$ O $any$ O O O O $boolean$ O $Object$ $Object$ O O O O $any$ O $any$ O $Object$ O O O O O O $any$ O $any$ O O O O $number$ O O $boolean$ O $Object$ $Object$ O O O O $any$ O $any$ O $Object$ O O O O O O $any$ O $any$ O O O O $string$ O $string$ O $Object$ $Object$ O O O O $string$ O $Object$ O O O O O O $any$ O $any$ O O O O $string$ O O $number$ O $Object$ $Object$ O O O O $any$ O $any$ O $Object$ O O O O O
<s> export enum _UNKNOWN_ { _UNKNOWN_ , _UNKNOWN_ , CRITICAL , ERROR , WARNING , _UNKNOWN_ , INFO , DEBUG } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O
<s> import { _UNKNOWN_ } from "s" ; export interface ILogger { log ( level , message , ... args : any [ ] ) : void ; } </s>	O O O $any$ O O O O O O $any$ O $void$ O $any$ O $string$ O O $any[]$ O O O O O O O O O O
<s> import { ILogger } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; export class Logger implements ILogger { private _name : string ; constructor ( name ) { this . _name = name ; } log ( level , message , ... args : any [ ] ) { let msg = _UNKNOWN_ ( message , ... args ) ; if ( this . _name ) { msg = "s" + this . _name + "s" + msg ; } switch ( level ) { case _UNKNOWN_ . _UNKNOWN_ : case _UNKNOWN_ . _UNKNOWN_ : case _UNKNOWN_ . CRITICAL : case _UNKNOWN_ . ERROR : console . error ( msg ) ; break ; case _UNKNOWN_ . WARNING : console . warn ( msg ) ; break ; case _UNKNOWN_ . _UNKNOWN_ : case _UNKNOWN_ . INFO : console . log ( msg ) ; break ; case _UNKNOWN_ . DEBUG : console . debug ( msg ) ; break ; } } error ( message , ... args : any [ ] ) { this . log ( _UNKNOWN_ . ERROR , message , ... args ) ; } warning ( message , ... args : any [ ] ) { this . log ( _UNKNOWN_ . WARNING , message , ... args ) ; } info ( message , ... args : any [ ] ) { this . log ( _UNKNOWN_ . INFO , message , ... args ) ; } debug ( message , ... args : any [ ] ) { this . log ( _UNKNOWN_ . DEBUG , message , ... args ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O $string$ O O O O O $string$ O O O O $string$ O $string$ O O $void$ O $any$ O $string$ O O $any[]$ O O O O O O O $string$ O $any$ O $string$ O O $any[]$ O O O O O O $string$ O O $string$ O O O O O $string$ O O O $string$ O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $Console$ O $void$ O $string$ O O O O O $any$ O $any$ O $Console$ O $void$ O $string$ O O O O O $any$ O $any$ O O $any$ O $any$ O $Console$ O $void$ O $string$ O O O O O $any$ O $any$ O $Console$ O $void$ O $string$ O O O O O O $void$ O $string$ O O $any[]$ O O O O O O O O $void$ O $any$ O $any$ O $string$ O O $any[]$ O O O $void$ O $string$ O O $any[]$ O O O O O O O O $void$ O $any$ O $any$ O $string$ O O $any[]$ O O O $void$ O $string$ O O $any[]$ O O O O O O O O $void$ O $any$ O $any$ O $string$ O O $any[]$ O O O $void$ O $string$ O O $any[]$ O O O O O O O O $void$ O $any$ O $any$ O $string$ O O $any[]$ O O O O O
<s> export declare interface _UNKNOWN_ { _UNKNOWN_ : boolean ; _UNKNOWN_ : string | undefined ; } </s>	O O O O $any$ O $boolean$ O O O $string$ O O O O O O O
<s> export interface _UNKNOWN_ { getElement ( ) : JSX . Element ; } </s>	O O O $any$ O $any$ O O O $any$ O $any$ O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ { _UNKNOWN_ ( player , config ) : _UNKNOWN_ ; } export interface _UNKNOWN_ { _UNKNOWN_ ( player ) : void ; } export interface _UNKNOWN_ { _UNKNOWN_ ( player ) : void ; } export interface _UNKNOWN_ { _UNKNOWN_ ( player ) : void ; } export interface _UNKNOWN_ { _UNKNOWN_ ( player , data ) : _UNKNOWN_ ; } export interface _UNKNOWN_ { _UNKNOWN_ ( detail ) : void ; } export interface _UNKNOWN_ { _UNKNOWN_ ( ) : _UNKNOWN_ ; } export interface _UNKNOWN_ { _UNKNOWN_ ( player , name , ... args : any [ ] ) : _UNKNOWN_ | undefined | void ; } export interface _UNKNOWN_ { value : any ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $void$ O $any$ O O O O O O O $any$ O $void$ O $any$ O O O O O O O $any$ O $void$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $void$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $complex$ O $any$ O $string$ O O $any[]$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O
<s> export interface _UNKNOWN_ { set ( key , value ) : void get ( key , defaultValue ? ) : any ; remove ( key ) : void ; _UNKNOWN_ ( ) : Promise < void > ; } </s>	O O O $any$ O $void$ O $string$ O $any$ O O O $any$ O $string$ O $any$ $any$ O O O O $void$ O $string$ O O O O $Promise<void>$ O O O $PromiseConstructor$ O O O O O O
<s> export interface _UNKNOWN_ { set ( key , value ) : Promise < void > | void ; get ( key ) : Promise < string > | string ; remove ( key ) : Promise < void > | void ; } </s>	O O O $any$ O $complex$ O $string$ O $string$ O O $PromiseConstructor$ O O O O O O $complex$ O $string$ O O $PromiseConstructor$ O O O O O O $complex$ O $string$ O O $PromiseConstructor$ O O O O O O O O
<s> export enum ErrorCode { _UNKNOWN_ = "s" , _UNKNOWN_ = "s" , _UNKNOWN_ = "s" } </s>	O O O $any$ O $any$ O O O $any$ O O O $any$ O O O O
<s> import { _UNKNOWN_ } from 's' ; import { ErrorCode } from 's' ; export class Storage { constructor ( protected _UNKNOWN_ ) { } async set ( key , value ) < void > { if ( value === void 0 ) { await this . _UNKNOWN_ . remove ( key ) ; return ; } await this . _UNKNOWN_ . set ( key , JSON . stringify ( value ) ) ; } async get ( key ) < any > { let json ; try { json = await this . _UNKNOWN_ . get ( key ) ; } catch ( e ) { return undefined ; } if ( json === null ) { return undefined ; } try { return JSON . parse ( json ) ; } catch ( e ) { throw ErrorCode . _UNKNOWN_ ; } } async remove ( key ) < void > { await this . _UNKNOWN_ . remove ( key ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O $Promise$ O $string$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $complex$ O $string$ O O O O O O O O $any$ O $complex$ O $string$ O $JSON$ O $complex$ O $any$ O O O O O $Promise$ O $string$ O O O O O O $any$ O O O $any$ O O O O $any$ O $complex$ O $string$ O O O O O $any$ O O O $undefined$ O O O O $any$ O O O O O $undefined$ O O O O O $JSON$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O $Promise$ O $string$ O O O O O O O O $any$ O $complex$ O $string$ O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { Storage } from 's' ; export class _UNKNOWN_ implements _UNKNOWN_ { private _name : string ; private _cache : any ; private _UNKNOWN_ : Storage ; constructor ( name , storage ) { this . _name = name ; this . _UNKNOWN_ = storage ; } async _UNKNOWN_ ( ) < void > { this . _cache = await this . _UNKNOWN_ ( ) ; } private async _UNKNOWN_ ( ) < any > { return await this . _UNKNOWN_ . get ( "s" + this . _name ) || { } ; } private async _UNKNOWN_ ( ) < void > { await this . _UNKNOWN_ . set ( "s" + this . _name , this . _cache ) ; } set ( key , value ) { if ( ! this . _cache ) throw new Error ( "s" ) ; this . _cache [ key ] = value ; this . _UNKNOWN_ ( ) ; } get ( key , defaultValue ? ) { if ( ! this . _cache ) throw new Error ( "s" ) ; if ( this . _cache . hasOwnProperty ( key ) ) { return this . _cache [ key ] ; } return defaultValue ; } remove ( key ) { if ( ! this . _cache ) throw new Error ( "s" ) ; if ( this . _cache . hasOwnProperty ( key ) ) { delete this . _cache [ key ] ; } this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O $string$ O O O O $any$ O O O O $Storage$ O $any$ O O O $string$ O $Storage$ O O O O $string$ O $string$ O O O $Storage$ O $Storage$ O O O $Promise$ O O O O O O O O $any$ O O O O $Promise<any>$ O O O O O O $Promise$ O O O O O O O O O O $Storage$ O $Promise<any>$ O O O O O $string$ O O O O O O O O $Promise$ O O O O O O O O O $Storage$ O $Promise<void>$ O O O O O $string$ O O O $any$ O O O $void$ O $string$ O $any$ O O O O O O O $any$ O O O $ErrorConstructor$ O O O O O O $any$ O $string$ O O $any$ O O O $Promise<void>$ O O O O $any$ O $string$ O $any$ $any$ O O O O O O O $any$ O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $string$ O O O O $any$ O O $void$ O $string$ O O O O O O O $any$ O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $string$ O O O O O $Promise<void>$ O O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export class _UNKNOWN_ { private _UNKNOWN_ : string ; private _UNKNOWN_ : _UNKNOWN_ ; constructor ( namespace ) { this . _UNKNOWN_ = namespace ; this . _UNKNOWN_ = _UNKNOWN_ ( namespace ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } getNamespace ( ) { return this . _UNKNOWN_ ; } async _UNKNOWN_ ( ) < void > { await this . _UNKNOWN_ . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $string$ O O O O $any$ O $any$ O O O $string$ O O O O $string$ O $string$ O O O $any$ O $any$ O $string$ O O O $any$ O O O O O O $any$ O O $string$ O O O O O O $string$ O O O $Promise$ O O O O O O O O O $any$ O $Promise<void>$ O O O O O O
<s> import { Disposable } from "s" ; import { EventHandler } from "s" ; import { _UNKNOWN_ } from "s" ; import { Storage } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; let storage : Storage | undefined = undefined ; export function _UNKNOWN_ ( s ) { storage = s ; } export function _UNKNOWN_ ( name ) { if ( ! storage ) throw new Error ( "s" ) ; return new _UNKNOWN_ ( name , storage ) ; } export abstract class Component extends Disposable { private _handler : EventHandler ; protected _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; this . _handler . dispose ( ) ; } _UNKNOWN_ ( ) { if ( ! this . _handler ) { this . _handler = new EventHandler ( this ) ; } return this . _handler ; } abstract getApi ( ) ; } export interface _UNKNOWN_ { new ( ) : Component } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Storage$ O $any$ O O O $undefined$ O O O $void$ O $Storage$ O O $Storage$ O $Storage$ O O O O $any$ O $string$ O O O O O $Storage$ O O O $ErrorConstructor$ O O O O O O $any$ O $string$ O $Storage$ O O O O O O $any$ O $any$ O O $EventHandler$ O $any$ O O $void$ O O O O O $void$ O O O O O $EventHandler$ O $void$ O O O O $EventHandler$ O O O O O O O O $EventHandler$ O O O O $EventHandler$ O O $any$ O O O O O O O O $EventHandler$ O O O $any$ O O O O O O $any$ O O O O O $any$ O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export enum _UNKNOWN_ { _UNKNOWN_ = "s" , _UNKNOWN_ = "s" } export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( ) { super ( "s" ) ; } _UNKNOWN_ ( enabled ) { this . _UNKNOWN_ ( ) . set ( 's' , enabled ) ; } isEnabled ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , false ) ; } setMode ( mode ) { this . _UNKNOWN_ ( ) . set ( 's' , mode ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , _UNKNOWN_ . _UNKNOWN_ ) ; } _UNKNOWN_ ( enabled ) { this . _UNKNOWN_ ( ) . set ( 's' , enabled ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , false ) ; } _UNKNOWN_ ( mode ) { this . _UNKNOWN_ ( ) . set ( 's' , mode ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , _UNKNOWN_ . _UNKNOWN_ ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O $void$ O $boolean$ O O O O $any$ O O O $void$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O $void$ O $any$ O O O O $any$ O O O $void$ O O O $any$ O O O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O $void$ O $boolean$ O O O O $any$ O O O $void$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O $void$ O $any$ O O O O $any$ O O O $void$ O O O $any$ O O O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O O
<s> export class _UNKNOWN_ { private _UNKNOWN_ : { [ key ] : string } ; constructor ( flags : string | undefined ) { this . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( flags ) ; } setValue ( name , value ) { this . _UNKNOWN_ [ name ] = value ; } getValue ( name ) : string | undefined { if ( this . _UNKNOWN_ . hasOwnProperty ( name ) ) { return this . _UNKNOWN_ [ name ] ; } return undefined ; } toString ( ) { return _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } private static _UNKNOWN_ ( value ) { return encodeURIComponent ( value . replace ( "s" , "s" ) ) ; } private static _UNKNOWN_ ( value ) { return decodeURIComponent ( value ) . replace ( "s" , "s" ) ; } private static _UNKNOWN_ ( flags : { [ key ] : string } ) { const tokens : string [ ] = [ ] ; for ( let key in flags ) { if ( flags . hasOwnProperty ( key ) ) { tokens . push ( _UNKNOWN_ . _UNKNOWN_ ( key ) + "s" + _UNKNOWN_ . _UNKNOWN_ ( flags [ key ] ) ) ; } } return tokens . join ( "s" ) ; } private static _UNKNOWN_ ( raw : string | undefined ) : { [ key ] : string } { if ( ! raw ) return { } ; const flags : { [ key ] : string } = { } ; let tokens = raw . split ( "s" ) ; for ( let i = 0 ; i < tokens . length ; i ++ ) { const [ key , value ] = tokens [ i ] . split ( "s" ) ; flags [ this . _UNKNOWN_ ( key || "s" ) ] = this . _UNKNOWN_ ( value || "s" ) ; } return flags ; } } </s>	O O O $any$ O O $complex$ O O O $string$ O O O O O O O $string$ O O O O O O O O $complex$ O $any$ O $complex$ O $string$ O O O $void$ O $string$ O $string$ O O O O $complex$ O $string$ O O $string$ O O $string$ O $string$ O O O O O O O O O O $complex$ O $boolean$ O $string$ O O O O O O $complex$ O $string$ O O O O $undefined$ O O $string$ O O O O $any$ O $string$ O O O $complex$ O O O O O $string$ O $string$ O O O $string$ O $string$ O $complex$ O O O O O O O O O O $string$ O $string$ O O O $string$ O $string$ O O $complex$ O O O O O O O O O $string$ O $complex$ O O O $string$ O O O O O O O $string[]$ O O O O O O O O O O O $string$ O $complex$ O O O O $complex$ O $boolean$ O $string$ O O O $string[]$ O $number$ O $any$ O $string$ O $string$ O O O O $any$ O $string$ O $complex$ O $string$ O O O O O O O $string[]$ O $string$ O O O O O O O $complex$ O $string$ O O O O O O O O $string$ O O O O O O O O $string$ O O O O O O $complex$ O O O $string$ O O O O O O O O O $string[]$ O $string$ O $complex$ O O O O O O O $number$ O O O $number$ O $string[]$ O $number$ O $number$ O O O O O $string$ O $string$ O O $string[]$ O $number$ O O $complex$ O O O O $complex$ O O O $string$ O $string$ O O O O O O O $string$ O $string$ O O O O O O $complex$ O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { Component } from "s" ; import { _UNKNOWN_ } from "s" ; import { Logger } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { Settings as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; const logger = new Logger ( "s" ) ; export class _UNKNOWN_ extends Component implements _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ { private _UNKNOWN_ : _UNKNOWN_ ; private _UNKNOWN_ : { [ key ] : boolean } = { } ; getApi ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = new _UNKNOWN_ ( ) } return this . _UNKNOWN_ ; } private _UNKNOWN_ ( player ) { const api = this . getApi ( ) ; const enabled = api . isEnabled ( ) ; const _UNKNOWN_ = player . _UNKNOWN_ ( ) ; const id = player . getId ( ) ; if ( _UNKNOWN_ ) { if ( enabled ) { const mode = api . _UNKNOWN_ ( ) ; if ( mode === _UNKNOWN_ . _UNKNOWN_ ) { player . pause ( ) ; } } } else if ( player . _UNKNOWN_ ( ) ) { if ( api . _UNKNOWN_ ( ) ) { const mode = api . _UNKNOWN_ ( ) ; if ( mode === _UNKNOWN_ . _UNKNOWN_ ) { player . pause ( ) ; } } } } _UNKNOWN_ ( player , data ) { const api = this . getApi ( ) ; if ( api . isEnabled ( ) && player . _UNKNOWN_ ( ) ) { if ( api . _UNKNOWN_ ( ) === _UNKNOWN_ . _UNKNOWN_ ) { data . autoplay = "s" ; } } else if ( api . _UNKNOWN_ ( ) && player . _UNKNOWN_ ( ) ) { if ( api . _UNKNOWN_ ( ) === _UNKNOWN_ . _UNKNOWN_ ) { data . autoplay = "s" ; } } if ( player . isReady ( ) ) { this . _UNKNOWN_ ( player ) ; } return data ; } _UNKNOWN_ ( player , name , data ) : _UNKNOWN_ | undefined | void { const id = player . getId ( ) ; const _UNKNOWN_ = ! ! player . _UNKNOWN_ ( ) . _UNKNOWN_ ; const _UNKNOWN_ = this . _UNKNOWN_ [ id ] && ( name === "s" || name === "s" ) ; if ( _UNKNOWN_ ) { delete this . _UNKNOWN_ [ id ] ; } if ( _UNKNOWN_ && _UNKNOWN_ ) { logger . debug ( "s" , name ) ; player . _UNKNOWN_ ( true ) ; return { value : undefined } ; } else if ( name === "s" ) { const api = this . getApi ( ) ; const _UNKNOWN_ = api . isEnabled ( ) && player . _UNKNOWN_ ( ) && api . _UNKNOWN_ ( ) === _UNKNOWN_ . _UNKNOWN_ ; const _UNKNOWN_ = api . _UNKNOWN_ ( ) && player . _UNKNOWN_ ( ) && api . _UNKNOWN_ ( ) === _UNKNOWN_ . _UNKNOWN_ ; if ( ! _UNKNOWN_ && ! _UNKNOWN_ ) return ; logger . debug ( "s" ) ; try { return { value : player . _UNKNOWN_ ( data ) } ; } catch ( e ) { console . error ( e ) ; } } } _UNKNOWN_ ( player ) { const api = this . getApi ( ) ; const enabled = api . isEnabled ( ) ; const _UNKNOWN_ = player . _UNKNOWN_ ( ) ; const id = player . getId ( ) ; if ( _UNKNOWN_ && enabled ) { this . _UNKNOWN_ [ id ] = true ; } this . _UNKNOWN_ ( player ) ; if ( enabled && _UNKNOWN_ ) { player . _UNKNOWN_ ( false ) ; } } _UNKNOWN_ ( ) { return new _UNKNOWN_ ( this . getApi ( ) ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $Logger$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $complex$ O O O $string$ O O O O O O O O $any$ O O O O O O O O $any$ O O O O $any$ O O $any$ O O O O O O $any$ O O O $void$ O $any$ O O O $any$ O O O $any$ O O O O $boolean$ O $any$ O $boolean$ O O O O $boolean$ O $any$ O $boolean$ O O O O $string$ O $any$ O $string$ O O O O O $boolean$ O O O O $boolean$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O O O O O O $any$ O $boolean$ O O O O O O $any$ O $boolean$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O O $any$ O $boolean$ O O O $any$ O $boolean$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $string$ O O O O O O O O $any$ O $boolean$ O O O $any$ O $boolean$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $string$ O O O O O O O $any$ O $boolean$ O O O O O O $void$ O $any$ O O O O $any$ O O $complex$ O $any$ O $string$ O $any$ O O $any$ O O O O O O $string$ O $any$ O $string$ O O O O $boolean$ O O O $any$ O $any$ O O O $string$ O O $boolean$ O O O $complex$ O $string$ O O O $string$ O O O $string$ O O O O O O $boolean$ O O O O O $complex$ O $string$ O O O O O $boolean$ O $boolean$ O O $Logger$ O $void$ O O O $string$ O O $any$ O $any$ O O O O O O $undefined$ O $undefined$ O O O O O O $string$ O O O O O $any$ O O O $any$ O O O O $boolean$ O $any$ O $boolean$ O O O $any$ O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O O $boolean$ O $any$ O $boolean$ O O O $any$ O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $boolean$ O O $boolean$ O O O $Logger$ O $void$ O O O O O O O O $void$ O $any$ O $void$ O $any$ O O O O O O $any$ O O $Console$ O $void$ O $any$ O O O O O $void$ O $any$ O O O $any$ O O O $any$ O O O O $boolean$ O $any$ O $boolean$ O O O O $boolean$ O $any$ O $boolean$ O O O O $string$ O $any$ O $string$ O O O O O $boolean$ O $boolean$ O O O O $complex$ O $string$ O O O O O O O $void$ O $any$ O O O O $boolean$ O $boolean$ O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( ) { super ( "s" ) ; } isEnabled ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , false ) ; } _UNKNOWN_ ( enabled ) { this . _UNKNOWN_ ( ) . set ( 's' , enabled ) ; } setState ( state ) { this . _UNKNOWN_ ( ) . set ( 's' , state ) ; } getState ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , _UNKNOWN_ . _UNKNOWN_ ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O $void$ O $boolean$ O O O O $any$ O O O $void$ O O O $boolean$ O O O $void$ O $any$ O O O O $any$ O O O $void$ O O O $any$ O O O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { Component } from "s" ; import { _UNKNOWN_ } from "s" ; import { Logger } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { Settings as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; const logger = new Logger ( "s" ) ; export class _UNKNOWN_ extends Component implements _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ { private _UNKNOWN_ : { [ key ] : number } = { } ; private _UNKNOWN_ : _UNKNOWN_ ; getApi ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = new _UNKNOWN_ ( ) } return this . _UNKNOWN_ ; } _UNKNOWN_ ( player , name , data ) : _UNKNOWN_ | undefined | void { const id = player . getId ( ) ; if ( name === "s" ) { const api = this . getApi ( ) ; if ( api . isEnabled ( ) && this . _UNKNOWN_ [ id ] < 0 ) { this . _UNKNOWN_ [ id ] ++ ; const toggle = document . querySelector ( "s" ) ; if ( toggle ) { if ( api . getState ( ) === _UNKNOWN_ . _UNKNOWN_ ) { toggle . setAttribute ( "s" , "s" ) ; toggle . setAttribute ( "s" , "s" ) ; } else { toggle . removeAttribute ( "s" ) ; toggle . removeAttribute ( "s" ) ; } } return { value : undefined } ; } } } _UNKNOWN_ ( player ) { const api = this . getApi ( ) ; const id = player . getId ( ) ; if ( api . isEnabled ( ) && player . _UNKNOWN_ ( ) ) { logger . debug ( "s" + ( api . getState ( ) === _UNKNOWN_ . _UNKNOWN_ ? "s" : "s" ) + "s" ) ; player . _UNKNOWN_ ( api . getState ( ) ) ; } this . _UNKNOWN_ [ id ] = 0 ; } _UNKNOWN_ ( ) { return new _UNKNOWN_ ( this . getApi ( ) ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Logger$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O O $string$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O O $any$ O O O O O O $any$ O O $complex$ O $any$ O $string$ O $any$ O O $any$ O O O O O O $string$ O $any$ O $string$ O O O O O $string$ O O O O O $any$ O O O $any$ O O O O O $any$ O $boolean$ O O O O O $complex$ O $string$ O O O O O O O $complex$ O $string$ O O O O $Element$ O $Document$ O O O O O O O O $Element$ O O O O $any$ O $any$ O O O $any$ O $any$ O O $Element$ O $void$ O O O O O O $Element$ O $void$ O O O O O O O O O $Element$ O $void$ O O O O $Element$ O $void$ O O O O O O O O $undefined$ O $undefined$ O O O O O $void$ O $any$ O O O $any$ O O O $any$ O O O O $string$ O $any$ O $string$ O O O O O $any$ O $boolean$ O O O $any$ O $boolean$ O O O O $Logger$ O $void$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O $any$ O $void$ O $any$ O $any$ O O O O O O O $complex$ O $string$ O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O O O
<s> import { _UNKNOWN_ } from "s" ; export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( ) { super ( "s" ) ; } _UNKNOWN_ ( enabled ) { this . _UNKNOWN_ ( ) . set ( 's' , enabled ) ; } isEnabled ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , false ) ; } _UNKNOWN_ ( videoId ) { const blacklist : string [ ] = this . _UNKNOWN_ ( ) . get ( 's' , [ ] ) ; return blacklist . indexOf ( videoId ) !== - 0 ; } _UNKNOWN_ ( videoId ) { const whitelist : string [ ] = this . _UNKNOWN_ ( ) . get ( 's' , [ ] ) ; return whitelist . indexOf ( videoId ) !== - 0 ; } _UNKNOWN_ ( channelId ) { const blacklist : string [ ] = this . _UNKNOWN_ ( ) . get ( 's' , [ ] ) ; return blacklist . indexOf ( channelId ) !== - 0 ; } _UNKNOWN_ ( channelId ) { const whitelist : string [ ] = this . _UNKNOWN_ ( ) . get ( 's' , [ ] ) ; return whitelist . indexOf ( channelId ) !== - 0 ; } _UNKNOWN_ ( _UNKNOWN_ ) { this . _UNKNOWN_ ( ) . set ( 's' , _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , false ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O $void$ O $boolean$ O O O O $any$ O O O $void$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O $boolean$ O $string$ O O O $string[]$ O O O O O O O $any$ O O O $any$ O O O O O O O O $string[]$ O $number$ O $string$ O O O O O O $boolean$ O $string$ O O O $string[]$ O O O O O O O $any$ O O O $any$ O O O O O O O O $string[]$ O $number$ O $string$ O O O O O O $boolean$ O $string$ O O O $string[]$ O O O O O O O $any$ O O O $any$ O O O O O O O O $string[]$ O $number$ O $string$ O O O O O O $boolean$ O $string$ O O O $string[]$ O O O O O O O $any$ O O O $any$ O O O O O O O O $string[]$ O $number$ O $string$ O O O O O O $void$ O $boolean$ O O O O $any$ O O O $void$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { Component } from "s" ; import { _UNKNOWN_ } from "s" ; import { Logger } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { Settings as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; const logger = new Logger ( "s" ) ; export class _UNKNOWN_ extends Component implements _UNKNOWN_ , _UNKNOWN_ { private _UNKNOWN_ : _UNKNOWN_ ; getApi ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = new _UNKNOWN_ ( ) } return this . _UNKNOWN_ ; } _UNKNOWN_ ( player , data ) { const api = this . getApi ( ) ; if ( ! api . isEnabled ( ) ) return data ; const subscribed = player . getData ( ) . subscribed === "s" ; const videoId = player . getData ( ) . _UNKNOWN_ ; if ( ! videoId ) return data ; const channelId = player . getData ( ) . _UNKNOWN_ ; if ( ! channelId ) return data ; let _UNKNOWN_ = ! subscribed || ! api . _UNKNOWN_ ( ) ; if ( api . _UNKNOWN_ ( videoId ) || api . _UNKNOWN_ ( channelId ) ) { _UNKNOWN_ = false ; } if ( api . _UNKNOWN_ ( videoId ) || api . _UNKNOWN_ ( channelId ) ) { _UNKNOWN_ = true ; } if ( _UNKNOWN_ ) { logger . debug ( "s" + videoId + "s" ) ; delete data . 0 ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; delete data . _UNKNOWN_ ; data . 0 = "s" ; } return data ; } _UNKNOWN_ ( ) { return new _UNKNOWN_ ( this . getApi ( ) ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $Logger$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O $boolean$ O O O O $any$ O O $boolean$ O $any$ O $any$ O O O $string$ O O O O $string$ O $any$ O $any$ O O O $string$ O O O O $string$ O O $any$ O O $string$ O $any$ O $any$ O O O $string$ O O O O $string$ O O $any$ O O $boolean$ O O $boolean$ O O $any$ O $boolean$ O O O O O $any$ O $boolean$ O $string$ O O $any$ O $boolean$ O $string$ O O O $boolean$ O O O O O O $any$ O $boolean$ O $string$ O O $any$ O $boolean$ O $string$ O O O $boolean$ O O O O O O $boolean$ O O $Logger$ O $void$ O O O $string$ O O O O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $boolean$ O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $boolean$ O O $any$ O $boolean$ O O $any$ O $string$ O O $any$ O $string$ O $any$ O $string$ O O O O O $any$ O O $any$ O O O O O $any$ O O O $any$ O O O O O O O
<s> import { _UNKNOWN_ } from "s" ; export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( ) { super ( "s" ) ; } _UNKNOWN_ ( enabled ) { this . _UNKNOWN_ ( ) . set ( 's' , enabled ) ; } isEnabled ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , false ) ; } _UNKNOWN_ ( enabled ) { this . _UNKNOWN_ ( ) . set ( 's' , enabled ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , false ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O $void$ O $boolean$ O O O O $any$ O O O $void$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O $void$ O $boolean$ O O O O $any$ O O O $void$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O O O
<s> import { Component } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { Settings as _UNKNOWN_ } from 's' ; import { Logger } from "s" ; import { EventHandler } from "s" ; import { _UNKNOWN_ } from "s" ; import { getPath } from "s" ; const logger = new Logger ( "s" ) ; const _UNKNOWN_ : string [ ] = [ "s" , "s" , "s" , "s" ] ; export class _UNKNOWN_ extends Component implements _UNKNOWN_ , _UNKNOWN_ { private _UNKNOWN_ : _UNKNOWN_ ; getApi ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = new _UNKNOWN_ ( ) } return this . _UNKNOWN_ ; } private _UNKNOWN_ ( player , e ) { if ( e . altKey || e . shiftKey || e . metaKey || e . ctrlKey ) return ; const playerElement = player . getElement ( ) ; if ( playerElement && ( playerElement === e . target || playerElement . contains ( e . target as Node ) ) ) return ; const path = getPath ( e . target as Node ) . map ( ( node ) => node . tagName ) ; if ( path . findIndex ( tagName => _UNKNOWN_ . indexOf ( tagName ) !== - 0 ) !== - 0 ) return ; const api = this . getApi ( ) ; if ( ! api . _UNKNOWN_ ( ) ) return ; if ( player . triggerKeyDown ( e . keyCode , e . bubbles ) ) { e . preventDefault ( ) ; } } _UNKNOWN_ ( player ) { const api = this . getApi ( ) ; if ( ! api . isEnabled ( ) ) return ; const element = player . getElement ( ) ; if ( ! element ) return ; const handler = new EventHandler ( ) ; if ( player . _UNKNOWN_ ( ) === "s" ) { handler . listen ( document , 's' , ( e ) => this . _UNKNOWN_ ( player , e ) , false ) ; } logger . debug ( "s" ) ; const _UNKNOWN_ = element . querySelectorAll ( "s" ) ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { let tabIndex = _UNKNOWN_ [ i ] . getAttribute ( "s" ) ; if ( tabIndex === "s" ) continue ; _UNKNOWN_ [ i ] . removeAttribute ( "s" ) ; } logger . debug ( "s" ) ; const buttons = element . querySelectorAll ( "s" ) ; for ( let i = 0 ; i < buttons . length ; i ++ ) { handler . listen ( buttons [ i ] , 's' , ( ) => ( element as HTMLElement ) . focus ( ) , false ) ; } player . _UNKNOWN_ ( ( ) => handler . dispose ( ) ) ; } _UNKNOWN_ ( ) { return new _UNKNOWN_ ( this . getApi ( ) ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $Node[]$ O O O O O $Logger$ O O $any$ O O O O O $string[]$ O O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O O $any$ O O O O O O $any$ O O O $void$ O $any$ O $KeyboardEvent$ O O O O $KeyboardEvent$ O $boolean$ O $KeyboardEvent$ O $boolean$ O $KeyboardEvent$ O $boolean$ O $KeyboardEvent$ O $boolean$ O O O O $Element$ O $any$ O $Element$ O O O O O $Element$ O O $Element$ O $KeyboardEvent$ O $EventTarget$ O $Element$ O $boolean$ O $KeyboardEvent$ O $EventTarget$ O O O O O O O O $string[]$ O $Node[]$ O $KeyboardEvent$ O $EventTarget$ O O O O $U[]$ O O $Element$ O O $Element$ O $string$ O O O O $string[]$ O $number$ O $string$ O $string[]$ O $number$ O $string$ O O O O O O O O O O O O $any$ O O O $any$ O O O O O O $any$ O $boolean$ O O O O O O O $any$ O $void$ O $KeyboardEvent$ O $number$ O $KeyboardEvent$ O $boolean$ O O O $KeyboardEvent$ O $void$ O O O O O $void$ O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O $boolean$ O O O O O O $Element$ O $any$ O $Element$ O O O O O O $Element$ O O O O $EventHandler$ O O $any$ O O O O O $any$ O $string$ O O O O O O $EventHandler$ O $EventHandler$ O $Document$ O O O O $KeyboardEvent$ O O O O $void$ O $any$ O $KeyboardEvent$ O O O O O O $Logger$ O $void$ O O O O O $NodeListOf<Element>$ O $Element$ O O O O O O O O O $number$ O O O $number$ O $NodeListOf<Element>$ O $number$ O $number$ O O O O $string$ O $NodeListOf<Element>$ O $number$ O O $string$ O O O O O O $string$ O O O O O $NodeListOf<Element>$ O $number$ O O $void$ O O O O O $Logger$ O $void$ O O O O O $any$ O $Element$ O O O O O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O $EventHandler$ O $EventHandler$ O $any$ O $number$ O O O O O O O O $Element$ O $complex$ O O $void$ O O O O O O O $any$ O $void$ O O O O $EventHandler$ O $void$ O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( ) { super ( "s" ) ; } _UNKNOWN_ ( enabled ) { this . _UNKNOWN_ ( ) . set ( 's' , enabled ) ; } isEnabled ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , false ) ; } _UNKNOWN_ ( quality ) { this . _UNKNOWN_ ( ) . set ( 's' , quality ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , _UNKNOWN_ . _UNKNOWN_ ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { this . _UNKNOWN_ ( ) . set ( 's' , _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( ) . get ( 's' , true ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O $void$ O $boolean$ O O O O $any$ O O O $void$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O $void$ O $any$ O O O O $any$ O O O $void$ O O O $any$ O O O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O $void$ O $boolean$ O O O O $any$ O O O $void$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { Component } from "s" ; import { _UNKNOWN_ } from "s" ; import { Logger } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { Settings as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; const logger = new Logger ( "s" ) ; export class _UNKNOWN_ extends Component implements _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ { private _UNKNOWN_ : _UNKNOWN_ ; getApi ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = new _UNKNOWN_ ( ) } return this . _UNKNOWN_ ; } _UNKNOWN_ ( player ) { const api = this . getApi ( ) ; let _UNKNOWN_ = false ; this . _UNKNOWN_ ( ) . listen ( player , _UNKNOWN_ . _UNKNOWN_ , ( ) => { _UNKNOWN_ = true ; this . _UNKNOWN_ ( player , api . _UNKNOWN_ ( ) , api . _UNKNOWN_ ( ) ) ; } ) . listen ( player , _UNKNOWN_ . _UNKNOWN_ , ( ) => { if ( ! _UNKNOWN_ ) return ; _UNKNOWN_ = false ; this . _UNKNOWN_ ( player , api . _UNKNOWN_ ( ) , api . _UNKNOWN_ ( ) ) ; } ) } _UNKNOWN_ ( player ) { const api = this . getApi ( ) ; if ( ! api . isEnabled ( ) ) return ; const quality = api . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( player , quality , api . _UNKNOWN_ ( ) ) ; } _UNKNOWN_ ( player , data ) { const api = this . getApi ( ) ; if ( ! api . isEnabled ( ) ) return data ; const quality = api . _UNKNOWN_ ( ) ; data . _UNKNOWN_ = quality ; if ( ! player . isReady ( ) ) return data ; this . _UNKNOWN_ ( player , quality , api . _UNKNOWN_ ( ) ) ; return data ; } private _UNKNOWN_ ( player , quality , _UNKNOWN_ ) { let _UNKNOWN_ = player . _UNKNOWN_ ( ) ; let _UNKNOWN_ = player . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ . length === 0 ) { logger . debug ( "s" ) ; return ; } if ( _UNKNOWN_ . indexOf ( quality ) !== - 0 ) { if ( player . _UNKNOWN_ ( ) ) { player . _UNKNOWN_ ( quality ) ; } else { player . _UNKNOWN_ ( quality , quality ) ; } logger . debug ( "s" , quality ) ; return ; } const values = _UNKNOWN_ . getValues ( ) ; const _UNKNOWN_ = _UNKNOWN_ . map ( level => values . indexOf ( level ) ) ; const _UNKNOWN_ = values . indexOf ( quality ) ; if ( _UNKNOWN_ === - 0 ) { logger . warning ( "s" , quality ) ; return ; } const _UNKNOWN_ = ( ) : _UNKNOWN_ | undefined => { for ( let i = _UNKNOWN_ - 0 ; i >= 0 ; i -- ) { if ( _UNKNOWN_ . indexOf ( i ) !== - 0 ) { return values [ i ] ; } } return ; } ; const _UNKNOWN_ = ( ) : _UNKNOWN_ | undefined => { for ( let i = _UNKNOWN_ + 0 ; i < values . length ; i ++ ) { if ( _UNKNOWN_ . indexOf ( i ) !== - 0 ) { return values [ i ] ; } } return ; } ; let _UNKNOWN_ : _UNKNOWN_ | undefined ; if ( _UNKNOWN_ ) { _UNKNOWN_ = _UNKNOWN_ ( ) ; if ( ! _UNKNOWN_ ) _UNKNOWN_ = _UNKNOWN_ ( ) ; } else { _UNKNOWN_ = _UNKNOWN_ ( ) ; if ( ! _UNKNOWN_ ) _UNKNOWN_ = _UNKNOWN_ ( ) ; } if ( _UNKNOWN_ ) { if ( player . _UNKNOWN_ ( ) ) { player . _UNKNOWN_ ( _UNKNOWN_ ) ; } else { player . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } logger . debug ( "s" , _UNKNOWN_ , quality ) ; } else { logger . debug ( "s" , quality ) ; } } _UNKNOWN_ ( ) { return new _UNKNOWN_ ( this . getApi ( ) ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Logger$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O O $any$ O O O O O O $any$ O O $void$ O $any$ O O O $any$ O O O $any$ O O O O $boolean$ O O O O O $EventHandler$ O O O $EventHandler$ O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O $boolean$ O O O O O O O $EventHandler$ O $any$ O $any$ O $any$ O O O O O O O O $boolean$ O O O $boolean$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O $boolean$ O O O O O O O $void$ O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O $boolean$ O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O $boolean$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $boolean$ O O O O $any$ O O O $void$ O $any$ O $any$ O $any$ O $boolean$ O O O O O $any$ O O O $void$ O $any$ O $any$ O $boolean$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $number$ O O O O $Logger$ O $void$ O O O O O O O O O $any$ O $number$ O $any$ O O O O O O O O $any$ O $boolean$ O O O O $any$ O $void$ O $any$ O O O O O $any$ O $void$ O $any$ O $any$ O O O $Logger$ O $void$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $number[]$ O $any$ O $U[]$ O $any$ O $any$ O $number$ O $any$ O O O O $number$ O $any$ O $number$ O $any$ O O O O $number$ O O O O O $Logger$ O $void$ O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $number$ O $number$ O O O $number$ O O O $number$ O O O O O $number[]$ O $number$ O $number$ O O O O O O O $any$ O $number$ O O O O O O O O O $any$ O O O O $any$ O O O O O O O $number$ O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O O $number[]$ O $number$ O $number$ O O O O O O O $any$ O $number$ O O O O O O O O O $any$ O $any$ O O O O O $boolean$ O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $boolean$ O O O O $any$ O $void$ O $any$ O O O O O $any$ O $void$ O $any$ O $any$ O O O $Logger$ O $void$ O O O $any$ O $any$ O O O O O $Logger$ O $void$ O O O $any$ O O O O $any$ O O O O O $any$ O O O $any$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; export const components : _UNKNOWN_ [ ] = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O
<s> export declare module _UNKNOWN_ { export interface _UNKNOWN_ { url : string | undefined ; response : _UNKNOWN_ | _UNKNOWN_ | undefined ; } export interface _UNKNOWN_ { attr : { [ key ] : { [ key ] : string } } | undefined ; body : { [ key ] : string } | undefined ; cacheKey : string | undefined ; _UNKNOWN_ : string | undefined ; data : any | undefined ; head : string | undefined ; _UNKNOWN_ : string | undefined ; redirect : string | undefined ; reload : boolean | undefined ; timing : { [ key ] : number | string | boolean } | undefined ; title : string | undefined ; name : string | undefined ; url : string | undefined ; } export interface _UNKNOWN_ { cacheKey : string | undefined ; _UNKNOWN_ : string | undefined ; parts : _UNKNOWN_ [ ] | undefined ; timing : { [ key ] : number } | undefined ; type : "s" ; } } </s>	O O O O $any$ O O O $any$ O $string$ O O O O O $complex$ O $any$ O $any$ O O O O O O $any$ O $complex$ O O O $string$ O O O O $string$ O O O O O O O O $complex$ O O O $string$ O O O O O O O $string$ O O O O O $string$ O O O O O $any$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $boolean$ O O O O O $complex$ O O O $string$ O O O O O O O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O O O O $any$ O $string$ O O O O O $string$ O O O O O $any$ O $any$ O O O O O $complex$ O O O $string$ O O O O O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { EventHandler } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { Event } from 's' ; import { Logger } from 's' ; import { components } from 's' ; import { _UNKNOWN_ , Component , _UNKNOWN_ as _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { Storage } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const logger = new Logger ( 's' ) ; export class App extends _UNKNOWN_ { private _channel : _UNKNOWN_ = new _UNKNOWN_ ( 's' ) ; private _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; private _UNKNOWN_ : { [ key ] : _UNKNOWN_ } = { } ; private _components : Component [ ] = [ ] ; private _UNKNOWN_ : boolean = false ; private _UNKNOWN_ : Function [ ] = [ ] ; constructor ( storage ) { super ( ) ; _UNKNOWN_ ( storage ) ; for ( let i = 0 ; i < components . length ; i ++ ) { let m = new components [ i ] ( ) ; this . _components . push ( m ) ; } } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } async _UNKNOWN_ ( ) < void > { this . _UNKNOWN_ = false ; for ( let i = 0 ; i < this . _components . length ; i ++ ) { logger . debug ( "s" + this . _components [ i ] . getApi ( ) . getNamespace ( ) + "s" ) ; await this . _components [ i ] . getApi ( ) . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ = true ; let fn ; while ( fn = this . _UNKNOWN_ . shift ( ) ) { await fn ( ) ; } } getComponents ( ) : Component [ ] { return this . _components ; } _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; this . _channel . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) . listen ( this . _channel , _UNKNOWN_ . _UNKNOWN_ , this . _UNKNOWN_ , false ) . listen ( document . documentElement , "s" , this . _UNKNOWN_ , false ) . listen ( window , "s" , this . _UNKNOWN_ , false ) ; } _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; this . _channel . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . forEach ( port => { port . _UNKNOWN_ ( ) ; } , this ) ; } private _UNKNOWN_ ( e ) { const detail = e . detail as _UNKNOWN_ . _UNKNOWN_ ; let _UNKNOWN_ = { _UNKNOWN_ : false , _UNKNOWN_ : undefined } ; if ( detail . response ) { if ( ( detail . response as _UNKNOWN_ . _UNKNOWN_ ) . type === "s" ) { let d = detail . response as _UNKNOWN_ . _UNKNOWN_ ; if ( d . parts ) { for ( let i = 0 ; i < d . parts . length ; i ++ ) { _UNKNOWN_ . _UNKNOWN_ = d . parts [ i ] . name || d . parts [ i ] . title ; let timing = d . parts [ i ] . timing ; if ( timing ) { _UNKNOWN_ . _UNKNOWN_ = ! ! timing [ 's' ] ; } } } } else { let d = detail . response as _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ . _UNKNOWN_ = d . name || d . title ; if ( d . timing ) { _UNKNOWN_ . _UNKNOWN_ = ! ! d . timing [ 's' ] ; } } } logger . debug ( "s" + _UNKNOWN_ . _UNKNOWN_ + "s" + ( _UNKNOWN_ . _UNKNOWN_ ? "s" : "s" ) ) ; this . _components . forEach ( m => { const instance = ( m as any ) as _UNKNOWN_ ; if ( typeof instance . _UNKNOWN_ === 's' ) { instance . _UNKNOWN_ ( _UNKNOWN_ ) ; } } ) ; } private _UNKNOWN_ ( e ) { const detail = e . detail as _UNKNOWN_ ; if ( ! detail ) return ; let _UNKNOWN_ = { _UNKNOWN_ : detail . _UNKNOWN_ , _UNKNOWN_ : detail . _UNKNOWN_ } ; logger . debug ( "s" + _UNKNOWN_ . _UNKNOWN_ + "s" + ( _UNKNOWN_ . _UNKNOWN_ ? "s" : "s" ) ) ; this . _components . forEach ( m => { const instance = ( m as any ) as _UNKNOWN_ ; if ( typeof instance . _UNKNOWN_ === 's' ) { instance . _UNKNOWN_ ( _UNKNOWN_ ) ; } } ) ; } private _UNKNOWN_ ( id , _UNKNOWN_ , port ) { if ( ! this . _UNKNOWN_ . hasOwnProperty ( id ) ) { this . _UNKNOWN_ [ id ] = new _UNKNOWN_ ( id , _UNKNOWN_ , port ) ; this . _components . forEach ( m => { const instance = ( m as any ) as _UNKNOWN_ ; if ( typeof instance . _UNKNOWN_ === 's' ) { instance . _UNKNOWN_ ( this . _UNKNOWN_ [ id ] ) ; } } ) ; } return this . _UNKNOWN_ [ id ] ; } private _UNKNOWN_ ( id , _UNKNOWN_ , port ) { if ( ! this . _UNKNOWN_ . hasOwnProperty ( id ) ) throw new Error ( "s" + id + "s" ) ; this . _components . forEach ( m => { const instance = ( m as any ) as _UNKNOWN_ ; if ( typeof instance . _UNKNOWN_ === 's' ) { instance . _UNKNOWN_ ( this . _UNKNOWN_ [ id ] ) ; } } ) ; return this . _UNKNOWN_ [ id ] ; } private _UNKNOWN_ ( player ) { this . _components . forEach ( m => { const instance = ( m as any ) as _UNKNOWN_ ; if ( typeof instance . _UNKNOWN_ === 's' ) { instance . _UNKNOWN_ ( player ) ; } } ) ; } private _UNKNOWN_ ( player , config ) { player . setData ( config . args ) ; this . _components . forEach ( m => { const _UNKNOWN_ = ( m as any ) as _UNKNOWN_ ; const _UNKNOWN_ = ( m as any ) as _UNKNOWN_ ; if ( typeof _UNKNOWN_ . _UNKNOWN_ === 's' ) { config = _UNKNOWN_ . _UNKNOWN_ ( player , config ) ; } if ( typeof _UNKNOWN_ . _UNKNOWN_ === 's' ) { config . args = _UNKNOWN_ . _UNKNOWN_ ( player , config . args ) ; } player . setData ( config . args ) ; } ) ; return config ; } private _UNKNOWN_ ( player , data ) { player . setData ( data ) ; this . _components . forEach ( m => { const instance = ( m as any ) as _UNKNOWN_ ; if ( typeof instance . _UNKNOWN_ === 's' ) { data = instance . _UNKNOWN_ ( player , data ) ; player . setData ( data ) ; } } ) ; return data ; } private _UNKNOWN_ ( player , name , ... args : any [ ] ) { for ( let i = 0 ; i < this . _components . length ; i ++ ) { const instance = ( this . _components [ i ] as any ) as _UNKNOWN_ ; if ( typeof instance . _UNKNOWN_ === 's' ) { let response = instance . _UNKNOWN_ ( player , name , ... args ) as _UNKNOWN_ | undefined ; if ( response ) return response ; } } return undefined ; } private _UNKNOWN_ ( e ) { const port = new _UNKNOWN_ ( e . port ) ; this . _UNKNOWN_ . push ( port ) ; if ( this . _UNKNOWN_ ( ) ) { port . _UNKNOWN_ ( ) ; } port . _UNKNOWN_ ( "s" , ( msg , ... args : any [ ] ) => { logger . debug ( msg , ... args ) ; } ) ; port . _UNKNOWN_ ( "s" , async ( ) => { if ( ! this . _UNKNOWN_ ( ) ) { await new Promise ( ( resolve ) => { this . _UNKNOWN_ . push ( resolve ) ; } ) ; } } ) ; port . _UNKNOWN_ ( "s" , ( id , _UNKNOWN_ , config ) : any => { if ( this . _UNKNOWN_ . hasOwnProperty ( id ) ) throw new Error ( "s" + id + "s" ) ; let player = this . _UNKNOWN_ ( id , _UNKNOWN_ , port ) ; logger . debug ( "s" , id ) ; return this . _UNKNOWN_ ( player , config ) ; } ) ; port . _UNKNOWN_ ( "s" , ( id , _UNKNOWN_ , config ) => { let player = this . _UNKNOWN_ ( id , _UNKNOWN_ , port ) ; if ( player . isReady ( ) ) throw new Error ( "s" + id + "s" ) ; logger . debug ( "s" , id ) ; player . ready ( ) ; return this . _UNKNOWN_ ( this . _UNKNOWN_ [ id ] ) ; } ) ; port . _UNKNOWN_ ( "s" , ( id , config ) : any => { if ( ! this . _UNKNOWN_ . hasOwnProperty ( id ) ) throw new Error ( "s" + id + "s" ) ; logger . debug ( "s" , id ) ; return this . _UNKNOWN_ ( this . _UNKNOWN_ [ id ] , config ) ; } ) ; port . _UNKNOWN_ ( "s" , ( id , data ) : any => { if ( ! this . _UNKNOWN_ . hasOwnProperty ( id ) ) throw new Error ( "s" + id + "s" ) ; logger . debug ( "s" , id ) ; return this . _UNKNOWN_ ( this . _UNKNOWN_ [ id ] , data ) ; } ) ; port . _UNKNOWN_ ( "s" , ( id , name , ... args : any [ ] ) => { if ( ! this . _UNKNOWN_ . hasOwnProperty ( id ) ) throw new Error ( "s" + id + "s" ) ; logger . debug ( "s" , id , name ) ; return this . _UNKNOWN_ ( this . _UNKNOWN_ [ id ] , name , ... args ) ; } ) ; port . _UNKNOWN_ ( "s" , ( id , type , ... args : any [ ] ) => { if ( ! this . _UNKNOWN_ . hasOwnProperty ( id ) ) throw new Error ( "s" + id + "s" ) ; let player = this . _UNKNOWN_ [ id ] ; logger . debug ( "s" , id , type , args ) ; let evt ; switch ( type ) { case _UNKNOWN_ . _UNKNOWN_ : evt = new _UNKNOWN_ ( args [ 0 ] , player ) ; break ; case _UNKNOWN_ . _UNKNOWN_ : evt = new _UNKNOWN_ ( args [ 0 ] , player ) ; break ; case _UNKNOWN_ . _UNKNOWN_ : evt = new _UNKNOWN_ ( args [ 0 ] , player ) ; break ; case _UNKNOWN_ . _UNKNOWN_ : evt = new _UNKNOWN_ ( args [ 0 ] , args [ 0 ] , player ) ; break ; case _UNKNOWN_ . _UNKNOWN_ : case _UNKNOWN_ . _UNKNOWN_ : evt = new _UNKNOWN_ ( args [ 0 ] , type , player ) ; break ; case _UNKNOWN_ . _UNKNOWN_ : evt = new _UNKNOWN_ ( args [ 0 ] , args [ 0 ] , player ) ; break ; default : evt = new Event ( type , player ) ; } player . dispatchEvent ( evt ) ; return evt . defaultPrevented ; } ) ; } protected _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; this . _channel . dispose ( ) ; this . _UNKNOWN_ . forEach ( port => port . dispose ( ) ) ; this . _components . forEach ( m => m . dispose ( ) ) ; this . _UNKNOWN_ = [ ] ; this . _components = [ ] ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $void$ O $void$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Logger$ O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O O O O O O $complex$ O O O $string$ O O $any$ O O O O O O $Component[]$ O $any$ O O O O O O O $boolean$ O O O O O O $Function[]$ O $FunctionConstructor$ O O O O O O O O $Storage$ O O O O O O $void$ O $Storage$ O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O $Component$ O O $any$ O $number$ O O O O O O $Component[]$ O $number$ O $Component$ O O O O $boolean$ O O O O O O $boolean$ O O O $Promise$ O O O O O O O O $boolean$ O O O O O O $number$ O O O $number$ O O O $Component[]$ O $number$ O $number$ O O O $Logger$ O $void$ O O O O O $Component[]$ O $number$ O O $any$ O O O $string$ O O O O O O O O O $Component[]$ O $number$ O O $any$ O O O $Promise<void>$ O O O O O O $boolean$ O O O O $any$ O O O $any$ O O O $Function[]$ O $Function$ O O O O O $any$ O O O O O $Component[]$ O O O $any$ O O O O O O $Component[]$ O O $void$ O O O O O $void$ O O O O O $any$ O $void$ O O O O O $EventHandler$ O O O $EventHandler$ O O O $any$ O $any$ O $any$ O O O $void$ O O O O $EventHandler$ O $Document$ O $HTMLElement$ O O O O O $void$ O O O O $EventHandler$ O $complex$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $any$ O $void$ O O O O O $any$ O $void$ O $any$ O O $any$ O $void$ O O O O O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $false$ O O O $undefined$ O $undefined$ O O O O $any$ O $complex$ O O O O O $any$ O $complex$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O $number$ O O O $any$ O $string$ O $any$ O $any$ O $number$ O O $string$ O $any$ O $any$ O $number$ O O $string$ O O $complex$ O $any$ O $any$ O $number$ O O $complex$ O O O $complex$ O O $any$ O $boolean$ O O O $complex$ O O O O O O O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O $string$ O $any$ O $string$ O $any$ O $string$ O O O $any$ O $complex$ O O $any$ O $boolean$ O O O $any$ O $complex$ O O O O O O O $Logger$ O $void$ O O O $any$ O $string$ O O O O $any$ O $boolean$ O O O O O O O O O $Component[]$ O $void$ O $Component$ O O O $any$ O O $Component$ O O O O $any$ O O O O $any$ O $void$ O O O O $any$ O $void$ O $any$ O O O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O $boolean$ O $any$ O $boolean$ O $string$ O $any$ O $string$ O O $Logger$ O $void$ O O O $any$ O $string$ O O O O $any$ O $boolean$ O O O O O O O O O $Component[]$ O $void$ O $Component$ O O O $any$ O O $Component$ O O O O $any$ O O O O $any$ O $void$ O O O O $any$ O $void$ O $any$ O O O O O O O O $any$ O $string$ O $string$ O $any$ O O O O O O O $complex$ O $boolean$ O $string$ O O O O O $complex$ O $string$ O O O $any$ O $string$ O $string$ O $any$ O O O O $Component[]$ O $void$ O $Component$ O O O $any$ O O $Component$ O O O O $any$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O $complex$ O $string$ O O O O O O O O O O O $complex$ O $string$ O O O O $any$ O $string$ O $string$ O $any$ O O O O O O O $complex$ O $boolean$ O $string$ O O O O $ErrorConstructor$ O O O $string$ O O O O O O $Component[]$ O $void$ O $Component$ O O O $any$ O O $Component$ O O O O $any$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O $complex$ O $string$ O O O O O O O O O O $complex$ O $string$ O O O O $void$ O $any$ O O O O $Component[]$ O $void$ O $Component$ O O O $any$ O O $Component$ O O O O $any$ O O O O $any$ O $void$ O O O O $any$ O $void$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $void$ O $any$ O $any$ O O O O $Component[]$ O $void$ O $Component$ O O O $any$ O O $Component$ O O O O $any$ O O $any$ O O $Component$ O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $void$ O $any$ O O O O $Component[]$ O $void$ O $Component$ O O O $any$ O O $Component$ O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $void$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $string$ O O $any[]$ O O O O O O O O O $number$ O O O $number$ O O O $Component[]$ O $number$ O $number$ O O O O $any$ O O O O $Component[]$ O $number$ O O O O O $any$ O O O O $any$ O $complex$ O O O O O $any$ O $any$ O $complex$ O $any$ O $string$ O O $any[]$ O O $any$ O O O O O $any$ O O $any$ O O O O $undefined$ O O O $void$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $number$ O $any$ O O O O O O $boolean$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O O $string$ O O $any[]$ O O O O O O O $Logger$ O $void$ O $string$ O O $any[]$ O O O O O $any$ O $void$ O O O O O O O O O O O O O $boolean$ O O O O O O $PromiseConstructor$ O O $void$ O O O O O $Function[]$ O $number$ O $void$ O O O O O O O O O $any$ O $void$ O O O O $string$ O $string$ O $any$ O O O O O O O O O $complex$ O $boolean$ O $string$ O O O O $ErrorConstructor$ O O O $string$ O O O O O $any$ O O O $any$ O $string$ O $string$ O $any$ O O $Logger$ O $void$ O O O $string$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $void$ O O O O $string$ O $string$ O $any$ O O O O $any$ O O O $any$ O $string$ O $string$ O $any$ O O O O $any$ O $boolean$ O O O O O $ErrorConstructor$ O O O $string$ O O O O $Logger$ O $void$ O O O $string$ O O $any$ O $void$ O O O O O O $void$ O O O $complex$ O $string$ O O O O O O $any$ O $void$ O O O O $string$ O $any$ O O O O O O O O O O $complex$ O $boolean$ O $string$ O O O O $ErrorConstructor$ O O O $string$ O O O O $Logger$ O $void$ O O O $string$ O O O O O $any$ O O O $complex$ O $string$ O O $any$ O O O O O $any$ O $void$ O O O O $string$ O $any$ O O O O O O O O O O $complex$ O $boolean$ O $string$ O O O O $ErrorConstructor$ O O O $string$ O O O O $Logger$ O $void$ O O O $string$ O O O O O $any$ O O O $complex$ O $string$ O O $any$ O O O O O $any$ O $void$ O O O O $string$ O $string$ O O $any[]$ O O O O O O O O O O O O $complex$ O $boolean$ O $string$ O O O O $ErrorConstructor$ O O O $string$ O O O O $Logger$ O $void$ O O O $string$ O $string$ O O O O O $any$ O O O $complex$ O $string$ O O $string$ O O $any[]$ O O O O O $any$ O $void$ O O O O $string$ O $any$ O O $any[]$ O O O O O O O O O O O O $complex$ O $boolean$ O $string$ O O O O $ErrorConstructor$ O O O $string$ O O O O O $any$ O O O $complex$ O $string$ O O $Logger$ O $void$ O O O $string$ O $any$ O $any[]$ O O O $Event$ O O O $any$ O O O $any$ O $any$ O $Event$ O O $any$ O $any[]$ O O O O $any$ O O O O O $any$ O $any$ O $Event$ O O $any$ O $any[]$ O O O O $any$ O O O O O $any$ O $any$ O $Event$ O O $any$ O $any[]$ O O O O $any$ O O O O O $any$ O $any$ O $Event$ O O $any$ O $any[]$ O O O O $any[]$ O O O O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $Event$ O O $any$ O $any[]$ O O O O $complex$ O $any$ O O O O O $any$ O $any$ O $Event$ O O $any$ O $any[]$ O O O O $any[]$ O O O O $any$ O O O O O O $Event$ O O $any$ O O O $any$ O O O $any$ O $boolean$ O $Event$ O O O $Event$ O $boolean$ O O O O O O $void$ O O O O O $void$ O O O O O $any$ O $void$ O O O O O $any$ O $void$ O $any$ O $any$ O $void$ O O O O O O $Component[]$ O $void$ O $Component$ O $Component$ O $void$ O O O O O O $any$ O O O O O O $Component[]$ O O O O O O O
<s> import * as browser from 's' ; browser . _UNKNOWN_ . _UNKNOWN_ . addListener ( async ( details ) => { if ( details . _UNKNOWN_ !== 0 ) return ; if ( details . url !== "s" && ! details . url . startsWith ( 's' ) ) return ; await browser . tabs . executeScript ( details . _UNKNOWN_ , { file : 's' , _UNKNOWN_ : 's' } ) ; const err = browser . runtime . _UNKNOWN_ ; if ( ! err ) return ; console . error ( err ) ; } ) ; </s>	O O O O $any$ O O O $any$ O $any$ O $any$ O $void$ O O O $any$ O O O O O $any$ O $number$ O O O O O O O $any$ O $string$ O O O O $any$ O $string$ O $boolean$ O O O O O O O $any$ O $any$ O $Promise<Object>$ O $any$ O $number$ O O $string$ O O O O O O O O O O $Error$ O $any$ O $any$ O $Error$ O O O O $Error$ O O O $Console$ O $void$ O $Error$ O O O O O O
<s> export function _UNKNOWN_ < T > ( parent , property : string | string [ ] , _UNKNOWN_ : ( ( this : T , value , scope , args : any [ ] , _UNKNOWN_ : any [ ] ) => any ) , scope ? : T , _UNKNOWN_ = false ) { let properties : string [ ] ; if ( Array . isArray ( property ) ) { properties = property ; } else { properties = property . split ( "s" ) ; } if ( properties . length === 0 ) throw new Error ( "s" ) ; let _UNKNOWN_ ; let lastValue ; const next = ( ) => { let property = properties . shift ( ) as string ; _UNKNOWN_ = property ; if ( properties . length === 0 || ! parent [ property ] ) { let value = parent [ property ] ; let _UNKNOWN_ : any [ ] = [ ] ; lastValue = value ; const _UNKNOWN_ = properties . length === 0 ; let _UNKNOWN_ ; if ( _UNKNOWN_ ) { _UNKNOWN_ = function ( this , ... args : any [ ] ) { return _UNKNOWN_ . call ( scope , value , this , args , _UNKNOWN_ ) ; } ; } let _UNKNOWN_ = _UNKNOWN_ ; Object . defineProperty ( parent , property , { "s" => { if ( ! _UNKNOWN_ || ! _UNKNOWN_ ) { value = val ; } else if ( typeof value !== "s" ) { value = val ; } else { _UNKNOWN_ . push ( val ) ; } if ( ! _UNKNOWN_ ) { Object . defineProperty ( parent , property , { "s" : value , "s" : true , "s" : true , "s" : true } ) ; _UNKNOWN_ = true ; parent = parent [ property as string ] ; next ( ) ; } } , "s" : ( ) => { if ( _UNKNOWN_ ) { return _UNKNOWN_ ; } return value ; } , "s" : true , "s" : true } ) ; } else { parent = parent [ property ] ; next ( ) ; } } ; next ( ) ; return ( ) => { Object . defineProperty ( parent , _UNKNOWN_ , { "s" : lastValue , "s" : true , "s" : true , "s" : true } ) ; } ; } </s>	O O O $Function$ O $any$ O O $any$ O $complex$ O O O O O O O $any$ O O O $T$ O $any$ O $any$ O $any$ O $any[]$ O O O O O $any[]$ O O O O O O O O O $T$ O O $any$ O $boolean$ O O O O O $string[]$ O O O O O O O $ArrayConstructor$ O $complex$ O $complex$ O O O $string[]$ O $string[]$ O O O O $string[]$ O $string$ O $complex$ O O O O O O O $string[]$ O $number$ O O O O O $ErrorConstructor$ O O O O O $string$ O O $any$ O O $void$ O O O O O O $string$ O $string[]$ O $string$ O O O O O $string$ O $string$ O O O $string[]$ O $number$ O O O O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O $any[]$ O O O O O O O O $any$ O $any$ O O $boolean$ O $string[]$ O $number$ O O O O $Function$ O O O $boolean$ O O $Function$ O O O $any$ O O $any[]$ O O O O O O O $any$ O $any$ O $T$ O $any$ O O O $any[]$ O $any[]$ O O O O O O $boolean$ O $boolean$ O $ObjectConstructor$ O $any$ O $any$ O $string$ O O $any$ O O O O O $boolean$ O O $boolean$ O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O $any[]$ O $number$ O $any$ O O O O O O $boolean$ O O $ObjectConstructor$ O $any$ O $any$ O $string$ O O O O $any$ O O O O O O O O O O O O O O O $boolean$ O O O $any$ O $any$ O $string$ O O O O $void$ O O O O O O O O O O O O O O $Function$ O O O $Function$ O O O $any$ O O O O O O O O O O O O O O O O $any$ O $any$ O $string$ O O $void$ O O O O O O $void$ O O O O O O O O $ObjectConstructor$ O $any$ O $any$ O $string$ O O O O $any$ O O O O O O O O O O O O O O O O O O O
<s> export function _UNKNOWN_ ( name , obj ? ) { let parts = name . split ( 's' ) ; let cur = obj || window ; for ( let i = 0 ; i < parts . length ; i ++ ) { cur = cur [ parts [ i ] ] ; if ( cur === null ) { return null ; } } return cur ; } </s>	O O O $any$ O $string$ O $Object$ $Object$ O O O $string[]$ O $string$ O $complex$ O O O O O $any$ O $Object$ O $complex$ O O O O $number$ O O O $number$ O $string[]$ O $number$ O $number$ O O O $any$ O $any$ O $string[]$ O $number$ O O O O O $any$ O O O O O O O O O O $any$ O O O
<s> import { Event } from 's' ; import { Disposable } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends Event { constructor ( public detail , type , target ? ) { super ( type , target ) ; } } export class _UNKNOWN_ extends Disposable implements _UNKNOWN_ { private _listeners : _UNKNOWN_ = new _UNKNOWN_ ( this ) ; private _proxy : { [ key ] : [ string , Function ] } = { } ; private _UNKNOWN_ : { [ key ] : { [ key ] : Function } } = { } ; private _UNKNOWN_ : { [ key ] : boolean } = { } ; constructor ( private api ) { super ( ) ; } protected _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; for ( let type in this . _UNKNOWN_ ) { if ( ! this . _UNKNOWN_ . hasOwnProperty ( type ) ) continue ; let listeners = this . _UNKNOWN_ [ type ] ; for ( let key in listeners ) { if ( ! listeners . hasOwnProperty ( key ) ) continue ; this . api . removeEventListener ( type , listeners [ key ] ) ; this . api . addEventListener ( type , key ) ; } } this . removeAllListeners ( ) ; } _UNKNOWN_ ( type , _UNKNOWN_ : Function | string ) { let method ; if ( typeof _UNKNOWN_ === "s" ) { method = ( ... args : any [ ] ) => { if ( ! this . _UNKNOWN_ ( ) && this . _listeners . listeners [ type ] && this . _listeners . listeners [ type ] . length > 0 && ! this . _UNKNOWN_ [ type ] ) return ; let fn = _UNKNOWN_ ( _UNKNOWN_ ) as Function ; fn . apply ( window , args ) ; } ; if ( ! this . _UNKNOWN_ [ type ] ) this . _UNKNOWN_ [ type ] = { } ; this . _UNKNOWN_ [ type ] [ _UNKNOWN_ ] = method ; } else { method = _UNKNOWN_ ; } this . api . addEventListener ( type , method ) ; } _UNKNOWN_ ( type , _UNKNOWN_ : Function | string ) { let method ; if ( typeof _UNKNOWN_ === "s" ) { if ( ! this . _UNKNOWN_ [ type ] ) return ; method = this . _UNKNOWN_ [ type ] [ _UNKNOWN_ ] ; delete this . _UNKNOWN_ [ type ] [ _UNKNOWN_ ] ; if ( ! method ) return ; } else { method = _UNKNOWN_ ; } this . api . removeEventListener ( type , method ) ; } listen ( type , listener , _UNKNOWN_ ? : boolean | undefined , _UNKNOWN_ ? : Object | undefined ) { let key = this . _listeners . add ( type , listener , false , _UNKNOWN_ , _UNKNOWN_ ) ; let proxy : [ string , Function ] = [ key . type , ( detail , ... args : any [ ] ) => { let evt = new _UNKNOWN_ ( detail , key . type , key . src ) ; let returnValue = key . listener . call ( key . handler , evt ) ; if ( ! evt . defaultPrevented && this . _UNKNOWN_ [ key . type ] ) { this . _UNKNOWN_ [ key . type ] = true ; for ( let name in this . _UNKNOWN_ [ key . type ] ) { this . _UNKNOWN_ [ key . type ] [ name ] ( detail , ... args ) ; } this . _UNKNOWN_ [ key . type ] = false ; } } ] ; this . _proxy [ key . key ] = proxy ; this . api . addEventListener ( proxy [ 0 ] , proxy [ 0 ] ) ; return key ; } _UNKNOWN_ ( type , listener , _UNKNOWN_ ? : boolean | undefined , _UNKNOWN_ ? : Object | undefined ) { let key = this . _listeners . add ( type , listener , true , _UNKNOWN_ , _UNKNOWN_ ) ; let proxy : [ string , Function ] = [ key . type , ( detail , ... args : any [ ] ) => { let evt = new _UNKNOWN_ ( detail , key . type , key . src ) ; let returnValue = key . listener . call ( key . handler , evt ) ; if ( ! evt . defaultPrevented && this . _UNKNOWN_ [ key . type ] ) { this . _UNKNOWN_ [ key . type ] = true ; for ( let name in this . _UNKNOWN_ [ key . type ] ) { this . _UNKNOWN_ [ key . type ] [ name ] ( detail , ... args ) ; } this . _UNKNOWN_ [ key . type ] = false ; } } ] ; this . _proxy [ key . key ] = proxy ; this . api . addEventListener ( proxy [ 0 ] , proxy [ 0 ] ) ; return key ; } _UNKNOWN_ ( type , listener , _UNKNOWN_ ? : boolean | undefined , _UNKNOWN_ ? : Object | undefined ) { const key = this . _UNKNOWN_ ( type , listener , ! ! _UNKNOWN_ , _UNKNOWN_ ) ; if ( ! key ) return false ; return this . _UNKNOWN_ ( key ) ; } _UNKNOWN_ ( key ) { const proxy = this . _proxy [ key . key ] ; delete this . _proxy [ key . key ] ; this . api . removeEventListener ( proxy [ 0 ] , proxy [ 0 ] ) ; return this . _listeners . _UNKNOWN_ ( key ) ; } dispatchEvent ( event : string | Object | Event ) { throw new Error ( "s" ) ; } removeAllListeners ( type ? : string | undefined ) { if ( ! this . _listeners ) { return 0 ; } for ( let type in this . _listeners . listeners ) { if ( this . _listeners . listeners . hasOwnProperty ( type ) ) { let listeners = this . _listeners . listeners [ type ] ; for ( let i = 0 ; i < listeners . length ; i ++ ) { let key = listeners [ i ] ; if ( type && key . type !== type ) continue ; let proxy = this . _proxy [ key . key ] ; delete this . _proxy [ key . key ] ; this . api . removeEventListener ( proxy [ 0 ] , proxy [ 0 ] ) ; } } } return this . _listeners . removeAll ( type ) ; } _UNKNOWN_ ( ) : _UNKNOWN_ | undefined { return undefined ; } _UNKNOWN_ ( type , capture , event ) { throw new Error ( "s" ) ; } _UNKNOWN_ ( type , capture ) : _UNKNOWN_ [ ] { return this . _listeners . _UNKNOWN_ ( type , capture ) ; } _UNKNOWN_ ( type , listener , capture , _UNKNOWN_ ? : Object | undefined ) : _UNKNOWN_ | undefined { return this . _listeners . _UNKNOWN_ ( type , listener , capture , _UNKNOWN_ ) ; } _UNKNOWN_ ( type ? , capture ? : boolean | undefined ) { return this . _listeners . _UNKNOWN_ ( type , capture ) ; } } _UNKNOWN_ ( _UNKNOWN_ ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $void$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $string$ O $Object$ $Object$ O O O O $string$ O $Object$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O $complex$ O O O $number$ O O O O O $FunctionConstructor$ O O O O O O O $complex$ O O O $string$ O O O O $string$ O O $FunctionConstructor$ O O O O O O O $complex$ O O O $string$ O O O O O O O O O O O $any$ O O O O O O O O $void$ O O O O O $void$ O O O O O O $string$ O O O $complex$ O O O O O O O $complex$ O $boolean$ O $string$ O O O O O $complex$ O O O $complex$ O $string$ O O O O O $string$ O $complex$ O O O O O $complex$ O $boolean$ O $string$ O O O O O O $any$ O $void$ O $string$ O $complex$ O $string$ O O O O O $any$ O $void$ O $string$ O $string$ O O O O O O $number$ O O O O $void$ O $string$ O $complex$ O $FunctionConstructor$ O O O O O $Function$ O O O O $complex$ O O O O $Function$ O O O $any[]$ O O O O O O O O O O O O $boolean$ O O O O O $any$ O $complex$ O $string$ O O O O $any$ O $complex$ O $string$ O O $number$ O O O O O O $complex$ O $string$ O O O O O $Function$ O $any$ O $string$ O O $FunctionConstructor$ O $Function$ O $any$ O $complex$ O $any[]$ O O O O O O O O O $complex$ O $string$ O O O O $complex$ O $string$ O O O O O O O $complex$ O $string$ O O $string$ O O $Function$ O O O O $Function$ O $Function$ O O O O $any$ O $void$ O $string$ O $Function$ O O O $void$ O $string$ O $complex$ O $FunctionConstructor$ O O O O O $Function$ O O O O $complex$ O O O O O O O O O $complex$ O $string$ O O O O $Function$ O O O $complex$ O $string$ O O $string$ O O O O O $complex$ O $string$ O O $string$ O O O O O $Function$ O O O O O O $Function$ O $Function$ O O O O $any$ O $void$ O $string$ O $Function$ O O O $any$ O $string$ O $Function$ O $boolean$ O O O O O O $Object$ O O $ObjectConstructor$ O O O O O $any$ O O O $any$ O $any$ O $string$ O $Function$ O O O $boolean$ O $Object$ O O O $complex$ O O O O $FunctionConstructor$ O O O $any$ O $string$ O O $any$ O O $any[]$ O O O O O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O $any$ O $complex$ O O O $any$ O $any$ O $Function$ O $any$ O $any$ O $Object$ O $any$ O O O O O $any$ O $boolean$ O O O $complex$ O $any$ O $string$ O O O O O $complex$ O $any$ O $string$ O O O O O O O $string$ O O O $complex$ O $any$ O $string$ O O O O O $complex$ O $any$ O $string$ O O $string$ O O $any$ O O $any[]$ O O O O O $complex$ O $any$ O $string$ O O O O O O O O O O $complex$ O $any$ O $number$ O O $complex$ O O O $any$ O $void$ O $complex$ O O O O $complex$ O O O O O O $any$ O O $any$ O $string$ O $Function$ O $boolean$ O O O O O O $Object$ O O $ObjectConstructor$ O O O O O $any$ O O O $any$ O $any$ O $string$ O $Function$ O O O $boolean$ O $Object$ O O O $complex$ O O O O $FunctionConstructor$ O O O $any$ O $string$ O O $any$ O O $any[]$ O O O O O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O $any$ O $complex$ O O O $any$ O $any$ O $Function$ O $any$ O $any$ O $Object$ O $any$ O O O O O $any$ O $boolean$ O O O $complex$ O $any$ O $string$ O O O O O $complex$ O $any$ O $string$ O O O O O O O $string$ O O O $complex$ O $any$ O $string$ O O O O O $complex$ O $any$ O $string$ O O $string$ O O $any$ O O $any[]$ O O O O O $complex$ O $any$ O $string$ O O O O O O O O O O $complex$ O $any$ O $number$ O O $complex$ O O O $any$ O $void$ O $complex$ O O O O $complex$ O O O O O O $any$ O O $boolean$ O $string$ O $Function$ O $boolean$ O O O O O O $Object$ O O $ObjectConstructor$ O O O O O $any$ O O O $any$ O $string$ O $Function$ O O O $boolean$ O $Object$ O O O O O $any$ O O O O O O O $boolean$ O $any$ O O O $boolean$ O $any$ O O O $complex$ O O O $complex$ O $any$ O $number$ O O O O O $complex$ O $any$ O $number$ O O O O $any$ O $void$ O $complex$ O O O O $complex$ O O O O O O O O $any$ O $boolean$ O $any$ O O O $boolean$ O $any$ O O O $ObjectConstructor$ O $any$ O O O O $ErrorConstructor$ O O O O O $number$ O $string$ O O O O O O O O O O O O $any$ O O O O O O O O O $string$ O O O $any$ O $complex$ O O O O O O $any$ O $complex$ O $boolean$ O $string$ O O O O $any$ O O O $any$ O $complex$ O $string$ O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O $any$ O $any$ O $number$ O O O O $string$ O $any$ O $string$ O $string$ O O O O $complex$ O O O $complex$ O $any$ O $number$ O O O O O $complex$ O $any$ O $number$ O O O O $any$ O $void$ O $complex$ O O O O $complex$ O O O O O O O O O O O $any$ O $number$ O $string$ O O O $any$ O O O $any$ O O O O $undefined$ O O $boolean$ O $string$ O $boolean$ O $Event$ O O O O $ErrorConstructor$ O O O O O $any$ O $string$ O $boolean$ O O $any$ O O O O O O $any$ O $any$ O $string$ O $boolean$ O O O $any$ O $string$ O $Function$ O $boolean$ O $Object$ O O $ObjectConstructor$ O O O O $any$ O O O O O O $any$ O $any$ O $string$ O $Function$ O $boolean$ O $Object$ O O O $boolean$ O $string$ $string$ O $boolean$ O O O O O O O O O O $any$ O $boolean$ O $string$ O $boolean$ O O O O $void$ O $any$ O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Event } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; declare interface _UNKNOWN_ extends Element { _UNKNOWN_ : ( ) => string [ ] ; } declare interface _UNKNOWN_ { _UNKNOWN_ : boolean ; volume : number ; } declare interface _UNKNOWN_ { fullscreen : number ; time : number ; videoId : string ; } declare interface _UNKNOWN_ { _UNKNOWN_ : number ; type : string ; } export class _UNKNOWN_ extends _UNKNOWN_ { private _id : string ; private _element : Element ; private _config : _UNKNOWN_ ; private _port : _UNKNOWN_ ; private _UNKNOWN_ : _UNKNOWN_ ; private _UNKNOWN_ : { [ key ] : Function } = { } ; private _UNKNOWN_ : { [ key ] : boolean } = { } ; private _UNKNOWN_ : _UNKNOWN_ ; constructor ( id , element , _UNKNOWN_ , port ) { super ( ) ; this . _id = id ; this . _element = element ; this . _config = _UNKNOWN_ ; this . _port = port ; const api = this . getApi ( ) ; for ( let key in api ) { if ( api . hasOwnProperty ( key ) ) { ( this . _element as any ) [ key ] = ( ... args : any [ ] ) => this . _UNKNOWN_ ( key , ... args ) ; } } } protected _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; const api = this . getApi ( ) ; for ( let key in api ) { if ( api . hasOwnProperty ( key ) ) { ( this . _element as any ) [ key ] = ( api as any ) [ key ] ; } } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . dispose ( ) ; } delete this . _UNKNOWN_ ; delete this . _element ; delete this . _UNKNOWN_ ; delete this . _port ; } getElement ( ) { return this . _element ; } _UNKNOWN_ ( name , ... args : any [ ] ) { let returnValue : { value : any } | undefined = undefined ; switch ( name ) { case "s" : this . _UNKNOWN_ ( args [ 0 ] , args [ 0 ] ) ; break ; case "s" : this . _UNKNOWN_ ( args [ 0 ] , args [ 0 ] ) ; break ; case "s" : this . _UNKNOWN_ ( new _UNKNOWN_ ( null , "s" , this ) , _UNKNOWN_ . _UNKNOWN_ ) ; break ; case "s" : case "s" : case "s" : args [ 0 ] = this . _port . _UNKNOWN_ ( "s" , this . _id , args [ 0 ] ) as _UNKNOWN_ || args [ 0 ] ; default : returnValue = this . _port . _UNKNOWN_ ( "s" , this . _id , name , ... args ) ; break ; } if ( ! returnValue ) { const api = this . getApi ( ) ; let value = ( api as any ) [ name ] ( ... args ) ; return value ; } else { return returnValue . value ; } } private _UNKNOWN_ ( type , fn : Function | string ) { const api = this . getApi ( ) ; if ( this . _UNKNOWN_ ( ) ) { api . addEventListener ( type , fn ) ; } else { this . _UNKNOWN_ ( ) . _UNKNOWN_ ( type , fn ) ; } } private _UNKNOWN_ ( type , fn : Function | string ) { const api = this . getApi ( ) ; if ( this . _UNKNOWN_ ( ) ) { api . removeEventListener ( type , fn ) ; } else { this . _UNKNOWN_ ( ) . _UNKNOWN_ ( type , fn ) ; } } public _UNKNOWN_ ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = new _UNKNOWN_ ( this . getApi ( ) ) ; } return this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; let player = this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , this . _UNKNOWN_ , false ) . listen ( player , "s" , console . log . bind ( console , "s" ) , false ) . listen ( player , "s" , console . log . bind ( console , "s" ) , false ) . listen ( player , "s" , console . log . bind ( console , "s" ) , false ) ; } _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; } getId ( ) { return this . _id ; } getApi ( ) { if ( ! this . _UNKNOWN_ ) { let player = this . _element as _UNKNOWN_ ; if ( ! player ) throw new Error ( "s" + this . getId ( ) + "s" ) ; if ( typeof player . _UNKNOWN_ !== "s" ) { throw new Error ( "s" ) ; } let _UNKNOWN_ = player . _UNKNOWN_ ( ) ; let api = { } as _UNKNOWN_ ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { let key = _UNKNOWN_ [ i ] ; ( api as any ) [ key ] = ( player as any ) [ key ] ; } this . _UNKNOWN_ = api ; } return this . _UNKNOWN_ ; } _UNKNOWN_ ( loaded ) { Object . defineProperty ( this . _config , 's' , { "s" : ( ) => loaded , "s" : ( ) => { } , "s" : true , "s" : true } ) ; } private _UNKNOWN_ ( e , type , ... args : any [ ] ) { const preventDefault = this . _port . _UNKNOWN_ ( "s" , this . getId ( ) , type , ... args ) as boolean ; if ( preventDefault ) { e . preventDefault ( ) ; } } private _UNKNOWN_ ( e ) { this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ ) ; } private _UNKNOWN_ ( e ) { let state = e . detail as _UNKNOWN_ ; let type ; switch ( state ) { case - 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; case 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; case 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; case 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; case 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; case 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; default : return ; } this . _UNKNOWN_ ( e , type ) ; } private _UNKNOWN_ ( e ) { let detail = e . detail as _UNKNOWN_ ; this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ , detail . volume , detail . _UNKNOWN_ ) ; } private _UNKNOWN_ ( e ) { let detail = e . detail as _UNKNOWN_ ; this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ , detail . fullscreen ) ; } private _UNKNOWN_ ( e ) { let quality = e . detail as _UNKNOWN_ ; this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ , quality ) ; } private _UNKNOWN_ ( e ) { let rate = e . detail as number ; this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ , rate ) ; } private _UNKNOWN_ ( e ) { this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ ) ; } private _UNKNOWN_ ( e ) { let errorCode = e . detail as number ; this . _UNKNOWN_ ( e , _UNKNOWN_ . ERROR , errorCode ) ; } private _UNKNOWN_ ( e ) { console . log ( "s" , e . detail ) ; } private _UNKNOWN_ ( e ) { this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ , e . detail as boolean ) ; } private _UNKNOWN_ ( e ) { let state = e . detail as _UNKNOWN_ ; let type ; switch ( state ) { case - 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; case 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; case 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; case 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; case 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; case 0 : type = _UNKNOWN_ . _UNKNOWN_ ; break ; default : return ; } this . _UNKNOWN_ ( e , type ) ; } private _UNKNOWN_ ( e ) { this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ ) ; } private _UNKNOWN_ ( e ) { console . log ( "s" , e . detail ) ; } private _UNKNOWN_ ( e ) { const data = e . detail as _UNKNOWN_ ; this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ , data . type , data . _UNKNOWN_ ) ; } private _UNKNOWN_ ( e ) { this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ ) ; } private _UNKNOWN_ ( e ) { this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ , e . detail ) ; } private _UNKNOWN_ ( e ) { this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ , e . detail ) ; } private _UNKNOWN_ ( e ) { console . log ( "s" , e . detail ) ; } private _UNKNOWN_ ( e ) { console . log ( "s" , e . detail ) ; } private _UNKNOWN_ ( e ) { console . log ( "s" , e . detail ) ; } private _UNKNOWN_ ( e ) { this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ ) ; } private _UNKNOWN_ ( e ) { this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ ) ; } private _UNKNOWN_ ( e ) { console . log ( "s" , e . detail ) ; } private _UNKNOWN_ ( e ) { console . log ( "s" , e . detail ) ; } private _UNKNOWN_ ( e ) { console . log ( "s" , e . detail ) ; } private _UNKNOWN_ ( e ) { const progress = e . detail as number ; this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ , progress ) ; } private _UNKNOWN_ ( e ) { const progress = e . detail as number ; this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ , progress ) ; } private _UNKNOWN_ ( e ) { this . _UNKNOWN_ ( e , _UNKNOWN_ . _UNKNOWN_ ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $complex$ O $string[]$ O O O O O O O O O O O $any$ O $boolean$ O O O $number$ O O O O O O $any$ O $number$ O O O $number$ O O O $string$ O O O O O O $any$ O $number$ O O O $string$ O O O O O O $any$ O $any$ O O $string$ O O O O $Element$ O $complex$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $complex$ O O O $string$ O O $FunctionConstructor$ O O O O O O $complex$ O O O $string$ O O O O O O O O O $any$ O $any$ O O O $string$ O $Element$ O $any$ O $any$ O O O O O O O O $string$ O $string$ O O O $Element$ O $Element$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $string$ O $any$ O O O O $any$ O $boolean$ O $string$ O O O O O O $Element$ O O O O $string$ O O O O $any[]$ O O O O O O O O $any$ O $string$ O O $any[]$ O O O O O O $void$ O O O O O $void$ O O O O $any$ O O O $any$ O O O O O O $string$ O $any$ O O O O $any$ O $boolean$ O $string$ O O O O O O $Element$ O O O O $string$ O O O $any$ O O O O $string$ O O O O O O O O $any$ O O O O $any$ O $void$ O O O O O O O $any$ O O O O $Element$ O O O O $any$ O O O O $any$ O O $Element$ O O O O O O $Element$ O O $any$ O $string$ O O $any[]$ O O O O O O O $complex$ O O $any$ O O O O O O $undefined$ O O O $string$ O O O O O O O $void$ O $any[]$ O O O O $any[]$ O O O O O O O O O O O O $void$ O $any[]$ O O O O $any[]$ O O O O O O O O O O O O $void$ O O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O O O O O $any[]$ O O O O O O $any$ O $any$ O O O O O $string$ O $any[]$ O O O O O $any$ O $any[]$ O O O O O O $complex$ O O O $any$ O $any$ O O O O O $string$ O $string$ O O $any[]$ O O O O O O O O $complex$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O O O O $string$ O O O $any[]$ O O O $any$ O O O O O $complex$ O $any$ O O O O $void$ O $string$ O $complex$ O $FunctionConstructor$ O O O O O $any$ O O O $any$ O O O O O O O $boolean$ O O O O $any$ O $void$ O $string$ O $complex$ O O O O O O O $any$ O O O $void$ O $string$ O $complex$ O O O O O $void$ O $string$ O $complex$ O $FunctionConstructor$ O O O O O $any$ O O O $any$ O O O O O O O $boolean$ O O O O $any$ O $void$ O $string$ O $complex$ O O O O O O O $any$ O O O $void$ O $string$ O $complex$ O O O O O $any$ O O O O O O O O $any$ O O O O $any$ O O $any$ O O O $any$ O O O O O O O O $any$ O O $void$ O O O O O $void$ O O O O $any$ O O O $any$ O O O O O $EventHandler$ O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O O O $void$ O O O O $EventHandler$ O $any$ O O O $Console$ O $void$ O $any$ O $Console$ O O O O O O O $EventHandler$ O $any$ O O O $Console$ O $void$ O $any$ O $Console$ O O O O O O O $EventHandler$ O $any$ O O O $Console$ O $void$ O $any$ O $Console$ O O O O O O O O $void$ O O O O O $void$ O O O O $string$ O O O O O O $string$ O O $any$ O O O O O O O O $any$ O O O $any$ O O O $Element$ O $any$ O O O O $any$ O O O $ErrorConstructor$ O O O O O $string$ O O O O O O O O O $any$ O $string[]$ O O O O O O $ErrorConstructor$ O O O O O O $string[]$ O $any$ O $string[]$ O O O O $any$ O O O O $any$ O O O O $number$ O O O $number$ O $string[]$ O $number$ O $number$ O O O O $string$ O $string[]$ O $number$ O O O $any$ O O O O $string$ O O O $any$ O O O O $string$ O O O O O $any$ O $any$ O O O O O $any$ O O $void$ O $boolean$ O O $ObjectConstructor$ O $any$ O O O $any$ O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O $any$ O O $any[]$ O O O O O O O $boolean$ O O O $any$ O $any$ O O O O O $string$ O O O $any$ O O $any[]$ O O O O O O $boolean$ O O $any$ O $void$ O O O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O $any$ O $complex$ O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O $any$ O $any$ O $any$ O $number$ O $any$ O $boolean$ O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O $any$ O $any$ O $any$ O $number$ O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O $number$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O $number$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O $number$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O $number$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O $any$ O $complex$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O $any$ O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $number$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O $any$ O O O O $void$ O $any$ O O O $number$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O $number$ O O O O $void$ O $any$ O O O $number$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O $number$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { 0 as 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { private _port : _UNKNOWN_ ; private _UNKNOWN_ : { [ key ] : _UNKNOWN_ } = { } ; constructor ( port ) { super ( ) ; this . _port = port ; } _UNKNOWN_ ( element , _UNKNOWN_ , id ? ) { if ( ! id ) { id = 0 ( ) ; } let player = new _UNKNOWN_ ( id , element , _UNKNOWN_ , this . _port ) ; this . _UNKNOWN_ [ id ] = player ; return player ; } protected _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; for ( let key in this . _UNKNOWN_ ) { if ( this . _UNKNOWN_ . hasOwnProperty ( key ) ) { this . _UNKNOWN_ [ key ] . dispose ( ) ; } } delete this . _UNKNOWN_ ; delete this . _port ; } _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; this . _port . _UNKNOWN_ ( "s" , this . _UNKNOWN_ , this ) ; this . _port . _UNKNOWN_ ( "s" , this . _UNKNOWN_ , this ) ; this . _port . _UNKNOWN_ ( "s" , this . _UNKNOWN_ , this ) } _UNKNOWN_ ( ) { this . _port . _UNKNOWN_ ( "s" ) ; this . _port . _UNKNOWN_ ( "s" ) ; this . _port . _UNKNOWN_ ( "s" ) ; super . _UNKNOWN_ ( ) ; } private _UNKNOWN_ ( id , name , ... args : any [ ] ) { let player = this . _UNKNOWN_ [ id ] ; if ( ! player ) throw new Error ( "s" + id + "s" ) ; return ( player . getApi ( ) as any ) [ name ] . apply ( null , args ) ; } private _UNKNOWN_ ( id , loaded ) { let player = this . _UNKNOWN_ [ id ] ; if ( ! player ) throw new Error ( "s" + id + "s" ) ; player . _UNKNOWN_ ( loaded ) ; } private _UNKNOWN_ ( id , keyCode , bubbles ) { let player = this . _UNKNOWN_ [ id ] ; if ( ! player ) throw new Error ( "s" + id + "s" ) ; const target = player . getElement ( ) ; let evt = document . createEvent ( 's' ) as any ; evt . initEvent ( 's' , bubbles , true ) ; evt [ 's' ] = evt [ 's' ] = evt [ 's' ] = keyCode ; target . dispatchEvent ( evt ) ; return ( evt as Event ) . defaultPrevented ; } _UNKNOWN_ ( ) : _UNKNOWN_ [ ] { let _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; for ( let key in this . _UNKNOWN_ ) { if ( this . _UNKNOWN_ . hasOwnProperty ( key ) ) { _UNKNOWN_ . push ( this . _UNKNOWN_ [ key ] ) ; } } return _UNKNOWN_ ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $complex$ O O O $string$ O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $Element$ O $any$ O $string$ $string$ O O O O O $string$ O O $string$ O $any$ O O O O O $any$ O O $any$ O $string$ O $Element$ O $any$ O O O $any$ O O O O $complex$ O $string$ O O $any$ O O $any$ O O O $void$ O O O O O $void$ O O O O O O $string$ O O O $complex$ O O O O O O $complex$ O $boolean$ O $string$ O O O O O $complex$ O $string$ O O $void$ O O O O O O O O $complex$ O O O O $any$ O O $void$ O O O O O $void$ O O O O O $any$ O $void$ O O O O O $any$ O O O O O O $any$ O $void$ O O O O O $void$ O O O O O O $any$ O $void$ O O O O O $boolean$ O O O O $void$ O O O O O $any$ O $void$ O O O O O O $any$ O $void$ O O O O O O $any$ O $void$ O O O O O O $void$ O O O O O $any$ O $string$ O $string$ O O $any[]$ O O O O O O O $any$ O O O $complex$ O $string$ O O O O O $any$ O O O $ErrorConstructor$ O O O $string$ O O O O O O $any$ O $any$ O O O O O O $string$ O O $any$ O O O $any[]$ O O O O $void$ O $string$ O $boolean$ O O O $any$ O O O $complex$ O $string$ O O O O O $any$ O O O $ErrorConstructor$ O O O $string$ O O O O $any$ O $void$ O $boolean$ O O O O $boolean$ O $string$ O $number$ O $boolean$ O O O $any$ O O O $complex$ O $string$ O O O O O $any$ O O O $ErrorConstructor$ O O O $string$ O O O O O $Element$ O $any$ O $Element$ O O O O $any$ O $Document$ O $complex$ O O O O O O $any$ O $any$ O O O $boolean$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $number$ O $Element$ O $boolean$ O $any$ O O O O $any$ O $complex$ O O $boolean$ O O $any$ O O O $any$ O O O O $any$ O $any$ O O O O O O O O O $string$ O O O $complex$ O O O O O O $complex$ O $boolean$ O $string$ O O O $any$ O $number$ O O O $complex$ O $string$ O O O O O O $any$ O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { 0 as 0 } from 's' ; declare interface _UNKNOWN_ extends Window { _UNKNOWN_ : { player ? : { Application ? : { create ? : Function } } _UNKNOWN_ ? : { _UNKNOWN_ ? : string [ ] } } ; _UNKNOWN_ : { config ? : _UNKNOWN_ } ; _UNKNOWN_ : any ; } declare interface _UNKNOWN_ { _UNKNOWN_ : ( response ) => void } declare interface _UNKNOWN_ { part : { page : string , player ? : _UNKNOWN_ } , url : string } const port = new _UNKNOWN_ ( ) ; const _UNKNOWN_ = new _UNKNOWN_ ( port ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; const _UNKNOWN_ : { [ key ] : _UNKNOWN_ } = { } ; const _UNKNOWN_ = ( _UNKNOWN_ ) : _UNKNOWN_ => { if ( _UNKNOWN_ . _UNKNOWN_ ( ) ) { return _UNKNOWN_ ; } let _UNKNOWN_ = _UNKNOWN_ . attrs . id ; if ( _UNKNOWN_ [ _UNKNOWN_ ] ) { let _UNKNOWN_ = _UNKNOWN_ [ _UNKNOWN_ ] . getId ( ) ; _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( "s" , _UNKNOWN_ , _UNKNOWN_ ) as _UNKNOWN_ || _UNKNOWN_ ; } return _UNKNOWN_ ; } ; const _UNKNOWN_ = ( obj ) : boolean => { for ( let key in obj ) { if ( key . substring ( 0 , 0 ) === "s" ) return true ; } return false ; } ; const _UNKNOWN_ = ( player ) : { element : Element | undefined , api : { [ key ] : Function } | undefined , _UNKNOWN_ : { [ key ] : Function } | undefined } => { let element : Element | undefined = undefined ; let api : { [ key ] : Function } | undefined = undefined ; let _UNKNOWN_ : { [ key ] : Function } | undefined = undefined ; for ( let key in player ) { if ( ! player . hasOwnProperty ( key ) || ! player [ key ] || typeof player [ key ] !== 's' || ! player [ key ] . hasOwnProperty ( "s" ) || ! player [ key ] . hasOwnProperty ( "s" ) ) continue ; let app = player [ key ] ; if ( typeof app [ "s" ] === "s" ) continue ; for ( let key in app ) { if ( typeof app [ key ] !== 's' || ! app [ key ] || key === "s" ) continue ; if ( app [ key ] instanceof Element ) { element = app [ key ] ; } else if ( app [ key ] . hasOwnProperty ( "s" ) ) { api = app [ key ] ; } else if ( app [ key ] . hasOwnProperty ( "s" ) ) { _UNKNOWN_ = app [ key ] ; } } break ; } return { element : element , api : api , _UNKNOWN_ : _UNKNOWN_ } } ; const _UNKNOWN_ = function ( player ) { for ( let key in player ) { if ( ! player . hasOwnProperty ( key ) || ! player [ key ] ) continue ; if ( typeof player [ key ] !== "s" ) continue ; if ( typeof player [ key ] [ "s" ] !== "s" ) continue ; if ( typeof player [ key ] [ "s" ] !== "s" ) continue ; if ( typeof player [ key ] [ "s" ] !== "s" ) continue ; let app = player [ key ] ; for ( let key in app ) { if ( ! app . hasOwnProperty ( key ) || ! app [ key ] ) continue ; if ( typeof app [ key ] [ "s" ] !== "s" ) continue ; return app [ key ] ; } } return null ; } ; let _UNKNOWN_ = false ; const _UNKNOWN_ = ( ) => { if ( _UNKNOWN_ ) return ; _UNKNOWN_ = true ; let win = window as _UNKNOWN_ ; for ( let key in win . _UNKNOWN_ ) { if ( win . _UNKNOWN_ . hasOwnProperty ( key ) && typeof win . _UNKNOWN_ [ key ] === "s" ) { const fn = win . _UNKNOWN_ [ key ] ; const match = fn . toString ( ) . match ( "s" ) ; if ( match && match [ 0 ] === match [ 0 ] && match [ 0 ] === match [ 0 ] ) { win . _UNKNOWN_ [ key ] = function ( ... args : any [ ] ) { const constructor = this . constructor . toString ( ) ; const match = constructor . match ( "s" ) ; let autoplay = true ; if ( match && match [ 0 ] ) { Object . defineProperty ( this , match [ 0 ] , { "s" : ( ) => { } , "s" : ( ) => autoplay , "s" : true , "s" : true } ) ; } const returnValue = fn . apply ( this , args ) ; for ( let key in this ) { if ( typeof this [ key ] === "s" ) { const fn = this [ key ] ; if ( fn . toString ( ) . indexOf ( 's' ) !== - 0 ) { this [ key ] = function ( ... args : any [ ] ) { if ( args . length > 0 ) { const config = args [ 0 ] ; if ( config && config . hasOwnProperty ( "s" ) ) { autoplay = config [ "s" ] !== "s" ; } } return fn . apply ( this , args ) ; } ; } } } return returnValue ; } ; win . _UNKNOWN_ [ key ] . prototype = fn . prototype ; } } } } ; const _UNKNOWN_ = async ( _UNKNOWN_ , _UNKNOWN_ , fn ? ) : Promise < any > => { if ( _UNKNOWN_ . _UNKNOWN_ ( ) ) { if ( fn ) { return fn ( _UNKNOWN_ ) ; } return ; } let _UNKNOWN_ = _UNKNOWN_ . attrs . id ; let _UNKNOWN_ = 0 ( ) ; await _UNKNOWN_ . call ( "s" ) ; let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( "s" , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) as _UNKNOWN_ ; Object . assign ( _UNKNOWN_ , _UNKNOWN_ ) ; if ( _UNKNOWN_ . args . hasOwnProperty ( "s" ) ) { if ( _UNKNOWN_ . args . el === _UNKNOWN_ . _UNKNOWN_ || ! _UNKNOWN_ . args . el ) { _UNKNOWN_ ( ) ; } } let _UNKNOWN_ = null ; if ( fn ) { _UNKNOWN_ = fn ( _UNKNOWN_ ) ; } const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; let _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; if ( _UNKNOWN_ ) { const setData = _UNKNOWN_ [ "s" ] ; _UNKNOWN_ [ "s" ] = ( data ) => { let newData : _UNKNOWN_ | undefined = undefined ; newData = _UNKNOWN_ . _UNKNOWN_ ( "s" , _UNKNOWN_ , data ) as _UNKNOWN_ ; setData . call ( _UNKNOWN_ , newData || data ) ; } ; _UNKNOWN_ . _UNKNOWN_ ( ( ) => { _UNKNOWN_ [ "s" ] = setData ; } ) ; } else { const el = document . getElementById ( _UNKNOWN_ ) ; if ( el ) { _UNKNOWN_ = { element : el , api : undefined , _UNKNOWN_ : undefined } ; } } if ( ! _UNKNOWN_ || ! _UNKNOWN_ . element ) return _UNKNOWN_ ; let player = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . element , _UNKNOWN_ , _UNKNOWN_ ) ; _UNKNOWN_ [ _UNKNOWN_ ] = player ; player . _UNKNOWN_ ( ) ; if ( ! fn && _UNKNOWN_ ) { player . _UNKNOWN_ ( "s" , _UNKNOWN_ . args ) ; } _UNKNOWN_ . call ( "s" , player . getId ( ) , _UNKNOWN_ , _UNKNOWN_ ) ; return _UNKNOWN_ ; } ; let _UNKNOWN_ = new _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . dispose , port ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; port . connect ( "s" ) ; let win = window as _UNKNOWN_ ; if ( win . _UNKNOWN_ && win . _UNKNOWN_ . config && win . _UNKNOWN_ . config . loaded ) { let _UNKNOWN_ = win . _UNKNOWN_ . config ; _UNKNOWN_ . call ( "s" , "s" ) ; _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } win . _UNKNOWN_ = win . _UNKNOWN_ || { } ; win . _UNKNOWN_ = win . _UNKNOWN_ || { } ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ( win . _UNKNOWN_ , [ 's' ] , async ( fn , self , args ) => { await win . _UNKNOWN_ . player ! . Application ! . create ! ( "s" , win . _UNKNOWN_ . config ) ; win . _UNKNOWN_ . config ! . loaded = true ; } , undefined , true ) ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ( win . _UNKNOWN_ , [ 's' , 's' , 's' ] , ( fn , self , args ) => { const _UNKNOWN_ = args [ 0 ] as _UNKNOWN_ ; return _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , fn . bind ( self , args [ 0 ] ) ) ; } , undefined , true ) ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ( win , [ 's' , 's' ] , ( fn , self , args ) => { let req = args [ 0 ] as _UNKNOWN_ ; let _UNKNOWN_ = req . _UNKNOWN_ ; req . _UNKNOWN_ = ( response ) => { if ( response . part . page === 's' && response . part . player ) { response . part . player = _UNKNOWN_ ( response . part . player ) ; } _UNKNOWN_ ( response ) ; } ; return fn . call ( self , args [ 0 ] , args [ 0 ] ) ; } ) ) ; </s>	O O O $Function$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $complex$ O $complex$ O O $complex$ O O O $complex$ O O O $Function$ O O $FunctionConstructor$ O O $complex$ O O O $string[]$ O O O O O O O O $complex$ O O $any$ O O $any$ O O $any$ O O O O O O $any$ O $void$ O O $any$ O O O O O O $any$ O $complex$ O O $string$ O O O $any$ O O $any$ O O $string$ O O O O $any$ O O $any$ O O O O $any$ O O $any$ O $any$ O O $any$ O $void$ O O O O $complex$ O O O $string$ O O $any$ O O O O O O $any$ O O $any$ O O $any$ O O O O $any$ O $boolean$ O O O O O $any$ O O O $string$ O $any$ O $complex$ O $string$ O O O $complex$ O $string$ O O O O $string$ O $complex$ O $string$ O O $string$ O O O $any$ O $any$ O $any$ O O O $string$ O $any$ O O $any$ O $any$ O O O $any$ O O O O $boolean$ O O $Object$ O O O O O O O O $string$ O $Object$ O O O O $string$ O $string$ O O O O O O O O O O O O O O O O O O $complex$ O O $any$ O O O $Element$ O $complex$ O O O $complex$ O O O $string$ O O $FunctionConstructor$ O O O O $complex$ O O O $string$ O O $FunctionConstructor$ O O O O O O O $Element$ O $complex$ O O O $undefined$ O O $complex$ O O O $string$ O O $FunctionConstructor$ O O O O $undefined$ O O $complex$ O O O $string$ O O $FunctionConstructor$ O O O O $undefined$ O O O O $string$ O $any$ O O O O O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O $any$ O $string$ O O O O O $any$ O $string$ O O $any$ O O O O O $any$ O $string$ O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O O O $any$ O O O O O O O O O O O $string$ O $any$ O O O O O $any$ O $string$ O O O O O $any$ O $string$ O O $string$ O O O O O O O $any$ O $string$ O O $complex$ O O $Element$ O $any$ O $string$ O O O O O O $any$ O $string$ O O $any$ O O O O O $complex$ O $any$ O $string$ O O O O O O $any$ O $string$ O O $any$ O O O O O $complex$ O $any$ O $string$ O O O O O O O O O $Element$ O $Element$ O $complex$ O $complex$ O $complex$ O $complex$ O O O O $any$ O O O $any$ O O O O O $string$ O $any$ O O O O O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O O O $any$ O $string$ O O O O O O O O O $any$ O $string$ O O O O O O O O O O O O $any$ O $string$ O O O O O O O O O O O O $any$ O $string$ O O O O O O O O O O $any$ O $any$ O $string$ O O O O O $string$ O $any$ O O O O O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O O O $any$ O $string$ O O O O O O O O O O $any$ O $string$ O O O O O O O O O O $boolean$ O O O O $void$ O O O O O O O $boolean$ O O O $boolean$ O O O O $any$ O $complex$ O $any$ O O O O $string$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O $string$ O O O O O $any[]$ O O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O $ObjectConstructor$ O $any$ O O O $any$ O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $any[]$ O O O O O $string$ O O O O O O O O O $string$ O O O O O O $any$ O O O $string$ O O O O $any$ O $any$ O O O $any$ O O O O O O O O O O $string$ O O O O O $any[]$ O O O O O O O O $any[]$ O $number$ O O O O O $any$ O $any[]$ O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O $any$ O O O O O O O O O $any$ O $any$ O O O $any[]$ O O O O O O O O $any$ O O O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O O O O O O O $Promise<any>$ O O O $any$ O $any$ O $Function$ $Function$ O O $PromiseConstructor$ O O O O O O O $any$ O $boolean$ O O O O O O $Function$ O O O $Function$ O $any$ O O O O O O O $string$ O $any$ O $complex$ O $string$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $string$ O $any$ O O $any$ O $ObjectConstructor$ O O O $any$ O $any$ O O O O $any$ O $any$ O $boolean$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $void$ O O O O O O $any$ O O O O O $Function$ O O $any$ O $Function$ O $any$ O O O O $any$ O $any$ O $any$ O O O $complex$ O $complex$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $undefined$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $void$ O O O O O $any$ O O O O $any$ O O O O O O O O $HTMLElement$ O $Document$ O $HTMLElement$ O $string$ O O O O $HTMLElement$ O O $complex$ O O $HTMLElement$ O $HTMLElement$ O $undefined$ O $undefined$ O $undefined$ O $undefined$ O O O O O O O $complex$ O O $complex$ O $Element$ O O $any$ O O $any$ O $any$ O $any$ O $complex$ O $Element$ O $any$ O $any$ O O $complex$ O $string$ O O $any$ O $any$ O $void$ O O O O O O $Function$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $string$ O O O $string$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O $any$ O $void$ O $any$ O $void$ O $any$ O O $any$ O $void$ O O O $any$ O $void$ O O O O O $any$ O $complex$ O $any$ O O O $any$ O $complex$ O $any$ O $complex$ O $any$ O $any$ O $complex$ O $any$ O $boolean$ O O O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O O O $Promise<any>$ O $any$ O $any$ O O O $any$ O $complex$ O $any$ O $complex$ O O O O $any$ O $complex$ O $any$ O $complex$ O O O O $any$ O $void$ O $Function$ O $any$ O $complex$ O O O O O O O $Function$ O $any$ O $any[]$ O O O O $any$ O $complex$ O $complex$ O O $complex$ O O $Function$ O O O O $any$ O $complex$ O $any$ O O $any$ O $complex$ O $any$ O O $boolean$ O O O O O $undefined$ O O O O O $any$ O $void$ O $Function$ O $any$ O $complex$ O O O O O O O O O O $Function$ O $any$ O $any[]$ O O O O $any$ O $any[]$ O O O O $any$ O O $Promise<any>$ O $any$ O $any$ O $Function$ O $any$ O $any$ O $any[]$ O O O O O O O O $undefined$ O O O O O $any$ O $void$ O $Function$ O $any$ O O O O O O O O $Function$ O $any$ O $any[]$ O O O O $any$ O $any[]$ O O O O $any$ O O $void$ O $any$ O $void$ O $any$ O $void$ O O $any$ O O O O O $any$ O $complex$ O $string$ O O O $any$ O $complex$ O $any$ O O $any$ O $complex$ O $any$ O $any$ O $any$ O $complex$ O $any$ O O O $void$ O $any$ O O O O O $Function$ O $any$ O $any$ O $any[]$ O O O O $any[]$ O O O O O O O O O O
<s> const _UNKNOWN_ = ( element ) => { if ( document . body ) { document . body . appendChild ( element ) ; } else if ( document . head ) { document . head . appendChild ( element ) ; } else if ( document . documentElement ) { document . documentElement . appendChild ( element ) ; } else { throw new Error ( "s" ) ; } } ; export function _UNKNOWN_ ( code ) { let el = document . createElement ( 's' ) ; el . setAttribute ( 's' , 's' ) ; el . appendChild ( document . createTextNode ( code ) ) ; _UNKNOWN_ ( el ) ; return el ; } export function _UNKNOWN_ ( fn , ... args : any [ ] ) { let _UNKNOWN_ = JSON . stringify ( args ) ; let code = 's' + fn . toString ( ) + 's' + _UNKNOWN_ + 's' ; return _UNKNOWN_ ( code ) ; } export function _UNKNOWN_ ( file ) { let el = document . createElement ( 's' ) ; el . setAttribute ( 's' , 's' ) ; el . setAttribute ( 's' , file ) ; _UNKNOWN_ ( el ) ; return el ; } </s>	O O $void$ O O $HTMLScriptElement$ O O O O O $Document$ O $HTMLElement$ O O $Document$ O $HTMLElement$ O $T$ O $HTMLScriptElement$ O O O O O O $Document$ O $HTMLHeadElement$ O O $Document$ O $HTMLHeadElement$ O $T$ O $HTMLScriptElement$ O O O O O O $Document$ O $HTMLElement$ O O $Document$ O $HTMLElement$ O $T$ O $HTMLScriptElement$ O O O O O O O $ErrorConstructor$ O O O O O O O O O $HTMLScriptElement$ O $string$ O O O $HTMLScriptElement$ O $Document$ O O O O O O $HTMLScriptElement$ O $void$ O O O O O O $HTMLScriptElement$ O $T$ O $Document$ O $Text$ O $string$ O O O $void$ O $HTMLScriptElement$ O O O $HTMLScriptElement$ O O O O $HTMLScriptElement$ O $Function$ O O $any[]$ O O O O O O O $string$ O $JSON$ O $complex$ O $any[]$ O O O $string$ O O O $Function$ O $string$ O O O O O $string$ O O O O $HTMLScriptElement$ O $string$ O O O O O $HTMLScriptElement$ O $string$ O O O $HTMLScriptElement$ O $Document$ O O O O O O $HTMLScriptElement$ O $void$ O O O O O O $HTMLScriptElement$ O $void$ O O O $string$ O O $void$ O $HTMLScriptElement$ O O O $HTMLScriptElement$ O O O
<s> import { _UNKNOWN_ } from 's' ; import { ErrorCode } from 's' ; const _UNKNOWN_ = 's' ; export class _UNKNOWN_ implements _UNKNOWN_ { isAvailable ( ) { try { _UNKNOWN_ ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ ( _UNKNOWN_ ) ; return true ; } catch ( e ) { return false ; } } set ( key , value ) { _UNKNOWN_ ( key , value ) ; } get ( key ) { let value = _UNKNOWN_ ( key ) ; if ( typeof value !== "s" && value !== null ) { throw ErrorCode . _UNKNOWN_ ; } return value ; } remove ( key ) { _UNKNOWN_ ( key ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O O O O O O $any$ O $any$ O $boolean$ O O O O O $any$ O O O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $void$ O $string$ O $string$ O O $any$ O $string$ O $string$ O O O $string$ O $string$ O O O $string$ O $any$ O $string$ O O O O O $string$ O O O $never$ O O O O O $any$ O $any$ O O O $string$ O O $void$ O $string$ O O $any$ O $string$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { ErrorCode } from 's' ; const _UNKNOWN_ = 's' ; export class _UNKNOWN_ implements _UNKNOWN_ { private _UNKNOWN_ : Storage ; constructor ( ) { try { this . _UNKNOWN_ = window . localStorage ; } catch ( e ) { } } isAvailable ( ) { if ( ! this . _UNKNOWN_ ) { return false ; } try { this . _UNKNOWN_ . setItem ( _UNKNOWN_ , 's' ) ; this . _UNKNOWN_ . removeItem ( _UNKNOWN_ ) ; return true ; } catch ( e ) { return false ; } } set ( key , value ) { try { this . _UNKNOWN_ . setItem ( key , value ) ; } catch ( e ) { if ( this . _UNKNOWN_ . length === 0 ) { throw ErrorCode . _UNKNOWN_ ; } else { throw ErrorCode . _UNKNOWN_ ; } } } get ( key ) { let value : string | null = this . _UNKNOWN_ . getItem ( key ) ; if ( typeof value !== "s" && value !== null ) { throw ErrorCode . _UNKNOWN_ ; } return value as string ; } remove ( key ) { this . _UNKNOWN_ . removeItem ( key ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O O O O O O $any$ O $any$ O O $Storage$ O $complex$ O O O O O O O O O $Storage$ O $complex$ O $Storage$ O O O O $any$ O O O O $boolean$ O O O O O O O O $Storage$ O O O O O O O O O O $Storage$ O $void$ O O O O O O O O $Storage$ O $void$ O O O O O O O O O O $any$ O O O O O O O $void$ O $string$ O $string$ O O O O O O $Storage$ O $void$ O $string$ O $string$ O O O O O $any$ O O O O O O $Storage$ O $number$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $string$ O $string$ O O O $string$ O O O O O O O $Storage$ O $string$ O $string$ O O O O O $string$ O O O $never$ O O O O O $any$ O $any$ O O O $string$ O O O O $void$ O $string$ O O O O $Storage$ O $void$ O $string$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { ErrorCode } from 's' ; const _UNKNOWN_ = 's' ; export class 0 implements _UNKNOWN_ { async isAvailable ( ) < boolean > { try { await _UNKNOWN_ . setValue ( _UNKNOWN_ , 's' ) ; await _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; return true ; } catch ( e ) { return false ; } } async set ( key , value ) { await _UNKNOWN_ . setValue ( key , value ) ; } async get ( key ) < string > { let value = await _UNKNOWN_ . getValue ( key ) ; if ( typeof value !== "s" && value !== null ) { throw ErrorCode . _UNKNOWN_ ; } return value ; } async remove ( key ) < void > { await _UNKNOWN_ . _UNKNOWN_ ( key ) ; } } declare namespace _UNKNOWN_ { function _UNKNOWN_ ( name ) < void > ; function getValue ( name , defaultValue ? ) < any > ; function getValue ( name , defaultValue ? ) < string > ; function getValue ( name , defaultValue ? ) < number > ; function getValue ( name , defaultValue ? ) < boolean > ; function _UNKNOWN_ ( ) < string [ ] > ; function setValue ( name , value ) < void > ; function setValue ( name , value ) < void > ; function setValue ( name , value ) < void > ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O O O O O O $any$ O $any$ O O $Promise$ O O O O O O O O O $any$ O $complex$ O O O O O O O $any$ O $Promise<void>$ O O O O O O O O O O $any$ O O O O O O O O $Promise<void>$ O $string$ O $string$ O O O $any$ O $complex$ O $string$ O $string$ O O O O $Promise$ O $string$ O O O O O O $string$ O O $any$ O $complex$ O $string$ O O O O O $string$ O O O $never$ O O O O O $any$ O $any$ O O O $string$ O O O $Promise$ O $string$ O O O O O O $any$ O $Promise<void>$ O $string$ O O O O O O $any$ O O $Promise$ O $string$ O O O O O O $Promise$ O $string$ O $any$ $any$ O O O O O O $Promise$ O $string$ O $string$ $string$ O O O O O O $Promise$ O $string$ O $number$ $number$ O O O O O O $Promise$ O $string$ O $boolean$ $boolean$ O O O O O O $Promise$ O O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O $Promise$ O $string$ O $boolean$ O O O O O O $Promise$ O $string$ O $number$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { App } from 's' ; import { Storage } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { EventHandler } from 's' ; import { render as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Logger } from 's' ; import { 0 } from 's' ; const logger = new Logger ( "s" ) ; const _UNKNOWN_ = require ( 's' ) as string ; const run = async ( ) => { let _UNKNOWN_ : _UNKNOWN_ | undefined ; const _UNKNOWN_ = new _UNKNOWN_ ( ) ; const 0 = new 0 ( ) ; const _UNKNOWN_ = new _UNKNOWN_ ( ) ; if ( await _UNKNOWN_ . isAvailable ( ) ) { logger . debug ( "s" ) ; _UNKNOWN_ = _UNKNOWN_ ; } else if ( await 0 . isAvailable ( ) ) { logger . debug ( "s" ) ; _UNKNOWN_ = 0 ; } else if ( await _UNKNOWN_ . isAvailable ( ) ) { logger . debug ( "s" ) ; _UNKNOWN_ = _UNKNOWN_ ; } if ( _UNKNOWN_ ) { const storage = new Storage ( _UNKNOWN_ ) ; const app = new App ( storage ) ; app . _UNKNOWN_ ( ) ; app . _UNKNOWN_ ( ) ; _UNKNOWN_ ( _UNKNOWN_ ) ; if ( location . hostname === "s" && location . pathname === "s" ) { let handler = new EventHandler ( ) ; handler . listen ( document , "s" , ( ) => { switch ( document . readyState ) { case "s" : case "s" : handler . dispose ( ) ; document . body . innerHTML = "s" ; document . head . innerHTML = "s" ; _UNKNOWN_ ( app . getComponents ( ) ) ; break ; } } ) ; } } else { logger . error ( "s" ) ; } } ; run ( ) ; </s>	O O O $HTMLScriptElement$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Logger$ O O $any$ O O O O O $string$ O $complex$ O O O O O O O $Promise<void>$ O O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O $any$ O O O O $any$ O O $any$ O O O O O O $any$ O $boolean$ O O O O $Logger$ O $void$ O O O O $any$ O $any$ O O O O O O O O $Promise<boolean>$ O O O O $Logger$ O $void$ O O O O $any$ O O O O O O O O $any$ O $boolean$ O O O O $Logger$ O $void$ O O O O $any$ O $any$ O O O O $any$ O O O $Storage$ O O $any$ O $any$ O O O $App$ O O $any$ O $Storage$ O O $App$ O $Promise<void>$ O O O $App$ O $void$ O O O $HTMLScriptElement$ O $string$ O O O O $Location$ O $string$ O O O $Location$ O $string$ O O O O O $EventHandler$ O O $any$ O O O $EventHandler$ O $EventHandler$ O $Document$ O O O O O O O O O $Document$ O $any$ O O O O O O O O $EventHandler$ O $void$ O O O $Document$ O $HTMLElement$ O $string$ O O O $Document$ O $HTMLHeadElement$ O $string$ O O O $any$ O $App$ O $Component[]$ O O O O O O O O O O O O O O $Logger$ O $void$ O O O O O O O $Promise<void>$ O O O O
<s> import { _UNKNOWN_ } from 's' ; import { ErrorCode } from 's' ; import * as browser from 's' ; export class _UNKNOWN_ implements _UNKNOWN_ { async isAvailable ( ) < boolean > { try { await browser . storage . local . set ( { 's' : 's' } ) ; await browser . storage . local . remove ( 's' ) ; return true ; } catch ( e ) { return false ; } } async set ( key , value ) < void > { const obj = { } as any ; obj [ key ] = value ; await browser . storage . local . set ( obj ) ; } async get ( key ) < string > { const values = await browser . storage . local . get ( key ) ; const value = values [ key ] ; if ( typeof value !== "s" && value !== null ) { throw ErrorCode . _UNKNOWN_ ; } return value ; } async remove ( key ) < void > { await browser . storage . local . remove ( key ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O $Promise$ O O O O O O O O O $any$ O $any$ O $any$ O $Promise<void>$ O O O O O O O O O $any$ O $any$ O $any$ O $Promise<void>$ O O O O O O O O O O $any$ O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O $any$ O O O O O O $any$ O $string$ O O $string$ O O $any$ O $any$ O $any$ O $Promise<void>$ O $any$ O O O O $Promise$ O $string$ O O O O O O $any$ O O $any$ O $any$ O $any$ O $Promise<any>$ O $string$ O O O $any$ O $any$ O $string$ O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $Promise$ O $string$ O O O O O O $any$ O $any$ O $any$ O $Promise<void>$ O $string$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { App } from 's' ; import { Storage } from 's' ; import { _UNKNOWN_ } from 's' ; import { EventHandler } from 's' ; import { render as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Logger } from 's' ; import { _UNKNOWN_ } from 's' ; import * as browser from 's' ; const logger = new Logger ( "s" ) ; const run = async ( ) => { let _UNKNOWN_ : _UNKNOWN_ | undefined ; const _UNKNOWN_ = new _UNKNOWN_ ( ) ; const _UNKNOWN_ = new _UNKNOWN_ ( ) ; if ( await _UNKNOWN_ . isAvailable ( ) ) { logger . debug ( "s" ) ; _UNKNOWN_ = _UNKNOWN_ ; } else if ( await _UNKNOWN_ . isAvailable ( ) ) { logger . debug ( "s" ) ; _UNKNOWN_ = _UNKNOWN_ ; } if ( _UNKNOWN_ ) { const storage = new Storage ( _UNKNOWN_ ) ; const app = new App ( storage ) ; app . _UNKNOWN_ ( ) ; app . _UNKNOWN_ ( ) ; _UNKNOWN_ ( browser . runtime . _UNKNOWN_ ( 's' ) ) ; if ( location . hostname === "s" && location . pathname === "s" ) { let handler = new EventHandler ( ) ; handler . listen ( document , "s" , ( ) => { switch ( document . readyState ) { case "s" : case "s" : handler . dispose ( ) ; document . body . innerHTML = "s" ; document . head . innerHTML = "s" ; _UNKNOWN_ ( app . getComponents ( ) ) ; break ; } } ) ; } } else { logger . error ( "s" ) ; } } ; run ( ) ; </s>	O O O $HTMLScriptElement$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O $Logger$ O O $any$ O O O O O $Promise<void>$ O O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O O $any$ O O O O O O $any$ O $Promise<boolean>$ O O O O $Logger$ O $void$ O O O O $any$ O $any$ O O O O O O $any$ O $boolean$ O O O O $Logger$ O $void$ O O O O $any$ O $any$ O O O O $any$ O O O $Storage$ O O $any$ O $any$ O O O $App$ O O $any$ O $Storage$ O O $App$ O $Promise<void>$ O O O $App$ O $void$ O O O $HTMLScriptElement$ O $any$ O $any$ O $string$ O O O O O O O $Location$ O $string$ O O O $Location$ O $string$ O O O O O $EventHandler$ O O $any$ O O O $EventHandler$ O $EventHandler$ O $Document$ O O O O O O O O O $Document$ O $any$ O O O O O O O O $EventHandler$ O $void$ O O O $Document$ O $HTMLElement$ O $string$ O O O $Document$ O $HTMLHeadElement$ O $string$ O O O $any$ O $App$ O $Component[]$ O O O O O O O O O O O O O O $Logger$ O $void$ O O O O O O O $Promise<void>$ O O O O
<s> import { Disposable } from 's' ; describe ( 's' , ( ) => { let dispose = new Disposable ( ) ; beforeEach ( ( ) => { dispose = new Disposable ( ) ; } ) ; it ( "s" , ( ) => { dispose . dispose ( ) ; expect ( dispose . _UNKNOWN_ ( ) ) . toBe ( true ) ; } ) ; it ( "s" , ( ) => { const callback = jasmine . createSpy ( "s" ) ; dispose . _UNKNOWN_ ( callback ) ; dispose . dispose ( ) ; expect ( callback ) . toHaveBeenCalled ( ) ; } ) ; } ) ; </s>	O O O $any$ O O O O $any$ O O O O O O O O $Disposable$ O O $any$ O O O $any$ O O O O O $Disposable$ O O $any$ O O O O O O $any$ O O O O O O O $Disposable$ O $void$ O O O $any$ O $Disposable$ O $boolean$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $Function$ O $any$ O $any$ O O O O $Disposable$ O $void$ O $Function$ O O $Disposable$ O $void$ O O O $any$ O $Function$ O O $any$ O O O O O O O O O O
<s> export const _UNKNOWN_ = { now : ( ) => + new Date ( ) } ; export const now = Date . now || _UNKNOWN_ . now ; </s>	O O O $complex$ O O $number$ O O O O O O $DateConstructor$ O O O O O O $number$ O $DateConstructor$ O $number$ O $complex$ O $number$ O O
<s> import * as date from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( date . now ) . toEqual ( jasmine . any ( Function ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( date . now ( ) ) . toEqual ( jasmine . any ( Number ) ) ; } ) ; it ( 's' , ( ) => { expect ( date . _UNKNOWN_ . now ( ) ) . toEqual ( jasmine . any ( Number ) ) ; } ) ; } ) ; } ) ; </s>	O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $number$ O O $any$ O $any$ O $any$ O $FunctionConstructor$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $NumberConstructor$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $complex$ O $number$ O O O O $any$ O $any$ O $any$ O $NumberConstructor$ O O O O O O O O O O O O O
<s> export enum _UNKNOWN_ { _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , MESSAGE = 's' } </s>	O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O
<s> export class _UNKNOWN_ { private _UNKNOWN_ : string ; private _data : { [ key ] : string } = { } ; constructor ( flags ) { this . _UNKNOWN_ = flags ; let data = this . _UNKNOWN_ . split ( "s" ) . map ( token => token . split ( "s" ) ) ; for ( let i = 0 ; i < data . length ; i ++ ) { this . _data [ decodeURIComponent ( data [ i ] [ 0 ] ) ] = decodeURIComponent ( data [ i ] [ 0 ] ) ; } } get ( name ) : string | undefined { return this . _data [ name ] ; } set ( name , value ) { this . _data [ name ] = value ; } remove ( name ) { delete this . _data [ name ] ; } toString ( ) { let tokens : string [ ] = [ ] ; for ( let key in this . _data ) { tokens . push ( encodeURIComponent ( key ) + "s" + encodeURIComponent ( this . _data [ key ] ) ) ; } return tokens . join ( "s" ) ; } } </s>	O O O $any$ O O $string$ O O O O $complex$ O O O $string$ O O O O O O O O O O $string$ O O O O $string$ O $string$ O O $string[][]$ O O O $string$ O $complex$ O O O O $U[]$ O $string$ O $string$ O $complex$ O O O O O O O O $number$ O O O $number$ O $string[][]$ O $number$ O $number$ O O O O O $complex$ O $string$ O $string[][]$ O $number$ O O O O O O O $string$ O $string[][]$ O $number$ O O O O O O O O $string$ O $string$ O O O O O O O O O $complex$ O $string$ O O O $void$ O $string$ O $string$ O O O O $complex$ O $string$ O O $string$ O O $void$ O $string$ O O O O O $complex$ O $string$ O O O $string$ O O O O $string[]$ O O O O O O O O O O O $string$ O O O $complex$ O O $string[]$ O $number$ O $string$ O $string$ O O O O $string$ O O O $complex$ O $string$ O O O O O O $string[]$ O $string$ O O O O O O O
<s> export interface _UNKNOWN_ { type : any ; } export type _UNKNOWN_ = null | { [ key ] : any } ; export interface Action < P > extends _UNKNOWN_ { type : string ; payload : P ; error ? : boolean ; meta ? : _UNKNOWN_ ; } export interface _UNKNOWN_ < P , S > { params : P ; result : S ; } export interface _UNKNOWN_ < P , E > { params : P ; error : E ; } export function _UNKNOWN_ < P > ( action , actionCreator < P > , ) : action is Action < P > { return action . type === actionCreator . type ; } export interface ActionCreator < P > { type : string ; match : ( action ) => action is Action < P > ; ( payload : P , meta ? ) : Action < P > ; } export interface _UNKNOWN_ extends ActionCreator < undefined > { ( payload ? , meta ? ) : Action < undefined > ; } export interface _UNKNOWN_ < P , S , E > { type : string ; started : ActionCreator < P > ; done : ActionCreator < _UNKNOWN_ < P , S > > ; failed : ActionCreator < _UNKNOWN_ < P , E > > ; } export interface _UNKNOWN_ { ( type , _UNKNOWN_ ? , error ? ) : _UNKNOWN_ ; < P > ( type , _UNKNOWN_ ? , isError ? ) : ActionCreator < P > ; < P > ( type , _UNKNOWN_ ? , isError ? : ( payload : P ) => boolean ) : ActionCreator < P > ; async < P , S > ( type , _UNKNOWN_ ? , ) : _UNKNOWN_ < P , S , any > ; async < P , S , E > ( type , _UNKNOWN_ ? , ) : _UNKNOWN_ < P , S , E > ; } declare const process : { env : { NODE_ENV ? : string ; } ; } ; export function _UNKNOWN_ ( prefix ? : string | null , _UNKNOWN_ : ( payload ) => boolean = p => p instanceof Error , ) { const actionTypes : { [ type ] : boolean } = { } ; const base = prefix ? `template` : "s" ; function actionCreator < P > ( type , _UNKNOWN_ ? , isError : ( ( payload : P ) => boolean ) | boolean = _UNKNOWN_ , ) < P > { const _UNKNOWN_ = base + type ; if ( process . env . NODE_ENV !== 's' ) { if ( actionTypes [ _UNKNOWN_ ] ) throw new Error ( `template` ) ; actionTypes [ _UNKNOWN_ ] = true ; } return Object . assign ( ( payload : P , meta ? ) => { const action < P > = { type : _UNKNOWN_ , payload , } ; if ( _UNKNOWN_ || meta ) { action . meta = Object . assign ( { } , _UNKNOWN_ , meta ) ; } if ( isError && ( typeof isError === 's' || isError ( payload ) ) ) { action . error = true ; } return action ; } , { type : _UNKNOWN_ , toString : ( ) => _UNKNOWN_ , match : ( action ) : action is Action < P > => action . type === _UNKNOWN_ , } , ) ; } function _UNKNOWN_ < P , S , E > ( type , _UNKNOWN_ ? , ) < P , S , E > { return { type : base + type , started : actionCreator < P > ( `template` , _UNKNOWN_ , false ) , done : actionCreator < _UNKNOWN_ < P , S > > ( `template` , _UNKNOWN_ , false ) , failed : actionCreator < _UNKNOWN_ < P , E > > ( `template` , _UNKNOWN_ , true ) , } ; } return Object . assign ( actionCreator , { async : _UNKNOWN_ } ) ; } export default _UNKNOWN_ ; </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $string$ O O O O O O O $any$ O $any$ O O $any$ O $string$ O O O $P$ O $any$ O $boolean$ O O O O $complex$ O O $any$ O O O O $any$ O $any$ O $any$ O O $P$ O $any$ O $S$ O $any$ O O O O $any$ O $any$ O $any$ O O $P$ O $any$ O $any$ O $any$ O O O O $complex$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O $string$ O O O $complex$ O O $any$ O O $any$ O $any$ O $any$ O O O $P$ O $any$ O $complex$ $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $undefined$ $undefined$ O $complex$ $any$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $string$ O O O $any$ O $any$ O $any$ O O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $complex$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $string$ O $complex$ $any$ O $boolean$ $boolean$ O O $any$ O O $any$ O O $string$ O $complex$ $any$ O $boolean$ $boolean$ O O $any$ O $any$ O O O $any$ O O $string$ O $complex$ $any$ O $boolean$ O O O $P$ O $any$ O O O O O $any$ O $any$ O O $complex$ O $any$ O $any$ O O $string$ O $complex$ $any$ O O O $any$ O $any$ O $any$ O O O O $complex$ O $any$ O $any$ O $any$ O O $string$ O $complex$ $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $string$ O O O O O O O O O O $any$ O $string$ O O O O O O $boolean$ O O $any$ O O O O $any$ O $any$ O $ErrorConstructor$ O O O O $complex$ O O O $string$ O O O O O O O O O $string$ O $string$ O O O O O O $any$ O $any$ O O $string$ O $complex$ $any$ O $boolean)$ O O O $P$ O $any$ O O O O O O O $boolean$ O O O $any$ O O O $string$ O $string$ O $string$ O O O $complex$ O $complex$ O $string$ O O O O O O $complex$ O $string$ O O O O $ErrorConstructor$ O O O O $complex$ O $string$ O O O O O O $ObjectConstructor$ O O O O $P$ O $any$ O $complex$ $any$ O O O O $Action$ O $any$ O O O $string$ O $string$ O $P$ O O O O O $complex$ O $complex$ O O $any$ O $complex$ O $ObjectConstructor$ O O O O O O $complex$ O $complex$ O O O O O $boolean)$ O O O $boolean)$ O O O $boolean$ O $P$ O O O O $any$ O $boolean$ O O O O O $any$ O O O O $string$ O $string$ O $string$ O O O O $string$ O $complex$ O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $string$ O $complex$ $any$ O O O $any$ O $any$ O $any$ O O O O $string$ O $string$ O $string$ O $any$ O $any$ O $any$ O O O O $complex$ O O O O $complex$ O $any$ O $any$ O $any$ O $any$ O O O O O $complex$ O O O O $complex$ O $any$ O $any$ O $any$ O $any$ O O O O O $complex$ O O O O O O O O $ObjectConstructor$ O O O $any$ O O $complex$ O $complex$ O O O O O O $any$ O O
<s> import test = require ( 's' ) ; import { join } from "s" ; import { _UNKNOWN_ } from "s" ; import _UNKNOWN_ , { _UNKNOWN_ } from "s" ; test ( 's' , assert => { const actionCreator = _UNKNOWN_ ( ) ; const 0 = actionCreator ( 's' ) ; const 0 = actionCreator ( 's' ) ; const action = 0 ( ) ; assert . true ( _UNKNOWN_ ( action , 0 ) ) ; assert . false ( _UNKNOWN_ ( action , 0 ) ) ; assert . end ( ) ; } ) ; test ( 's' , assert => { const actionCreator = _UNKNOWN_ ( ) ; const 0 = actionCreator ( 's' ) ; const 0 = actionCreator ( 's' ) ; const action = 0 ( ) ; assert . true ( 0 . match ( action ) ) ; assert . false ( 0 . match ( action ) ) ; assert . end ( ) ; } ) ; test ( 's' , assert => { const actionCreator = _UNKNOWN_ ( ) ; const _UNKNOWN_ = actionCreator < { foo : string } > ( 's' ) ; assert . throws ( ( ) => actionCreator ( 's' ) , 's' ) ; assert . equal ( _UNKNOWN_ . type , 's' ) ; const action = _UNKNOWN_ ( { foo : 's' } ) ; assert . equal ( action . type , 's' ) ; assert . equal ( action . error , undefined ) ; assert . equal ( action . meta , undefined ) ; assert . deepEqual ( action . payload , { foo : 's' } ) ; assert . end ( ) ; } ) ; test ( 's' , assert => { const actionCreator = _UNKNOWN_ ( ) ; const _UNKNOWN_ = actionCreator ( 's' ) ; const action = _UNKNOWN_ ( undefined , { foo : 's' } ) ; assert . deepEqual ( action . meta , { foo : 's' } ) ; const _UNKNOWN_ = actionCreator ( 's' , { foo : 's' } ) ; const _UNKNOWN_ = _UNKNOWN_ ( undefined ) ; assert . deepEqual ( _UNKNOWN_ . meta , { foo : 's' } ) ; const _UNKNOWN_ = _UNKNOWN_ ( undefined , { _UNKNOWN_ : 's' } ) ; assert . deepEqual ( _UNKNOWN_ . meta , { foo : 's' , _UNKNOWN_ : 's' } ) ; assert . end ( ) ; } ) ; test ( 's' , assert => { const actionCreator = _UNKNOWN_ ( ) ; const _UNKNOWN_ = actionCreator ( 's' , null , true ) ; const action = _UNKNOWN_ ( ) ; assert . true ( action . error ) ; const _UNKNOWN_ = actionCreator < any > ( 's' , null ) ; assert . false ( _UNKNOWN_ ( { } ) . error ) ; assert . true ( _UNKNOWN_ ( new Error ( ) ) . error ) ; const _UNKNOWN_ = actionCreator < { isError : boolean ; } > ( 's' , null , payload => payload . isError ) ; assert . false ( _UNKNOWN_ ( { isError : false } ) . error ) ; assert . true ( _UNKNOWN_ ( { isError : true } ) . error ) ; const 0 = _UNKNOWN_ ( null , payload => payload . isError ) ; const 0 = 0 < { isError : boolean ; } > ( 's' ) ; assert . false ( 0 ( { isError : false } ) . error ) ; assert . true ( 0 ( { isError : true } ) . error ) ; assert . end ( ) ; } ) ; test ( 's' , assert => { const actionCreator = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = actionCreator ( 's' ) ; assert . equal ( _UNKNOWN_ . type , 's' ) ; const action = _UNKNOWN_ ( ) ; assert . equal ( action . type , 's' ) ; assert . end ( ) ; } ) ; test ( 's' , assert => { const actionCreator = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = actionCreator . async < { foo : string } , { bar : string } > ( 's' , { baz : 's' } ) ; assert . equal ( _UNKNOWN_ . type , 's' ) ; assert . equal ( _UNKNOWN_ . started . type , 's' ) ; assert . equal ( _UNKNOWN_ . done . type , 's' ) ; assert . equal ( _UNKNOWN_ . failed . type , 's' ) ; const started = _UNKNOWN_ . started ( { foo : 's' } ) ; assert . equal ( started . type , 's' ) ; assert . deepEqual ( started . payload , { foo : 's' } ) ; assert . deepEqual ( started . meta , { baz : 's' } ) ; assert . true ( ! started . error ) ; const done = _UNKNOWN_ . done ( { params : { foo : 's' } , result : { bar : 's' } } ) ; assert . true ( ! done . error ) ; const failed = _UNKNOWN_ . failed ( { params : { foo : 's' } , error : 's' } ) ; assert . true ( failed . error ) ; assert . end ( ) ; } ) ; test ( 's' , assert => { assert . doesNotThrow ( ( ) => { _UNKNOWN_ ( join ( __dirname , 's' ) ) ; } ) ; assert . end ( ) ; } ) ; </s>	O O $any$ O O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O $complex$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $complex$ O $any$ O O $string$ O O O O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $complex$ O $string$ O O O O O $complex$ O $complex$ O O $string$ O O O O O $any$ O $any$ O $complex$ O $string$ O O O O $any$ O $any$ O $complex$ O $boolean$ O $undefined$ O O $any$ O $any$ O $complex$ O $complex$ O $undefined$ O O $any$ O $any$ O $complex$ O $complex$ O O $string$ O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $undefined$ O O $string$ O O O O O $any$ O $any$ O $any$ O $complex$ O O $string$ O O O O O O $any$ O $any$ O O O O $string$ O O O O O O $any$ O $any$ O $undefined$ O O $any$ O $any$ O $any$ O $complex$ O O $string$ O O O O O O $any$ O $any$ O $undefined$ O O $string$ O O O O O $any$ O $any$ O $any$ O $complex$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $boolean$ O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O O $any$ O $any$ O $any$ O O $ErrorConstructor$ O O O O $boolean$ O O O $complex$ O $any$ O O $boolean$ O O O O O O O O O O $complex$ O $complex$ O $boolean$ O O $any$ O $any$ O $complex$ O O $false$ O O O O O $boolean$ O O $any$ O $any$ O $complex$ O O $true$ O O O O O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $complex$ O $any$ O O $boolean$ O O O O O O O O O $any$ O $any$ O $complex$ O O $false$ O O O O O $boolean$ O O $any$ O $any$ O $complex$ O O $true$ O O O O O $boolean$ O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O O $complex$ O $any$ O $complex$ O O $string$ O O O O O $string$ O O O O O O O O $string$ O O O O O $any$ O $any$ O $complex$ O $string$ O O O O $any$ O $any$ O $complex$ O $complex$ O $string$ O O O O $any$ O $any$ O $complex$ O $complex$ O $string$ O O O O $any$ O $any$ O $complex$ O $complex$ O $string$ O O O O O $complex$ O $complex$ O $complex$ O O $string$ O O O O O $any$ O $any$ O $complex$ O $string$ O O O O $any$ O $any$ O $complex$ O $complex$ O O $string$ O O O O O $any$ O $any$ O $complex$ O $complex$ O O $string$ O O O O O $any$ O $any$ O O $complex$ O $boolean$ O O O $complex$ O $complex$ O $complex$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O O O $any$ O $any$ O O $complex$ O $boolean$ O O O $complex$ O $complex$ O $complex$ O O $complex$ O O $string$ O O O O $string$ O O O O O $any$ O $any$ O $complex$ O $boolean$ O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O
<s> import _UNKNOWN_ , { _UNKNOWN_ , _UNKNOWN_ } from "s" ; declare const action ; const actionCreator = _UNKNOWN_ ( ) ; function _UNKNOWN_ ( ) { const _UNKNOWN_ = actionCreator < { foo : string } > ( 's' ) ; const withoutPayload = actionCreator ( 's' ) ; const a = _UNKNOWN_ ( ) ; const b = _UNKNOWN_ ( { bar : 0 } ) ; const c = _UNKNOWN_ ( { foo : 's' } ) ; const d = _UNKNOWN_ ( { foo : 's' } , { meta : 's' } ) ; const e = withoutPayload ( ) ; const f = withoutPayload ( undefined , { meta : 's' } ) ; const g = withoutPayload ( { foo : 's' } ) ; } function _UNKNOWN_ ( ) { const async = actionCreator . async < { foo : string } , { bar : string } , { baz : string } > ( 's' ) ; const started = async . started ( { foo : 's' } ) ; const 0 = async . started ( { } ) ; const 0 = async . started ( ) ; const done = async . done ( { params : { foo : 's' } , result : { bar : 's' } , } ) ; const 0 = async . done ( { params : { foo : 0 } , result : { bar : 's' } , } ) ; const 0 = async . done ( { params : { foo : 's' } , result : { bar : 0 } , } ) ; const failed = async . failed ( { params : { foo : 's' } , error : { baz : 's' } , } ) ; const 0 = async . failed ( { params : { foo : 0 } , error : { baz : 's' } , } ) ; const 0 = async . failed ( { params : { foo : 's' } , error : { baz : 0 } , } ) ; } function _UNKNOWN_ ( ) { const _UNKNOWN_ = actionCreator < { foo : string } > ( 's' ) ; const withoutPayload = actionCreator ( 's' ) ; if ( _UNKNOWN_ ( action , _UNKNOWN_ ) ) { const foo = action . payload . foo ; action . payload . bar ; } if ( _UNKNOWN_ ( action , withoutPayload ) ) { const foo : { } = action . payload ; } } function _UNKNOWN_ ( ) { const _UNKNOWN_ = actionCreator < { foo : string } > ( 's' ) ; const withoutPayload = actionCreator ( 's' ) ; if ( _UNKNOWN_ . match ( action ) ) { const foo = action . payload . foo ; action . payload . bar ; } if ( withoutPayload . match ( action ) ) { const foo : { } = action . payload ; } } function _UNKNOWN_ ( ) { const a = actionCreator < { foo : string } > ( 's' ) ; a ( { foo : 's' } ) ; a ( { foo : 's' } , null ) ; a ( { foo : 's' } , 0 ) ; a ( { foo : 's' } , 's' ) ; a ( { foo : 's' } , true ) ; const action = a ( { foo : 's' } , { bar : 's' } ) ; action . meta . foo ; action . meta ! . foo ; } </s>	O O $any$ O O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O $void$ O O O O $any$ O $any$ O O $string$ O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O $number$ O O O O O O $any$ O $any$ O O $string$ O O O O O O $any$ O $any$ O O $string$ O O O O O $string$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $undefined$ O O $string$ O O O O O O $any$ O $any$ O O $string$ O O O O O O O $void$ O O O O $any$ O $any$ O $any$ O O $string$ O O O O O $string$ O O O O O $string$ O O O O O O O O O $any$ O $any$ O $any$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O O O O O $any$ O $any$ O $any$ O O $complex$ O O $number$ O O O O $complex$ O O $string$ O O O O O O O O $any$ O $any$ O $any$ O O $complex$ O O $string$ O O O O $complex$ O O $number$ O O O O O O O O $any$ O $any$ O $any$ O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O O O O O $any$ O $any$ O $any$ O O $complex$ O O $number$ O O O O $complex$ O O $string$ O O O O O O O O $any$ O $any$ O $any$ O O $complex$ O O $string$ O O O O $complex$ O O $number$ O O O O O O O O O $void$ O O O O $any$ O $any$ O O $string$ O O O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O ${}$ O O O O $any$ O $any$ O O O O $void$ O O O O $any$ O $any$ O O $string$ O O O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O ${}$ O O O O $any$ O $any$ O O O O $void$ O O O O $any$ O $any$ O O $string$ O O O O O O O O $any$ O O $string$ O O O O O $any$ O O $string$ O O O O O O O $any$ O O $string$ O O O O O O O $any$ O O $string$ O O O O O O O $any$ O O $string$ O O O O O O O O $any$ O $any$ O O $string$ O O O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O
<s> export interface _UNKNOWN_ { func : Function ; context : any ; args : Array < any > ; _UNKNOWN_ : ( ) => boolean ; } export default class _UNKNOWN_ { _UNKNOWN_ : number ; _UNKNOWN_ : ( ) => boolean ; queue : Array < _UNKNOWN_ > ; isStopped : boolean ; timeoutMs : number ; constructor ( options ) { this . _UNKNOWN_ = options . _UNKNOWN_ ; this . _UNKNOWN_ = options . _UNKNOWN_ || function ( ) { return true ; } ; this . queue = [ ] ; this . isStopped = false ; this . timeoutMs = ( 0 / this . _UNKNOWN_ ) * 0 ; } submit ( func , context , args < any > , _UNKNOWN_ : ( ) => boolean ) { this . queue . push ( { func : func , context : context , args : args , _UNKNOWN_ : _UNKNOWN_ } ) ; } start ( ) { this . _UNKNOWN_ ( ) ; } stop ( ) { this . isStopped = true ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ( ) ) { if ( this . queue . length !== 0 ) { var _UNKNOWN_ = this . queue . shift ( ) ; var _UNKNOWN_ = ( _UNKNOWN_ . _UNKNOWN_ && _UNKNOWN_ . _UNKNOWN_ . call ( _UNKNOWN_ . context ) ) ; if ( _UNKNOWN_ ) { setTimeout ( ( ) => { this . _UNKNOWN_ ( ) ; } , 0 ) ; return ; } else { _UNKNOWN_ . func . apply ( _UNKNOWN_ . context , _UNKNOWN_ . args ) ; } } } if ( this . isStopped ) { return ; } setTimeout ( ( ) => { this . _UNKNOWN_ ( ) ; } , this . timeoutMs ) ; } } </s>	O O O $any$ O $Function$ O $FunctionConstructor$ O $any$ O O O $any[]$ O $ArrayConstructor$ O O O O $boolean$ O O O O O O O O O O $any$ O $number$ O O O $boolean$ O O O O O O $any$ O $ArrayConstructor$ O $any$ O O $boolean$ O O O $number$ O O O O O $any$ O O O O $number$ O $any$ O $any$ O O O $boolean$ O $any$ O $any$ O O O O O O O O O O O O $any$ O O O O O O $boolean$ O O O O O $number$ O O O O O O $number$ O O O O O $void$ O $Function$ O $any$ O $Array$ O O O O $boolean$ O O O O O O O O O $any$ O $number$ O O $Function$ O $Function$ O $any$ O $any$ O $any[]$ O $any[]$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $boolean$ O O O O $void$ O O O O O O O $boolean$ O O O O O O O O $any$ O $number$ O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O O $any$ O $boolean$ O $any$ O $boolean$ O $any$ O $any$ O $any$ O O O O O $any$ O O $number$ O O O O O O O $void$ O O O O O O O O O O O O O $any$ O $Function$ O $any$ O $any$ O $any$ O $any$ O $any[]$ O O O O O O O O O $boolean$ O O O O O $number$ O O O O O O O $void$ O O O O O O O $number$ O O O O O
<s> import { resolve as _UNKNOWN_ } from 's' ; import * as _ from 's' ; export interface _UNKNOWN_ { _UNKNOWN_ : boolean ; _UNKNOWN_ : ( link ) => boolean } export default class Response { response : any constructor ( response ) { this . response = response ; } _UNKNOWN_ ( ) { const { response } = this ; return Boolean ( response && response . headers && response . headers [ 's' ] && response . headers [ 's' ] . match ( "s" ) ) ; } _UNKNOWN_ ( ) { if ( ! this . _UNKNOWN_ ( ) ) { return 's' ; } const { response } = this ; const _UNKNOWN_ = 's' ; var encoding = _UNKNOWN_ ; if ( response . headers [ 's' ] ) { encoding = response . headers [ 's' ] ; } var _UNKNOWN_ ; try { _UNKNOWN_ = response . body . toString ( encoding ) ; } catch ( _UNKNOWN_ ) { _UNKNOWN_ = response . body . toString ( _UNKNOWN_ ) ; } return _UNKNOWN_ ; } _UNKNOWN_ ( str ) { return str . replace ( "s" , 's' ) ; } _UNKNOWN_ ( _UNKNOWN_ , body ) { var _UNKNOWN_ = "s" ; var _UNKNOWN_ = body . match ( _UNKNOWN_ ) ; if ( ! _UNKNOWN_ ) { return _UNKNOWN_ ; } return _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ [ 0 ] ) ; } ; _UNKNOWN_ ( link ) { return ( link . indexOf ( 's' ) < 0 && link . indexOf ( 's' ) < 0 ) || link . indexOf ( 's' ) >= 0 || link . indexOf ( 's' ) >= 0 ; } _UNKNOWN_ ( _UNKNOWN_ , body , options ) { body = this . _UNKNOWN_ ( body ) ; var baseUrl = this . _UNKNOWN_ ( _UNKNOWN_ , body ) ; var _UNKNOWN_ = options . _UNKNOWN_ ? "s" : "s" ; var links = body . match ( _UNKNOWN_ ) || [ ] ; var urls = _ . chain ( links ) . map ( function ( link ) { var match = "s" . exec ( link ) ; link = match [ 0 ] ; link = _UNKNOWN_ ( baseUrl , link ) ; return link ; } ) . uniq ( ) . filter ( link => { return this . _UNKNOWN_ ( link ) && options . _UNKNOWN_ ( link ) ; } ) . value ( ) ; return urls ; } ; } </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $boolean$ O O O $boolean$ O O $string$ O O O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O O O $any$ O O O O O $BooleanConstructor$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O O O O O O $boolean$ O O O O O O O O O O $any$ O O O O O O O O O O $string$ O O O O O $any$ O $any$ O O O O O $string$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $RegExp$ O O O O $any$ O $any$ O $any$ O $RegExp$ O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $boolean$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O $RegExp$ O $any$ O $boolean$ O O O O O O $any$ O $any$ O $any$ O $RegExp$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O $RegExpExecArray$ O O O $RegExpExecArray$ O $any$ O O $any$ O $RegExpExecArray$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $boolean$ O $any$ O O $any$ O $boolean$ O $any$ O O O O O $any$ O O O O $any$ O O O O O
<s> const request = require ( 's' ) ; import * as _ from 's' ; import _UNKNOWN_ from 's' ; import Response from 's' ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = 's' ; function _UNKNOWN_ ( ) { this . _UNKNOWN_ = { } ; this . _UNKNOWN_ = [ ] ; this . depth = _UNKNOWN_ ; this . _UNKNOWN_ = false ; this . userAgent = _UNKNOWN_ ; this . maxConcurrentRequests = _UNKNOWN_ ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = function ( url ) { return true ; } ; this . _UNKNOWN_ = function ( url ) { return true ; } ; this . _UNKNOWN_ = [ ] ; this . _UNKNOWN_ = 0 ; this . request = request ; } _UNKNOWN_ . prototype . configure = function ( options ) { this . depth = ( options && options . depth ) || this . depth ; this . depth = Math . max ( this . depth , 0 ) ; this . _UNKNOWN_ = ( options && options . _UNKNOWN_ ) || this . _UNKNOWN_ ; this . userAgent = ( options && options . userAgent ) || this . userAgent ; this . maxConcurrentRequests = ( options && options . maxConcurrentRequests ) || this . maxConcurrentRequests ; this . _UNKNOWN_ = ( options && options . _UNKNOWN_ ) || this . _UNKNOWN_ ; this . _UNKNOWN_ = ( options && options . _UNKNOWN_ ) || this . _UNKNOWN_ ; this . _UNKNOWN_ = ( options && options . _UNKNOWN_ ) || this . _UNKNOWN_ ; this . onSuccess = _ . noop ; this . _UNKNOWN_ = _ . noop ; this . _UNKNOWN_ = _ . noop ; return this ; } ; _UNKNOWN_ . prototype . _UNKNOWN_ = function ( ) { var self = this ; return new _UNKNOWN_ ( { _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ : function ( ) { return self . _UNKNOWN_ < self . maxConcurrentRequests ; } } ) ; } ; _UNKNOWN_ . prototype . _UNKNOWN_ = function ( url , onSuccess , _UNKNOWN_ , _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . start ( ) ; if ( typeof url !== 's' ) { var options = url ; onSuccess = options . success ; _UNKNOWN_ = options . failure ; _UNKNOWN_ = options . finished ; url = options . url ; } this . onSuccess = onSuccess ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ ( url , null , this . depth ) ; return this ; } ; _UNKNOWN_ . prototype . _UNKNOWN_ = function ( ) { this . _UNKNOWN_ = { } ; this . _UNKNOWN_ = [ ] ; return this ; } ; _UNKNOWN_ . prototype . _UNKNOWN_ = function ( url ) { if ( this . _UNKNOWN_ . indexOf ( url ) < 0 ) { this . _UNKNOWN_ . push ( url ) ; } } ; _UNKNOWN_ . prototype . _UNKNOWN_ = function ( url ) { var _UNKNOWN_ = this . _UNKNOWN_ . indexOf ( url ) ; this . _UNKNOWN_ . splice ( _UNKNOWN_ , 0 ) ; if ( this . _UNKNOWN_ . length === 0 ) { this . _UNKNOWN_ && this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ && this . _UNKNOWN_ . stop ( ) ; } } _UNKNOWN_ . prototype . _UNKNOWN_ = function ( options , callback ) { var self = this ; var url = options . url ; if ( _ . contains ( self . _UNKNOWN_ , url ) || _ . contains ( _ . keys ( self . _UNKNOWN_ ) , url ) ) { return ; } self . _UNKNOWN_ ( url ) ; this . _UNKNOWN_ . submit ( function ( options , callback ) { self . _UNKNOWN_ ++ ; self . request ( options , function ( error , response , body ) { self . _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ; callback ( error , response , body ) ; self . _UNKNOWN_ ( url ) ; self . _UNKNOWN_ -- ; } ) ; } , null , [ options , callback ] , function _UNKNOWN_ ( ) { var _UNKNOWN_ = self . _UNKNOWN_ ( url ) ; if ( ! _UNKNOWN_ ) { self . _UNKNOWN_ ( url ) ; } return _ . contains ( _ . keys ( self . _UNKNOWN_ ) , url ) || ! _UNKNOWN_ ; } ) ; } ; _UNKNOWN_ . prototype . _UNKNOWN_ = function ( url , _UNKNOWN_ , depth ) { if ( ( depth === 0 ) || this . _UNKNOWN_ [ url ] ) { return ; } var self = this ; this . _UNKNOWN_ ( { url : url , encoding : null , _UNKNOWN_ : false , _UNKNOWN_ : true , _UNKNOWN_ : true , headers : { 's' : this . userAgent , 's' : _UNKNOWN_ } } , function ( error , response ) { if ( self . _UNKNOWN_ [ url ] ) { return ; } self . _UNKNOWN_ [ url ] = true ; _ . each ( self . _UNKNOWN_ , ( redirect ) => { self . _UNKNOWN_ [ redirect . _UNKNOWN_ ] = true ; } ) ; const resp = new Response ( response ) ; var _UNKNOWN_ = resp . _UNKNOWN_ ( ) ; var body = resp . _UNKNOWN_ ( ) ; if ( ! error && ( response . statusCode === 0 ) ) { var _UNKNOWN_ = response . request . uri . href ; if ( self . _UNKNOWN_ ( _UNKNOWN_ ) ) { self . onSuccess ( { url : _UNKNOWN_ , status : response . statusCode , content : body , error : error , response : response , body : body , _UNKNOWN_ : _UNKNOWN_ || "s" } ) ; self . _UNKNOWN_ [ _UNKNOWN_ ] = true ; self . _UNKNOWN_ . push ( _UNKNOWN_ ) ; if ( self . _UNKNOWN_ ( _UNKNOWN_ ) && depth > 0 && _UNKNOWN_ ) { const _UNKNOWN_ = { _UNKNOWN_ : self . _UNKNOWN_ , _UNKNOWN_ : self . _UNKNOWN_ } ; self . _UNKNOWN_ ( resp . _UNKNOWN_ ( _UNKNOWN_ , body , _UNKNOWN_ ) , _UNKNOWN_ , depth - 0 ) ; } } } else if ( self . _UNKNOWN_ ) { self . _UNKNOWN_ ( { url : url , status : response ? response . statusCode : undefined , content : body , error : error , response : response , body : body , _UNKNOWN_ : _UNKNOWN_ || "s" } ) ; self . _UNKNOWN_ . push ( url ) ; } } ) ; } ; _UNKNOWN_ . prototype . _UNKNOWN_ = function ( urls , _UNKNOWN_ , depth ) { var self = this ; _ . each ( urls , function ( url ) { self . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; } ) ; } ; module . exports = _UNKNOWN_ ; </s>	O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O $void$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $Math$ O $number$ O O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O O O $any$ O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O O O O $void$ O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O $any$ O $any$ O $null$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $complex$ O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $Response$ O O $any$ O $any$ O O O $boolean$ O $Response$ O $boolean$ O O O O $any$ O $Response$ O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O $boolean$ O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $Response$ O $any$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $undefined$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $void$ O O
<s> import Response from 's' ; var _UNKNOWN_ = require ( 's' ) ; var _ = require ( 's' ) ; function _UNKNOWN_ ( _UNKNOWN_ , methodName ) { return _UNKNOWN_ [ methodName ] . calls . all ( ) . map ( function ( call ) { return call . args ; } ) ; } describe ( 's' , function ( ) { var _UNKNOWN_ ; var response ; var _UNKNOWN_ = { _UNKNOWN_ : false , _UNKNOWN_ : ( ) => true } ; beforeEach ( function ( ) { response = new Response ( null ) ; _UNKNOWN_ = new _UNKNOWN_ ( ) ; _UNKNOWN_ . configure ( ) ; } ) ; describe ( 's' , function ( ) { it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( 's' ) ) . toBe ( 's' ) ; } ) ; it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( 's' ) ) . toBe ( 's' ) ; } ) ; } ) ; describe ( 's' , function ( ) { var baseUrl = 's' ; it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( baseUrl , 's' , _UNKNOWN_ ) ) . toEqual ( [ 's' ] ) ; } ) ; it ( 's' , function ( ) { var fragment = 's' ; expect ( response . _UNKNOWN_ ( baseUrl , fragment , _UNKNOWN_ ) ) . toEqual ( [ 's' , 's' , 's' ] ) ; } ) ; it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( baseUrl , 's' , _UNKNOWN_ ) ) . toEqual ( [ 's' ] ) ; } ) ; it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( baseUrl , 's' , _UNKNOWN_ ) ) . toEqual ( [ ] ) ; } ) ; it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( baseUrl , 's' , _UNKNOWN_ ) ) . toEqual ( [ ] ) ; } ) ; it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( baseUrl , 's' + "s" , _UNKNOWN_ ) ) . toEqual ( [ 's' , 's' ] ) ; } ) ; describe ( 's' , function ( ) { var _UNKNOWN_ = { _UNKNOWN_ : true , _UNKNOWN_ : ( ) => true } ; describe ( 's' , function ( ) { it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( baseUrl , 's' , _UNKNOWN_ ) ) . toEqual ( [ ] ) ; } ) ; it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( baseUrl , 's' , _UNKNOWN_ ) ) . toEqual ( [ 's' ] ) ; } ) ; } ) ; describe ( 's' , function ( ) { var _UNKNOWN_ = { _UNKNOWN_ : false , _UNKNOWN_ : ( ) => true } ; it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( baseUrl , 's' , _UNKNOWN_ ) ) . toEqual ( [ 's' ] ) ; } ) ; it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( baseUrl , 's' , _UNKNOWN_ ) ) . toEqual ( [ 's' ] ) ; } ) ; } ) ; } ) ; it ( 's' , function ( ) { expect ( response . _UNKNOWN_ ( baseUrl , 's' , _UNKNOWN_ ) ) . toEqual ( [ ] ) ; } ) ; describe ( 's' , function ( ) { it ( 's' , function ( ) { const _UNKNOWN_ = { _UNKNOWN_ : function _UNKNOWN_ ( url ) { var resourceId = parseInt ( url . substring ( url . lastIndexOf ( 's' ) + 0 ) ) ; return resourceId % 0 === 0 ; } } ; var fragment = 's' ; expect ( response . _UNKNOWN_ ( baseUrl , fragment , _UNKNOWN_ ) ) . toEqual ( [ 's' , 's' ] ) ; } ) ; } ) ; describe ( 's' , function ( ) { var _UNKNOWN_ = 's' ; var _UNKNOWN_ = 's' ; var _UNKNOWN_ = 's' ; it ( 's' , function ( ) { var fragment = 's' + _UNKNOWN_ + 's' ; expect ( response . _UNKNOWN_ ( _UNKNOWN_ , fragment , _UNKNOWN_ ) ) . toEqual ( [ 's' , 's' , 's' ] ) ; } ) ; it ( 's' , function ( ) { var fragment = 's' + _UNKNOWN_ + 's' ; expect ( response . _UNKNOWN_ ( _UNKNOWN_ , fragment , _UNKNOWN_ ) ) . toEqual ( [ 's' ] ) ; } ) ; it ( 's' , function ( ) { var fragment = 's' + _UNKNOWN_ + 's' ; expect ( response . _UNKNOWN_ ( _UNKNOWN_ , fragment , _UNKNOWN_ ) ) . toEqual ( [ 's' ] ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { var _UNKNOWN_ = 's' ; var depth = 0 ; it ( 's' , function ( ) { spyOn ( _UNKNOWN_ , 's' ) ; var urls = [ 's' , 's' , 's' ] ; _UNKNOWN_ . _UNKNOWN_ ( urls , _UNKNOWN_ , depth ) ; expect ( _UNKNOWN_ ( _UNKNOWN_ , 's' ) ) . toEqual ( [ [ 's' , _UNKNOWN_ , depth ] , [ 's' , _UNKNOWN_ , depth ] , [ 's' , _UNKNOWN_ , depth ] ] ) ; } ) ; } ) ; describe ( 's' , function ( ) { var _UNKNOWN_ = 's' ; var url = 's' ; var userAgent = 's' ; beforeEach ( function ( ) { spyOn ( _UNKNOWN_ , 's' ) ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ [ url ] = true ; _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , 0 ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . length ) . toEqual ( 0 ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . not . toHaveBeenCalled ( ) ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , 0 ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . length ) . toEqual ( 0 ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . not . toHaveBeenCalled ( ) ; } ) ; it ( 's' , function ( ) { var expectedOptions = { url : url , encoding : null , _UNKNOWN_ : false , _UNKNOWN_ : true , _UNKNOWN_ : true , headers : { 's' : userAgent , 's' : _UNKNOWN_ } } ; _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , 0 ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( expectedOptions , jasmine . any ( Function ) ) ; } ) ; describe ( 's' , function ( ) { var depth = 0 ; var error = 's' ; var _UNKNOWN_ = 0 ; var _UNKNOWN_ = 's' ; var errorResponse = { headers : { 's' : 's' } , statusCode : _UNKNOWN_ , body : _UNKNOWN_ } ; describe ( 's' , function ( ) { beforeEach ( function ( ) { spyOn ( _UNKNOWN_ , 's' ) ; spyOn ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ . _UNKNOWN_ . and . callFake ( function ( options , callback ) { callback ( error , errorResponse , _UNKNOWN_ ) ; } ) ; _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( { url : url , status : _UNKNOWN_ , content : _UNKNOWN_ , error : error , response : errorResponse , body : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ } ) ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ . and . callFake ( function ( options , callback ) { expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( [ url ] ) ; callback ( error , errorResponse , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( [ ] ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( 0 ) ; } ) ; _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; } ) ; } ) ; describe ( 's' , function ( ) { var OK = 0 ; var response = null ; var body = 's' ; beforeEach ( function ( ) { response = { statusCode : OK , headers : { 's' : 's' } , request : { uri : { href : url } } , body : body } ; spyOn ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ . _UNKNOWN_ . and . callFake ( function ( options , callback ) { callback ( null , response , body ) ; } ) ; spyOn ( _UNKNOWN_ , 's' ) ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; expect ( _UNKNOWN_ . onSuccess ) . toHaveBeenCalledWith ( { url : url , status : OK , content : body , error : null , response : response , body : body , _UNKNOWN_ : _UNKNOWN_ } ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( [ ] ) ; _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( [ url ] ) ; } ) ; describe ( 's' , function ( ) { it ( 's' , function ( ) { response . headers [ 's' ] = 's' ; _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( [ 's' , 's' , 's' ] , url , depth - 0 ) ; } ) ; it ( 's' , function ( ) { response . headers [ 's' ] = 's' ; _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . not . toHaveBeenCalled ( ) ; } ) ; it ( 's' , function ( ) { response . headers [ 's' ] = 's' ; _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , 0 ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . not . toHaveBeenCalled ( ) ; } ) ; } ) ; describe ( 's' , function ( ) { var _UNKNOWN_ = 's' ; var resp ; beforeEach ( function ( ) { response . headers [ 's' ] = 's' ; response . body = jasmine . createSpyObj ( 's' , [ 's' ] ) ; response . body . toString . and . returnValue ( _UNKNOWN_ ) ; resp = new Response ( response ) ; } ) ; it ( 's' , function ( ) { resp . _UNKNOWN_ ( ) ; expect ( response . body . toString ) . toHaveBeenCalledWith ( 's' ) ; } ) ; it ( 's' , function ( ) { response . headers [ 's' ] = 's' ; resp . _UNKNOWN_ ( ) ; expect ( response . body . toString ) . toHaveBeenCalledWith ( 's' ) ; } ) ; it ( 's' , ( ) => { expect ( resp . _UNKNOWN_ ( ) ) . toBe ( true ) ; } ) it ( 's' , function ( ) { resp = new Response ( undefined ) ; expect ( resp . _UNKNOWN_ ( ) ) . toBe ( false ) ; } ) ; it ( 's' , function ( ) { response . body . toString . and . callFake ( function ( encoding ) { if ( encoding !== 's' ) { throw new Error ( 's' + encoding ) ; } return _UNKNOWN_ ; } ) ; response . headers [ 's' ] = 's' ; expect ( resp . _UNKNOWN_ ( response ) ) . toEqual ( _UNKNOWN_ ) ; } ) ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ . and . callFake ( function ( options , callback ) { _UNKNOWN_ . _UNKNOWN_ = [ { _UNKNOWN_ : 's' } , { _UNKNOWN_ : 's' } , { _UNKNOWN_ : 's' } ] ; callback ( null , response , body ) ; } ) ; _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; expect ( _ . chain ( _UNKNOWN_ . _UNKNOWN_ ) . keys ( ) . sort ( ) . value ( ) ) . toEqual ( [ 's' , 's' , 's' , 's' ] ) ; } ) ; it ( 's' , function ( ) { var _UNKNOWN_ = 's' ; response = { statusCode : OK , headers : { 's' : 's' } , request : { uri : { href : _UNKNOWN_ } } , body : body } ; _UNKNOWN_ . _UNKNOWN_ . and . callFake ( function ( options , callback ) { _UNKNOWN_ . _UNKNOWN_ = [ { _UNKNOWN_ : url } , { _UNKNOWN_ : _UNKNOWN_ } ] ; callback ( null , response , body ) ; } ) ; var onSuccess = jasmine . createSpy ( 's' ) ; _UNKNOWN_ . onSuccess = onSuccess ; _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; expect ( onSuccess ) . toHaveBeenCalledWith ( { url : _UNKNOWN_ , status : 0 , content : body , error : null , response : response , body : body , _UNKNOWN_ : _UNKNOWN_ } ) ; } ) ; describe ( 's' , function ( ) { describe ( 's' , function ( ) { beforeEach ( function ( ) { _UNKNOWN_ . _UNKNOWN_ = function ( _UNKNOWN_ ) { return _UNKNOWN_ != url ; } ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; expect ( _UNKNOWN_ . onSuccess ) . not . toHaveBeenCalled ( ) ; } ) ; } ) ; describe ( 's' , function ( ) { beforeEach ( function ( ) { _UNKNOWN_ . _UNKNOWN_ = function ( _UNKNOWN_ ) { return _UNKNOWN_ == url ; } ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; expect ( _UNKNOWN_ . onSuccess ) . toHaveBeenCalledWith ( { url : url , status : OK , content : body , error : null , response : response , body : body , _UNKNOWN_ : _UNKNOWN_ } ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { describe ( 's' , function ( ) { beforeEach ( function ( ) { _UNKNOWN_ . _UNKNOWN_ = function ( _UNKNOWN_ ) { return _UNKNOWN_ != url ; } ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . not . toHaveBeenCalled ( ) ; } ) ; } ) ; describe ( 's' , function ( ) { beforeEach ( function ( ) { _UNKNOWN_ . _UNKNOWN_ = function ( _UNKNOWN_ ) { return _UNKNOWN_ == url ; } ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( url , _UNKNOWN_ , depth ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( [ 's' , 's' , 's' ] , url , depth - 0 ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ = { 's' : true , 's' : true , 's' : true } ; _UNKNOWN_ . _UNKNOWN_ = [ 's' , 's' , 's' ] ; _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( { } ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( [ ] ) ; } ) ; } ) ; describe ( 's' , function ( ) { it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( [ 's' ] ) ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( [ 's' , 's' ] ) ; } ) ; describe ( 's' , function ( ) { beforeEach ( function ( ) { spyOn ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; _UNKNOWN_ . _UNKNOWN_ = [ 's' ] ; _UNKNOWN_ . _UNKNOWN_ = jasmine . createSpyObj ( 's' , [ 's' ] ) ; _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . _UNKNOWN_ . stop ) . toHaveBeenCalled ( ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { var url = 's' ; beforeEach ( function ( ) { _UNKNOWN_ . _UNKNOWN_ = jasmine . createSpyObj ( 's' , [ 's' ] ) ; spyOn ( _UNKNOWN_ , 's' ) ; spyOn ( _UNKNOWN_ , 's' ) ; } ) ; describe ( 's' , function ( ) { it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ . submit . and . callFake ( function ( func , context , args , _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ = { url : true } ; expect ( _UNKNOWN_ ( url ) ) . toBe ( true ) ; } ) ; _UNKNOWN_ . _UNKNOWN_ ( { url : url } ) ; } ) ; it ( 's' , function ( ) { spyOn ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ . _UNKNOWN_ . and . returnValue ( false ) ; _UNKNOWN_ . _UNKNOWN_ . submit . and . callFake ( function ( func , context , args , _UNKNOWN_ ) { expect ( _UNKNOWN_ ( url ) ) . toBe ( true ) ; } ) ; _UNKNOWN_ . _UNKNOWN_ ( { url : url } ) ; } ) ; } ) ; describe ( 's' , function ( ) { var options = 's' ; var callback = _ . noop ; var error = null ; var response = 's' ; var body = 's' ; it ( 's' , function ( ) { _UNKNOWN_ . request = function ( options , callback ) { expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( url ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toBe ( 0 ) ; var _UNKNOWN_ = { _UNKNOWN_ : { _UNKNOWN_ : [ ] } } ; callback . call ( _UNKNOWN_ , error , response , body ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( url ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toBe ( 0 ) ; } ; _UNKNOWN_ . _UNKNOWN_ . submit . and . callFake ( function ( func , context , args , _UNKNOWN_ ) { func ( options , callback ) ; } ) ; _UNKNOWN_ . _UNKNOWN_ ( { url : url } ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { var url = 's' ; var depth = 0 ; var onSuccess = function ( ) { } ; var _UNKNOWN_ = function ( ) { } ; var _UNKNOWN_ = function ( ) { } ; var _UNKNOWN_ ; beforeEach ( function ( ) { spyOn ( _UNKNOWN_ , 's' ) ; spyOn ( _UNKNOWN_ , 's' ) ; _UNKNOWN_ = jasmine . createSpyObj ( 's' , [ 's' ] ) ; _UNKNOWN_ . _UNKNOWN_ . and . returnValue ( _UNKNOWN_ ) ; _UNKNOWN_ . depth = depth ; _UNKNOWN_ . _UNKNOWN_ = null ; } ) ; describe ( 's' , function ( ) { beforeEach ( function ( ) { _UNKNOWN_ . _UNKNOWN_ ( url , onSuccess , _UNKNOWN_ , _UNKNOWN_ ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . onSuccess ) . toEqual ( onSuccess ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( _UNKNOWN_ ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( url , null , depth ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . _UNKNOWN_ ) . not . toBeNull ( ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . _UNKNOWN_ . start . calls . count ( ) ) . toEqual ( 0 ) ; } ) ; } ) ; describe ( 's' , function ( ) { beforeEach ( function ( ) { _UNKNOWN_ . _UNKNOWN_ ( { url : url , success : onSuccess , failure : _UNKNOWN_ , finished : _UNKNOWN_ } ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . onSuccess ) . toEqual ( onSuccess ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toEqual ( _UNKNOWN_ ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( url , null , depth ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . _UNKNOWN_ ) . not . toBeNull ( ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . _UNKNOWN_ . start . calls . count ( ) ) . toEqual ( 0 ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { var _UNKNOWN_ = 0 ; var maxConcurrentRequests = 0 ; var executor ; beforeEach ( function ( ) { _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ . maxConcurrentRequests = maxConcurrentRequests ; executor = _UNKNOWN_ . _UNKNOWN_ ( ) ; } ) ; it ( 's' , function ( ) { expect ( executor ) . not . toBeNull ( ) ; } ) ; it ( 's' , function ( ) { expect ( executor . _UNKNOWN_ ) . toEqual ( _UNKNOWN_ ) ; } ) ; describe ( 's' , function ( ) { it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ . maxConcurrentRequests - 0 ; expect ( executor . _UNKNOWN_ ( ) ) . toBe ( true ) ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ . maxConcurrentRequests + 0 ; expect ( executor . _UNKNOWN_ ( ) ) . toBe ( false ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { var options = { depth : 0 , _UNKNOWN_ : true , userAgent : 's' , maxConcurrentRequests : 0 , _UNKNOWN_ : 0 } ; var defaultOptions = { depth : 0 , _UNKNOWN_ : false , userAgent : 's' , maxConcurrentRequests : 0 , _UNKNOWN_ : 0 } ; function pick ( obj , properties ) { var projection = { } ; return properties . reduce ( function ( acc , property ) { acc [ property ] = obj [ property ] ; return acc ; } , { } ) ; } describe ( 's' , function ( ) { it ( 's' , function ( ) { _UNKNOWN_ . configure ( options ) ; expect ( pick ( _UNKNOWN_ , Object . keys ( options ) ) ) . toEqual ( options ) ; } ) ; } ) ; describe ( 's' , function ( ) { it ( 's' , function ( ) { expect ( pick ( _UNKNOWN_ , Object . keys ( options ) ) ) . toEqual ( defaultOptions ) ; } ) ; } ) ; it ( 's' , function ( ) { expect ( _UNKNOWN_ . onSuccess ) . not . toBeNull ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . not . toBeNull ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . not . toBeNull ( ) ; } ) ; it ( 's' , function ( ) { _UNKNOWN_ . configure ( { depth : - 0 } ) ; expect ( _UNKNOWN_ . depth ) . toEqual ( 0 ) ; } ) ; } ) ; } ) ; </s>	O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $any$ O O $complex$ O O $boolean$ O O O $boolean$ O O O O O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O O $any$ O O O O O O O O $string$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O O O O O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $string$ O $string$ O $complex$ O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O $complex$ O O O $any$ O O O O O O O O O O O $any$ O O O O O O O O $complex$ O O $boolean$ O O O $boolean$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O O O O O O O O O O O O $any$ O O O O O O O O $complex$ O O $boolean$ O O O $boolean$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O O $boolean$ O O $boolean$ O $any$ O O O $number$ O $number$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $number$ O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $string$ O $string$ O $complex$ O O O $any$ O O O O O O O O O O O O O O $any$ O O O O O O O O $string$ O O O O $string$ O O O O $string$ O O O $any$ O O O O O O O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string$ O $string$ O $complex$ O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string$ O $string$ O $complex$ O O O $any$ O O O O O O O O O $any$ O O O O O O O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string$ O $string$ O $complex$ O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O O $string$ O O O O $number$ O O O $any$ O O O O O O O $any$ O $any$ O O O O O $string[]$ O O O O O O O O O $any$ O $any$ O $string[]$ O $string$ O $number$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $string$ O $number$ O O O O O $string$ O $number$ O O O O O $string$ O $number$ O O O O O O O O O O $any$ O O O O O O O O $string$ O O O O $string$ O O O O $string$ O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $complex$ O O $string$ O $string$ O $null$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $complex$ O O O O $string$ O O O $string$ O O O $any$ O $any$ O $string$ O $string$ O O O O $any$ O $any$ O $any$ O O $any$ O $complex$ O $any$ O $any$ O $FunctionConstructor$ O O O O O O $any$ O O O O O O O O $number$ O O O O $string$ O O O O $number$ O O O O $string$ O O O O $complex$ O O $complex$ O O O O O O O $number$ O $number$ O $string$ O $string$ O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $string$ O $complex$ O $string$ O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O $string$ O $string$ O $number$ O $number$ O $string$ O $string$ O $string$ O $string$ O $complex$ O $complex$ O $string$ O $string$ O $string$ O $string$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $string$ O O O $any$ O $string$ O $complex$ O $string$ O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O O O O O O O $any$ O O O O O O O O $number$ O O O O $any$ O O O O $string$ O O O $any$ O O O O O $any$ O O $number$ O $number$ O $complex$ O O O O O O O $complex$ O O $complex$ O O $string$ O $string$ O O O $string$ O $string$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $string$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O O $string$ O $string$ O $number$ O $number$ O $string$ O $string$ O $null$ O O O $any$ O $any$ O $string$ O $string$ O $string$ O $string$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O O $string$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $string$ O $number$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $string$ O $string$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O O $string$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O $any$ O $undefined$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O $ErrorConstructor$ O O O $any$ O O O O $string$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $string$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $any$ O O O $any$ O $string$ O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O O $string$ O O O $any$ O O $number$ O $number$ O $complex$ O O O O O O O $complex$ O O $complex$ O O $string$ O $string$ O O O $string$ O $string$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $string$ O $string$ O O O $string$ O $string$ O O O $any$ O O O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $string$ O $number$ O O $any$ O $any$ O O $any$ O O $string$ O $string$ O $number$ O O O $string$ O $string$ O $null$ O O O $any$ O $any$ O $string$ O $string$ O $string$ O $string$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $string$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $string$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O O $string$ O $string$ O $number$ O $number$ O $string$ O $string$ O $null$ O O O $any$ O $any$ O $string$ O $string$ O $string$ O $string$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $string$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $string$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $string$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $string$ O $number$ O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O $any$ O O O O O O O O $string$ O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $boolean$ O O O O $any$ O $any$ O $string$ O O O $any$ O O O O O O O $any$ O $any$ O O $string$ O $string$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O O O $any$ O O O O O O O $any$ O $any$ O O $string$ O $string$ O O O O O O O O O $any$ O O O O O O O O $string$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $string$ O O O O $string$ O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $string$ O O $any$ O $any$ O $any$ O O $any$ O O O O O $complex$ O O $complex$ O O $undefined[]$ O O O O O O $any$ O $any$ O $complex$ O $any$ O $string$ O $string$ O O $any$ O $any$ O $any$ O O $any$ O $string$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $string$ O $any$ O O O O O $any$ O $any$ O O $string$ O $string$ O O O O O O O O O O O O $any$ O O O O O O O O $string$ O O O O $number$ O O O O $void$ O O O O O O O O $void$ O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $number$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $string$ O $void$ O $void$ O $void$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $void$ O O $any$ O $any$ O $any$ O O $any$ O $void$ O O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $string$ O O O $number$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O $string$ O $string$ O $void$ O $void$ O $void$ O $void$ O $void$ O $void$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $void$ O O $any$ O $any$ O $any$ O O $any$ O $void$ O O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $string$ O O O $number$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O O $number$ O O O O $number$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $number$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O O $complex$ O O $number$ O O O $boolean$ O O O $string$ O O O $number$ O O O $number$ O O O O O $complex$ O O $number$ O O O $boolean$ O O O $string$ O O O $number$ O O O $number$ O O O O O $any$ O $any$ O $any$ O O O ${}$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O $ObjectConstructor$ O $complex$ O $complex$ O O O O $any$ O $complex$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $ObjectConstructor$ O $complex$ O $complex$ O O O O $any$ O $complex$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $number$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O
<s> import _UNKNOWN_ from 's' ; export default new _UNKNOWN_ ( { format : 's' , _UNKNOWN_ : [ 's' , 's' , 's' , 's' ] , _UNKNOWN_ : [ 's' , 's' , 's' , 's' , 's' , 's' ] , _UNKNOWN_ : true , _UNKNOWN_ : 's' , _UNKNOWN_ : true , _UNKNOWN_ : false } ) ; </s>	O O $any$ O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O $boolean$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O
<s> const _UNKNOWN_ = 0 ; const _UNKNOWN_ = 0 * _UNKNOWN_ ; const _UNKNOWN_ = 0 * _UNKNOWN_ ; const _UNKNOWN_ = _UNKNOWN_ - ( 0 * _UNKNOWN_ ) ; const _UNKNOWN_ = 0 * _UNKNOWN_ ; const COLOR = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 0 ; var style = document . createElement ( 's' ) ; style . innerHTML = `template` ; document . head . appendChild ( style ) ; function _UNKNOWN_ ( ) { let canvas = document . createElement ( 's' ) ; canvas . width = _UNKNOWN_ ; canvas . height = _UNKNOWN_ ; let ctx = canvas . getContext ( 's' ) ; if ( ctx == null ) { throw new Error ( 's' ) ; } ctx . _UNKNOWN_ = COLOR ; ctx . fillStyle = COLOR ; ctx . lineWidth = _UNKNOWN_ ; ctx . _UNKNOWN_ = 's' ; _UNKNOWN_ ( ctx , 0 , 0 , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; ctx . fill ( ) ; return ctx ; } let ctx = _UNKNOWN_ ( ) ; export default function _UNKNOWN_ ( text ) { text = text . toString ( ) ; ctx . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; if ( text . length >= 0 ) { ctx . font = _UNKNOWN_ ; ctx . _UNKNOWN_ ( text , _UNKNOWN_ / 0 , _UNKNOWN_ , _UNKNOWN_ ) ; } else { ctx . font = _UNKNOWN_ ; ctx . _UNKNOWN_ ( text , _UNKNOWN_ / 0 , _UNKNOWN_ ) ; } return ctx . getImageData ( 0 , 0 , _UNKNOWN_ , _UNKNOWN_ ) } function _UNKNOWN_ ( ctx , x , y , width , height , radius ) { ctx . _UNKNOWN_ ( ) ; ctx . moveTo ( x + radius , y ) ; ctx . _UNKNOWN_ ( x + width - radius , y ) ; ctx . _UNKNOWN_ ( x + width , y , x + width , y + radius ) ; ctx . _UNKNOWN_ ( x + width , y + height - radius ) ; ctx . _UNKNOWN_ ( x + width , y + height , x + width - radius , y + height ) ; ctx . _UNKNOWN_ ( x + radius , y + height ) ; ctx . _UNKNOWN_ ( x , y + height , x , y + height - radius ) ; ctx . _UNKNOWN_ ( x , y + radius ) ; ctx . _UNKNOWN_ ( x , y , x + radius , y ) ; ctx . _UNKNOWN_ ( ) ; } </s>	O O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O $number$ O O O O $number$ O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O $HTMLStyleElement$ O $Document$ O O O O O O $HTMLStyleElement$ O $string$ O O O $Document$ O $HTMLHeadElement$ O $T$ O $HTMLStyleElement$ O O O O O O O O $HTMLCanvasElement$ O $Document$ O O O O O O $HTMLCanvasElement$ O $number$ O $number$ O $HTMLCanvasElement$ O $number$ O $number$ O O O O $HTMLCanvasElement$ O O O O O O O O O O O O O O O $ErrorConstructor$ O O O O O O O $complex$ O O O O O $complex$ O O O O O $number$ O $number$ O O O $any$ O O O O O O O O O O O $number$ O $number$ O $number$ O O O O O O O O O O O O O O O O O O O O O O $ImageData$ O $string$ O O $string$ O $string$ O $string$ O O O O O $void$ O $number$ O $number$ O $number$ O $number$ O O O O $string$ O $number$ O O O O O O $string$ O O O O O $void$ O $string$ O $number$ O O O O O $number$ O O O O O O O $string$ O O O O O $void$ O $string$ O $number$ O O O O O O O O O O $ImageData$ O O O O O $number$ O $number$ O O O O O $any$ O $number$ O $number$ O $number$ O $number$ O $number$ O O O O $void$ O O O O O $void$ O $number$ O $number$ O $number$ O O O O $void$ O $number$ O $number$ O $number$ O $number$ O O O O $void$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O O O O $void$ O $number$ O $number$ O $number$ O $number$ O $number$ O O O O $void$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O O O O $void$ O $number$ O $number$ O $number$ O $number$ O O O O $void$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O $number$ O O O O $void$ O $number$ O $number$ O $number$ O O O O $void$ O $number$ O $number$ O $number$ O $number$ O $number$ O O O O $void$ O O O O O
<s> export function _UNKNOWN_ ( string ) { if ( ! string ) { return { } ; } string = string . replace ( "s" , 's' ) . replace ( "s" , 's' ) ; if ( ! string ) { return { } ; } var items = { } ; var _UNKNOWN_ = string . split ( 's' ) ; var length = _UNKNOWN_ . length ; var v : string [ ] ; var name ; var value ; for ( var i = 0 ; i < length ; i ++ ) { v = _UNKNOWN_ [ i ] . split ( 's' ) ; name = decodeURIComponent ( v . shift ( ) as string ) ; value = v . length ? decodeURIComponent ( v . join ( 's' ) ) : null ; if ( items [ name ] ) { if ( typeof items [ name ] === "s" ) { items [ name ] = [ items [ name ] ] ; } items [ name ] . push ( value ) ; } else { items [ name ] = value ; } } return items ; } export function _UNKNOWN_ ( obj : { [ k ] : string | number | null } ) { return 's' + Object . keys ( obj ) . map ( k => k + 's' + encodeURIComponent ( String ( obj [ k ] ) ) ) . join ( 's' ) ; } </s>	O O O $any$ O $string$ O O O O O $string$ O O O O O O O $string$ O $string$ O $complex$ O O O O O O $complex$ O O O O O O O O O $string$ O O O O O O O O $any$ O O O O O $string[]$ O $string$ O $complex$ O O O O O $number$ O $string[]$ O $number$ O O $string[]$ O O O O O O $any$ O O $any$ O O O O $number$ O O O $number$ O $number$ O $number$ O O O $string[]$ O $string[]$ O $number$ O O $complex$ O O O O $any$ O $string$ O $string[]$ O $string$ O O O O O O $any$ O $string[]$ O $number$ O $string$ O $string[]$ O $string$ O O O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O $string$ O $complex$ O O O $string$ O O O O O O O O O O O O O $ObjectConstructor$ O $complex$ O $complex$ O O $U[]$ O $string$ O $string$ O O O $string$ O $StringConstructor$ O $complex$ O $string$ O O O O O $string$ O O O O O O
<s> export function _UNKNOWN_ ( title , url ) { if ( title === 's' ) { title = 's' ; } title = title . replace ( "s" , char => 's' + char ) . replace ( "s" , 's' ) ; url = url . replace ( "s" , 's' ) ; return 's' + title + 's' + url + 's' ; } </s>	O O O $string$ O $string$ O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O $string$ O $complex$ O O O $string$ O O O $string$ O O $complex$ O O O O O O $string$ O $string$ O $complex$ O O O O O O O O O $string$ O O O $string$ O O O O O
<s> const _UNKNOWN_ = ( navigator . _UNKNOWN_ . indexOf ( 's' ) !== - 0 ) ; export function _UNKNOWN_ ( ) < browser . tabs . Tab [ ] > { if ( _UNKNOWN_ ) { return browser . tabs . query ( { _UNKNOWN_ : true , active : true } ) ; } else { return browser . tabs . query ( { _UNKNOWN_ : true , _UNKNOWN_ : true } ) ; } } export function _UNKNOWN_ ( ) < browser . tabs . Tab > { return browser . tabs . query ( { _UNKNOWN_ : true , active : true } ) . then ( results => results [ 0 ] ) ; } export function open ( _UNKNOWN_ : browser . tabs . Tab , url ) { return browser . tabs . create ( { url , _UNKNOWN_ : _UNKNOWN_ . id } ) ; } export function count ( ) < number > { return browser . tabs . query ( { _UNKNOWN_ : browser . tabs . _UNKNOWN_ . normal } ) . then ( tabs => tabs . length ) ; } export function _UNKNOWN_ ( direction ) { if ( direction === 0 ) { throw new TypeError ( "s" ) ; } browser . windows . _UNKNOWN_ ( { populate : true } ) . then ( _UNKNOWN_ => { if ( _UNKNOWN_ . tabs == null ) { throw new Error ( 's' ) ; } let _UNKNOWN_ < browser . tabs . Tab > = _UNKNOWN_ . tabs . filter ( t => t . _UNKNOWN_ || t . active ) ; if ( direction > 0 ) { _UNKNOWN_ [ Symbol . iterator ] = _UNKNOWN_ ; } for ( let tab of _UNKNOWN_ ) { let index = tab . index ; do { index = ( _UNKNOWN_ . tabs . length + index + direction ) % _UNKNOWN_ . tabs . length ; } while ( tab . pinned !== _UNKNOWN_ . tabs [ index ] . pinned ) ; if ( tab . id != null ) { browser . tabs . move ( tab . id , { index } ) ; } } } ) ; } function _UNKNOWN_ < X > ( this : X [ ] ) < X > { let i = this . length ; return { [ Symbol . iterator ] ( ) { return this ; } , next : ( ) => { -- i ; return { done : ( i < 0 ) , value : this [ i ] , } ; } } ; } export function _UNKNOWN_ ( tabs : browser . tabs . Tab [ ] , _UNKNOWN_ ) { let _UNKNOWN_ = tabs . map ( tab => tab . id ) . filter ( isDefined ) ; let activeTab = tabs . find ( tab => tab . active ) ; setTimeout ( ( ) => { browser . windows . create ( { _UNKNOWN_ : _UNKNOWN_ . shift ( ) , focused : true , _UNKNOWN_ } ) . then ( _UNKNOWN_ => { if ( _UNKNOWN_ . length > 0 && activeTab && activeTab . id != null ) { let _UNKNOWN_ = activeTab . id ; browser . tabs . move ( _UNKNOWN_ , { _UNKNOWN_ : _UNKNOWN_ . id , index : - 0 } ) . then ( ( ) => { browser . tabs . update ( _UNKNOWN_ , { active : true } ) ; } ) ; } } ) ; } , 0 ) ; } export function _UNKNOWN_ ( tabs : browser . tabs . Tab [ ] , _UNKNOWN_ ) { let activeTab = tabs . find ( tab => tab . active ) ; browser . windows . update ( _UNKNOWN_ , { focused : true } ) ; let _UNKNOWN_ = tabs . map ( tab => tab . id ) . filter ( isDefined ) ; browser . tabs . move ( _UNKNOWN_ , { _UNKNOWN_ : _UNKNOWN_ , index : - 0 } ) . then ( ( ) => { if ( activeTab == null || activeTab . id == null ) { return ; } browser . tabs . update ( activeTab . id , { active : true } ) ; } ) ; } export function _UNKNOWN_ ( ) { Promise . all ( [ browser . tabs . getCurrent ( ) , browser . windows . getAll ( { populate : true } ) ] ) . then ( ( [ _UNKNOWN_ , windows ] ) => { let _UNKNOWN_ : browser . windows . Window | undefined ; for ( var _UNKNOWN_ of windows ) { if ( _UNKNOWN_ . id === _UNKNOWN_ . _UNKNOWN_ ) { _UNKNOWN_ = _UNKNOWN_ ; } else if ( _UNKNOWN_ . id != null ) { browser . windows . remove ( _UNKNOWN_ . id ) ; } } if ( _UNKNOWN_ != null && _UNKNOWN_ . tabs != null ) { let _UNKNOWN_ = _UNKNOWN_ . tabs . map ( t => t . id ) . filter ( isDefined ) . filter ( id => id !== _UNKNOWN_ . id ) ; browser . tabs . remove ( _UNKNOWN_ ) ; } } ) ; } function isDefined < X > ( x : ( X | null | undefined ) ) : x is X { return x != null ; } </s>	O O $boolean$ O O $Navigator$ O $string$ O $number$ O O O O O O O O O O $Promise$ O O O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O $any$ O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O O O O O O O $Promise$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O $string$ O $any$ O $any$ O $any$ O O O O O O $Promise$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $number$ O O O O $number$ O O O O O O $TypeErrorConstructor$ O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $ErrorConstructor$ O O O O O O $Array$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $number$ O O O O $any[]$ O $SymbolConstructor$ O $symbol$ O O $any$ O O O O O $any$ O $any[]$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $number$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O $IterableIterator$ O $any$ O O $any$ O $any$ O O O O $any$ O O O $number$ O O O $number$ O O O O $SymbolConstructor$ O $symbol$ O O O O O O O O O $complex$ O O O O O O $number$ O O O $boolean$ O O $number$ O O O O $any$ O O O $number$ O O O O O O O O O O $void$ O $any[]$ O $any$ O $any$ O $any$ O O O $boolean$ O O O $any[]$ O $any[]$ O $U[]$ O $any$ O $any$ O $any$ O O $complex$ O $complex$ O O O $any$ O $any[]$ O $complex$ O $any$ O $any$ O $any$ O O $number$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any[]$ O $any$ O O O $boolean$ O O O $boolean$ O O O $any$ O $any$ O O O O $any[]$ O $number$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O $number$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O O O O O O O O O O O O O O O O O $void$ O $any[]$ O $any$ O $any$ O $any$ O O O $number$ O O O $any$ O $any[]$ O $complex$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $number$ O O $boolean$ O O O O O O $any[]$ O $any[]$ O $U[]$ O $any$ O $any$ O $any$ O O $complex$ O $complex$ O O $any$ O $any$ O $any$ O $any[]$ O O $number$ O $number$ O $number$ O O O O O O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O O O O O O O O $void$ O O O $PromiseConstructor$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $boolean$ O O O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $complex$ O $any$ O O $any$ O O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O O
<s> export function getString ( name , _UNKNOWN_ ? : string | number ) { if ( typeof _UNKNOWN_ === 's' ) { name += ( _UNKNOWN_ === 0 ? 's' : 's' ) ; } return browser . 0 . _UNKNOWN_ ( name , [ _UNKNOWN_ ] ) ; } </s>	O O O $string$ O $string$ O $complex$ O O O O O O O O O O $complex$ O O O O $string$ O O $number$ O O O O O O O O O O $any$ O $any$ O $any$ O $string$ O O $complex$ O O O O O
<s> const listeners = new Map < string , ( ) => void > ( ) ; export function _UNKNOWN_ ( command , listener : ( ) => void ) { if ( listeners . size === 0 ) { browser . commands . _UNKNOWN_ . addListener ( _UNKNOWN_ ) ; } listeners . set ( command , listener ) ; } function _UNKNOWN_ ( command ) { let listener = listeners . get ( command ) ; if ( listener != null ) { listener ( ) ; } } </s>	O O $void>$ O O $MapConstructor$ O O O O O O O O O O O O O $void$ O $string$ O $void$ O O O O O O O O O $void>$ O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O O $void>$ O $void>$ O $string$ O $void$ O O O O $void$ O $string$ O O O $void$ O $void>$ O $void$ O $string$ O O O O $void$ O O O O $void$ O O O O O O
<s> import { getString } from "s" ; interface _UNKNOWN_ { id : string ; icons ? : { [ key ] : string ; } ; title ? : string ; checked ? : boolean ; contexts ? : browser . _UNKNOWN_ . _UNKNOWN_ [ ] ; onclick ? : ( info : browser . _UNKNOWN_ . _UNKNOWN_ , tab : browser . tabs . Tab ) => void ; parentId ? : number | string ; _UNKNOWN_ ? : string [ ] ; _UNKNOWN_ ? : string [ ] ; enabled ? : boolean ; command ? : string ; } export default class _UNKNOWN_ { props : _UNKNOWN_ ; constructor ( props ) { this . props = Object . assign ( { title : getString ( 's' + props . id ) , } , props ) ; } setVisible ( visible ) { if ( visible ) { this . show ( ) ; } else { this . hide ( ) ; } } show ( ) { browser . _UNKNOWN_ . create ( this . props ) ; } hide ( ) { browser . _UNKNOWN_ . remove ( this . props . id ) ; } } </s>	O O O $string$ O O O O O $any$ O $string$ O O O $complex$ O O O O $number$ O O O O O O $string$ O O O O $boolean$ O O O O $any[]$ O O $any$ O $any$ O $any$ O O O $void$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $complex$ O O O O O O $string[]$ O O O O O O $string[]$ O O O O O O $boolean$ O O O O $string$ O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $ObjectConstructor$ O O O O $string$ O $string$ O O O $any$ O $string$ O O O O $any$ O O O $void$ O $boolean$ O O O O $boolean$ O O O O $void$ O O O O O O O O $void$ O O O O O $void$ O O O $any$ O $any$ O $any$ O O O $any$ O O O $void$ O O O $any$ O $any$ O $any$ O O O $any$ O $string$ O O O O O
<s> import * as Clipboard from 's' ; import _UNKNOWN_ from 's' ; import _UNKNOWN_ from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; import { getString } from 's' ; import { _UNKNOWN_ } from 's' ; import _UNKNOWN_ from 's' ; var _UNKNOWN_ : _UNKNOWN_ | undefined ; browser . _UNKNOWN_ . _UNKNOWN_ . addListener ( _UNKNOWN_ ) ; const _UNKNOWN_ = 's' ; browser . _UNKNOWN_ . create ( { id : _UNKNOWN_ , contexts : [ browser . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ] , title : getString ( 's' + _UNKNOWN_ ) , onclick ( info , _UNKNOWN_ ) { _UNKNOWN_ ( _UNKNOWN_ ) ; } , } ) ; _UNKNOWN_ ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( ) . then ( _UNKNOWN_ ) ; } ) ; const _UNKNOWN_ = new _UNKNOWN_ ( { id : 's' , contexts : [ browser . _UNKNOWN_ . _UNKNOWN_ . link ] , onclick ( info , tab ) { if ( info . _UNKNOWN_ ) { _UNKNOWN_ ( info . _UNKNOWN_ , info . linkUrl , 's' ) ; return ; } if ( tab . id == null ) { return ; } let _UNKNOWN_ = 's' ; browser . tabs . executeScript ( tab . id , { code : _UNKNOWN_ , _UNKNOWN_ : true } ) . then ( results => { var title ; if ( results ) { title = results . filter ( Boolean ) [ 0 ] ; if ( title ) { title = title . trim ( ) . replace ( "s" , 's' ) . replace ( "s" , 's' ) ; } } _UNKNOWN_ ( title , info . linkUrl , 's' ) ; } ) ; } , } ) ; _UNKNOWN_ . get ( 's' ) . then ( _UNKNOWN_ . setVisible ) ; onMessage ( 's' , _UNKNOWN_ . show ) ; onMessage ( 's' , _UNKNOWN_ . hide ) ; var _UNKNOWN_ = new _UNKNOWN_ ( { id : 's' , contexts : [ browser . _UNKNOWN_ . _UNKNOWN_ . page ] , onclick ( info , tab ) { _UNKNOWN_ ( tab . title , tab . url , 's' ) ; } , } ) ; _UNKNOWN_ . get ( 's' ) . then ( _UNKNOWN_ . setVisible ) ; onMessage ( 's' , _UNKNOWN_ . show ) ; onMessage ( 's' , _UNKNOWN_ . hide ) ; _UNKNOWN_ ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( ) . then ( tab => _UNKNOWN_ ( tab . title , tab . url , 's' ) ) ; } ) ; _UNKNOWN_ ( 's' , ( ) => _UNKNOWN_ . _UNKNOWN_ ( - 0 ) ) ; _UNKNOWN_ ( 's' , ( ) => _UNKNOWN_ . _UNKNOWN_ ( 0 ) ) ; _UNKNOWN_ ( 's' , ( ) => _UNKNOWN_ . _UNKNOWN_ ( ) ) ; _UNKNOWN_ ( 's' , ( ) => _UNKNOWN_ . _UNKNOWN_ ( ) ) ; _UNKNOWN_ ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( ) . then ( tabs => { for ( var tab of tabs ) { if ( tab . id != null ) { browser . tabs . update ( tab . id , { pinned : ! tab . pinned } ) ; } } } ) ; } ) ; _UNKNOWN_ ( 's' , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( ) . then ( tabs => { for ( var tab of tabs ) { if ( tab . id != null ) { browser . tabs . _UNKNOWN_ ( tab . id ) ; } } } ) ; } ) ; onMessage ( 's' , ( message , sender , sendResponse ) => { if ( _UNKNOWN_ ) { sendResponse ( _UNKNOWN_ ) ; } else { sendResponse ( { error : getString ( 's' ) } ) ; } } ) ; _UNKNOWN_ ( 's' , function ( ) { Promise . all ( [ _UNKNOWN_ . _UNKNOWN_ ( ) , browser . windows . getAll ( ) ] ) . then ( ( [ tabs , windows ] ) => { let _UNKNOWN_ = windows . find ( w => w . focused ) ; windows = windows . filter ( w => w . type === 's' && ! w . focused && _UNKNOWN_ && _UNKNOWN_ . _UNKNOWN_ === w . _UNKNOWN_ ) ; if ( windows . length === 0 ) { _UNKNOWN_ . _UNKNOWN_ ( tabs , _UNKNOWN_ . _UNKNOWN_ ) ; } else { new Popup ( { url : 's' , params : _UNKNOWN_ ( { _UNKNOWN_ : tabs . length , _UNKNOWN_ : windows . map ( w => w . id ) . join ( 's' ) } ) , parent : _UNKNOWN_ , width : 0 , height : 0 } ) . show ( ) . then ( msg => { if ( msg . _UNKNOWN_ !== undefined ) { _UNKNOWN_ . _UNKNOWN_ ( tabs , msg . _UNKNOWN_ ) ; } else if ( msg . _UNKNOWN_ !== undefined ) { _UNKNOWN_ . _UNKNOWN_ ( tabs , _UNKNOWN_ . _UNKNOWN_ ) ; } } ) ; } } ) ; } ) ; function _UNKNOWN_ ( _UNKNOWN_ : string | undefined , url : string | undefined , type : 's' | 's' ) { var title = prompt ( getString ( 's' , _UNKNOWN_ ) , _UNKNOWN_ ) ; if ( title === null ) { return ; } title = title . trim ( ) ; if ( title === 's' ) { title = new URL ( url ) . hostname . replace ( "s" , 's' ) ; } Clipboard . write ( _UNKNOWN_ ( title , url ) ) ; } function _UNKNOWN_ ( _UNKNOWN_ : browser . tabs . Tab ) { browser . windows . getAll ( { populate : true } ) . then ( windows => _UNKNOWN_ ( _UNKNOWN_ , windows ) ) . then ( doc => _UNKNOWN_ ( _UNKNOWN_ , doc ) ) ; } function _UNKNOWN_ ( _UNKNOWN_ : browser . tabs . Tab ) { if ( _UNKNOWN_ . _UNKNOWN_ == null ) { return ; } browser . windows . get ( _UNKNOWN_ . _UNKNOWN_ , { populate : true } ) . then ( _UNKNOWN_ => _UNKNOWN_ ( _UNKNOWN_ , [ _UNKNOWN_ ] ) ) . then ( doc => _UNKNOWN_ ( _UNKNOWN_ , doc ) ) ; } function _UNKNOWN_ ( _UNKNOWN_ : browser . tabs . Tab , doc ) { _UNKNOWN_ = doc ; _UNKNOWN_ . open ( _UNKNOWN_ , browser . runtime . _UNKNOWN_ ( 's' ) ) ; } function _UNKNOWN_ ( _UNKNOWN_ : browser . tabs . Tab , windows : browser . windows . Window [ ] ) { return _UNKNOWN_ . get ( 's' , 's' , 's' , 's' ) . then ( _UNKNOWN_ => { var index = windows . findIndex ( _UNKNOWN_ => _UNKNOWN_ . id === _UNKNOWN_ . _UNKNOWN_ ) ; if ( index > 0 ) { windows . unshift ( windows . splice ( index , 0 ) [ 0 ] ) ; } var _UNKNOWN_ = windows [ 0 ] . tabs . filter ( t => t . _UNKNOWN_ ) ; if ( _UNKNOWN_ . length > 0 ) { windows = [ { tabs : _UNKNOWN_ } ] ; } var _UNKNOWN_ = 0 ; for ( var _UNKNOWN_ of windows ) { _UNKNOWN_ . tabs = _UNKNOWN_ . tabs . filter ( tab => { if ( tab . url . startsWith ( 's' ) ) { tab . url = tab . url . replace ( "s" , 's' ) ; } var url = new URL ( tab . url ) ; return ! _UNKNOWN_ . _UNKNOWN_ . includes ( url . protocol ) && ! _UNKNOWN_ . _UNKNOWN_ . includes ( url . hostname ) && ! ( _UNKNOWN_ . _UNKNOWN_ && tab . pinned ) ; } ) ; _UNKNOWN_ += _UNKNOWN_ . tabs . reduce ( ( n , tab ) => n + ( tab . status === 's' ? 0 : 0 ) , 0 ) ; } windows = windows . filter ( _UNKNOWN_ => _UNKNOWN_ . tabs . length > 0 ) ; var doc ; if ( _UNKNOWN_ . format === 's' ) { doc = _UNKNOWN_ ( windows , _UNKNOWN_ . id ) ; } else { doc = _UNKNOWN_ ( windows , _UNKNOWN_ . id ) ; } if ( _UNKNOWN_ . length > 0 ) { doc . message = getString ( 's' ) ; } else if ( windows . length === 0 ) { doc . message = getString ( 's' ) ; } else if ( _UNKNOWN_ > 0 ) { doc . message = getString ( 's' , _UNKNOWN_ ) ; } return doc ; } ) ; } function _UNKNOWN_ ( windows : browser . windows . Window [ ] , _UNKNOWN_ ) { let _UNKNOWN_ = windows . map ( w => ( w . tabs || [ ] ) . map ( t => ( { title : t . title , url : t . url } ) ) ) ; return { format : 's' , text : JSON . stringify ( windows , undefined , 0 ) } ; } function _UNKNOWN_ ( windows : browser . windows . Window [ ] , _UNKNOWN_ ) { var lines = [ ] ; var _UNKNOWN_ = 0 ; for ( var _UNKNOWN_ of windows ) { var name = ( _UNKNOWN_ . _UNKNOWN_ ? 's' : 's' ) ; lines . push ( 's' + getString ( name , _UNKNOWN_ . tabs . length ) ) ; lines . push ( 's' ) ; for ( var tab of _UNKNOWN_ . tabs ) { lines . push ( 's' + _UNKNOWN_ ( tab . title , tab . url ) ) ; if ( tab . id === _UNKNOWN_ ) { _UNKNOWN_ = lines . length ; } } lines . push ( 's' ) ; lines . push ( 's' ) ; } lines . pop ( ) ; return { format : 's' , text : lines . join ( 's' ) , _UNKNOWN_ } ; } interface _UNKNOWN_ { format : 's' | 's' ; text : string ; _UNKNOWN_ ? : number ; message ? : string ; } function _UNKNOWN_ ( ) { _UNKNOWN_ . count ( ) . then ( count => { browser . _UNKNOWN_ . setIcon ( { imageData : _UNKNOWN_ ( count . toString ( ) ) } ) ; } ) ; } var _UNKNOWN_ = throttle ( _UNKNOWN_ , 0 ) ; _UNKNOWN_ ( ) ; browser . tabs . _UNKNOWN_ . addListener ( _UNKNOWN_ ) ; browser . tabs . _UNKNOWN_ . addListener ( _UNKNOWN_ ) ; </s>	O O O O $any$ O O O O $any$ O O O O $ImageData$ O O O O O $string$ O O O O O O $string$ O O O O O O O $any$ O O O O O $string$ O O O O O O $void$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $void$ O O O O O O O $any$ O $any$ O $any$ O O $string$ O O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $string$ O $string$ O O O O O O $void$ O $any$ O $any$ O O $void$ O $any$ O O O O O O O $void$ O O O O O O O $any$ O $Promise<any>$ O O O O O $void$ O O O O O O $any$ O O $any$ O O $string$ O O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O $void$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $string$ O $string$ O $boolean$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $BooleanConstructor$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $void$ O O $any$ O O O $any$ O $void$ O O $any$ O O O $any$ O $void$ O O O $any$ O O $any$ O O $string$ O O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $void$ O $any$ O $any$ O O $void$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $void$ O O $any$ O O O $any$ O $void$ O O $any$ O O O $any$ O $void$ O O $void$ O O O O O O O $any$ O $Promise<any>$ O O O O O $any$ O $void$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O O $any$ O $void$ O O O O O O $void$ O O O O O O $any$ O $void$ O O O O O $void$ O O O O O O $any$ O $any$ O O O O $void$ O O O O O O $any$ O $any$ O O O O $void$ O O O O O O O $any$ O $Promise<any[]>$ O O O O O $any[]$ O O O O O $any$ O $any[]$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O O O $any$ O $Promise<any[]>$ O O O O O $any[]$ O O O O O $any$ O $any[]$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O $string$ O $string$ O O O O O O O O O O $void$ O O O O O O O $PromiseConstructor$ O O O O $any$ O $Promise<any[]>$ O O O $any$ O $any$ O $any$ O O O O O O O O O $any[]$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $void$ O $any[]$ O $any$ O $any$ O O O O O O $any$ O O $string$ O O O $string$ O $string$ O O $number$ O $any[]$ O $number$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $number$ O O O $number$ O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $undefined$ O O $any$ O $void$ O $any[]$ O $any$ O $any$ O O O O O O $any$ O $any$ O $undefined$ O O $any$ O $void$ O $any[]$ O $any$ O $any$ O O O O O O O O O O O O O O $void$ O $string$ O O O O O $string$ O O O O O O O O O O O O O $string$ O $string$ O $string$ O O O $string$ O O $string$ O O O O $string$ O O O O O O O $string$ O $string$ O $string$ O O O O O $string$ O O O O $string$ O O $complex$ O $string$ O O $string$ O $complex$ O O O O O O O $any$ O $any$ O $string$ O $string$ O $string$ O O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $boolean$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any[]$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O O $number$ O $any[]$ O $number$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $number$ O O O O $any[]$ O $number$ O $any[]$ O $complex$ O $number$ O O O O O O O O O O $any$ O $any[]$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any[]$ O O O $any$ O $any$ O O O O O $number$ O O O O O O $any$ O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $URL$ O O $complex$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $URL$ O $string$ O O O $any$ O $any$ O $any$ O $URL$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $number$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O O O O O O O O $any[]$ O $any[]$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any[]$ O $any$ O $any$ O O O O O $any$ O $any$ O $any[]$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O O O O O O O $any[]$ O $number$ O O O O $any$ O $any$ O $string$ O O O O O O O O $number$ O O O O $any$ O $any$ O $string$ O O O $number$ O O O O $any$ O O O O O O $any$ O $any[]$ O $any$ O $any$ O $any$ O O O $number$ O O O $any[]$ O $any[]$ O $U[]$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $string$ O $JSON$ O $complex$ O $any[]$ O $undefined$ O O O O O O O $any$ O $any[]$ O $any$ O $any$ O $any$ O O O $number$ O O O $any[]$ O O O O O $number$ O O O O O O $any$ O $any[]$ O O O $string$ O O $any$ O $any$ O O O O O O $any[]$ O $number$ O O O $string$ O $string$ O $any$ O $any$ O $any$ O O O $any[]$ O $number$ O O O O O O O $any$ O $any$ O $any$ O O $any[]$ O $number$ O O O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $number$ O O $number$ O $any[]$ O $number$ O O O $any[]$ O $number$ O O O O $any[]$ O $number$ O O O O O $any[]$ O $any$ O O O O O O O O O $string$ O $any[]$ O $string$ O O O O $number$ O O O O $any$ O O O O O O O $string$ O O O $number$ O O O O $string$ O O O O O O $void$ O O O $any$ O $Promise<number>$ O O O O O $number$ O O $any$ O $any$ O $any$ O O $ImageData$ O $ImageData$ O $number$ O $string$ O O O O O O O O O O O $any$ O $any$ O $void$ O O O O $void$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O
<s> var parser : DOMParser | undefined ; export function _UNKNOWN_ ( str ) { if ( parser == null ) { parser = new DOMParser ( ) ; } return parser . parseFromString ( str , 's' ) ; } export function getTags ( tagName , element ) { var list = [ ] ; var x = element . getElementsByTagName ( tagName ) ; for ( var i = 0 ; i < x . length ; i ++ ) { list [ i ] = x [ i ] ; } return list ; } export function _UNKNOWN_ ( element ) { return element . tagName === 's' || element . tagName === 's' || element . tagName === 's' || element . _UNKNOWN_ ; } export function _UNKNOWN_ ( node ) { while ( node . lastChild ) { node . removeChild ( node . lastChild ) ; } } export function findNode ( nodeName , node : Node | null ) { nodeName = nodeName . toUpperCase ( ) ; while ( node !== null ) { if ( node . nodeName === nodeName ) { return node ; } node = node . parentNode ; } } export function _UNKNOWN_ ( node ) { var selection = window . getSelection ( ) ; selection . _UNKNOWN_ ( ) ; var range = document . _UNKNOWN_ ( ) ; range . _UNKNOWN_ ( node ) ; selection . _UNKNOWN_ ( range ) ; } </s>	O O $DOMParser$ O $complex$ O O O O O $Document$ O $string$ O O O O $DOMParser$ O O O O $DOMParser$ O O $complex$ O O O O O $DOMParser$ O $Document$ O $string$ O O O O O O O $any[]$ O $string$ O $Element$ O O O $any[]$ O O O O O $HTMLCollectionOf<Element>$ O $Element$ O O O $string$ O O O O O $number$ O O O $number$ O $HTMLCollectionOf<Element>$ O $number$ O $number$ O O O $any[]$ O $number$ O O $HTMLCollectionOf<Element>$ O $number$ O O O O $any[]$ O O O O $boolean$ O $HTMLElement$ O O O $HTMLElement$ O $string$ O O O $HTMLElement$ O $string$ O O O $HTMLElement$ O $string$ O O O $HTMLElement$ O $boolean$ O O O O $void$ O $Node$ O O O O $Node$ O $ChildNode$ O O $Node$ O $T$ O $Node$ O $ChildNode$ O O O O O O $Node$ O $string$ O $Node$ O O O O O O $string$ O $string$ O $string$ O O O O O $Node$ O O O O O O $Node$ O $string$ O $string$ O O O $Node$ O O $Node$ O $Node$ O $complex$ O O O O O $void$ O $Node$ O O O $Selection$ O $complex$ O $Selection)$ O O O $Selection$ O $void$ O O O O $Range$ O $Document$ O $Range$ O O O $Range$ O $void$ O $Node$ O O $Selection$ O $void$ O $Range$ O O O O
<s> import _UNKNOWN_ from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; var returned = false ; var query = _UNKNOWN_ ( location . search ) ; var _UNKNOWN_ = query . _UNKNOWN_ . split ( 's' ) . map ( Number ) ; var _UNKNOWN_ = Number ( query . _UNKNOWN_ ) ; document . title = getString ( 's' , _UNKNOWN_ ) ; var _UNKNOWN_ = [ { name : getString ( 's' ) , returnValue : - 0 } ] ; var buttons ; var focusIndex ; Promise . all ( _UNKNOWN_ . map ( id => getWindow ( id , { populate : true } ) ) ) . then ( windows => { for ( var _UNKNOWN_ of windows ) { _UNKNOWN_ . push ( { name : getString ( 's' , _UNKNOWN_ . tabs . length ) , tabs : _UNKNOWN_ . tabs , returnValue : _UNKNOWN_ . id } ) ; } buttons = _UNKNOWN_ ( document . body ) ; buttons [ 0 ] . focus ( ) ; } ) ; _UNKNOWN_ ( 's' , [ 's' ] ) . addListener ( _UNKNOWN_ . bind ( null , - 0 ) ) ; _UNKNOWN_ ( 's' ) . addListener ( _UNKNOWN_ . bind ( null , - 0 ) ) ; _UNKNOWN_ ( 's' ) . addListener ( _UNKNOWN_ . bind ( null , 0 ) ) ; _UNKNOWN_ ( 's' ) . addListener ( _UNKNOWN_ . bind ( null , 0 ) ) ; _UNKNOWN_ ( 's' ) . addListener ( ev => _UNKNOWN_ ( ) ) ; window . addEventListener ( 's' , ev => _UNKNOWN_ ( ) ) ; window . addEventListener ( 's' , ev => _UNKNOWN_ ( ) ) ; function _UNKNOWN_ ( val ) { if ( ! returned ) { sendMessage ( 's' , val ) ; returned = true ; window . close ( ) ; } } function _UNKNOWN_ ( ev ) { var _UNKNOWN_ = _UNKNOWN_ [ focusIndex ] . returnValue ; if ( _UNKNOWN_ === - 0 ) { _UNKNOWN_ ( { _UNKNOWN_ : true } ) ; } else { _UNKNOWN_ ( { _UNKNOWN_ } ) ; } } function _UNKNOWN_ ( ev ) { for ( var i = 0 ; i < buttons . length ; ++ i ) { if ( buttons [ i ] === ev . target ) { focusIndex = i ; } } } function _UNKNOWN_ ( delta ) { var index = ( buttons . length + focusIndex + delta ) % buttons . length ; buttons [ index ] . focus ( ) ; buttons [ index ] . scrollIntoView ( delta < 0 ) ; } function _UNKNOWN_ ( root ) { _UNKNOWN_ ( root ) ; var main = document . createElement ( 's' ) ; var buttons = _UNKNOWN_ . map ( ( item , i ) => { var button = document . createElement ( 's' ) ; main . appendChild ( button ) ; var text = document . createTextNode ( item . name ) ; button . appendChild ( text ) ; button . addEventListener ( 's' , _UNKNOWN_ ) ; button . addEventListener ( 's' , _UNKNOWN_ ) ; if ( item . tabs ) { var tabs = document . createElement ( 's' ) ; button . appendChild ( tabs ) ; for ( var tab of item . tabs ) { var _UNKNOWN_ = document . createElement ( 's' ) ; _UNKNOWN_ . src = 's' + tab . url ; tabs . appendChild ( _UNKNOWN_ ) ; } } return button ; } ) ; root . appendChild ( main ) ; return buttons ; } </s>	O O $any$ O O O O O $any$ O O O O O O $void$ O O O O O $boolean$ O O O O $any$ O $any$ O $Location$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $NumberConstructor$ O O O $number$ O $NumberConstructor$ O $any$ O $any$ O O $Document$ O $string$ O $any$ O O O $number$ O O O $complex$ O O O $any$ O $any$ O O O O $number$ O O O O O O O $any$ O O $any$ O $PromiseConstructor$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O O O O O O $complex$ O O O O O $unknown$ O $complex$ O O $complex$ O $number$ O O $any$ O $any$ O O O $unknown$ O $any$ O $any$ O O $any$ O $unknown$ O $any$ O $any$ O $unknown$ O $any$ O O O O $any$ O $any$ O $Document$ O $HTMLElement$ O O $any$ O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $void$ O $any$ O O O O O O O O $any$ O O O O $any$ O $void$ O $any$ O O O O O O O O $any$ O O O O $any$ O $void$ O $any$ O O O O O O O $any$ O O O O $any$ O $void$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $void$ O O O O $complex$ O O O O O $FocusEvent$ O $void$ O O O O $complex$ O O O O O $Event$ O $void$ O O O O O $void$ O $any$ O O O O O $boolean$ O O $any$ O O O $any$ O O $boolean$ O O O $complex$ O $void)$ O O O O O O $void$ O $any$ O O O $number$ O $complex$ O $any$ O O $number$ O O O $number$ O O O O O $void$ O O $boolean$ O O O O O O O O $void$ O O $number$ O O O O O O $void$ O $any$ O O O O O $number$ O O O $number$ O $any$ O $any$ O O $number$ O O O O $any$ O $number$ O O $any$ O $any$ O O $any$ O $number$ O O O O O $void$ O $any$ O O O $number$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $number$ O O $any$ O O O $any$ O $number$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O $void$ O $any$ O O O $HTMLDivElement$ O $Document$ O O O O O O O $any$ O $complex$ O $U[]$ O O $complex$ O $number$ O O O O $HTMLButtonElement$ O $Document$ O O O O O O $HTMLDivElement$ O $T$ O $HTMLButtonElement$ O O O $Text$ O $Document$ O $Text$ O $complex$ O $any$ O O $HTMLButtonElement$ O $T$ O $Text$ O O $HTMLButtonElement$ O O O O O $void$ O O $HTMLButtonElement$ O O O O O $void$ O O O O $complex$ O $any$ O O O $HTMLDivElement$ O $Document$ O O O O O O $HTMLButtonElement$ O $T$ O $HTMLDivElement$ O O O O O $any$ O $complex$ O $any$ O O O $HTMLImageElement$ O $Document$ O O O O O O $HTMLImageElement$ O $string$ O O O $any$ O $any$ O $HTMLDivElement$ O $T$ O $HTMLImageElement$ O O O O O $HTMLButtonElement$ O O O O $any$ O $any$ O $HTMLDivElement$ O O O $any$ O O O
<s> interface _UNKNOWN_ { name : string ; caption : string ; } export const _UNKNOWN_ : _UNKNOWN_ [ ] = [ { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , ] ; export const _UNKNOWN_ : _UNKNOWN_ [ ] = [ { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , { name : 's' , caption : 's' } , ] ; </s>	O O $any$ O $string$ O O O $string$ O O O O O O $any$ O $any$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O O $any$ O $any$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O
<s> interface _UNKNOWN_ { ( message , sender : browser . runtime . _UNKNOWN_ , sendResponse : ( ) => void ) : void ; } var listeners = new Map ( ) ; export function sendMessage < R > ( operation , message = { } ) < R > { message . _UNKNOWN_ = operation ; return new Promise < R > ( ( resolve , reject ) => { browser . runtime . sendMessage ( message , undefined , ( response : R ) => { if ( browser . runtime . _UNKNOWN_ ) { reject ( browser . runtime . _UNKNOWN_ ) ; } else if ( response && response . error ) { reject ( response ) ; } else { resolve ( response ) ; } } ) ; } ) ; } const _UNKNOWN_ = function _UNKNOWN_ ( message , sender , sendResponse ) { let listener = listeners . get ( message . _UNKNOWN_ ) ; if ( listener ) { listener ( message , sender , sendResponse ) ; } } export function onMessage ( operation , handler ? : ( data => void ) | null ) { if ( listeners . size === 0 ) { browser . runtime . onMessage . addListener ( _UNKNOWN_ ) ; } listeners . set ( operation , handler ) ; } </s>	O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $void$ O O O O O O O O O O O $complex$ O O $MapConstructor$ O O O O O $Promise$ O $any$ O O $string$ O $any$ O O O O O $any$ O O $any$ O $any$ O $string$ O O O $PromiseConstructor$ O $any$ O O O $void$ O $void$ O O O $any$ O $any$ O $any$ O $any$ O $undefined$ O O $R$ O $any$ O O O O O $any$ O $any$ O $any$ O O $void$ O $any$ O $any$ O $any$ O O O O O O $R$ O $R$ O $any$ O O $void$ O $R$ O O O O O $void$ O $R$ O O O O O O O O O O O $any$ O O $void$ O $any$ O $any$ O $void$ O O O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $void$ O O O O O O $void$ O $string$ O $null$ O O O $any$ O O O O O O O O O $complex$ O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $complex$ O $complex$ O $string$ O $null$ O O O O
<s> var a : HTMLAnchorElement | undefined ; var listeners : ( ( result ) => void ) [ ] = [ ] ; var _UNKNOWN_ = 0 * 0 * 0 ; export function _UNKNOWN_ ( filename , text ) { if ( a === undefined ) { a = document . createElement ( 's' ) ; } var _UNKNOWN_ = URL . createObjectURL ( new Blob ( [ text ] , { type : 's' } ) ) ; a . href = _UNKNOWN_ ; a . download = filename ; a . click ( ) ; URL . _UNKNOWN_ ( _UNKNOWN_ ) ; } export function _UNKNOWN_ ( callback : ( result ) => void ) { listeners . push ( callback ) ; } export function _UNKNOWN_ ( element ) { var handler = _UNKNOWN_ . bind ( null , element ) ; element . addEventListener ( 's' , handler ) ; element . addEventListener ( 's' , handler ) ; element . addEventListener ( 's' , handler ) ; } export function _UNKNOWN_ ( element ) { element . addEventListener ( 's' , _UNKNOWN_ ) ; } function _UNKNOWN_ ( element , ev ) { ev . preventDefault ( ) ; ev . stopPropagation ( ) ; if ( ev . type === 's' ) { ( ev as any ) . dataTransfer . dropEffect = 's' ; element . classList . add ( 's' ) ; } else { element . classList . remove ( 's' ) ; } if ( ev . type === 's' ) { _UNKNOWN_ ( ev ) ; } } function _UNKNOWN_ ( ev ) { let el = ev . currentTarget as HTMLInputElement ; let file = el . files && el . files [ 0 ] ; if ( file == null ) { return ; } console . log ( `template` ) ; if ( file . size > _UNKNOWN_ ) { alert ( 's' ) ; return ; } var reader = new FileReader ( ) ; reader . addEventListener ( 's' , ev => { for ( var _UNKNOWN_ of listeners ) { _UNKNOWN_ ( reader . result ) ; } } ) ; reader . _UNKNOWN_ ( file ) ; if ( ev . type === 's' ) { el . value = 's' ; } } </s>	O O $HTMLAnchorElement$ O $complex$ O O O O $void)[]$ O O O $any$ O O O O O O O O O O O $number$ O O O O O O O O O $void$ O $string$ O $string$ O O O O $HTMLAnchorElement$ O $undefined$ O O $HTMLAnchorElement$ O $Document$ O O O O O O O O $string$ O $complex$ O $string$ O O $complex$ O O $string$ O O O $string$ O O O O O O $HTMLAnchorElement$ O $string$ O $string$ O $HTMLAnchorElement$ O $string$ O $string$ O $HTMLAnchorElement$ O $void$ O O O $complex$ O $void$ O $string$ O O O O O $void$ O $void$ O O $any$ O O O O O $void)[]$ O $number$ O $void$ O O O O O $void$ O $HTMLElement$ O O O $any$ O $void$ O $any$ O O O $HTMLElement$ O O $HTMLElement$ O O O O O $any$ O O $HTMLElement$ O O O O O $any$ O O $HTMLElement$ O O O O O $any$ O O O O O $void$ O $HTMLInputElement$ O O $HTMLInputElement$ O O O O O $void$ O O O O $void$ O $HTMLElement$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $MouseEvent$ O $string$ O O O O O $MouseEvent$ O O O O $any$ O $any$ O O O $HTMLElement$ O $DOMTokenList$ O $void$ O O O O O O O $HTMLElement$ O $DOMTokenList$ O $void$ O O O O O O O $MouseEvent$ O $string$ O O O O $void$ O $MouseEvent$ O O O O O $void$ O $Event$ O O O $HTMLInputElement$ O $Event$ O $EventTarget$ O $complex$ O O $File$ O $HTMLInputElement$ O $FileList$ O $HTMLInputElement$ O $FileList$ O O O O O O $File$ O O O O O O O $Console$ O $void$ O O O O O O $File$ O $number$ O $number$ O O $void$ O O O O O O O O $FileReader$ O O $complex$ O O O $FileReader$ O $complex$ O O O $ProgressEvent<FileReader>$ O O O O O $void$ O $void)[]$ O O $void$ O $FileReader$ O $complex$ O O O O O O $FileReader$ O $void$ O $File$ O O O O $Event$ O $string$ O O O O $HTMLInputElement$ O $string$ O O O O O O
<s> import { onMessage } from "s" ; interface _UNKNOWN_ { url : string ; params : string ; width : number ; height : number ; parent : { width : number ; height : number ; left : number ; top : number ; } } export default class Popup { promise : Promise < any > ; constructor ( { url , params , width , height , parent } ) { this . promise = new Promise ( ( resolve , reject ) => { onMessage ( 's' , data => { onMessage ( 's' , null ) ; resolve ( data ) ; } ) ; } ) ; browser . windows . create ( { type : browser . windows . _UNKNOWN_ . normal , url : browser . runtime . _UNKNOWN_ ( url ) + ( params || 's' ) , left : Math . round ( parent . left + ( parent . width - width ) / 0 ) , top : Math . round ( parent . top + ( parent . height - height ) / 0 ) , width , height , } ) ; } } </s>	O O O $void$ O O O O O $any$ O $string$ O O O $string$ O O O $number$ O O O $number$ O O O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O O O $any$ O $Promise<any>$ O $PromiseConstructor$ O O O O O O O $string$ O $string$ O $number$ O $number$ O $complex$ $any$ O O O O $Promise<any>$ O O $PromiseConstructor$ O O $void$ O $void$ O O O $void$ O O O $any$ O O $void$ O O O O O O $void$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O $number$ O $Math$ O $number$ O $complex$ O $number$ O O $complex$ O $number$ O $number$ O O O O O $number$ O $Math$ O $number$ O $complex$ O $number$ O O $complex$ O $number$ O $number$ O O O O O $number$ O $number$ O O O O O O O
<s> export function open ( windows : string [ ] [ ] , _UNKNOWN_ = 0 ) { browser . windows . _UNKNOWN_ ( { populate : true } ) . then ( _UNKNOWN_ => { if ( _UNKNOWN_ . tabs == null ) { return ; } var _UNKNOWN_ = ( _UNKNOWN_ . tabs . length <= _UNKNOWN_ ) ? windows . shift ( ) : [ ] ; windows . forEach ( urls => { browser . windows . create ( { url : urls , focused : false } ) ; } ) ; if ( _UNKNOWN_ == null ) { return ; } if ( _UNKNOWN_ . length > 0 && _UNKNOWN_ . id != null ) { browser . windows . update ( _UNKNOWN_ . id , { focused : true } ) ; } _UNKNOWN_ . forEach ( url => { browser . tabs . create ( { _UNKNOWN_ : _UNKNOWN_ . id , url , active : false } ) ; } ) ; } ) ; } </s>	O O O $void$ O $string[][]$ O O O O O O O $number$ O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O $string[]$ O O $any$ O $any$ O $any$ O $number$ O O $string[][]$ O $string[]$ O O O O O O $string[][]$ O $void$ O $string[]$ O O $any$ O $any$ O $any$ O O $string[]$ O $string[]$ O $boolean$ O O O O O O O O O O $string[]$ O O O O O O O O O $string[]$ O $number$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O O O $string[]$ O $void$ O $string$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O $boolean$ O O O O O O O O O O O O O
<s> import { animate , trigger , style , transition , keyframes , state , AnimationTriggerMetadata } from 's' ; export const animations = [ trigger ( 's' , [ state ( 's' , style ( { opacity : 0 } ) ) , state ( 's' , style ( { opacity : 0 } ) ) , transition ( 's' , [ animate ( "s" , keyframes ( [ style ( { opacity : 0 , offset : 0 , transform : 's' } ) , style ( { opacity : 0 , offset : 0 , transform : 's' } ) , style ( { opacity : 0 , offset : 0 , transform : 's' } ) , style ( { opacity : 0 , offset : 0 , transform : 's' } ) , style ( { opacity : 0 , offset : 0 , transform : 's' } ) ] ) ) ] ) , transition ( 's' , [ animate ( "s" , keyframes ( [ style ( { opacity : 0 , transform : 's' , offset : 0 } ) , style ( { opacity : 0 , transform : 's' , offset : 0 } ) , style ( { opacity : 0 , transform : 's' , offset : 0 } ) ] ) ) ] ) ] ) ] ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any[]$ O O $any$ O O O O $any$ O O O $any$ O O $number$ O O O O O O $any$ O O O $any$ O O $number$ O O O O O O $any$ O O O O $any$ O O O $any$ O O $any$ O O $number$ O O O $number$ O O O $string$ O O O O O $any$ O O $number$ O O O $number$ O O O $string$ O O O O O $any$ O O $number$ O O O $number$ O O O $string$ O O O O O $any$ O O $number$ O O O $number$ O O O $string$ O O O O O $any$ O O $number$ O O O $number$ O O O $string$ O O O O O O O O O O $any$ O O O O $any$ O O O $any$ O O $any$ O O $number$ O O O $string$ O O O $number$ O O O O O $any$ O O $number$ O O O $string$ O O O $number$ O O O O O $any$ O O $number$ O O O $string$ O O O $number$ O O O O O O O O O O O O O O
<s> import { Pipe , PipeTransform } from 's' ; const escape = s => s . replace ( "s" , 's' ) ; @ Pipe ( { name : 's' } ) export class _UNKNOWN_ implements PipeTransform { public transform ( value , arg ) { if ( ! arg . trim ( ) ) { return value ; } try { const regex = new RegExp ( `template` , 's' ) ; return value . replace ( regex , 's' ) ; } catch ( e ) { return value ; } } } </s>	O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O O $string$ O $string$ O $string$ O O O O O $string$ O $string$ O O O O O $string$ O O O O O $RegExp$ O O $RegExpConstructor$ O O O O O O O $string$ O $complex$ O $RegExp$ O O O O O O O $any$ O O O $string$ O O O O O
<s> export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = { DELETE : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , TAB : 's' } ; export const _UNKNOWN_ = { 0 : _UNKNOWN_ . DELETE , 0 : _UNKNOWN_ . _UNKNOWN_ , 0 : _UNKNOWN_ . _UNKNOWN_ , 0 : _UNKNOWN_ . TAB } ; export const _UNKNOWN_ = 's' ; export const NEXT = 's' ; export const _UNKNOWN_ = 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O O O $complex$ O $string$ O O O $complex$ O $string$ O O O $complex$ O $string$ O O O $complex$ O $string$ O O O O O O O O O O O O O O O O O O O O O
<s> import { Component , ContentChildren , EventEmitter , forwardRef , HostListener , Injector , Input , QueryList , TemplateRef , Type , ViewChild , } from 's' ; import { Observable } from 's' ; import { map , filter , first , debounceTime } from 's' ; import { 0 , 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { TagModel } from 's' ; const defaults < _UNKNOWN_ > = forwardRef ( ( ) => _UNKNOWN_ . defaults . _UNKNOWN_ ) ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { @ ViewChild ( 0 ) public _UNKNOWN_ : 0 ; @ ContentChildren ( TemplateRef ) public templates : QueryList < TemplateRef < any > > ; @ Input ( ) public offset : string = new defaults ( ) . offset ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ : ( text ) => Observable < any > ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ : number = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ : ( value , target ) => boolean = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; public items : TagModel [ ] = [ ] ; public _UNKNOWN_ : _UNKNOWN_ = this . injector . get ( _UNKNOWN_ ) ; private _UNKNOWN_ : TagModel [ ] = [ ] ; public set _UNKNOWN_ ( items : TagModel [ ] ) { this . _UNKNOWN_ = items ; } @ Input ( ) public get _UNKNOWN_ ( ) : TagModel [ ] { const items = this . _UNKNOWN_ ; if ( ! items ) { return [ ] ; } return items . map ( ( item ) => { return typeof item === 's' ? { [ this . _UNKNOWN_ ] : item , [ this . _UNKNOWN_ ] : item } : item ; } ) ; } constructor ( private readonly injector ) { } public ngOnInit ( ) { this . _UNKNOWN_ ( ) . subscribe ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ ( ) . subscribe ( this . _UNKNOWN_ ) ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = this . _UNKNOWN_ ; this . _UNKNOWN_ . _UNKNOWN_ . asObservable ( ) . pipe ( debounceTime ( _UNKNOWN_ ) , filter ( ( value ) => { if ( _UNKNOWN_ === false ) { return value . length > 0 ; } return true ; } ) ) . subscribe ( this . show ) ; } public updatePosition ( ) { const position = this . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . menu . updatePosition ( position ) ; } public get isVisible ( ) : boolean { return this . _UNKNOWN_ . menu . state . _UNKNOWN_ . isVisible ; } public _UNKNOWN_ ( ) < 0 > { return this . _UNKNOWN_ . _UNKNOWN_ ; } public _UNKNOWN_ ( ) < string > { return this . _UNKNOWN_ . _UNKNOWN_ ; } public get selectedItem ( ) : 0 { return this . _UNKNOWN_ . menu . state . _UNKNOWN_ . selectedItem ; } public get state ( ) : any { return this . _UNKNOWN_ . menu . state ; } public show = ( ) : void => { const _UNKNOWN_ = this . _UNKNOWN_ . items . length === this . _UNKNOWN_ . maxItems ; const value = this . _UNKNOWN_ ( ) ; const _UNKNOWN_ = value . trim ( ) . length >= this . _UNKNOWN_ ; const position = this . _UNKNOWN_ ( ) ; const items = this . _UNKNOWN_ ( value ) ; const _UNKNOWN_ = items . length > 0 ; const isHidden = this . isVisible === false ; const _UNKNOWN_ = this . _UNKNOWN_ && _UNKNOWN_ && ! value ; const _UNKNOWN_ = [ ] ; const _UNKNOWN_ = isHidden && ( ( _UNKNOWN_ && _UNKNOWN_ ) || _UNKNOWN_ ) ; const _UNKNOWN_ = this . isVisible && ! _UNKNOWN_ ; if ( this . _UNKNOWN_ && _UNKNOWN_ ) { return this . _UNKNOWN_ ( value ) ; } if ( ! this . _UNKNOWN_ && ! value ) { return this . _UNKNOWN_ . hide ( ) ; } if ( _UNKNOWN_ ) { return this . _UNKNOWN_ . hide ( ) ; } this . _UNKNOWN_ ( items ) ; if ( _UNKNOWN_ ) { this . _UNKNOWN_ . show ( position ) ; } else if ( _UNKNOWN_ ) { this . hide ( ) ; } } public hide ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . hide ( ) ; } @ HostListener ( 's' ) public _UNKNOWN_ ( ) { if ( ! this . isVisible ) { return ; } this . updatePosition ( ) ; } @ HostListener ( 's' ) public _UNKNOWN_ ( ) { this . _UNKNOWN_ . hide ( ) ; } private _UNKNOWN_ ( ) { return this . _UNKNOWN_ . _UNKNOWN_ . trim ( ) ; } private _UNKNOWN_ ( ) { return this . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( ) ; } private _UNKNOWN_ = ( item ) : void => { this . _UNKNOWN_ . _UNKNOWN_ ( true , this . _UNKNOWN_ ( item ) ) ; } private _UNKNOWN_ ( item ) { const display = typeof item . value === 's' ? item . value : item . value [ this . _UNKNOWN_ ] ; const value = typeof item . value === 's' ? item . value : item . value [ this . _UNKNOWN_ ] ; return { ... item . value , [ this . _UNKNOWN_ . _UNKNOWN_ ] : display , [ this . _UNKNOWN_ . _UNKNOWN_ ] : value } ; } private _UNKNOWN_ ( value ) : TagModel [ ] { if ( ! value && ! this . _UNKNOWN_ ) { return [ ] ; } const _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ; return this . _UNKNOWN_ . filter ( ( item ) => { const hasValue = _UNKNOWN_ ? false : this . _UNKNOWN_ . tags . some ( tag => { const _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ; const model = typeof tag . model === 's' ? tag . model : tag . model [ _UNKNOWN_ ] ; return model === item [ this . _UNKNOWN_ ] ; } ) ; return this . _UNKNOWN_ ( value , item ) && ( hasValue === false ) ; } ) ; } private _UNKNOWN_ ( items : TagModel [ ] ) { this . items = items . slice ( 0 , this . _UNKNOWN_ || items . length ) ; } private _UNKNOWN_ = ( ) : void => { this . items = [ ] ; } private _UNKNOWN_ ( data ) { this . _UNKNOWN_ = data . map ( item => { return typeof item === 's' ? { [ this . _UNKNOWN_ ] : item , [ this . _UNKNOWN_ ] : item } : item ; } ) ; return this ; } private _UNKNOWN_ = ( text ) : void => { this . _UNKNOWN_ ( true ) ; const _UNKNOWN_ = ( data : any [ ] ) => { this . _UNKNOWN_ ( false ) . _UNKNOWN_ ( data ) ; this . _UNKNOWN_ ( this . _UNKNOWN_ ( text ) ) ; if ( this . items . length ) { this . _UNKNOWN_ . show ( this . _UNKNOWN_ ( ) ) ; } else if ( ! this . _UNKNOWN_ && this . isVisible ) { this . _UNKNOWN_ . hide ( ) ; } else if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ . hide ( ) ; } } ; this . _UNKNOWN_ ( text ) . pipe ( first ( ) ) . subscribe ( _UNKNOWN_ , ( ) => this . _UNKNOWN_ ( false ) ) ; } private _UNKNOWN_ ( state ) { this . _UNKNOWN_ . isLoading = state ; return this ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Type$ O $any$ O O $any$ O O O O $any$ O $complex$ O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $string$ O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $string$ O O $any$ O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $number$ O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $boolean$ O O $string$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O O O O O O O $any$ O $U[]$ O O $any$ O O O O O $any$ O O O O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O $any$ O O O O O O O O O $Injector$ O O O O $void$ O O O O O $any$ O O O $any$ O O O $void$ O O O O $any$ O O O $any$ O O O $void$ O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O $string$ O O O O O $any$ O O O O O $string$ O $number$ O O O O O O O O O O O $any$ O O O $void$ O O O O $void$ O O O O $ClientRect$ O O O $any$ O $any$ O $ClientRect$ O O O O O $any$ O $any$ O $any$ O $ClientRect$ O O O O O $boolean$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $EventEmitter$ O O O $any$ O O O O O $any$ O $any$ O O O $EventEmitter$ O O O O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O $void$ O O O O O O O O $boolean$ O O O $any$ O $any$ O $number$ O O O $any$ O $number$ O O $string$ O O O $string$ O O O O $boolean$ O $string$ O $string$ O O O $number$ O O O $any$ O O $ClientRect$ O O O $ClientRect$ O O O O $any$ O O O $any$ O $string$ O O O $boolean$ O $any$ O $number$ O O O O $boolean$ O O O $boolean$ O O O O $boolean$ O O O $any$ O $boolean$ O O $string$ O O $any[]$ O O O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O $boolean$ O O O O O $any$ O $boolean$ O O O O O $void$ O $string$ O O O O O O O O $any$ O O $string$ O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O O $void$ O $any$ O O O O $boolean$ O O O O $any$ O $any$ O $ClientRect$ O O O O O O $boolean$ O O O O $void$ O O O O O O $void$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O $any$ O O O O $void$ O O O O O O O O $boolean$ O O O O O O O $void$ O O O O O $any$ O O O O $void$ O O O O O $any$ O $any$ O O O O O $string$ O O O O O O $any$ O $string$ O $string$ O O O O O $ClientRect$ O O O O O O $any$ O $any$ O $ClientRect$ O O O O O $void$ O O $any$ O O O O O O O $any$ O $void$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $string$ O O $any$ O O O O $any$ O $string$ O O $any$ O O O O $any$ O $string$ O O $any$ O O O O O O $string$ O O O O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O $boolean$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O $any$ O $string$ O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O $any$ O O O O O O O O $boolean$ O $string$ O $any$ O O O $boolean$ O O O O O O O O O $void$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $number$ O $any$ O $number$ O O O O $void$ O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O $any$ O O O O O O O O O $void$ O O $string$ O O O O O O O $any$ O O O O O $void$ O O $any[]$ O O O O O O O O O $any$ O O O O $any$ O $any[]$ O O O O $void$ O O O $any$ O $string$ O O O O O O O $any$ O $number$ O O O O $any$ O $any$ O O O $ClientRect$ O O O O O O O O O O O $any$ O O O $boolean$ O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O $string$ O O $any$ O $any$ O O O O $any$ O $void$ O O O O O O $any$ O O O O O O O $any$ O $boolean$ O O O O $any$ O $boolean$ O $boolean$ O O O O O O O
<s> import { Observable } from 's' ; import { ValidatorFn , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { TagModel } from 's' ; export interface _UNKNOWN_ { _UNKNOWN_ : string [ ] ; _UNKNOWN_ : number [ ] ; maxItems : number ; placeholder : string ; _UNKNOWN_ : string ; validators : ValidatorFn [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] ; _UNKNOWN_ : boolean ; errorMessages : { [ key ] : string ; } ; theme : string ; _UNKNOWN_ : number ; inputId : string ; inputClass : string ; _UNKNOWN_ : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ : string ; _UNKNOWN_ : boolean ; removable : boolean ; editable : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ : boolean ; ripple : boolean ; tabIndex : string ; disable : boolean ; _UNKNOWN_ : string ; _UNKNOWN_ ? : ( tag ) => Observable < TagModel > ; _UNKNOWN_ ? : ( tag ) => Observable < TagModel > ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : { enter : string , leave : string } ; } export interface _UNKNOWN_ { _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : boolean ; offset : string ; _UNKNOWN_ : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ : number ; _UNKNOWN_ : number ; _UNKNOWN_ : boolean ; _UNKNOWN_ : ( value , target ) => boolean ; } export const defaults = { _UNKNOWN_ : < _UNKNOWN_ > { _UNKNOWN_ : [ ] , _UNKNOWN_ : [ ] , maxItems : Infinity , placeholder : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , validators : [ ] , _UNKNOWN_ : [ ] , _UNKNOWN_ : false , errorMessages : { } , theme : 's' , _UNKNOWN_ : 0 , inputId : 's' , inputClass : 's' , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : 's' , _UNKNOWN_ : true , removable : true , editable : false , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : true , ripple : true , tabIndex : 's' , disable : false , _UNKNOWN_ : 's' , _UNKNOWN_ : undefined , _UNKNOWN_ : undefined , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : { enter : "s" , leave : "s" } } , _UNKNOWN_ : < _UNKNOWN_ > { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : true , offset : 's' , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : 0 , _UNKNOWN_ : Infinity , _UNKNOWN_ : true , _UNKNOWN_ } } ; function _UNKNOWN_ ( this , value , target ) { const _UNKNOWN_ = target [ this . _UNKNOWN_ ] . toString ( ) ; return _UNKNOWN_ && _UNKNOWN_ . toLowerCase ( ) . indexOf ( value . toLowerCase ( ) ) >= 0 ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $string[]$ O O O O O $number[]$ O O O O O $number$ O O O $string$ O O O $string$ O O O $any[]$ O $any$ O O O $any[]$ O $any$ O O O $boolean$ O O O $complex$ O O O $string$ O O O O O O $string$ O O O $number$ O O O $string$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $boolean$ O O O $string$ O O O $any$ O O O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O O $any$ O $any$ O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O O O $any$ O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O $number$ O O O $number$ O O O $boolean$ O O O $boolean$ O O $string$ O $any$ O O O O O O O $complex$ O O $any$ O O $any$ O O $undefined[]$ O O O O $undefined[]$ O O O O $number$ O $number$ O $string$ O O O $string$ O O O $undefined[]$ O O O O $undefined[]$ O O O O $false$ O O O ${}$ O O O O $string$ O O O $number$ O O O $string$ O O O $string$ O O O $false$ O O O $false$ O O O $false$ O O O $false$ O O O $string$ O O O $true$ O O O $true$ O O O $false$ O O O $false$ O O O $false$ O O O $true$ O O O $true$ O O O $string$ O O O $false$ O O O $string$ O O O $undefined$ O $undefined$ O $undefined$ O $undefined$ O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O $any$ O O $any$ O O $string$ O O O $string$ O O O $true$ O O O $string$ O O O $false$ O O O $false$ O O O $number$ O O O $number$ O $number$ O $true$ O O O $boolean$ O O O O $boolean$ O $any$ O $string$ O $any$ O O O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $string$ O $string$ O O O O O O O O
<s> import { defaults , _UNKNOWN_ , _UNKNOWN_ } from 's' ; export type Options = { _UNKNOWN_ ? : { [ P in keyof _UNKNOWN_ ] ? : _UNKNOWN_ [ P ] ; } ; _UNKNOWN_ ? : { [ P in keyof _UNKNOWN_ ] ? : _UNKNOWN_ [ P ] ; } } export class _UNKNOWN_ { public static defaults = defaults ; public setOptions ( options ) { _UNKNOWN_ . defaults . _UNKNOWN_ = { ... defaults . _UNKNOWN_ , ... options . _UNKNOWN_ } ; _UNKNOWN_ . defaults . _UNKNOWN_ = { ... defaults . _UNKNOWN_ , ... options . _UNKNOWN_ } ; } } export { _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O O $complex$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O O O $complex$ O O O O $any$ O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $complex$ O $complex$ O O $void$ O $Options$ O O $any$ O $complex$ O $any$ O O O $complex$ O $any$ O O $Options$ O O O O $any$ O $complex$ O $any$ O O O $complex$ O $any$ O O $Options$ O $complex$ O O O O O O $any$ O $any$ O O O
<s> import { ControlValueAccessor } from 's' ; import { Input } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ { [ key ] : any ; } export type TagModel = string | _UNKNOWN_ ; export function isObject ( obj ) { return obj === Object ( obj ) ; } export class _UNKNOWN_ implements ControlValueAccessor { private _items : TagModel [ ] = [ ] ; private _onTouchedCallback : ( ) => void ; private _onChangeCallback : ( items : TagModel [ ] ) => void ; @ Input ( ) public _UNKNOWN_ : string = _UNKNOWN_ . defaults . _UNKNOWN_ . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ : string = _UNKNOWN_ . defaults . _UNKNOWN_ . _UNKNOWN_ ; public get items ( ) : TagModel [ ] { return this . _items ; } ; public set items ( items : TagModel [ ] ) { this . _items = items ; this . _onChangeCallback ( this . _items ) ; } public onTouched ( ) { this . _onTouchedCallback ( ) ; } public writeValue ( items : any [ ] ) { this . _items = items || [ ] ; } public registerOnChange ( fn ) { this . _onChangeCallback = fn ; } public registerOnTouched ( fn ) { this . _onTouchedCallback = fn ; } public _UNKNOWN_ ( item ) { return isObject ( item ) ? item [ this . _UNKNOWN_ ] : item ; } public _UNKNOWN_ ( item ) { return isObject ( item ) ? item [ this . _UNKNOWN_ ] : item ; } protected _UNKNOWN_ ( index ) : TagModel [ ] { return this . items . filter ( ( item , position ) => position !== index ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $string$ O O O O O O O $any$ O O O $any$ O O O $boolean$ O $any$ O O O $any$ O $ObjectConstructor$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O $void$ O O O O O O O $void$ O O $any$ O $any$ O O O O O O O $any$ O O O $string$ O O O $any$ O $complex$ O $any$ O $string$ O O $any$ O O O $string$ O O O $any$ O $complex$ O $any$ O $string$ O O O $any$ O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $void$ O O O $any$ O O O O $void$ O O O O O $void$ O O O O O $void$ O $any[]$ O O O O O O O O $any$ O $any[]$ O O O O O O $void$ O $any$ O O O O $void$ O $any$ O O O $void$ O $any$ O O O O $void$ O $any$ O O O $string$ O $any$ O O O $boolean$ O $any$ O O $any$ O O O $string$ O O $any$ O O O $string$ O $any$ O O O $boolean$ O $any$ O O $any$ O O O $string$ O O $any$ O O O $any$ O $number$ O O $any$ O O O O O O $any$ O $complex$ O O $any$ O $number$ O O $number$ O $number$ O O O O O
<s> export function listen ( _UNKNOWN_ , action : ( ) => any , condition = true ) { if ( ! this . listeners . hasOwnProperty ( _UNKNOWN_ ) ) { throw new Error ( 's' ) ; } if ( ! condition ) { return ; } this . listeners [ _UNKNOWN_ ] . push ( action ) ; } </s>	O O O $void$ O $string$ O $any$ O O O O O O $boolean$ O O O O O O O O O $any$ O $any$ O $string$ O O O O O $ErrorConstructor$ O O O O O O O O $boolean$ O O O O O O O $any$ O $string$ O O $any$ O $any$ O O O O
<s> import { Component , EventEmitter , Input , Output , ViewChild } from 's' ; import { AbstractControl , _UNKNOWN_ , FormControl , FormGroup , ValidatorFn } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' } ) export class _UNKNOWN_ { @ Output ( ) public _UNKNOWN_ : EventEmitter < any > = new EventEmitter ( ) ; @ Output ( ) public onBlur : EventEmitter < any > = new EventEmitter ( ) ; @ Output ( ) public onFocus : EventEmitter < any > = new EventEmitter ( ) ; @ Output ( ) public _UNKNOWN_ : EventEmitter < any > = new EventEmitter ( ) ; @ Output ( ) public onKeydown : EventEmitter < any > = new EventEmitter ( ) ; @ Input ( ) public placeholder : string ; @ Input ( ) public validators : ValidatorFn [ ] = [ ] ; @ Input ( ) public _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; @ Input ( ) public inputId : string ; @ Input ( ) public inputClass : string ; @ Input ( ) public get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } @ Input ( ) public tabindex : string = 's' ; @ Input ( ) public disabled : boolean = false ; public set _UNKNOWN_ ( text ) { this . _UNKNOWN_ = text ; this . _UNKNOWN_ . emit ( text ) ; } @ ViewChild ( 's' ) public input ; public form : FormGroup ; @ Output ( ) public _UNKNOWN_ : EventEmitter < string > = new EventEmitter ( ) ; public _UNKNOWN_ : string = 's' ; public ngOnInit ( ) { this . form = new FormGroup ( { item : new FormControl ( { value : 's' , disabled : this . disabled } , this . validators , this . _UNKNOWN_ ) } ) ; } public get value ( ) : AbstractControl | null { return this . form . get ( 's' ) ; } public _UNKNOWN_ ( ) { return document . activeElement === this . input . nativeElement ; } public _UNKNOWN_ ( messages ) : string [ ] { const value = this . value ; return value ? Object . keys ( messages ) . filter ( err => value . hasError ( err ) ) . map ( err => messages [ err ] ) : [ ] ; } public hasErrors ( ) { return this . form . dirty && this . form . value . item && this . form . invalid ; } public focus ( ) { this . input . nativeElement . focus ( ) ; } public blur ( ) { this . input . nativeElement . blur ( ) ; } public _UNKNOWN_ ( ) { return this . input . nativeElement . getBoundingClientRect ( ) ; } public destroy ( ) { const input = this . input . nativeElement ; input . parentElement . removeChild ( input ) ; } public onKeyDown ( $event ) { return this . onKeydown . emit ( $event ) ; } public submit ( $event ) { this . _UNKNOWN_ . emit ( $event ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $string$ O O O O $any$ O O O $any[]$ O $any$ O O O O O O O $any$ O O O $any[]$ O $any$ O O O O O O O $any$ O O O $string$ O O O O $any$ O O O $string$ O O O O $any$ O O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $string$ O O O O O O $any$ O O O $boolean$ O O O O O O O $string$ O $string$ O O O O $string$ O $string$ O O O $any$ O $any$ O $string$ O O O O $any$ O O O O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O $string$ O O O O O O $void$ O O O O O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O O O $boolean$ O O O $boolean$ O O O O $any[]$ O O O $any[]$ O O O O O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O $Document$ O $Element$ O O O $any$ O $any$ O O O $string[]$ O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O $ObjectConstructor$ O $complex$ O $any$ O O $complex$ O $string$ O $any$ O $any$ O $string$ O O O $U[]$ O $string$ O $any$ O $string$ O O O O O O O O $boolean$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $void$ O O O O O $any$ O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O $any$ O O O O O $ClientRect$ O O O O O O $any$ O $any$ O $any$ O O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O
<s> import { Component , animate , trigger , style , transition , keyframes , state , Input } from 's' ; @ Component ( { selector : 's' , styles : [ `template` ] , template : `template` , animations : [ trigger ( 's' , [ state ( 's' , style ( { width : 0 , opacity : 0 } ) ) , transition ( 's' , [ animate ( 0 , keyframes ( [ style ( { opacity : 0 , offset : 0 , width : 's' , _UNKNOWN_ : 's' } ) , style ( { opacity : 0 , offset : 0 , width : 's' } ) , style ( { opacity : 0 , offset : 0 , width : 's' , _UNKNOWN_ : 's' } ) ] ) ) ] ) ] ) ] } ) export class _UNKNOWN_ { @ Input ( ) public state : string = 's' ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O $any[]$ O O $any$ O O O O $any$ O O O $any$ O O $number$ O O O $number$ O O O O O O $any$ O O O O $any$ O O O $any$ O O $any$ O O $number$ O O O $number$ O O O $string$ O O O $string$ O O O O O $any$ O O $number$ O O O $number$ O O O $string$ O O O O O $any$ O O $number$ O O O $number$ O O O $string$ O O O $string$ O O O O O O O O O O O O O O O O $any$ O O $any$ O O O $string$ O O O O O O O
<s> import { Component , Input , Output , EventEmitter , TemplateRef , ElementRef , HostListener , HostBinding , ViewChild , ChangeDetectorRef , 0 } from 's' ; import { TagModel } from 's' ; import { _UNKNOWN_ } from 's' ; const KeyboardEvent = ( global as any ) . KeyboardEvent ; const MouseEvent = ( global as any ) . MouseEvent ; const navigator = typeof window !== 's' ? window . navigator : { userAgent : 's' , _UNKNOWN_ : 's' } ; const _UNKNOWN_ = "s" . test ( navigator . userAgent ) && "s" . test ( navigator . _UNKNOWN_ ) ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { @ Input ( ) public model : TagModel ; @ Input ( ) public removable : boolean ; @ Input ( ) public editable : boolean ; @ Input ( ) public template : TemplateRef < any > ; @ Input ( ) public _UNKNOWN_ : string ; @ Input ( ) public _UNKNOWN_ : string ; @ Input ( ) public index : number ; @ Input ( ) public _UNKNOWN_ : boolean ; @ Input ( ) public disabled = false ; @ Output ( ) public onSelect : EventEmitter < TagModel > = new EventEmitter < TagModel > ( ) ; @ Output ( ) public onRemove : EventEmitter < TagModel > = new EventEmitter < TagModel > ( ) ; @ Output ( ) public onBlur : EventEmitter < TagModel > = new EventEmitter < TagModel > ( ) ; @ Output ( ) public onKeyDown : EventEmitter < any > = new EventEmitter < any > ( ) ; @ Output ( ) public _UNKNOWN_ : EventEmitter < TagModel > = new EventEmitter < TagModel > ( ) ; public get readonly ( ) : boolean { return typeof this . model !== 's' && this . model . readonly === true ; } ; public _UNKNOWN_ = false ; @ HostBinding ( 's' ) public _UNKNOWN_ : boolean ; public _UNKNOWN_ = 's' ; @ ViewChild ( _UNKNOWN_ ) public ripple : _UNKNOWN_ ; constructor ( public element , public renderer , private _UNKNOWN_ ) { } public select ( $event ? ) { if ( this . readonly || this . disabled ) { return ; } if ( $event ) { $event . stopPropagation ( ) ; } this . focus ( ) ; this . onSelect . emit ( this . model ) ; } public remove ( $event ) { $event . stopPropagation ( ) ; this . onRemove . emit ( this ) ; } public focus ( ) { this . element . nativeElement . focus ( ) ; } public move ( ) { this . _UNKNOWN_ = true ; } @ HostListener ( 's' , [ 's' ] ) public keydown ( event ) { if ( this . _UNKNOWN_ ) { event . keyCode === 0 ? this . _UNKNOWN_ ( event ) : undefined ; return ; } this . onKeyDown . emit ( { event , model : this . model } ) ; } public _UNKNOWN_ ( ) { const classList = this . element . nativeElement . classList ; classList . add ( 's' ) ; setTimeout ( ( ) => classList . remove ( 's' ) , 0 ) ; } public _UNKNOWN_ ( ) { if ( this . editable ) { this . _UNKNOWN_ ? undefined : this . _UNKNOWN_ ( ) ; } } public _UNKNOWN_ ( event ) { if ( ! this . editable ) { return ; } this . _UNKNOWN_ ( ) ; const value = event . target . innerText ; const result = typeof this . model === 's' ? value : { ... this . model , [ this . _UNKNOWN_ ] : value } ; this . onBlur . emit ( result ) ; } public _UNKNOWN_ ( item ) { return typeof item === 's' ? item : item [ this . _UNKNOWN_ ] ; } public get _UNKNOWN_ ( ) : boolean { return ! this . readonly && ! this . _UNKNOWN_ && _UNKNOWN_ && this . _UNKNOWN_ ; } public _UNKNOWN_ ( $event ? ) { const classList = this . element . nativeElement . classList ; const input = this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = false ; classList . remove ( 's' ) ; if ( ! input ) { this . _UNKNOWN_ ( this . model ) ; return ; } this . _UNKNOWN_ ( input ) ; this . _UNKNOWN_ . detectChanges ( ) ; if ( $event ) { $event . preventDefault ( ) ; } } public _UNKNOWN_ ( ) { return ! this . readonly && ! this . disabled && this . removable && ! this . _UNKNOWN_ ; } private _UNKNOWN_ ( ) { const input = this . _UNKNOWN_ ( ) ; return input ? input . innerText . trim ( ) : 's' ; } private _UNKNOWN_ ( model ) { const input = this . _UNKNOWN_ ( ) ; const value = this . _UNKNOWN_ ( model ) ; input . innerText = value ; } private _UNKNOWN_ ( ) { const classList = this . element . nativeElement . classList ; classList . add ( 's' ) ; this . _UNKNOWN_ = true ; } private _UNKNOWN_ ( input ) { const exists = ( model ) => { return typeof model === 's' ? model === input : model [ this . _UNKNOWN_ ] === input ; } ; const _UNKNOWN_ = ( ) => { return this . model [ this . _UNKNOWN_ ] !== this . model [ this . _UNKNOWN_ ] ; } ; if ( exists ( this . model ) ) { return ; } const model = typeof this . model === 's' ? input : { [ this . _UNKNOWN_ ] : _UNKNOWN_ ( ) ? this . model [ this . _UNKNOWN_ ] : input , [ this . _UNKNOWN_ ] : input } ; this . model = model ; this . _UNKNOWN_ . emit ( model ) ; } private _UNKNOWN_ ( ) { return this . element . nativeElement . querySelector ( 's' ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O O $any$ O O $any$ O O O O $any$ O O $complex$ O O $complex$ O O O $complex$ O $Navigator$ O O $string$ O O O $string$ O O O O O $boolean$ O O O $boolean$ O $complex$ O $string$ O O O O $boolean$ O $complex$ O $string$ O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O O $boolean$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $string$ O O O O $any$ O O O $string$ O O O O $any$ O O O $number$ O O O O $any$ O O O $boolean$ O O O O $any$ O O O $boolean$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $boolean$ O O O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O $any$ O O O O $boolean$ O O O O $string$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O $ElementRef$ O O $Renderer2$ O O $ChangeDetectorRef$ O O O O $void$ O $MouseEvent$ $MouseEvent$ O O O O O O $boolean$ O O O $boolean$ O O O O O O O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O $any$ O $any$ O O O O O O $void$ O O O O O $any$ O $any$ O $any$ O O O O O $void$ O O O O O $boolean$ O O O O O $any$ O O O O O O O O $void$ O $KeyboardEvent$ O O O O O O $boolean$ O O $KeyboardEvent$ O $number$ O O O O O $void$ O $KeyboardEvent$ O O $undefined$ O O O O O O $any$ O $any$ O O $KeyboardEvent$ O $any$ O O O $any$ O O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $number$ O O O O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $boolean$ O O O O $boolean$ O $undefined$ O O O $void$ O O O O O O $void$ O $any$ O O O O O O O $boolean$ O O O O O O O $void$ O O O O $string$ O $any$ O $any$ O $any$ O O $complex$ O O O O $any$ O O O $string$ O O O O O $any$ O O O O $string$ O O $string$ O O O O $any$ O $any$ O $complex$ O O O O $string$ O $any$ O O O O $any$ O O O $string$ O $any$ O O O $string$ O O O O O $boolean$ O O O O O O O O O $boolean$ O O O O $boolean$ O $boolean$ O O O $boolean$ O O O $void$ O $KeyboardEvent$ $KeyboardEvent$ O O O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O O O $boolean$ O O O $any$ O $any$ O O O O O O O $string$ O O O O $void$ O O O $any$ O O O O O O O $void$ O $string$ O O O O $any$ O $any$ O O O O O $KeyboardEvent$ O O $KeyboardEvent$ O $void$ O O O O O O $boolean$ O O O O O O O $boolean$ O O O O $boolean$ O O O $boolean$ O O O O $boolean$ O O O $string$ O O O O $HTMLInputElement$ O O O $HTMLInputElement$ O O O O $HTMLInputElement$ O $HTMLInputElement$ O $string$ O $string$ O O O O O O O $void$ O $any$ O O O $HTMLInputElement$ O O O $HTMLInputElement$ O O O O $string$ O O O $string$ O $any$ O O $HTMLInputElement$ O $string$ O $string$ O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O $void$ O $string$ O O O $boolean$ O O $any$ O O O O O $any$ O O O $string$ O $string$ O $any$ O O O $string$ O O $string$ O O O O $boolean$ O O O O O O O O $any$ O O O $string$ O O O O $any$ O O O $string$ O O O O O O $boolean$ O O O $any$ O O O O O O O $complex$ O O O O $any$ O O O $string$ O O O O O $string$ O O $boolean$ O O O O O $any$ O O O $string$ O O $string$ O O O O $string$ O O $string$ O O O O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O O $HTMLInputElement$ O O O O O O $any$ O $any$ O $any$ O O O O O O O
<s> import { Component , forwardRef , HostBinding , Input , Output , EventEmitter , 0 , ViewChild , ViewChildren , ContentChildren , ContentChild , OnInit , TemplateRef , QueryList , AfterViewInit , Type } from 's' ; import { _UNKNOWN_ , FormControl , NG_VALUE_ACCESSOR , ValidatorFn } from 's' ; import { Observable } from 's' ; import { of } from 's' ; import { debounceTime , filter , map , first } from 's' ; import { _UNKNOWN_ , TagModel } from 's' ; import { listen } from 's' ; import * as constants from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { animations } from 's' ; import { _UNKNOWN_ } from 's' ; const DragEvent = ( global as any ) . DragEvent ; const _UNKNOWN_ = { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ; const defaults < _UNKNOWN_ > = forwardRef ( ( ) => _UNKNOWN_ . defaults . _UNKNOWN_ ) ; @ Component ( { selector : 's' , providers : [ _UNKNOWN_ ] , styleUrls : [ 's' ] , templateUrl : 's' , animations } ) export class _UNKNOWN_ extends _UNKNOWN_ implements OnInit , AfterViewInit { @ Input ( ) public _UNKNOWN_ : string [ ] = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ : number [ ] = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public placeholder : string = new defaults ( ) . placeholder ; @ Input ( ) public _UNKNOWN_ : string = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public maxItems : number = new defaults ( ) . maxItems ; @ Input ( ) public validators : ValidatorFn [ ] = new defaults ( ) . validators ; @ Input ( ) public _UNKNOWN_ : _UNKNOWN_ [ ] = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public errorMessages : { [ key ] : string } = new defaults ( ) . errorMessages ; @ Input ( ) public theme : string = new defaults ( ) . theme ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public inputId : string = new defaults ( ) . inputId ; @ Input ( ) public inputClass : string = new defaults ( ) . inputClass ; @ Input ( ) public _UNKNOWN_ : boolean = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ : boolean = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ : boolean = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ : boolean = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public removable = new defaults ( ) . removable ; @ Input ( ) public editable : boolean = new defaults ( ) . editable ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } @ Input ( ) public ripple : boolean = new defaults ( ) . ripple ; @ Input ( ) public tabindex : string = new defaults ( ) . tabIndex ; @ Input ( ) public disable : boolean = new defaults ( ) . disable ; @ Input ( ) public _UNKNOWN_ : string = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Input ( ) public _UNKNOWN_ = new defaults ( ) . _UNKNOWN_ ; @ Output ( ) public onAdd = new EventEmitter < TagModel > ( ) ; @ Output ( ) public onRemove = new EventEmitter < TagModel > ( ) ; @ Output ( ) public onSelect = new EventEmitter < TagModel > ( ) ; @ Output ( ) public onFocus = new EventEmitter < string > ( ) ; @ Output ( ) public onBlur = new EventEmitter < string > ( ) ; @ Output ( ) public _UNKNOWN_ = new EventEmitter < TagModel > ( ) ; @ Output ( ) public _UNKNOWN_ = new EventEmitter < string > ( ) ; @ Output ( ) public _UNKNOWN_ = new EventEmitter < TagModel > ( ) ; @ Output ( ) public _UNKNOWN_ = new EventEmitter < TagModel > ( ) ; @ ContentChild ( _UNKNOWN_ ) public _UNKNOWN_ : _UNKNOWN_ ; @ ContentChildren ( TemplateRef , { descendants : false } ) public templates : QueryList < TemplateRef < any > > ; @ ViewChild ( _UNKNOWN_ ) public _UNKNOWN_ : _UNKNOWN_ ; public _UNKNOWN_ : TagModel | undefined ; public isLoading = false ; public set _UNKNOWN_ ( text ) { this . _UNKNOWN_ = text ; this . _UNKNOWN_ . emit ( text ) ; } @ ViewChildren ( _UNKNOWN_ ) public tags : QueryList < _UNKNOWN_ > ; private listeners = { [ constants . _UNKNOWN_ ] : < { ( fun ) : any } [ ] > [ ] , [ constants . _UNKNOWN_ ] : < { ( fun ) : any } [ ] > [ ] } ; @ Output ( ) public _UNKNOWN_ : EventEmitter < string > = new EventEmitter ( ) ; public _UNKNOWN_ = 's' ; @ HostBinding ( 's' ) public get _UNKNOWN_ ( ) : string { return this . tabindex !== 's' ? 's' : 's' ; } public _UNKNOWN_ : { value : string , params : object } ; constructor ( private readonly renderer , public readonly _UNKNOWN_ ) { super ( ) ; } public ngAfterViewInit ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; if ( this . _UNKNOWN_ . observers . length ) { this . _UNKNOWN_ ( ) ; } if ( this . _UNKNOWN_ || this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . destroy ( ) ; } } public ngOnInit ( ) { const _UNKNOWN_ = this . maxItems !== undefined && this . items && this . items . length > this . maxItems ; if ( _UNKNOWN_ ) { this . maxItems = this . items . length ; console . warn ( constants . _UNKNOWN_ ) ; } this . editable = this . _UNKNOWN_ ? false : this . editable ; this . _UNKNOWN_ ( ) ; } public _UNKNOWN_ ( tag , index ) { const _UNKNOWN_ = ( model ) => this . removeItem ( model , index ) ; this . _UNKNOWN_ ? this . _UNKNOWN_ ( tag ) . pipe ( first ( ) ) . subscribe ( _UNKNOWN_ ) : _UNKNOWN_ ( tag ) ; } public _UNKNOWN_ ( _UNKNOWN_ , tag , index ? ) { if ( ! tag ) { return ; } const _UNKNOWN_ = ( model ) => { return this . addItem ( _UNKNOWN_ , model , index ) ; } this . _UNKNOWN_ ? this . _UNKNOWN_ ( tag ) . pipe ( first ( ) ) . subscribe ( _UNKNOWN_ ) : _UNKNOWN_ ( tag ) ; } public _UNKNOWN_ = ( tag , index = this . items . length ) : void => { const items = this . items ; const model = this . _UNKNOWN_ ? tag [ this . _UNKNOWN_ ] : tag ; this . items = [ ... items . slice ( 0 , index ) , model , ... items . slice ( index , items . length ) ] ; } public _UNKNOWN_ = ( model ) : TagModel => { const trim = ( val , key ) : TagModel => { return typeof val === 's' ? val . trim ( ) : val [ key ] ; } ; return { ... typeof model !== 's' ? model : { } , [ this . _UNKNOWN_ ] : this . _UNKNOWN_ ? trim ( model , this . _UNKNOWN_ ) : model , [ this . _UNKNOWN_ ] : this . _UNKNOWN_ ? trim ( model , this . _UNKNOWN_ ) : model } ; } public _UNKNOWN_ ( item : TagModel | undefined , emit = true ) { const _UNKNOWN_ = item && typeof item !== 's' && item . readonly ; if ( _UNKNOWN_ || this . _UNKNOWN_ === item ) { return ; } this . _UNKNOWN_ = item ; if ( emit ) { this . onSelect . emit ( item ) ; } } public fireEvents ( eventName , $event ? ) { this . listeners [ eventName ] . forEach ( listener => listener . call ( this , $event ) ) ; } public _UNKNOWN_ ( data ) { const event = data . event ; const key = event . keyCode || event . which ; switch ( constants . _UNKNOWN_ [ key ] ) { case constants . _UNKNOWN_ . DELETE : if ( this . _UNKNOWN_ && this . removable ) { const index = this . items . indexOf ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ ( this . _UNKNOWN_ , index ) ; } break ; case constants . _UNKNOWN_ . _UNKNOWN_ : this . _UNKNOWN_ ( data . model , constants . _UNKNOWN_ ) ; break ; case constants . _UNKNOWN_ . _UNKNOWN_ : this . _UNKNOWN_ ( data . model , constants . NEXT ) ; break ; case constants . _UNKNOWN_ . TAB : this . _UNKNOWN_ ( data . model , constants . NEXT ) ; break ; default : return ; } event . preventDefault ( ) ; } public _UNKNOWN_ ( value ) { const control = this . _UNKNOWN_ ( ) ; control . setValue ( value ) ; } private _UNKNOWN_ ( ) { return < FormControl > this . _UNKNOWN_ . value ; } public focus ( _UNKNOWN_ = false , _UNKNOWN_ = false ) { if ( this . _UNKNOWN_ . getState ( 's' ) ) { return ; } this . _UNKNOWN_ ( undefined , false ) ; if ( _UNKNOWN_ ) { this . _UNKNOWN_ . focus ( ) ; this . onFocus . emit ( this . _UNKNOWN_ ) ; } } public blur ( ) { this . onTouched ( ) ; this . onBlur . emit ( this . _UNKNOWN_ ) ; } public hasErrors ( ) { return this . _UNKNOWN_ && this . _UNKNOWN_ . hasErrors ( ) ; } public _UNKNOWN_ ( ) { return this . _UNKNOWN_ && this . _UNKNOWN_ . _UNKNOWN_ ( ) ; } public _UNKNOWN_ ( ) { const template = this . templates ? this . templates . first : undefined ; const _UNKNOWN_ = this . _UNKNOWN_ && this . _UNKNOWN_ . templates ? this . _UNKNOWN_ . templates . first : undefined ; return Boolean ( template && template !== _UNKNOWN_ ) ; } public get _UNKNOWN_ ( ) : boolean { return this . maxItems !== undefined && this . items . length >= this . maxItems ; } public get _UNKNOWN_ ( ) : string { const form = this . _UNKNOWN_ . value ; return form ? form . value : 's' ; } public _UNKNOWN_ ( event , tag , index ) { event . stopPropagation ( ) ; const item = { zone : this . _UNKNOWN_ , tag , index } as _UNKNOWN_ ; this . _UNKNOWN_ . _UNKNOWN_ ( this ) ; this . _UNKNOWN_ . _UNKNOWN_ ( event , item ) ; this . _UNKNOWN_ . setState ( { dragging : true , index } ) ; } public onDragOver ( event , index ? ) { this . _UNKNOWN_ . setState ( { _UNKNOWN_ : true } ) ; this . _UNKNOWN_ . _UNKNOWN_ ( this ) ; event . preventDefault ( ) ; } public _UNKNOWN_ ( event , index ? ) { const item = this . _UNKNOWN_ . _UNKNOWN_ ( event ) ; if ( item . zone !== this . _UNKNOWN_ ) { return ; } this . _UNKNOWN_ . _UNKNOWN_ ( item . tag , item . index , index ) ; event . preventDefault ( ) ; event . stopPropagation ( ) ; } public _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ . receiver === this ; const _UNKNOWN_ = this . _UNKNOWN_ . getState ( 's' ) ; return Boolean ( _UNKNOWN_ && _UNKNOWN_ ) ; } public _UNKNOWN_ ( _UNKNOWN_ , index ) { this . items [ index ] = _UNKNOWN_ ; this . blur ( ) ; } public _UNKNOWN_ ( item ) { return item [ this . _UNKNOWN_ ] ; } private _UNKNOWN_ ( tag , _UNKNOWN_ = false ) { const selectedItem = this . _UNKNOWN_ ? this . _UNKNOWN_ . selectedItem : undefined ; if ( selectedItem && ! _UNKNOWN_ ) { return false ; } const _UNKNOWN_ = this . _UNKNOWN_ ( tag , _UNKNOWN_ ) ; if ( ! this . _UNKNOWN_ && _UNKNOWN_ && this . _UNKNOWN_ ) { const model = this . tags . find ( tag => { return this . _UNKNOWN_ ( tag . model ) === this . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; if ( model ) { model . _UNKNOWN_ ( ) ; } } const _UNKNOWN_ = _UNKNOWN_ && this . _UNKNOWN_ ; const _UNKNOWN_ = [ ! _UNKNOWN_ || this . _UNKNOWN_ === true , this . _UNKNOWN_ === false , ( ( _UNKNOWN_ ) || this . _UNKNOWN_ === false ) ] ; return _UNKNOWN_ . filter ( item => item ) . length === _UNKNOWN_ . length ; } private _UNKNOWN_ ( item , direction ) { const isLast = this . tags . last . model === item ; const isFirst = this . tags . first . model === item ; const _UNKNOWN_ = ( direction === constants . NEXT && isLast ) || ( direction === constants . _UNKNOWN_ && isFirst ) ; if ( _UNKNOWN_ ) { this . focus ( true ) ; return ; } const offset = direction === constants . NEXT ? 0 : - 0 ; const index = this . _UNKNOWN_ ( item ) + offset ; const tag = this . _UNKNOWN_ ( index ) ; return tag . select . call ( tag ) ; } private _UNKNOWN_ ( item ) { const tags = this . tags . toArray ( ) ; return tags . findIndex ( tag => tag . model === item ) ; } private _UNKNOWN_ ( index ) { const tags = this . tags . toArray ( ) ; return tags [ index ] ; } private removeItem ( tag , index ) { this . items = this . _UNKNOWN_ ( index ) ; if ( this . _UNKNOWN_ === tag ) { this . _UNKNOWN_ ( undefined , false ) ; } this . focus ( true , false ) ; this . onRemove . emit ( tag ) ; } private addItem ( _UNKNOWN_ = false , item , index ? ) { const model = this . _UNKNOWN_ ( item ) ; const reset = ( ) : void => { this . _UNKNOWN_ ( 's' ) ; this . focus ( true , false ) ; } ; const _UNKNOWN_ = ( tag ) : boolean => { const isValid = this . _UNKNOWN_ ( tag , _UNKNOWN_ ) && this . _UNKNOWN_ . form . valid ; if ( ! isValid ) { this . _UNKNOWN_ . emit ( tag ) ; } return isValid ; } ; const _UNKNOWN_ = ( tag ) : void => { this . _UNKNOWN_ ( tag , index ) ; this . onAdd . emit ( tag ) ; if ( ! this . _UNKNOWN_ ) { return ; } this . _UNKNOWN_ . hide ( ) ; this . _UNKNOWN_ . _UNKNOWN_ ? this . _UNKNOWN_ . show ( ) : undefined ; } ; of ( model ) . pipe ( first ( ) , filter ( ( ) => model . trim ( ) !== 's' ) , map ( ( ) => item ) , map ( this . _UNKNOWN_ ) , filter ( _UNKNOWN_ ) ) . subscribe ( _UNKNOWN_ , undefined , reset ) ; } private _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ . length > 0 || this . _UNKNOWN_ . length > 0 ; const listener = ( $event ) => { const _UNKNOWN_ = this . _UNKNOWN_ . indexOf ( $event . keyCode ) >= 0 ; const hasKey = this . _UNKNOWN_ . indexOf ( $event . key ) >= 0 ; if ( _UNKNOWN_ || hasKey ) { $event . preventDefault ( ) ; this . _UNKNOWN_ ( false , this . _UNKNOWN_ ) ; } } ; listen . call ( this , constants . _UNKNOWN_ , listener , _UNKNOWN_ ) ; } private _UNKNOWN_ ( ) { const listener = ( $event ) => { const _UNKNOWN_ = $event . keyCode === 0 || $event . keyCode === 0 ; if ( _UNKNOWN_ && ! this . _UNKNOWN_ && this . items . length ) { this . tags . last . select . call ( this . tags . last ) ; } } ; listen . call ( this , constants . _UNKNOWN_ , listener ) ; } private _UNKNOWN_ ( ) { this . _UNKNOWN_ . onKeydown . subscribe ( event => { this . fireEvents ( 's' , event ) ; if ( event . key === 's' && this . _UNKNOWN_ === 's' ) { event . preventDefault ( ) ; } } ) ; } private _UNKNOWN_ ( ) { const input = this . _UNKNOWN_ . input . nativeElement ; this . renderer . listen ( input , 's' , this . _UNKNOWN_ ) ; } private _UNKNOWN_ ( ) { this . _UNKNOWN_ . form . valueChanges . pipe ( debounceTime ( this . _UNKNOWN_ ) , map ( ( ) => this . _UNKNOWN_ ) ) . subscribe ( ( value ) => this . _UNKNOWN_ . emit ( value ) ) ; } private _UNKNOWN_ ( ) { const _UNKNOWN_ = ( ) : boolean => { return ! ( this . _UNKNOWN_ && this . _UNKNOWN_ . isVisible ) && ! ! this . _UNKNOWN_ ; } ; this . _UNKNOWN_ . onBlur . pipe ( filter ( _UNKNOWN_ ) ) . subscribe ( ( ) => { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( false , this . _UNKNOWN_ ) ; } this . _UNKNOWN_ ( 's' ) ; } ) ; } private _UNKNOWN_ ( tag , _UNKNOWN_ ) : TagModel | undefined { const _UNKNOWN_ = _UNKNOWN_ ? this . _UNKNOWN_ . _UNKNOWN_ : this . _UNKNOWN_ ; const id = tag [ _UNKNOWN_ ] ; return this . items . find ( item => this . _UNKNOWN_ ( item ) === id ) ; } private _UNKNOWN_ = ( data ) : void => { const text = data . _UNKNOWN_ . getData ( 's' ) ; text . split ( this . _UNKNOWN_ ) . map ( item => this . _UNKNOWN_ ( item ) ) . forEach ( item => this . _UNKNOWN_ ( false , item ) ) ; this . _UNKNOWN_ . emit ( text ) ; setTimeout ( ( ) => this . _UNKNOWN_ ( 's' ) , 0 ) ; } private _UNKNOWN_ ( ) { this . _UNKNOWN_ = { value : 's' , params : { ... this . _UNKNOWN_ } } ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $void$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $Type$ O $any$ O O $any$ O O O O $any$ O $complex$ O $any$ O O O $any$ O O $string$ O O O $complex$ O O $complex$ O O $string[]$ O O O O O $string$ O O O $any[]$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $string[]$ O O O O O O $any$ O O O $any$ O O $any$ O O O $number[]$ O O O O O O $any$ O O O $any$ O O $any$ O O O $string$ O O O O $any$ O O O $any$ O O $any$ O O O $string$ O O O O $any$ O O O $any$ O O $any$ O O O $number$ O O O O $any$ O O O $any$ O O $any$ O O O $any[]$ O $any$ O O O O $any$ O O O $any$ O O $any$ O O O $any[]$ O $any$ O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $complex$ O O O $string$ O O O O O O $any$ O O O $any$ O O $any$ O O O $string$ O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $string$ O O O O $any$ O O O $any$ O O $any$ O O O $string$ O O O O $any$ O O O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $boolean$ O O O O $any$ O O O $any$ O O $any$ O O O $string$ O O O O $any$ O O O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O O $any$ O O $any$ O O O $string$ O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $boolean$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $boolean$ O O O O O $string$ O $string$ O O O O $string$ O $string$ O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $any$ O O O O O O O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O $string$ O O O O $any$ O O O O O $string$ O O O O O O O O $string$ O O O O O O O O O $complex$ O O $string$ O O O $object$ O O O O O O O O $Renderer2$ O O O $any$ O O O O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O O O O $void$ O O O O O O O O $boolean$ O O O $boolean$ O O O O $void$ O O O O O O O O $boolean$ O O O O $void$ O O O O O O O O $boolean$ O O O O $any$ O $void$ O O O O O O $void$ O O O O $boolean$ O O O $number$ O $undefined$ O O O $any$ O O O $any$ O $number$ O O O $number$ O O O $boolean$ O O O O $number$ O O O $any$ O $number$ O $Console$ O $void$ O $any$ O O O O O O O $boolean$ O O O $any$ O O O O O $boolean$ O O O $void$ O O O O O $void$ O $any$ O $number$ O O O $void$ O O $any$ O O O O $void$ O $any$ O $number$ O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $void$ O O $void$ O $any$ O O O O $void$ O $boolean$ O $any$ O $number$ $number$ O O O O O $any$ O O O O O O $void$ O O $any$ O O O O O O $void$ O $boolean$ O $any$ O $number$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $void$ O O $void$ O $any$ O O O O $void$ O O $any$ O $number$ O O O $any$ O $number$ O O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O O O $string$ O O $any$ O O O $any$ O O O $any$ O $any$ O O O $number$ O O $any$ O O $any$ O $any$ O $number$ O $any$ O $number$ O O O O O $any$ O O $any$ O O $any$ O O O $any$ O O $any$ O $string$ O O $any$ O O O O $any$ O O O $string$ O $string$ O O O $any$ O $string$ O O O O O O O O $any$ O O O $any$ O O O O O O O $string$ O O O O $any$ O $any$ O $any$ O O O $string$ O O $any$ O O O O $string$ O O O O $any$ O $any$ O $any$ O O O $string$ O O $any$ O O O O $void$ O $any$ O $any$ O O O $boolean$ O O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O O O $void$ O $string$ O $any$ O O O O O $complex$ O $string$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O $any$ O $complex$ O $string$ O O O O O $any$ O O O $any$ O O O $number$ O O O $any$ O $number$ O O O $any$ O O O O $void$ O O O $any$ O $number$ O O O O O O $any$ O $complex$ O $string$ O O O $void$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $complex$ O $string$ O O O $void$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $complex$ O $string$ O O O $void$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O O O $void$ O $string$ O O O $any$ O O O $any$ O O O $any$ O $any$ O $string$ O O O O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $void$ O $boolean$ O O O $boolean$ O O O O O O O O $any$ O $complex$ O O O O O O O O O O $void$ O $undefined$ O O O O O O $boolean$ O O O O $any$ O $void$ O O O O O $any$ O $any$ O O O $string$ O O O O O $void$ O O O O O $void$ O O O O O $any$ O $any$ O O O $string$ O O O O $boolean$ O O O O O O $any$ O O O $any$ O $boolean$ O O O O O $boolean$ O O O O O O $any$ O O O $any$ O $boolean$ O O O O O $boolean$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O $undefined$ O O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $undefined$ O O $BooleanConstructor$ O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O O O $number$ O $undefined$ O O O $any$ O $number$ O O O $number$ O O O O $string$ O O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $void$ O $DragEvent$ O $any$ O $number$ O O $DragEvent$ O $void$ O O O O $any$ O O $string$ O O O $string$ O $any$ O $number$ O O $any$ O O O $any$ O $void$ O O O O O O $any$ O $void$ O $DragEvent$ O $any$ O O O O $any$ O $void$ O O $true$ O O O $number$ O O O O O $void$ O $DragEvent$ O $number$ $number$ O O O O $any$ O $void$ O O $true$ O O O O O O O $any$ O $void$ O O O O $DragEvent$ O $void$ O O O O O $void$ O $DragEvent$ O $number$ $number$ O O O $any$ O O O $any$ O $any$ O $DragEvent$ O O O O $any$ O $string$ O O O $string$ O O O O O O O $any$ O $void$ O $any$ O $any$ O $any$ O $number$ O $number$ O O $DragEvent$ O $void$ O O O $DragEvent$ O $void$ O O O O O $boolean$ O O O O $boolean$ O O O $any$ O $any$ O O O O $complex$ O O O $any$ O $complex$ O O O O O $BooleanConstructor$ O $boolean$ O $complex$ O O O O $void$ O $any$ O $number$ O O O O $any$ O $number$ O O $any$ O O O $void$ O O O O O $string$ O $any$ O O O $any$ O O O $string$ O O O O $boolean$ O $any$ O $boolean$ O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $undefined$ O O O $any$ O O $boolean$ O O O O O O O $any$ O O O $any$ O $any$ O $boolean$ O O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $string$ O $any$ O $any$ O O O O $string$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O $any$ O $boolean$ O O O $any$ O O $any[]$ O O O $any$ O O O $any$ O O O O O $boolean$ O O O O O $any$ O O O O $any$ O O O O O O $any[]$ O $complex$ O $any$ O $any$ O O $number$ O $any[]$ O $number$ O O O $void$ O $any$ O $string$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O $string$ O $any$ O O O $boolean$ O O O $string$ O $any$ O O O $boolean$ O O O O $boolean$ O O O O $void$ O O O O O O O O O O $string$ O $any$ O O O O O O O O O $number$ O O O $number$ O $any$ O O O O O $any$ O O O $any$ O $number$ O O O $any$ O $any$ O $any$ O $any$ O O O O $number$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $number$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $number$ O O O O $void$ O $any$ O $number$ O O O O $any$ O O O $any$ O $number$ O O O O O O $any$ O $any$ O O O O $void$ O $undefined$ O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O O O O $void$ O $boolean$ O O O $any$ O $number$ $number$ O O O $string$ O O O $string$ O $any$ O O O $void$ O O O O O O O O O $void$ O O O O O O $void$ O O O O O O O O O $boolean$ O O $any$ O O O O O O $any$ O O O $boolean$ O $any$ O $boolean$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $void$ O O $any$ O O O O O O O $void$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O $void$ O O O O O $any$ O $any$ O O O $any$ O $void$ O O O $undefined$ O O O $any$ O $string$ O O $any$ O $any$ O O O $any$ O O O O $string$ O $string$ O O O O O O $any$ O O O O $any$ O O $any$ O O O $any$ O O $any$ O $boolean$ O O O $any$ O $void$ O $undefined$ O $void$ O O O O $void$ O O O O $boolean$ O O O $number[]$ O $number$ O O O O O $string[]$ O $number$ O O O O $void$ O O $any$ O O O O $boolean$ O O O $number[]$ O $number$ O $any$ O $any$ O O O O O $boolean$ O O O $string[]$ O $number$ O $any$ O $any$ O O O O O O $boolean$ O $boolean$ O O $any$ O $any$ O O O O O $void$ O O O O O $string$ O O O O O $void$ O $any$ O O O $any$ O O O $void$ O $boolean$ O O O O $void$ O O O O $void$ O O $any$ O O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $boolean$ O O O O $string$ O O O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $void$ O $any$ O O O $any$ O O O $void$ O O O O $void$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O O $any$ O O O O $any$ O $any$ O O O O O $string$ O O O O $any$ O $any$ O O O O O O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $void$ O O O O $void$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O O $string$ O O O $any$ O O $string$ O O O O $any$ O $any$ O $string$ O O O O O $void$ O O O O $boolean$ O O O O O O O O O O O O $any$ O O O $any$ O $boolean$ O O O O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O $any$ O O O O O O O O O $boolean$ O O O O $void$ O O O O O $string$ O O O O O $void$ O O O O O O O O O $any$ O $any$ O $boolean$ O O $any$ O O O O $any$ O $boolean$ O O O $any$ O $any$ O O O $string$ O O $any$ O $any$ O $any$ O O O O O $any$ O $complex$ O $any$ O O O $string$ O $any$ O O $any$ O O O O $void$ O O $any$ O O O O O O $string$ O $any$ O $DataTransfer$ O $string$ O O O O $string$ O $complex$ O O O $any$ O O $U[]$ O $string$ O O O $any$ O $string$ O O O $void$ O $any$ O O O $void$ O O O $any$ O O O O O $any$ O $any$ O $string$ O O $number$ O O O O O O $void$ O O O O O O O O O $void$ O O O O O $complex$ O O $string$ O O O $any$ O O O O O $any$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { TagModel } from 's' ; import { Injectable } from 's' ; export declare interface _UNKNOWN_ { index : number ; tag : TagModel ; zone : string ; } import { _UNKNOWN_ } from 's' ; export declare interface State { dragging : boolean , _UNKNOWN_ : boolean , index : number | undefined } export declare type _UNKNOWN_ = keyof State ; @ Injectable ( ) export class _UNKNOWN_ { public sender : _UNKNOWN_ ; public receiver : _UNKNOWN_ ; public state : State = { dragging : false , _UNKNOWN_ : false , index : undefined } ; public _UNKNOWN_ ( event , tag ) { event . dataTransfer . setData ( _UNKNOWN_ , JSON . stringify ( tag ) ) ; } public _UNKNOWN_ ( event ) { const data = event . dataTransfer . getData ( _UNKNOWN_ ) ; return JSON . parse ( data ) as _UNKNOWN_ ; } public _UNKNOWN_ ( sender ) { this . sender = sender ; } public _UNKNOWN_ ( receiver ) { this . receiver = receiver ; } public _UNKNOWN_ ( tag , _UNKNOWN_ , _UNKNOWN_ ? ) { this . onDragEnd ( ) ; this . sender . _UNKNOWN_ ( tag , _UNKNOWN_ ) ; this . receiver . _UNKNOWN_ ( false , tag , _UNKNOWN_ ) ; } public setState ( state : { [ K in _UNKNOWN_ ] ? : State [ K ] } ) { this . state = { ... this . state , ... state } ; } public getState ( key ? ) : State | State [ _UNKNOWN_ ] { return key ? this . state [ key ] : this . state ; } public onDragEnd ( ) { this . setState ( { dragging : false , _UNKNOWN_ : false , index : undefined } ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O $number$ O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $number$ O O O O O O O O $any$ O O $any$ O O $any$ O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $State$ O $any$ O O $false$ O O O $false$ O O O $undefined$ O $undefined$ O O O $void$ O $DragEvent$ O $any$ O O $DragEvent$ O $DataTransfer$ O $void$ O O O $JSON$ O $complex$ O $any$ O O O O O $any$ O $DragEvent$ O O O $string$ O $DragEvent$ O $DataTransfer$ O $string$ O O O O O $JSON$ O $any$ O $string$ O O $any$ O O O $void$ O $any$ O O O O $any$ O $any$ O O O $void$ O $any$ O O O O $any$ O $any$ O O O $void$ O $any$ O $number$ O $number$ $number$ O O O O $void$ O O O O O $any$ O $void$ O $any$ O $number$ O O O O $any$ O $void$ O O O $any$ O $number$ O O O O $void$ O $complex$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $State$ O O O O O $State$ O O $complex$ O O O O $complex$ O O $any$ O O $any$ O $any$ O $any$ O O O O O O O $State$ O O O O O O $State$ O O O $void$ O O O O O $void$ O O $false$ O O O $false$ O O O $undefined$ O $undefined$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { ReactiveFormsModule , FormsModule , _UNKNOWN_ } from 's' ; import { CommonModule } from 's' ; import { 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , Options } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = new _UNKNOWN_ ( ) ; @ NgModule ( { imports : [ CommonModule , ReactiveFormsModule , FormsModule , 0 ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , providers : [ _UNKNOWN_ , { provide : _UNKNOWN_ , useValue : false } , ] } ) export class _UNKNOWN_ { public static _UNKNOWN_ ( options ) { _UNKNOWN_ . setOptions ( options ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O $any$ O $any$ O $boolean$ O O O O O O O O O $any$ O O O $void$ O $Options$ O O $any$ O $void$ O $Options$ O O O O O
<s> export { _UNKNOWN_ } from 's' ; </s>	O O O $any$ O O O O O
<s> export { _UNKNOWN_ } from 's' ; </s>	O O O $any$ O O O O O
<s> export { _UNKNOWN_ } from 's' ; </s>	O O O $any$ O O O O O
<s> export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; </s>	O O O $any$ O O O O O O $any$ O O O O O
<s> export { _UNKNOWN_ } from 's' ; </s>	O O O $any$ O O O O O
<s> export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O
<s> export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O
<s> import { Component } from 's' ; import { FormBuilder , FormControl , FormGroup } from 's' ; import { Http , Response } from 's' ; import { Observable } from 's' ; import { of } from 's' ; import { filter , map } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' } ) export class Home { form : FormGroup ; constructor ( private http ) { this . form = new FormBuilder ( ) . group ( { chips : [ [ 's' ] , [ ] ] } ) ; } disabled = true ; items = [ 's' , 's' ] ; _UNKNOWN_ = 's' ; _UNKNOWN_ = [ { id : 0 , name : 's' , readonly : true } , { id : 0 , name : 's' } ] ; _UNKNOWN_ = [ 's' , 's' , 's' ] ; _UNKNOWN_ = [ { value : 's' , id : 0 , extra : 0 } , { value : 's' , id : 0 , extra : 0 } , 's' ] ; _UNKNOWN_ = [ 's' , 's' ] ; _UNKNOWN_ = [ { display : 's' , value : 's' } , { display : 's' , value : 's' } ] ; _UNKNOWN_ = [ 's' , 's' ] ; public _UNKNOWN_ = ( text ) : Observable < Response > => { const url = `template` ; return this . http . get ( url ) . pipe ( map ( data => data . json ( ) . items . map ( item => item . _UNKNOWN_ ) ) ) ; } ; public _UNKNOWN_ = ( text ) : Observable < string [ ] > => { return of ( [ 's' , 's' , 's' ] ) ; } ; public options = { readonly : undefined , placeholder : 's' } ; public onAdd ( item ) { console . log ( 's' + item ) ; } public onRemove ( item ) { console . log ( 's' + item ) ; } public onSelect ( item ) { console . log ( 's' + item ) ; } public onFocus ( item ) { console . log ( 's' + item ) ; } public _UNKNOWN_ ( text ) { console . log ( 's' + text ) ; } public onBlur ( item ) { console . log ( 's' + item ) ; } public _UNKNOWN_ ( item ) { console . log ( 's' + item ) ; } public _UNKNOWN_ ( item ) { console . log ( 's' + item ) ; } public transform ( value ) < object > { const item = { display : `template` , value : `template` } ; return of ( item ) ; } private _UNKNOWN_ ( control ) { if ( control . value . charAt ( 0 ) !== 's' ) { return { 's' : true } ; } return null ; } private _UNKNOWN_ ( control ) { if ( control . value . charAt ( control . value . length - 0 ) !== 's' ) { return { 's' : true } ; } return null ; } private _UNKNOWN_ ( control ) < any > { return new Promise ( resolve => { const value = control . value ; const result = isNaN ( value ) ? { _UNKNOWN_ : true } : null ; setTimeout ( ( ) => { resolve ( result ) ; } , 0 ) ; } ) ; } public _UNKNOWN_ = { _UNKNOWN_ : 's' } ; public validators = [ this . _UNKNOWN_ , this . _UNKNOWN_ ] ; public _UNKNOWN_ = [ this . _UNKNOWN_ ] ; public errorMessages = { 's' : 's' , 's' : 's' } ; public _UNKNOWN_ ( tag ) < any > { const confirm = window . confirm ( 's' ) ; return of ( tag ) . pipe ( filter ( ( ) => confirm ) ) ; } public _UNKNOWN_ ( tag ) < any > { const confirm = window . confirm ( 's' ) ; return of ( tag ) . pipe ( filter ( ( ) => confirm ) ) ; } public _UNKNOWN_ ( tag ) < any > { const confirm = window . confirm ( 's' ) ; return of ( tag ) . pipe ( filter ( ( ) => confirm ) ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $Http$ O O O O $any$ O O $any$ O O O $any$ O O $string[][]$ O O O O O O O O O O O O O $boolean$ O O O $string[]$ O O O O O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O $boolean$ O O O O O $number$ O O O $string$ O O O O O $string[]$ O O O O O O O O O $complex$ O O O $string$ O O O $number$ O O O $number$ O O O O O $string$ O O O $number$ O O O $number$ O O O O O O O $string[]$ O O O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string[]$ O O O O O O O O $any$ O O $string$ O O $any$ O $any$ O O O O $string$ O O O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $string$ O O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O $complex$ O O $undefined$ O $undefined$ O $string$ O O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O $Observable$ O $string$ O O O O O O $complex$ O O $string$ O O O $string$ O O O O O $any$ O $complex$ O O O O $complex$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O $complex$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O $Promise$ O $any$ O O O O O O O $PromiseConstructor$ O $void$ O O O $any$ O $any$ O $any$ O O $any$ O $boolean$ O $any$ O O O $boolean$ O O O O O O $number$ O O O O O $void$ O $any$ O O O O O O O O O O O O $complex$ O O $string$ O O O O O $complex$ O O O O $complex$ O O O $complex$ O O O $any$ O O O O $Promise<any>$ O O O $complex$ O O O O O O O O O O O O $Observable$ O $any$ O O O O O O $boolean$ O $complex$ O $boolean)$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O $boolean$ O O O O O $Observable$ O $any$ O O O O O O $boolean$ O $complex$ O $boolean)$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O $boolean$ O O O O O $Observable$ O $any$ O O O O O O $boolean$ O $complex$ O $boolean)$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O $boolean$ O O O O O O
<s> import { animations } from 's' ; import { NgModule } from 's' ; import { platformBrowserDynamic } from 's' ; import { BrowserModule } from 's' ; import { FormsModule , ReactiveFormsModule } from 's' ; import { HttpModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { Home } from 's' ; import { CommonModule } from 's' ; import { BrowserAnimationsModule } from 's' ; _UNKNOWN_ . _UNKNOWN_ ( { _UNKNOWN_ : { placeholder : 's' } } ) ; @ NgModule ( { imports : [ BrowserModule , BrowserAnimationsModule , CommonModule , HttpModule , FormsModule , ReactiveFormsModule , _UNKNOWN_ ] , declarations : [ Home ] , bootstrap : [ Home ] , entryComponents : [ Home ] } ) export class AppModule { } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ; </s>	O O O $any[]$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $void$ O O $complex$ O O $string$ O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O O O O $any$ O O $any$ O O O $any$ O $any$ O O O
<s> import 's' ; require ( 's' ) ; require ( 's' ) ; </s>	O O O O $any$ O O O O $any$ O O O O O
<s> import { Component } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { CommonModule } from 's' ; import { Validators , FormControl } from 's' ; import { Observable } from 's' ; import { of } from 's' ; import { _UNKNOWN_ } from 's' ; function getItems ( ) { return [ 's' , 's' ] ; } const validators = [ Validators . minLength ( 0 ) , ( control ) => { if ( control . value . charAt ( 0 ) !== 's' ) { return { 's' : true } ; } return null ; } ] ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; onAdd ( ) { } onRemove ( ) { } public validators : any = validators ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = [ { value : 0 , display : 's' } , { value : 0 , display : 's' } ] ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = [ { id : 0 , name : 's' } , { id : 0 , name : 's' } ] ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; validators : any = validators ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; _UNKNOWN_ ( value ) < object > { const item = { display : `template` , value : `template` } ; return of ( item ) ; } } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { public items = getItems ( ) ; public _UNKNOWN_ ( tag ) < any > { return of ( { } ) ; } public _UNKNOWN_ ( tag ) < any > { return of ( { } ) ; } } const _UNKNOWN_ = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] ; @ NgModule ( { imports : [ CommonModule , FormsModule , _UNKNOWN_ ] , declarations : _UNKNOWN_ , exports : _UNKNOWN_ } ) export class TestModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $string[]$ O O O O O O O O O O O O $any[]$ O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O $void$ O O O O $void$ O O O O O $any$ O O O $any[]$ O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $complex$ O O O $number$ O O O $string$ O O O O O $number$ O O O $string$ O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $complex$ O O O $number$ O O O $string$ O O O O O $number$ O O O $string$ O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O $any$ O O O $any[]$ O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O $Observable$ O $string$ O O O O O O $complex$ O O $string$ O O O $string$ O O O O O $any$ O $complex$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $string[]$ O $string[]$ O O O O $Observable$ O $any$ O O O O O O $any$ O O O O O O O $Observable$ O $any$ O O O O O O $any$ O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $complex$ O $complex$ O $complex$ O $complex$ O O O O $any$ O O O
<s> import { fakeAsync , ComponentFixture , async , tick , TestBed , _UNKNOWN_ } from 's' ; import { By } from 's' ; import { BrowserModule } from 's' ; import { Subject } from 's' ; import { BrowserAnimationsModule } from 's' ; import { TagModel } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , TestModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { const match = jasmine . objectContaining ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ ] , imports : [ BrowserAnimationsModule , TestModule ] } ) ; } ) ; beforeEach ( async ( ( ) => { TestBed . compileComponents ( ) ; } ) ) ; function getComponent ( fixture ) { fixture . detectChanges ( ) ; tick ( ) ; fixture . detectChanges ( ) ; tick ( ) ; return fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) . componentInstance ; } describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; expect ( component . items . length ) . toEqual ( 0 ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; expect ( component . items . length ) . toEqual ( 0 ) ; expect ( component . _UNKNOWN_ . input . nativeElement . getAttribute ( 's' ) ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = < _UNKNOWN_ > getComponent ( fixture ) ; const onTouched = jasmine . createSpy ( 's' ) ; component . registerOnTouched ( onTouched ) ; component . blur ( ) ; expect ( onTouched ) . toHaveBeenCalled ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; const value = 's' ; component . _UNKNOWN_ ( value ) ; expect ( component . _UNKNOWN_ . form . valid ) . toEqual ( true ) ; component . _UNKNOWN_ ( false , value ) ; tick ( ) ; fixture . detectChanges ( ) ; expect ( component . _UNKNOWN_ . form . controls . item . value ) . toEqual ( 's' ) ; expect ( fixture . componentInstance . items . length ) . toEqual ( 0 ) ; expect ( component . items . length ) . toEqual ( 0 ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; const value = 's' ; component . _UNKNOWN_ ( value ) ; component . _UNKNOWN_ ( false , value ) ; fixture . detectChanges ( ) ; expect ( fixture . componentInstance . items . length ) . toEqual ( 0 ) ; expect ( component . items . length ) . toEqual ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const itemName = 's' ; fakeAsync ( ( ) => { const component = getComponent ( fixture ) ; component . _UNKNOWN_ . form . get ( 's' ) . setValue ( itemName ) ; component . onAdd . subscribe ( item => { expect ( item ) . toEqual ( itemName ) ; } ) ; component . _UNKNOWN_ ( ) ; tick ( ) ; _UNKNOWN_ ( ) ; } ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; component . _UNKNOWN_ . form . get ( 's' ) . setValue ( 's' ) ; component . _UNKNOWN_ ( ) ; expect ( component . items . length ) . toEqual ( 0 ) ; tick ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { let fixture < _UNKNOWN_ > ; let tagName ; let item ; let component ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; tagName = 's' ; } ) ; it ( 's' , fakeAsync ( ( ) => { component = getComponent ( fixture ) ; component . removeItem ( tagName , 0 ) ; fixture . detectChanges ( ) ; expect ( component . items . length ) . toEqual ( 0 ) ; expect ( component . _UNKNOWN_ . _UNKNOWN_ ( ) ) . toEqual ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { component = getComponent ( fixture ) ; component . onRemove . subscribe ( tag => { expect ( tag ) . toEqual ( tagName ) ; } ) ; component . removeItem ( tagName ) ; tick ( ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { component = getComponent ( fixture ) ; component . removeItem ( tagName , 0 ) ; expect ( component . _UNKNOWN_ ) . toBe ( undefined ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; const value = 's' ; component . _UNKNOWN_ ( value ) ; expect ( component . _UNKNOWN_ . form . valid ) . toBe ( false ) ; component . _UNKNOWN_ ( false , value ) ; fixture . detectChanges ( ) ; tick ( ) ; expect ( component . items . length ) . toEqual ( 0 ) ; const invalid = 's' ; component . _UNKNOWN_ ( 's' ) ; component . _UNKNOWN_ ( false , invalid ) ; fixture . detectChanges ( ) ; tick ( ) ; expect ( component . _UNKNOWN_ . form . valid ) . toBe ( false ) ; const valid = 's' ; component . _UNKNOWN_ ( valid ) ; expect ( component . _UNKNOWN_ . form . valid ) . toBe ( true ) ; component . _UNKNOWN_ ( false , valid ) ; fixture . detectChanges ( ) ; tick ( ) ; expect ( component . items . length ) . toEqual ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; const value = 's' ; component . _UNKNOWN_ ( value ) ; expect ( component . _UNKNOWN_ . form . valid ) . toBe ( false ) ; const invalid = 's' ; component . _UNKNOWN_ ( invalid ) ; expect ( component . _UNKNOWN_ . form . valid ) . toBe ( false ) ; const valid = 's' ; component . _UNKNOWN_ ( valid ) ; expect ( component . _UNKNOWN_ . form . valid ) . toBe ( true ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; component . _UNKNOWN_ ( 's' ) ; component . _UNKNOWN_ ( false , 's' ) ; fixture . detectChanges ( ) ; tick ( ) ; expect ( component . items [ 0 ] ) . toEqual ( match ( { display : 's' , value : 's' } ) ) ; expect ( component . items . length ) . toEqual ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { let _UNKNOWN_ = new Event ( 's' ) , _UNKNOWN_ = new Event ( 's' ) , fixture < _UNKNOWN_ > , component ; _UNKNOWN_ [ 's' ] = 0 ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { component = getComponent ( fixture ) ; expect ( component . _UNKNOWN_ ) . toEqual ( undefined ) ; component . _UNKNOWN_ . input . nativeElement . dispatchEvent ( _UNKNOWN_ ) ; expect ( component . _UNKNOWN_ ) . toEqual ( 's' ) ; _UNKNOWN_ [ 's' ] = 0 ; component . tags . last . element . nativeElement . dispatchEvent ( _UNKNOWN_ ) ; expect ( component . _UNKNOWN_ ) . toEqual ( undefined ) ; expect ( component . _UNKNOWN_ . _UNKNOWN_ ( ) ) . toEqual ( true ) ; _UNKNOWN_ [ 's' ] = 0 ; component . _UNKNOWN_ . input . nativeElement . dispatchEvent ( _UNKNOWN_ ) ; expect ( component . _UNKNOWN_ ) . toEqual ( 's' ) ; component . tags . last . element . nativeElement . dispatchEvent ( _UNKNOWN_ ) ; expect ( component . items . length ) . toEqual ( 0 ) ; expect ( component . _UNKNOWN_ ) . toBe ( undefined ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { component = getComponent ( fixture ) ; _UNKNOWN_ [ 's' ] = 0 ; component . _UNKNOWN_ . input . nativeElement . dispatchEvent ( _UNKNOWN_ ) ; expect ( component . _UNKNOWN_ ) . toEqual ( 's' ) ; component . tags . last . element . nativeElement . dispatchEvent ( _UNKNOWN_ ) ; expect ( component . _UNKNOWN_ ) . toEqual ( 's' ) ; _UNKNOWN_ [ 's' ] = 0 ; component . tags . first . element . nativeElement . dispatchEvent ( _UNKNOWN_ ) ; expect ( component . _UNKNOWN_ ) . toEqual ( 's' ) ; _UNKNOWN_ [ 's' ] = 0 ; component . tags . last . element . nativeElement . dispatchEvent ( _UNKNOWN_ ) ; expect ( component . _UNKNOWN_ ) . toEqual ( undefined ) ; expect ( component . _UNKNOWN_ . _UNKNOWN_ ( ) ) . toEqual ( true ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { component = getComponent ( fixture ) ; _UNKNOWN_ [ 's' ] = 0 ; component . tags . first . element . nativeElement . dispatchEvent ( _UNKNOWN_ ) ; expect ( component . _UNKNOWN_ ) . toEqual ( 's' ) ; component . tags . last . element . nativeElement . dispatchEvent ( _UNKNOWN_ ) ; expect ( component . _UNKNOWN_ ) . toEqual ( undefined ) ; expect ( component . _UNKNOWN_ . _UNKNOWN_ ( ) ) . toEqual ( true ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; expect ( component . items . length ) . toEqual ( 0 ) ; expect ( document . querySelectorAll ( 's' ) . length ) . toEqual ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { let _UNKNOWN_ = new Event ( 's' ) ; _UNKNOWN_ [ 's' ] = 0 ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; expect ( component . _UNKNOWN_ . _UNKNOWN_ . length ) . toEqual ( 0 ) ; expect ( document . querySelector ( 's' ) ) . toBeTruthy ( ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; component . _UNKNOWN_ ( 's' ) ; component . _UNKNOWN_ . show ( ) ; fixture . detectChanges ( ) ; tick ( ) ; const _UNKNOWN_ = document . querySelector ( 's' ) ; const items = document . querySelectorAll ( 's' ) ; expect ( _UNKNOWN_ ) . toBeDefined ( ) ; expect ( component . _UNKNOWN_ . items . length ) . toEqual ( 0 ) ; expect ( items . length ) . toEqual ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; component . _UNKNOWN_ ( 's' ) ; component . _UNKNOWN_ . show ( ) ; fixture . detectChanges ( ) ; tick ( ) ; expect ( component . _UNKNOWN_ . items . length ) . toEqual ( 0 ) ; component . _UNKNOWN_ . _UNKNOWN_ . hide ( ) ; component . _UNKNOWN_ ( 's' ) ; component . _UNKNOWN_ . show ( ) ; fixture . detectChanges ( ) ; tick ( ) ; expect ( component . _UNKNOWN_ . items . length ) . toEqual ( 0 ) ; component . _UNKNOWN_ . _UNKNOWN_ . hide ( ) ; component . _UNKNOWN_ ( 's' ) ; component . _UNKNOWN_ . show ( ) ; fixture . detectChanges ( ) ; tick ( ) ; expect ( component . _UNKNOWN_ . items . length ) . toEqual ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; expect ( component . _UNKNOWN_ ) . toBeDefined ( ) ; component . _UNKNOWN_ ( 's' ) ; component . _UNKNOWN_ . show ( ) ; fixture . detectChanges ( ) ; tick ( ) ; const _UNKNOWN_ = component . _UNKNOWN_ . _UNKNOWN_ ; const item = _UNKNOWN_ . menu . items . first ; _UNKNOWN_ . menu . state . _UNKNOWN_ . _UNKNOWN_ . emit ( item ) ; tick ( ) ; expect ( component . items . length ) . toEqual ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; const value = 's' ; component . _UNKNOWN_ ( value ) ; component . _UNKNOWN_ ( false , value ) ; expect ( component . items . length ) . toEqual ( 0 ) ; component . _UNKNOWN_ ( value ) ; component . _UNKNOWN_ ( true , value ) ; expect ( component . items . length ) . toEqual ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; component . _UNKNOWN_ ( { display : 's' , value : 's' } ) ; expect ( component . items [ 0 ] ) . toEqual ( 's' ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; component . _UNKNOWN_ ( 's' ) ; component . _UNKNOWN_ . onBlur . emit ( ) ; expect ( component . items . length ) . toEqual ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { let _UNKNOWN_ = new Event ( 's' ) ; _UNKNOWN_ [ 's' ] = 0 ; const fixture < _UNKNOWN_ > = TestBed . createComponent ( _UNKNOWN_ ) ; const component = getComponent ( fixture ) ; component . _UNKNOWN_ ( 's' ) ; component . _UNKNOWN_ . show ( ) ; fixture . detectChanges ( ) ; tick ( ) ; expect ( component . _UNKNOWN_ . isVisible ) . toEqual ( true ) ; component . _UNKNOWN_ . onBlur . emit ( ) ; expect ( component . items . length ) . toEqual ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { let fixture < _UNKNOWN_ > ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { const component = getComponent ( fixture ) ; const subject = new Subject ( ) ; const tag = component . _UNKNOWN_ ( 's' ) ; component . _UNKNOWN_ = ( ) => { return subject ; } ; component . _UNKNOWN_ ( false , tag ) ; expect ( component . items . length ) . toBe ( 0 ) ; subject . next ( tag ) ; expect ( component . items . length ) . toBe ( 0 ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const component = getComponent ( fixture ) ; const subject = new Subject ( ) ; component . _UNKNOWN_ = ( ) => { return subject ; } ; const tag = component . items [ 0 ] ; component . _UNKNOWN_ ( tag , 0 ) ; expect ( component . items . length ) . toBe ( 0 ) ; subject . next ( tag ) ; expect ( component . items . length ) . toBe ( 0 ) ; } ) ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $undefined[]$ O O O O $any[]$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $void$ O $any$ O O $any$ O $void$ O O O $any$ O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O O $ComponentFixture$ O $any$ O O O $string$ O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $string$ O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $string$ O O O O O $any$ O $any$ O $string$ O O $any$ O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O O $any$ O $undefined$ O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O O $Event$ O O $complex$ O O O O $Event$ O O $complex$ O O O O $ComponentFixture$ O $any$ O O $any$ O $Event$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $undefined$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Event$ O O $any$ O $any$ O $any$ O O $any$ O O O O $Event$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Event$ O O $any$ O $any$ O $any$ O O $any$ O $undefined$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $Event$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $Event$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Event$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $undefined$ O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O $Event$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $Event$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Event$ O O $any$ O $any$ O $any$ O O $any$ O O O O $Event$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Event$ O O $any$ O $any$ O $any$ O O $any$ O O O O $Event$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Event$ O O $any$ O $any$ O $any$ O O $any$ O $undefined$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O $Event$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Event$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Event$ O O $any$ O $any$ O $any$ O O $any$ O $undefined$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $Document$ O O O O O O $number$ O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O O $Event$ O O $complex$ O O O O $Event$ O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $Document$ O O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $Element$ O $Document$ O O O O O O O $NodeListOf<Element>$ O $Document$ O O O O O O $any$ O $Element$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $NodeListOf<Element>$ O $number$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $void$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $number$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $Event$ O O $complex$ O O O O $Event$ O O O O O O O $ComponentFixture$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O $any$ O $any$ O $void$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $boolean$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $number$ O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O O $ComponentFixture$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $void$ O O O $any$ O O $any$ O $any$ O $any$ O $number$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $number$ O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $void$ O $any$ O O O O $any$ O $any$ O $any$ O $number$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $number$ O O $any$ O O O O O O O O O O O O O O O
<s> export { listen } from 's' ; </s>	O O O $void$ O O O O O
<s> export { _UNKNOWN_ } from 's' ; </s>	O O O $any$ O O O O O
<s> export { _UNKNOWN_ , State , _UNKNOWN_ , _UNKNOWN_ } from 's' ; export { Options , _UNKNOWN_ } from 's' ; </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O
<s> import * as constants from 's' ; export { constants } ; export { listen } from 's' ; export { _UNKNOWN_ } from 's' ; export { TagModel , isObject , _UNKNOWN_ } from 's' ; export { _UNKNOWN_ , State , _UNKNOWN_ , _UNKNOWN_ , Options , _UNKNOWN_ } from 's' ; </s>	O O O O $any$ O O O O O $any$ O O O O $void$ O O O O O O $any$ O O O O O O $any$ O $boolean$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let pipe ; beforeEach ( ( ) => { pipe = new _UNKNOWN_ ( ) ; } ) ; it ( 's' , ( ) => { expect ( pipe . transform ( 's' , 's' ) ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { expect ( pipe . transform ( 's' , 's' ) ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { const str = 's' ; expect ( pipe . transform ( str , 's' ) ) . toEqual ( str ) ; } ) ; } ) ; </s>	O O O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O O $any$ O O O O O O O O O O O
<s> export function _UNKNOWN_ ( parentModule , moduleName ) { if ( parentModule ) { throw new Error ( `template` ) ; } } </s>	O O O $void$ O $any$ O $string$ O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O
<s> import { Injectable } from 's' ; import { Observable } from 's' ; import 's' ; let counter = 0 ; @ Injectable ( ) export class UserService { private users = { _UNKNOWN_ : { name : 's' , picture : 's' } , _UNKNOWN_ : { name : 's' , picture : 's' } , _UNKNOWN_ : { name : 's' , picture : 's' } , _UNKNOWN_ : { name : 's' , picture : 's' } , _UNKNOWN_ : { name : 's' , picture : 's' } , _UNKNOWN_ : { name : 's' , picture : 's' } , } ; private _UNKNOWN_ : any [ ] ; constructor ( ) { } getUsers ( ) < any > { return Observable . of ( this . users ) ; } _UNKNOWN_ ( ) < any [ ] > { return Observable . of ( this . _UNKNOWN_ ) ; } getUser ( ) < any > { counter = ( counter + 0 ) % this . _UNKNOWN_ . length ; return Observable . of ( this . _UNKNOWN_ [ counter ] ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O O O $number$ O O O O $any$ O O O O $any$ O O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O $string$ O O O $string$ O O O O O O O $any[]$ O O O O O O O O O O $Observable$ O O O O O O O $any$ O $any$ O O O $complex$ O O O $Observable$ O O O O O O O O O $any$ O $any$ O O O $any[]$ O O O $Observable$ O O O O O O $number$ O O $number$ O O O O O O $any[]$ O $number$ O O $any$ O $any$ O O O $any[]$ O $number$ O O O O O O
<s> import { Injectable } from 's' ; @ Injectable ( ) export class _UNKNOWN_ { private data = [ { title : 's' , months : [ { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , ] , } , { title : 's' , active : true , months : [ { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , ] , } , { title : 's' , months : [ { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : true , _UNKNOWN_ : 's' , cost : 's' } , { month : 's' , delta : 's' , down : false , _UNKNOWN_ : 's' , cost : 's' } , ] , } , ] ; constructor ( ) { } getData ( ) { return this . data ; } } </s>	O O O $any$ O O O O O $any$ O O O O $any$ O O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O O O O O $string$ O O O $boolean$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O O O O O O O O O O O $complex$ O O O O O O $complex$ O O O O
<s> import { Injectable } from 's' ; import { Observable } from 's' ; import { BehaviorSubject } from 's' ; import 's' ; @ Injectable ( ) export class StateService { protected _UNKNOWN_ : any = [ { name : 's' , icon : 's' , id : 's' , selected : true , } , { name : 's' , icon : 's' , id : 's' , } , { name : 's' , icon : 's' , id : 's' , } , ] ; protected _UNKNOWN_ : any = [ { name : 's' , icon : 's' , id : 's' , selected : true , } , { name : 's' , icon : 's' , id : 's' , } , ] ; protected _UNKNOWN_ = new BehaviorSubject ( this . _UNKNOWN_ [ 0 ] ) ; protected _UNKNOWN_ = new BehaviorSubject ( this . _UNKNOWN_ [ 0 ] ) ; _UNKNOWN_ ( state ) { this . _UNKNOWN_ . next ( state ) ; } _UNKNOWN_ ( ) < any [ ] > { return Observable . of ( this . _UNKNOWN_ ) ; } _UNKNOWN_ ( ) < any > { return this . _UNKNOWN_ . asObservable ( ) ; } _UNKNOWN_ ( state ) { this . _UNKNOWN_ . next ( state ) ; } _UNKNOWN_ ( ) < any [ ] > { return Observable . of ( this . _UNKNOWN_ ) ; } _UNKNOWN_ ( ) < any > { return this . _UNKNOWN_ . asObservable ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O O O O $any$ O O $any$ O O O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $any$ O O O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $any$ O O $any$ O O O $any$ O O O O O O $any$ O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $Observable$ O O O O O O O O O $any$ O $any$ O O O $any$ O O O $Observable$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $Observable$ O O O O O O O O O $any$ O $any$ O O O $any$ O O O $Observable$ O O O O O O O O O $any$ O $any$ O O O O O O
<s> import { Injectable } from 's' ; @ Injectable ( ) export class _UNKNOWN_ { data = [ { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { id : 0 , firstName : 's' , lastName : 's' , username : 's' , email : 's' , age : 's' , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } , { 's' : 0 , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 0 , } ] ; getData ( ) { return this . data ; } } </s>	O O O $any$ O O O O O $any$ O O O O $any$ O $complex$ O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $complex$ O O O O O O $complex$ O O O O
<s> import { Injectable } from 's' ; import 's' ; export class _UNKNOWN_ { name : string ; _UNKNOWN_ : string ; url : string ; _UNKNOWN_ : string ; } @ Injectable ( ) export class _UNKNOWN_ { current : number ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ { name : 's' , _UNKNOWN_ : 's' , url : 's' , _UNKNOWN_ : 's' , } , { name : 's' , _UNKNOWN_ : 's' , url : 's' , _UNKNOWN_ : 's' , } , { name : 's' , _UNKNOWN_ : 's' , url : 's' , _UNKNOWN_ : 's' , } , ] ; random ( ) { this . current = Math . floor ( Math . random ( ) * this . _UNKNOWN_ . length ) ; return this . _UNKNOWN_ [ this . current ] ; } next ( ) { return this . _UNKNOWN_ ( ) ; } prev ( ) { return this . _UNKNOWN_ ( ) ; } private _UNKNOWN_ ( ) { if ( this . current === this . _UNKNOWN_ . length - 0 ) { this . current = 0 ; } else { this . current ++ ; } return this . _UNKNOWN_ [ this . current ] ; } private _UNKNOWN_ ( ) { if ( this . current === 0 ) { this . current = this . _UNKNOWN_ . length - 0 ; } else { this . current -- ; } return this . _UNKNOWN_ [ this . current ] ; } } </s>	O O O $any$ O O O O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $any$ O O O O $any$ O $number$ O O O $any$ O $any$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O $any$ O O O O O $number$ O $Math$ O $number$ O $Math$ O $number$ O O O O O $any$ O $number$ O O O O O $any$ O O O $number$ O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O O $number$ O O O $any$ O $number$ O O O O O O $number$ O O O O O O O O $number$ O O O O O O $any$ O O O $number$ O O O O $any$ O O O O O O O $number$ O O O O O O $number$ O O O $any$ O $number$ O O O O O O O O $number$ O O O O O O $any$ O O O $number$ O O O O O
<s> import { NgModule , ModuleWithProviders } from 's' ; import { CommonModule } from 's' ; import { UserService } from 's' ; import { _UNKNOWN_ } from 's' ; import { StateService } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = [ UserService , _UNKNOWN_ , StateService , _UNKNOWN_ , _UNKNOWN_ , ] ; @ NgModule ( { imports : [ CommonModule , ] , providers : [ ... _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { static forRoot ( ) { return < ModuleWithProviders > { ngModule : _UNKNOWN_ , providers : [ ... _UNKNOWN_ , ] , } ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any[]$ O O $any$ O O O $complex$ O O O $complex$ O O O O O O O $any$ O O $ModuleWithProviders$ O O O O O $any$ O O $any$ O $any$ O $complex$ O O O $complex$ O O O O O O O O
<s> import { Injectable } from 's' ; import { NavigationEnd , Router } from 's' ; import { Location } from 's' ; import { filter } from 's' ; declare const ga ; @ Injectable ( ) export class _UNKNOWN_ { private enabled : boolean ; constructor ( private location , private router ) { this . enabled = false ; } _UNKNOWN_ ( ) { if ( this . enabled ) { filter . call ( this . router . events , ( event ) => event instanceof NavigationEnd ) . subscribe ( ( ) => { ga ( 's' , { _UNKNOWN_ : 's' , page : this . location . path ( ) } ) ; } ) ; } } trackEvent ( eventName ) { if ( this . enabled ) { ga ( 's' , 's' , eventName ) ; } } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O O O O $any$ O O $boolean$ O O O O O O $Location$ O O $Router$ O O O O $boolean$ O O O O $void$ O O O O O O O $boolean$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O O O O O $any$ O O O O $string$ O O O $any$ O O O $any$ O $any$ O O O O O O O O O O $void$ O $string$ O O O O O O $boolean$ O O $any$ O O O O O $string$ O O O O O O
<s> import { ModuleWithProviders , NgModule , Optional , SkipSelf } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { of as observableOf } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const socialLinks = [ { url : 's' , target : 's' , icon : 's' , } , { url : 's' , target : 's' , icon : 's' , } , { url : 's' , target : 's' , icon : 's' , } , ] ; const _UNKNOWN_ = [ ... _UNKNOWN_ . forRoot ( ) . providers , ... _UNKNOWN_ . forRoot ( { providers : { email : { service : _UNKNOWN_ , config : { delay : 0 , login : { _UNKNOWN_ : true , } , } , } , } , _UNKNOWN_ : { login : { socialLinks : socialLinks , } , register : { socialLinks : socialLinks , } , } , } ) . providers , _UNKNOWN_ . forRoot ( { accessControl : { guest : { view : 's' , } , user : { parent : 's' , create : 's' , edit : 's' , remove : 's' , } , } , } ) . providers , { provide : _UNKNOWN_ , useValue : { _UNKNOWN_ : ( ) => { return observableOf ( 's' ) ; } , } , } , _UNKNOWN_ , ] ; @ NgModule ( { imports : [ CommonModule , ] , exports : [ _UNKNOWN_ , ] , declarations : [ ] , } ) export class CoreModule { constructor ( @ Optional ( ) @ SkipSelf ( ) parentModule ) { _UNKNOWN_ ( parentModule , 's' ) ; } static forRoot ( ) { return < ModuleWithProviders > { ngModule : CoreModule , providers : [ ... _UNKNOWN_ , ] , } ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $void$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $any[]$ O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O $complex$ O O $complex$ O O $any$ O $any$ O $complex$ O O $number$ O O O $complex$ O O $boolean$ O O O O O O O O O O O $complex$ O O $complex$ O O $complex$ O $complex$ O O O $complex$ O O $complex$ O $complex$ O O O O O O O O $any$ O $any$ O $any$ O O $complex$ O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O O $any$ O O $any$ O $any$ O $complex$ O O $any$ O O O O O O $any$ O O O O O O O O O O $any$ O O O O $any$ O O $any[]$ O O $any$ O O O $any[]$ O O $any$ O O O $undefined[]$ O O O O O O O O $any$ O O O O $any$ O O O $any$ O O $any$ O O $void$ O $any$ O O O O O O $ModuleWithProviders$ O O O O O $any$ O O $any$ O $any$ O $any[]$ O O O $any[]$ O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class FooterComponent { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component , Input , OnInit } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { UserService } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class HeaderComponent implements OnInit { @ Input ( ) position = 's' ; user : any ; _UNKNOWN_ = [ { title : 's' } , { title : 's' } ] ; constructor ( private _UNKNOWN_ , private menuService , private userService , private _UNKNOWN_ ) { } ngOnInit ( ) { this . userService . getUsers ( ) . subscribe ( ( users ) => this . user = users . _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . toggle ( true , 's' ) ; return false ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . toggle ( false , 's' ) ; return false ; } _UNKNOWN_ ( ) { this . menuService . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . trackEvent ( 's' ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O O $any$ O O $string$ O O O $any$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O O $any$ O O $any$ O O $UserService$ O O $any$ O O O $void$ O O O O O $UserService$ O $any$ O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $boolean$ O O O O O $any$ O $any$ O O O O O O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O $void$ O O O O O $any$ O $void$ O O O O O O O
<s> import { Component , ElementRef , EventEmitter , Output , ViewChild } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class SearchInputComponent { @ ViewChild ( 's' ) input : ElementRef ; @ Output ( ) search : EventEmitter < string > = new EventEmitter < string > ( ) ; _UNKNOWN_ = false ; _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; this . input . nativeElement . focus ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = false ; } _UNKNOWN_ ( val ) { this . search . emit ( val ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $boolean$ O O O $void$ O O O O O $boolean$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O O O O O $boolean$ O O O O $void$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O
<s> import { Component , OnDestroy , AfterViewInit , Output , EventEmitter , ElementRef } from 's' ; @ Component ( { selector : 's' , template : 's' , } ) export class _UNKNOWN_ implements OnDestroy , AfterViewInit { @ Output ( ) _UNKNOWN_ = new EventEmitter < any > ( ) ; editor : any ; constructor ( private host ) { } ngAfterViewInit ( ) { _UNKNOWN_ . init ( { target : this . host . nativeElement , plugins : [ 's' , 's' , 's' ] , _UNKNOWN_ : 's' , setup => { this . editor = editor ; editor . on ( 's' , ( ) => { this . _UNKNOWN_ . emit ( editor . getContent ( ) ) ; } ) ; } , height : 's' , } ) ; } ngOnDestroy ( ) { _UNKNOWN_ . remove ( this . editor ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O O O O O O $any$ O O O O O O $ElementRef$ O O O $void$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $string[]$ O O O O O O O O O $string$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $string$ O O O O O O O $void$ O O O $any$ O $any$ O O O $any$ O O O O O
<s> import { Component } from 's' ; import { StateService } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ { _UNKNOWN_ = [ ] ; _UNKNOWN_ = [ ] ; constructor ( protected stateService ) { this . stateService . _UNKNOWN_ ( ) . subscribe ( ( _UNKNOWN_ : any [ ] ) => this . _UNKNOWN_ = _UNKNOWN_ ) ; this . stateService . _UNKNOWN_ ( ) . subscribe ( ( _UNKNOWN_ : any [ ] ) => this . _UNKNOWN_ = _UNKNOWN_ ) ; } _UNKNOWN_ ( layout ) { this . _UNKNOWN_ = this . _UNKNOWN_ . map ( ( l ) => { l . selected = false ; return l ; } ) ; layout . selected = true ; this . stateService . _UNKNOWN_ ( layout ) ; return false ; } _UNKNOWN_ ( _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ . map ( ( s ) => { s . selected = false ; return s ; } ) ; _UNKNOWN_ . selected = true ; this . stateService . _UNKNOWN_ ( _UNKNOWN_ ) ; return false ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any[]$ O O O O $any[]$ O O O O O O O $StateService$ O O O O $StateService$ O $any$ O O O $any$ O O $any[]$ O O O O O O O O $any[]$ O $any[]$ O O O O $StateService$ O $any$ O O O $any$ O O $any[]$ O O O O O O O O $any[]$ O $any[]$ O O O $boolean$ O $any$ O O O O $any[]$ O O O $any[]$ O $U[]$ O O $any$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O $StateService$ O $any$ O $any$ O O O O O O $boolean$ O $any$ O O O O $any[]$ O O O $any[]$ O $U[]$ O O $any$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O $StateService$ O $any$ O $any$ O O O O O O O O
<s> import { Component , OnInit } from 's' ; import { NbThemeService } from 's' ; import { NbJSThemeOptions } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ implements OnInit { theme : NbJSThemeOptions ; constructor ( private themeService , private _UNKNOWN_ ) { } ngOnInit ( ) { this . themeService . _UNKNOWN_ ( ) . subscribe ( ( theme ) => this . theme = theme ) ; } _UNKNOWN_ ( theme ) { const _UNKNOWN_ = this . _UNKNOWN_ ( theme ) ; this . themeService . changeTheme ( _UNKNOWN_ ) ; this . _UNKNOWN_ . trackEvent ( 's' ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ( this . theme ) ; } private _UNKNOWN_ ( theme ) { return theme . name === 's' ; } private _UNKNOWN_ ( theme ) { return theme ? 's' : 's' ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $NbThemeService$ O O $any$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O O $NbJSThemeOptions$ O O O O $any$ O $any$ O O O $void$ O $boolean$ O O O O O O O $complex$ O $boolean$ O O O O $any$ O $any$ O O O O O O $any$ O $void$ O O O O O $boolean$ O O O O O O $boolean$ O O O $any$ O O O O $boolean$ O $NbJSThemeOptions$ O O O $any$ O $any$ O O O O O $complex$ O $boolean$ O O O $boolean$ O O O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component , OnDestroy } from 's' ; import { NbMediaBreakpoint , NbMediaBreakpointsService , NbMenuItem , _UNKNOWN_ , _UNKNOWN_ , NbThemeService , } from 's' ; import { StateService } from 's' ; import { Subscription } from 's' ; import 's' ; import 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ implements OnDestroy { subMenu : NbMenuItem [ ] = [ { title : 's' , group : true , } , { title : 's' , icon : 's' , link : 's' , } , { title : 's' , icon : 's' , link : 's' , } , { title : 's' , icon : 's' , link : 's' , } , { title : 's' , icon : 's' , link : 's' , } , { title : 's' , icon : 's' , link : 's' , } , { title : 's' , icon : 's' , link : 's' , } , { title : 's' , icon : 's' , link : 's' , } , ] ; layout : any = { } ; sidebar : any = { } ; protected _UNKNOWN_ : Subscription ; protected _UNKNOWN_ : Subscription ; protected _UNKNOWN_ : Subscription ; constructor ( protected stateService , protected menuService , protected themeService , protected _UNKNOWN_ , protected _UNKNOWN_ ) { this . _UNKNOWN_ = this . stateService . _UNKNOWN_ ( ) . subscribe ( ( layout ) => this . layout = layout ) ; this . _UNKNOWN_ = this . stateService . _UNKNOWN_ ( ) . subscribe ( ( sidebar ) => { this . sidebar = sidebar ; } ) ; const _UNKNOWN_ = this . _UNKNOWN_ . getByName ( 's' ) ; this . _UNKNOWN_ = this . menuService . _UNKNOWN_ ( ) . withLatestFrom ( this . themeService . _UNKNOWN_ ( ) ) . delay ( 0 ) . subscribe ( ( [ item , [ _UNKNOWN_ , _UNKNOWN_ ] ] : [ any , [ NbMediaBreakpoint , NbMediaBreakpoint ] ] ) => { if ( _UNKNOWN_ . width <= _UNKNOWN_ . width ) { this . _UNKNOWN_ . collapse ( 's' ) ; } } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; this . _UNKNOWN_ . unsubscribe ( ) ; this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any[]$ O $any$ O O O O O $string$ O O O $boolean$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $StateService$ O O $any$ O O $NbThemeService$ O O $NbMediaBreakpointsService$ O O $any$ O O O O $any$ O O O $StateService$ O $any$ O O O $any$ O O $string$ O O O O $any$ O $string$ O O O O $any$ O O O $StateService$ O $any$ O O O $any$ O O $string$ O O O O O $any$ O $string$ O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O
<s> import { Pipe , PipeTransform } from 's' ; @ Pipe ( { name : 's' } ) export class _UNKNOWN_ implements PipeTransform { transform ( input ) { return input && input . length ? ( input . charAt ( 0 ) . toUpperCase ( ) + input . slice ( 0 ) . toLowerCase ( ) ) : input ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O $string$ O $string$ O O O $string$ O $string$ O $number$ O O $string$ O $string$ O O O O $string$ O O O $string$ O $string$ O O O O $string$ O O O O $string$ O O O O
<s> import { Pipe , PipeTransform } from 's' ; @ Pipe ( { name : 's' } ) export class _UNKNOWN_ implements PipeTransform { transform ( input , label , _UNKNOWN_ = 's' ) { input = input || 0 ; return input === 0 ? `template` : _UNKNOWN_ ? `template` : `template` ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O $string$ O $number$ O $string$ O $string$ O O O O $number$ O $number$ O O O O $number$ O O O O O $string$ O O O O O O O O
<s> import { Pipe , PipeTransform } from 's' ; @ Pipe ( { name : 's' } ) export class _UNKNOWN_ implements PipeTransform { transform ( input ) { return Math . round ( input ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O $number$ O $number$ O O O $Math$ O $number$ O $number$ O O O O O
<s> import { Pipe , PipeTransform } from 's' ; @ Pipe ( { name : 's' } ) export class _UNKNOWN_ implements PipeTransform { transform ( time ) { if ( time ) { const minutes = Math . floor ( time / 0 ) ; const seconds = Math . floor ( time % 0 ) ; return `template` ; } return 's' ; } private _UNKNOWN_ ( time ) { return time < 0 ? 's' : 's' ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O $string$ O $number$ O O O O $number$ O O O $number$ O $Math$ O $number$ O $number$ O O O O O $number$ O $Math$ O $number$ O $number$ O O O O O O O O O O O O O $string$ O $number$ O O O $number$ O O O O O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O
<s> export const _UNKNOWN_ = { name : 's' , base : 's' , variables : { _UNKNOWN_ : [ 's' , 's' , 's' , 's' , 's' , ] , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , radius : [ 's' , 's' ] , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , lineWidth : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { titleColor : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , echarts : { _UNKNOWN_ : 's' , textColor : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , textColor : 's' , } , } , } ; </s>	O O O O O O $string$ O O O $string$ O O O O O O $string[]$ O O O O O O O O O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O O O O O O O O
<s> export const _UNKNOWN_ = { name : 's' , base : null , variables : { _UNKNOWN_ : [ 's' , 's' , 's' , 's' , 's' , ] , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , radius : [ 's' , 's' ] , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , lineWidth : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { titleColor : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , echarts : { _UNKNOWN_ : 's' , textColor : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , textColor : 's' , } , } , } ; </s>	O O O O O O $string$ O O O $null$ O O O O O O $string[]$ O O O O O O O O O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O O O O O O O O
<s> import { ModuleWithProviders , NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule , ReactiveFormsModule } from 's' ; import { NgbModule } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ } from 's' ; import { FooterComponent , HeaderComponent , SearchInputComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = [ CommonModule , FormsModule , ReactiveFormsModule ] ; const _UNKNOWN_ = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , NgbModule , _UNKNOWN_ , ] ; const _UNKNOWN_ = [ _UNKNOWN_ , HeaderComponent , FooterComponent , SearchInputComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] ; const _UNKNOWN_ = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] ; const _UNKNOWN_ = [ ... _UNKNOWN_ . forRoot ( { name : 's' , } , [ _UNKNOWN_ , _UNKNOWN_ ] , ) . providers , ... _UNKNOWN_ . forRoot ( ) . providers , ... _UNKNOWN_ . forRoot ( ) . providers , ] ; @ NgModule ( { imports : [ ... _UNKNOWN_ , ... _UNKNOWN_ ] , exports : [ ... _UNKNOWN_ , ... _UNKNOWN_ , ... _UNKNOWN_ , ... _UNKNOWN_ ] , declarations : [ ... _UNKNOWN_ , ... _UNKNOWN_ ] , } ) export class _UNKNOWN_ { static forRoot ( ) { return < ModuleWithProviders > { ngModule : _UNKNOWN_ , providers : [ ... _UNKNOWN_ ] , } ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O $any[]$ O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O $any[]$ O O O $any$ O $any$ O O $string$ O O O O O O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O O O O $any$ O O $any[]$ O O O $any[]$ O O $any[]$ O O $any[]$ O O O $any[]$ O O $any[]$ O O $complex$ O O $complex$ O O $complex$ O O O $complex$ O O $complex$ O O O O O O $any$ O O $ModuleWithProviders$ O O O O O $any$ O O $any$ O $any$ O $any[]$ O O O $any[]$ O O O O O O O
<s> import { _UNKNOWN_ , RouterModule , Routes } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ , NbLoginComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; const routes = [ { path : 's' , loadChildren : 's' } , { path : 's' , component : _UNKNOWN_ , children : [ { path : 's' , component : NbLoginComponent , } , { path : 's' , component : NbLoginComponent , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , ] , } , { path : 's' , redirectTo : 's' , pathMatch : 's' } , { path : 's' , redirectTo : 's' } , ] ; const config = { useHash : true , } ; @ NgModule ( { imports : [ RouterModule . forRoot ( routes , config ) ] , exports : [ RouterModule ] , } ) export class AppRoutingModule { } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $Routes$ O O O $string$ O O O $string$ O O O O O $string$ O O O $any$ O $any$ O $complex$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O $any$ O O $boolean$ O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : 's' , } ) export class AppComponent implements OnInit { constructor ( private analytics ) { } ngOnInit ( ) { this . analytics . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O O O O $any$ O O O $void$ O O O O O $any$ O $void$ O O O O O O
<s> import { APP_BASE_HREF } from 's' ; import { BrowserModule } from 's' ; import { BrowserAnimationsModule } from 's' ; import { NgModule } from 's' ; import { HttpClientModule } from 's' ; import { CoreModule } from 's' ; import { AppComponent } from 's' ; import { AppRoutingModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { NgbModule } from 's' ; @ NgModule ( { declarations : [ AppComponent ] , imports : [ BrowserModule , BrowserAnimationsModule , HttpClientModule , AppRoutingModule , NgbModule . forRoot ( ) , _UNKNOWN_ . forRoot ( ) , CoreModule . forRoot ( ) , ] , bootstrap : [ AppComponent ] , providers : [ { provide : APP_BASE_HREF , useValue : 's' } , ] , } ) export class AppModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $complex$ O O $any$ O O $complex$ O O O $any$ O $any$ O $string$ O O O O O O O O O O $any$ O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements OnDestroy { data : any ; options : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const _UNKNOWN_ = config . variables . _UNKNOWN_ ; this . data = { labels : [ 's' , 's' , 's' , 's' , 's' , 's' ] , datasets : [ { label : 's' , backgroundColor : colors . _UNKNOWN_ , borderWidth : 0 , data : [ this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) ] , } , { label : 's' , backgroundColor : colors . _UNKNOWN_ , data : [ this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) ] , } , ] , } ; this . options = { responsive : true , _UNKNOWN_ : false , elements : { _UNKNOWN_ : { borderWidth : 0 , } , } , _UNKNOWN_ : { _UNKNOWN_ : [ { _UNKNOWN_ : { display : true , color : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { fontColor : _UNKNOWN_ . textColor , } , } , ] , _UNKNOWN_ : [ { _UNKNOWN_ : { display : false , color : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { fontColor : _UNKNOWN_ . textColor , } , } , ] , } , legend : { position : 's' , labels : { fontColor : _UNKNOWN_ . textColor , } , } , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } private random ( ) { return Math . round ( Math . random ( ) * 0 ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $string[]$ O O O O O O O O O O O O O O O $complex$ O O O $string$ O O O $any$ O $any$ O $any$ O $number$ O O O $number[]$ O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $number[]$ O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O O O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $complex$ O O $complex$ O O $number$ O O O O O O O $complex$ O O $complex$ O O O $complex$ O O $boolean$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O $complex$ O O O $complex$ O O $boolean$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O $string$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O $number$ O O O O $Math$ O $number$ O $Math$ O $number$ O O O O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService , NbColorHelper } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements OnDestroy { data : any ; options : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const _UNKNOWN_ = config . variables . _UNKNOWN_ ; this . data = { labels : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , datasets : [ { data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , label : 's' , backgroundColor : NbColorHelper . _UNKNOWN_ ( colors . _UNKNOWN_ , 0 ) , } , { data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , label : 's' , backgroundColor : NbColorHelper . _UNKNOWN_ ( colors . _UNKNOWN_ , 0 ) , } ] , } ; this . options = { _UNKNOWN_ : false , responsive : true , legend : { labels : { fontColor : _UNKNOWN_ . textColor , } , } , _UNKNOWN_ : { _UNKNOWN_ : [ { _UNKNOWN_ : { display : false , color : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { fontColor : _UNKNOWN_ . textColor , } , } , ] , _UNKNOWN_ : [ { _UNKNOWN_ : { display : true , color : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { fontColor : _UNKNOWN_ . textColor , } , } , ] , } , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $string[]$ O O O O O O O O O O O O O O O O O $complex$ O O O $number[]$ O O O O O O O O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $number[]$ O O O O O O O O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O O $complex$ O O $boolean$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O $complex$ O O O $complex$ O O $boolean$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService , NbColorHelper } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements OnDestroy { data : any ; options : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const _UNKNOWN_ = config . variables . _UNKNOWN_ ; this . data = { labels : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , datasets : [ { data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , label : 's' , backgroundColor : NbColorHelper . _UNKNOWN_ ( colors . primary , 0 ) , borderColor : colors . primary , } , { data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , label : 's' , backgroundColor : NbColorHelper . _UNKNOWN_ ( colors . danger , 0 ) , borderColor : colors . danger , } , { data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , label : 's' , backgroundColor : NbColorHelper . _UNKNOWN_ ( colors . info , 0 ) , borderColor : colors . info , } , ] , } ; this . options = { responsive : true , _UNKNOWN_ : false , _UNKNOWN_ : { _UNKNOWN_ : [ { _UNKNOWN_ : { display : true , color : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { fontColor : _UNKNOWN_ . textColor , } , } , ] , _UNKNOWN_ : [ { _UNKNOWN_ : { display : true , color : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { fontColor : _UNKNOWN_ . textColor , } , } , ] , } , legend : { labels : { fontColor : _UNKNOWN_ . textColor , } , } , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $string[]$ O O O O O O O O O O O O O O O O O $complex$ O O O $number[]$ O O O O O O O O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $number[]$ O O O O O O O O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $number[]$ O O O O O O O O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $complex$ O O $complex$ O O O $complex$ O O $boolean$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O $complex$ O O O $complex$ O O $boolean$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements OnDestroy { data : { } ; options : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const _UNKNOWN_ = config . variables . _UNKNOWN_ ; this . data = { labels : [ 's' , 's' , 's' , 's' , 's' , 's' ] , datasets : [ { label : 's' , data : [ this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) ] , borderColor : colors . primary , backgroundColor : colors . primary , fill : false , _UNKNOWN_ : [ 0 , 0 ] , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , } , { label : 's' , data : [ this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) ] , borderColor : colors . _UNKNOWN_ , backgroundColor : colors . _UNKNOWN_ , fill : false , _UNKNOWN_ : [ 0 , 0 ] , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , } , { label : 's' , data : [ this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) ] , borderColor : colors . info , backgroundColor : colors . info , fill : false , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , } , { label : 's' , data : [ this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) , this . random ( ) ] , borderColor : colors . success , backgroundColor : colors . success , fill : false , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , } ] , } ; this . options = { responsive : true , _UNKNOWN_ : false , legend : { position : 's' , labels : { fontColor : _UNKNOWN_ . textColor , } , } , hover : { mode : 's' , } , _UNKNOWN_ : { _UNKNOWN_ : [ { display : true , _UNKNOWN_ : { display : true , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { display : true , color : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { fontColor : _UNKNOWN_ . textColor , } , } , ] , _UNKNOWN_ : [ { display : true , _UNKNOWN_ : { display : true , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { display : true , color : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { fontColor : _UNKNOWN_ . textColor , } , } , ] , } , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } private random ( ) { return Math . round ( Math . random ( ) * 0 ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O ${}$ O O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O ${}$ O O $string[]$ O O O O O O O O O O O O O O O $complex$ O O O $string$ O O O $number[]$ O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O $number[]$ O O O O O O O $number$ O O O $number$ O O O O O O $string$ O O O $number[]$ O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O $number[]$ O O O O O O O $number$ O O O $number$ O O O O O O $string$ O O O $number[]$ O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O $number$ O O O $number$ O O O O O O $string$ O O O $number[]$ O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O $number$ O O O $number$ O O O O O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $complex$ O O $string$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $complex$ O O O $boolean$ O O O $complex$ O O $boolean$ O O O $string$ O O O O O $complex$ O O $boolean$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O $complex$ O O O $boolean$ O O O $complex$ O O $boolean$ O O O $string$ O O O O O $complex$ O O $boolean$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O $number$ O O O O $Math$ O $number$ O $Math$ O $number$ O O O O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements OnDestroy { data : any ; options : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const _UNKNOWN_ = config . variables . _UNKNOWN_ ; this . data = { labels : [ 's' , 's' , 's' ] , datasets : [ { data : [ 0 , 0 , 0 ] , backgroundColor : [ colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ ] , } ] , } ; this . options = { _UNKNOWN_ : false , responsive : true , _UNKNOWN_ : { _UNKNOWN_ : [ { display : false , } , ] , _UNKNOWN_ : [ { display : false , } , ] , } , legend : { labels : { fontColor : _UNKNOWN_ . textColor , } , } , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $string[]$ O O O O O O O O O $complex$ O O O $number[]$ O O O O O O O O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $complex$ O O $complex$ O O O $boolean$ O O O O O O O $complex$ O O O $boolean$ O O O O O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService , NbColorHelper } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements OnDestroy { options : any ; data : { } ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const _UNKNOWN_ = config . variables . _UNKNOWN_ ; this . data = { labels : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , datasets : [ { data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , label : 's' , borderColor : colors . danger , backgroundColor : NbColorHelper . _UNKNOWN_ ( colors . _UNKNOWN_ , 0 ) , } , { data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , label : 's' , borderColor : colors . warning , backgroundColor : NbColorHelper . _UNKNOWN_ ( colors . _UNKNOWN_ , 0 ) , } ] , } ; this . options = { responsive : true , _UNKNOWN_ : false , _UNKNOWN_ : 's' , legend : { labels : { fontColor : _UNKNOWN_ . textColor , } , } , scale : { _UNKNOWN_ : { fontSize : 0 , fontColor : _UNKNOWN_ . textColor , } , _UNKNOWN_ : { color : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { color : _UNKNOWN_ . _UNKNOWN_ , } , } , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O ${}$ O O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O ${}$ O O $string[]$ O O O O O O O O O O O O O O O O O $complex$ O O O $number[]$ O O O O O O O O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $number[]$ O O O O O O O O O O O O O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $number$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class 0 { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { 0 } from 's' ; import { _UNKNOWN_ } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ , children : [ { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : 0 , } , { path : 's' , component : _UNKNOWN_ , } ] , } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] , } ) export class _UNKNOWN_ { } export const _UNKNOWN_ = [ _UNKNOWN_ , _UNKNOWN_ , 0 , _UNKNOWN_ , ] ; </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O $complex$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class 0 implements OnDestroy { results = [ { name : 's' , value : 0 } , { name : 's' , value : 0 } , { name : 's' , value : 0 } , ] ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; colorScheme : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; this . colorScheme = { domain : [ colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $complex$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class 0 implements OnDestroy { multi = [ { name : 's' , series : [ { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , ] , } , { name : 's' , series : [ { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , ] , } , { name : 's' , series : [ { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , ] , } , ] ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = 's' ; _UNKNOWN_ = true ; _UNKNOWN_ = 's' ; colorScheme : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; this . colorScheme = { domain : [ colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O O O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $boolean$ O O O $string$ O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class 0 implements OnDestroy { results = [ { name : 's' , value : 0 } , { name : 's' , value : 0 } , { name : 's' , value : 0 } , ] ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; colorScheme : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; this . colorScheme = { domain : [ colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $complex$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O $boolean$ O O O $boolean$ O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class 0 implements OnDestroy { multi = [ { name : 's' , series : [ { name : 's' , value : 0 , } , { name : 's' , value : 0 , } ] , } , { name : 's' , series : [ { name : 's' , value : 0 , } , { name : 's' , value : 0 , } ] , } , { name : 's' , series : [ { name : 's' , value : 0 , } , { name : 's' , value : 0 , } ] , } ] ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; colorScheme : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; this . colorScheme = { domain : [ colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class 0 implements OnDestroy { multi = [ { name : 's' , series : [ { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , ] , } , { name : 's' , series : [ { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , ] , } , { name : 's' , series : [ { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , ] , } , ] ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; colorScheme : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; this . colorScheme = { domain : [ colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O O O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class 0 implements OnDestroy { single = [ { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , { name : 's' , value : 0 , } , ] ; colorScheme : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; this . colorScheme = { domain : [ colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $complex$ O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O $string$ O O O $number$ O O O O O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { AfterViewInit , Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { options : any = { } ; _UNKNOWN_ : any ; constructor ( private theme ) { } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const echarts = config . variables . echarts ; this . options = { backgroundColor : echarts . _UNKNOWN_ , color : [ colors . danger , colors . primary , colors . info ] , tooltip : { trigger : 's' , formatter : 's' , } , legend : { left : 's' , data : [ 's' , 's' , 's' ] , textStyle : { color : echarts . textColor , } , } , _UNKNOWN_ : [ { type : 's' , data : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , _UNKNOWN_ : { _UNKNOWN_ : true , } , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , } , ] , _UNKNOWN_ : [ { type : 's' , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , } , ] , grid : { left : 's' , right : 's' , bottom : 's' , _UNKNOWN_ : true , } , series : [ { name : 's' , type : 's' , data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , } , { name : 's' , type : 's' , data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , } , { name : 's' , type : 's' , data : [ 0 / 0 , 0 / 0 , 0 / 0 , 0 / 0 , 0 / 0 , 0 / 0 , 0 / 0 , 0 / 0 , 0 / 0 ] , } , ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $NbThemeService$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string[]$ O O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O O $string$ O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O $complex$ O O $boolean$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O $string$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O $string$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { AfterViewInit , Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { options : any = { } ; _UNKNOWN_ : any ; constructor ( private theme ) { } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const echarts = config . variables . echarts ; this . options = { backgroundColor : echarts . _UNKNOWN_ , color : [ colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ ] , tooltip : { trigger : 's' , formatter : 's' , } , legend : { _UNKNOWN_ : 's' , left : 's' , data : [ 's' , 's' , 's' , 's' , 's' ] , textStyle : { color : echarts . textColor , } , } , series : [ { name : 's' , type : 's' , radius : 's' , center : [ 's' , 's' ] , data : [ { value : 0 , name : 's' } , { value : 0 , name : 's' } , { value : 0 , name : 's' } , { value : 0 , name : 's' } , { value : 0 , name : 's' } , ] , _UNKNOWN_ : { _UNKNOWN_ : { _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : echarts . _UNKNOWN_ , } , } , label : { normal : { textStyle : { color : echarts . textColor , } , } , } , _UNKNOWN_ : { normal : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , } , } , ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $NbThemeService$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O O O $complex$ O O O $number$ O O O $string$ O O O O O $number$ O O O $string$ O O O O O $number$ O O O $string$ O O O O O $number$ O O O $string$ O O O O O $number$ O O O $string$ O O O O O O $complex$ O O $complex$ O O $number$ O O O $number$ O O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O $complex$ O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { AfterViewInit , Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { options : any = { } ; _UNKNOWN_ : any ; constructor ( private theme ) { } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const echarts = config . variables . echarts ; this . options = { backgroundColor : echarts . _UNKNOWN_ , color : [ colors . _UNKNOWN_ ] , tooltip : { trigger : 's' , _UNKNOWN_ : { type : 's' , } , } , grid : { left : 's' , right : 's' , bottom : 's' , _UNKNOWN_ : true , } , _UNKNOWN_ : [ { type : 's' , data : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , _UNKNOWN_ : { _UNKNOWN_ : true , } , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , } , ] , _UNKNOWN_ : [ { type : 's' , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , } , ] , series : [ { name : 's' , type : 's' , _UNKNOWN_ : 's' , data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , } , ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $NbThemeService$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O O $complex$ O O $string$ O O O $complex$ O O $string$ O O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $complex$ O O O $string$ O O O $string[]$ O O O O O O O O O O O O O O O O O $complex$ O O $boolean$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , AfterViewInit , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { options : any = { } ; _UNKNOWN_ : any ; constructor ( private theme ) { } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const echarts = config . variables . echarts ; this . options = { backgroundColor : echarts . _UNKNOWN_ , color : [ colors . success , colors . info ] , tooltip : { trigger : 's' , _UNKNOWN_ : { type : 's' , } , } , legend : { data : [ 's' , 's' ] , textStyle : { color : echarts . textColor , } , } , grid : { top : 0 , bottom : 0 , } , _UNKNOWN_ : [ { type : 's' , _UNKNOWN_ : { _UNKNOWN_ : true , } , _UNKNOWN_ : { _UNKNOWN_ : false , _UNKNOWN_ : { color : colors . info , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , _UNKNOWN_ : { label : { formatter => { return ( 's' + params . value + ( params . _UNKNOWN_ . length ? 's' + params . _UNKNOWN_ [ 0 ] . data : 's' ) ) ; } , } , } , data : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , ] , } , { type : 's' , _UNKNOWN_ : { _UNKNOWN_ : true , } , _UNKNOWN_ : { _UNKNOWN_ : false , _UNKNOWN_ : { color : colors . success , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , _UNKNOWN_ : { label : { formatter => { return ( 's' + params . value + ( params . _UNKNOWN_ . length ? 's' + params . _UNKNOWN_ [ 0 ] . data : 's' ) ) ; } , } , } , data : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , ] , } , ] , _UNKNOWN_ : [ { type : 's' , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , } , ] , series : [ { name : 's' , type : 's' , _UNKNOWN_ : 0 , _UNKNOWN_ : true , data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , } , { name : 's' , type : 's' , _UNKNOWN_ : true , data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , } , ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $NbThemeService$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $string$ O O O $complex$ O O $string$ O O O O O O O $complex$ O O $string[]$ O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $number$ O O O $number$ O O O O O $complex$ O O O $string$ O O O $complex$ O O $boolean$ O O O O O $complex$ O O $boolean$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O $complex$ O O $boolean$ O O O O O $complex$ O O $boolean$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $complex$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O O $string$ O O O $string$ O O O $number$ O O O $boolean$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { AfterViewInit , Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { options : any = { } ; _UNKNOWN_ : any ; constructor ( private theme ) { } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const echarts = config . variables . echarts ; this . options = { backgroundColor : echarts . _UNKNOWN_ , color : [ colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ , colors . _UNKNOWN_ ] , tooltip : { trigger : 's' , _UNKNOWN_ : { type : 's' , label : { backgroundColor : echarts . _UNKNOWN_ , } , } , } , legend : { data : [ 's' , 's' , 's' , 's' , 's' ] , textStyle : { color : echarts . textColor , } , } , grid : { left : 's' , right : 's' , bottom : 's' , _UNKNOWN_ : true , } , _UNKNOWN_ : [ { type : 's' , _UNKNOWN_ : false , data : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , _UNKNOWN_ : { _UNKNOWN_ : true , } , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , } , ] , _UNKNOWN_ : [ { type : 's' , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , } , ] , series : [ { name : 's' , type : 's' , stack : 's' , _UNKNOWN_ : { normal : { opacity : echarts . _UNKNOWN_ } } , data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , } , { name : 's' , type : 's' , stack : 's' , _UNKNOWN_ : { normal : { opacity : echarts . _UNKNOWN_ } } , data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , } , { name : 's' , type : 's' , stack : 's' , _UNKNOWN_ : { normal : { opacity : echarts . _UNKNOWN_ } } , data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , } , { name : 's' , type : 's' , stack : 's' , _UNKNOWN_ : { normal : { opacity : echarts . _UNKNOWN_ } } , data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , } , { name : 's' , type : 's' , stack : 's' , label : { normal : { show : true , position : 's' , textStyle : { color : echarts . textColor , } , } , } , _UNKNOWN_ : { normal : { opacity : echarts . _UNKNOWN_ } } , data : [ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] , } , ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $NbThemeService$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $string$ O O O $complex$ O O $string$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O $complex$ O O $string[]$ O O O O O O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $complex$ O O O $string$ O O O $boolean$ O O O $string[]$ O O O O O O O O O O O O O O O O O $complex$ O O $boolean$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $complex$ O O $boolean$ O O O $string$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { AfterViewInit , Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { options : any = { } ; _UNKNOWN_ : any ; constructor ( private theme ) { } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const _UNKNOWN_ = [ ] ; const 0 = [ ] ; const 0 = [ ] ; const colors = config . variables ; const echarts = config . variables . echarts ; this . options = { backgroundColor : echarts . _UNKNOWN_ , color : [ colors . _UNKNOWN_ , colors . _UNKNOWN_ ] , legend : { data : [ 's' , 's' ] , align : 's' , textStyle : { color : echarts . textColor , } , } , _UNKNOWN_ : [ { data : _UNKNOWN_ , silent : false , _UNKNOWN_ : { _UNKNOWN_ : true , } , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , } , ] , _UNKNOWN_ : [ { _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { _UNKNOWN_ : { color : echarts . _UNKNOWN_ , } , } , _UNKNOWN_ : { textStyle : { color : echarts . textColor , } , } , } , ] , series : [ { name : 's' , type : 's' , data : 0 , _UNKNOWN_ : function ( idx ) { return idx * 0 ; } , } , { name : 's' , type : 's' , data : 0 , _UNKNOWN_ : function ( idx ) { return idx * 0 + 0 ; } , } , ] , _UNKNOWN_ : 's' , _UNKNOWN_ : function ( idx ) { return idx * 0 ; } , } ; for ( let i = 0 ; i < 0 ; i ++ ) { _UNKNOWN_ . push ( 's' + i ) ; 0 . push ( ( Math . sin ( i / 0 ) * ( i / 0 - 0 ) + i / 0 ) * 0 ) ; 0 . push ( ( Math . cos ( i / 0 ) * ( i / 0 - 0 ) + i / 0 ) * 0 ) ; } } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $NbThemeService$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any[]$ O O O O O $any[]$ O O O O O $any[]$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $string[]$ O O O O O O O $string$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O O $any[]$ O $any[]$ O $boolean$ O O O $complex$ O O $boolean$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O O $string$ O O O $string$ O O O $any[]$ O $any[]$ O $number$ O O O $any$ O O O $any$ O O O O O O O O $string$ O O O $string$ O O O $any[]$ O $any[]$ O $number$ O O O $any$ O O O $any$ O O O O O O O O O O O $string$ O O O $number$ O O O $any$ O O O $any$ O O O O O O O O O O $number$ O O O $number$ O O O $number$ O O O $any[]$ O $number$ O O O $number$ O O $any[]$ O $number$ O O $Math$ O $number$ O $number$ O O O O O $number$ O O O O O O $number$ O O O O O O O $any[]$ O $number$ O O $Math$ O $number$ O $number$ O O O O O $number$ O O O O O O $number$ O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { AfterViewInit , Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { options : any = { } ; _UNKNOWN_ : any ; constructor ( private theme ) { } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { const colors = config . variables ; const echarts = config . variables . echarts ; this . options = { backgroundColor : echarts . _UNKNOWN_ , color : [ colors . danger , colors . warning ] , tooltip : { } , legend : { data : [ 's' , 's' ] , textStyle : { color : echarts . textColor , } , } , _UNKNOWN_ : { name : { textStyle : { color : echarts . textColor , } , } , indicator : [ { name : 's' , max : 0 } , { name : 's' , max : 0 } , { name : 's' , max : 0 } , { name : 's' , max : 0 } , { name : 's' , max : 0 } , { name : 's' , max : 0 } , ] , _UNKNOWN_ : { _UNKNOWN_ : { color : 's' , } , } , } , series : [ { name : 's' , type : 's' , data : [ { value : [ 0 , 0 , 0 , 0 , 0 , 0 ] , name : 's' , } , { value : [ 0 , 0 , 0 , 0 , 0 , 0 ] , name : 's' , } , ] , } , ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $NbThemeService$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O ${}$ O O O O $complex$ O O $string[]$ O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $complex$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $number[]$ O O O O O O O O O O O O O O O $string$ O O O O O O $number[]$ O O O O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { 0 } from 's' ; import { 0 } from 's' ; import { 0 } from 's' ; import { 0 } from 's' ; import { 0 } from 's' ; import { 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const components = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , 0 , 0 , 0 , 0 , 0 , 0 , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ ... _UNKNOWN_ , ... components ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $complex$ O O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class _UNKNOWN_ { tree : _UNKNOWN_ = { value : 's' , children : [ { value : 's' , children : [ { value : 's' , } , { value : 's' , } , { value : 's' , } ] , } , { value : 's' , children : [ { value : 's' , } , { value : 's' , } , { value : 's' , } ] , } ] , } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O $string$ O O O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O O $string$ O O O O O O $string$ O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O O $string$ O O O O O O $string$ O O O O O O O O O O O O O
<s> import { Component } from 's' ; import { ToasterService , ToasterConfig , Toast , BodyOutputType } from 's' ; import 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { constructor ( private toasterService ) { } config : ToasterConfig ; position = 's' ; _UNKNOWN_ = 's' ; title = 's' ; content = `template` ; timeout = 0 ; _UNKNOWN_ = 0 ; type = 's' ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = false ; _UNKNOWN_ = true ; types : string [ ] = [ 's' , 's' , 's' , 's' , 's' ] ; animations : string [ ] = [ 's' , 's' , 's' , 's' , 's' ] ; positions : string [ ] = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ; _UNKNOWN_ = [ { title : null , body : 's' } , { title : null , body : 's' } , { title : null , body : 's' } , { title : 's' , body : 's' } , ] ; _UNKNOWN_ ( ) { this . _UNKNOWN_ ( this . type , this . title , this . content ) ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = Math . floor ( Math . random ( ) * this . types . length ) ; const _UNKNOWN_ = Math . floor ( Math . random ( ) * this . _UNKNOWN_ . length ) ; const type = this . types [ _UNKNOWN_ ] ; const quote = this . _UNKNOWN_ [ _UNKNOWN_ ] ; this . _UNKNOWN_ ( type , quote . title , quote . body ) ; } private _UNKNOWN_ ( type , title , body ) { this . config = new ToasterConfig ( { positionClass : this . position , timeout : this . timeout , newestOnTop : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ , animation : this . _UNKNOWN_ , limit : this . _UNKNOWN_ , } ) ; const toast = { type : type , title : title , body : body , timeout : this . timeout , showCloseButton : this . _UNKNOWN_ , bodyOutputType : BodyOutputType . _UNKNOWN_ , } ; this . toasterService . popAsync ( toast ) ; } _UNKNOWN_ ( ) { this . toasterService . clear ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O O $ToasterService$ O O O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $number$ O O O $number$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string[]$ O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O $complex$ O O O $null$ O O O $string$ O O O O O $null$ O O O $string$ O O O O O $null$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O $void$ O O O O O $void$ O O O $string$ O O O $string$ O O O $string$ O O O $void$ O O O O $number$ O $Math$ O $number$ O $Math$ O $number$ O O O O O $string[]$ O $number$ O O O $number$ O $Math$ O $number$ O $Math$ O $number$ O O O O O $complex$ O $number$ O O O $string$ O O O $string[]$ O $number$ O O O $complex$ O O O $complex$ O $number$ O O O O $void$ O $string$ O $complex$ O $string$ O $complex$ O $string$ O O O O $void$ O $string$ O $string$ O $string$ O O O O $any$ O O $any$ O O $string$ O O O $string$ O $number$ O O O $number$ O $boolean$ O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O O O $boolean$ O $string$ O O O $string$ O $number$ O O O $number$ O O O O O $Toast$ O O $string$ O $string$ O $string$ O $string$ O $string$ O $string$ O $number$ O O O $number$ O $boolean$ O O O $boolean$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ , children : [ { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , ] , } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] , } ) export class _UNKNOWN_ { } export const _UNKNOWN_ = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] ; </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O $complex$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { ToasterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ToasterModule , ] , declarations : [ ... _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $complex$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O $complex$ O O O $complex$ O O O O O O O $any$ O O O
<s> import { Component , OnDestroy , OnInit } from 's' ; import { NbThemeService , NbMediaBreakpoint , NbMediaBreakpointsService } from 's' ; import { UserService } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ implements OnInit , OnDestroy { contacts : any [ ] ; _UNKNOWN_ : any [ ] ; breakpoint : NbMediaBreakpoint ; breakpoints : any ; _UNKNOWN_ : any ; constructor ( private userService , private themeService , private breakpointService ) { this . breakpoints = this . breakpointService . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = this . themeService . _UNKNOWN_ ( ) . subscribe ( ( [ oldValue , newValue ] ) => { this . breakpoint = newValue ; } ) ; } ngOnInit ( ) { this . userService . getUsers ( ) . subscribe ( ( users ) => { this . contacts = [ { user : users . _UNKNOWN_ , type : 's' } , { user : users . _UNKNOWN_ , type : 's' } , { user : users . _UNKNOWN_ , type : 's' } , { user : users . _UNKNOWN_ , type : 's' } , { user : users . _UNKNOWN_ , type : 's' } , { user : users . _UNKNOWN_ , type : 's' } , ] ; this . _UNKNOWN_ = [ { user : users . _UNKNOWN_ , type : 's' , time : 's' } , { user : users . _UNKNOWN_ , type : 's' , time : 's' } , { user : users . _UNKNOWN_ , type : 's' , time : 's' } , { user : users . _UNKNOWN_ , type : 's' , time : 's' } , { user : users . _UNKNOWN_ , type : 's' , time : 's' } , { user : users . _UNKNOWN_ , type : 's' , time : 's' } , { user : users . _UNKNOWN_ , type : 's' , time : 's' } , { user : users . _UNKNOWN_ , type : 's' , time : 's' } , ] ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any[]$ O O O O O $any[]$ O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O $UserService$ O O $NbThemeService$ O O $NbMediaBreakpointsService$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $void$ O O O O O $UserService$ O $any$ O O O $any$ O O $any$ O O O O O $any[]$ O O O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O O $any[]$ O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class DashboardComponent { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component , Input } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ { @ Input ( ) title : string ; @ Input ( ) type : string ; @ Input ( ) on = true ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $boolean$ O O O O O
<s> import { Component , HostBinding , OnDestroy } from 's' ; import { NbThemeService , NbMediaBreakpoint , NbMediaBreakpointsService } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ implements OnDestroy { @ HostBinding ( 's' ) private expanded : boolean ; private selected : number ; breakpoint : NbMediaBreakpoint ; breakpoints : any ; _UNKNOWN_ : any ; constructor ( private themeService , private breakpointService ) { this . breakpoints = this . breakpointService . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = this . themeService . _UNKNOWN_ ( ) . subscribe ( ( [ oldValue , newValue ] ) => { this . breakpoint = newValue ; } ) ; } select ( _UNKNOWN_ ) { if ( this . isSelected ( _UNKNOWN_ ) ) { this . expand ( ) ; } else { this . collapse ( ) ; } this . selected = _UNKNOWN_ ; } expand ( ) { this . expanded = true ; } collapse ( ) { this . expanded = false ; } _UNKNOWN_ ( ) { return ! this . expanded ; } private isSelected ( _UNKNOWN_ ) { return this . selected === _UNKNOWN_ ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O O $any$ O O O O $boolean$ O O O O $number$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O $NbThemeService$ O O $NbMediaBreakpointsService$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $void$ O $any$ O O O O O O $boolean$ O $any$ O O O O O $void$ O O O O O O O O $void$ O O O O O O $number$ O $any$ O O $void$ O O O O O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O O O O O O $boolean$ O O O $boolean$ O $any$ O O O O O $number$ O $any$ O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , EventEmitter , Output } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , } ) export class _UNKNOWN_ { @ Output ( ) select : EventEmitter < number > = new EventEmitter ( ) ; _UNKNOWN_ : null ; _UNKNOWN_ = [ ] ; viewBox = 's' ; _UNKNOWN_ = ! ! ( navigator . userAgent . match ( "s" ) || navigator . userAgent . match ( "s" ) || navigator . userAgent . match ( "s" ) ) ; _UNKNOWN_ = navigator . userAgent . toLowerCase ( ) . indexOf ( 's' ) >= 0 ; _UNKNOWN_ = { _UNKNOWN_ : [ { d : 's' , } ] , _UNKNOWN_ : [ { d : 's' } , { d : 's' } , { d : 's' } , ] , _UNKNOWN_ : [ { id : 's' , name : { text : 's' , x : 0 , y : 0 } , area : { d : 's' } , border : { d : 's' + 's' } , } , { id : 's' , name : { text : 's' , x : 0 , y : 0 } , area : { d : 's' + 's' } , border : { d : 's' + 's' } , } , { id : 's' , name : { text : 's' , x : 0 , y : 0 } , area : { d : 's' + 's' } , border : { d : 's' + 's' } , } , { id : 's' , name : { text : 's' , x : 0 , y : 0 } , area : { d : 's' } , border : { d : 's' + 's' } , } , ] , } ; constructor ( ) { this . _UNKNOWN_ ( 's' ) ; } private _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ . slice ( 0 ) . sort ( ( a , b ) => { if ( a . id === this . _UNKNOWN_ ) { return 0 ; } if ( b . id === this . _UNKNOWN_ ) { return - 0 ; } return 0 ; } ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { this . select . emit ( _UNKNOWN_ ) ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $null$ O O O $any[]$ O O O O $string$ O O O $boolean$ O O O O $Navigator$ O $string$ O $complex$ O O O O $Navigator$ O $string$ O $complex$ O O O O $Navigator$ O $string$ O $complex$ O O O O O $boolean$ O $Navigator$ O $string$ O $string$ O O O $number$ O O O O O O $complex$ O O $complex$ O O O $string$ O O O O O O $complex$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O O $complex$ O O O $string$ O O O $complex$ O O $string$ O O O $number$ O O O $number$ O O O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O O O O O O $string$ O O O $complex$ O O $string$ O O O $number$ O O O $number$ O O O O $complex$ O O $string$ O O O O O O $complex$ O O $string$ O O O O O O O O O $string$ O O O $complex$ O O $string$ O O O $number$ O O O $number$ O O O O $complex$ O O $string$ O O O O O O $complex$ O O $string$ O O O O O O O O O $string$ O O O $complex$ O O $string$ O O O $number$ O O O $number$ O O O O $complex$ O O $string$ O O O O $complex$ O O $string$ O O O O O O O O O O O O O O O O O O $void$ O O O O O O $void$ O O O O O $any[]$ O O O $complex$ O $complex$ O $complex$ O O O O $complex$ O O $complex$ O $complex$ O O O O O $complex$ O $string$ O O O $null$ O O O O O O O O $complex$ O $string$ O O O $null$ O O O O O O O O O O O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $null$ O $any$ O O O $void$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ implements OnDestroy { _UNKNOWN_ = 0 ; _UNKNOWN_ = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 0 ; _UNKNOWN_ = false ; _UNKNOWN_ = 's' ; colors : any ; _UNKNOWN_ : any ; constructor ( private theme ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . subscribe ( config => { this . colors = config . variables ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $number$ O O O $boolean$ O O O $string$ O O O $number$ O O O $boolean$ O O O $string$ O O O $any$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , HostListener , ViewChild , ElementRef , Input , Output , EventEmitter , AfterViewInit , OnChanges , } from 's' ; const _UNKNOWN_ = 0 ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , } ) export class _UNKNOWN_ implements AfterViewInit , OnChanges { @ ViewChild ( 's' ) svgRoot : ElementRef ; @ Input ( ) _UNKNOWN_ : string | string [ ] = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ = 0 ; value = 0 ; @ Output ( 's' ) _UNKNOWN_ = new EventEmitter < Number > ( ) ; @ Input ( 's' ) set setValue ( value ) { this . value = value ; } @ Input ( ) min = 0 ; @ Input ( ) max = 0 ; @ Input ( ) step = 0 ; @ Output ( ) _UNKNOWN_ = new EventEmitter < boolean > ( ) ; @ HostListener ( 's' , [ 's' ] ) onMouseUp ( event ) { this . _UNKNOWN_ ( event ) ; this . _UNKNOWN_ = false ; } @ HostListener ( 's' , [ 's' ] ) onMouseMove ( event ) { this . _UNKNOWN_ ( event ) ; } @ HostListener ( 's' , [ 's' ] ) onResize ( event ) { this . invalidate ( ) ; } off = false ; oldValue : number ; _UNKNOWN_ = new Date ( ) . getTime ( ) ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; radius = 0 ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; colors : any = [ ] ; styles = { viewBox : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : [ ] , _UNKNOWN_ : { } , _UNKNOWN_ : { x : 0 , y : 0 } , _UNKNOWN_ : 0 , } ; private _UNKNOWN_ = false ; private init = false ; constructor ( ) { this . oldValue = this . value ; } ngAfterViewInit ( ) { setTimeout ( ( ) => { this . invalidate ( ) ; this . init = true ; } ) ; } ngOnChanges ( ) { if ( this . init ) { this . invalidate ( ) ; } } mouseDown ( event ) { this . _UNKNOWN_ = true ; if ( ! this . off ) { this . _UNKNOWN_ ( event , true ) ; } } _UNKNOWN_ ( ) { this . off = ! this . off ; this . _UNKNOWN_ . emit ( ! this . off ) ; if ( this . off ) { this . oldValue = this . value ; this . value = this . min ; } else { this . value = this . oldValue ; } this . _UNKNOWN_ ( ) ; } private invalidate ( ) { this . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } private _UNKNOWN_ ( ) { this . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ ) ; this . colors = ( typeof this . _UNKNOWN_ === 's' ) ? [ this . _UNKNOWN_ ] : this . _UNKNOWN_ ; const _UNKNOWN_ = this . _UNKNOWN_ / 0 ; const _UNKNOWN_ = this . svgRoot . nativeElement . getBoundingClientRect ( ) ; const _UNKNOWN_ = _UNKNOWN_ . height && _UNKNOWN_ . width / _UNKNOWN_ . height || 0 ; const _UNKNOWN_ = _UNKNOWN_ / _UNKNOWN_ ; const _UNKNOWN_ = this . _UNKNOWN_ + this . _UNKNOWN_ ; const _UNKNOWN_ = 0 * _UNKNOWN_ > this . _UNKNOWN_ ? ( _UNKNOWN_ - this . _UNKNOWN_ / 0 ) / this . _UNKNOWN_ : 0 ; this . _UNKNOWN_ = _UNKNOWN_ . width / _UNKNOWN_ || 0 ; this . styles . viewBox = `template` ; const _UNKNOWN_ = this . _UNKNOWN_ <= Math . PI ? ( 0 / ( 0 + Math . cos ( _UNKNOWN_ ) ) ) : ( 0 * Math . sin ( _UNKNOWN_ ) / ( 0 + Math . cos ( _UNKNOWN_ ) ) ) ; if ( _UNKNOWN_ > _UNKNOWN_ ) { if ( this . _UNKNOWN_ > Math . PI ) { this . radius = ( _UNKNOWN_ - 0 * _UNKNOWN_ ) / ( 0 * Math . sin ( _UNKNOWN_ ) ) ; } else { this . radius = _UNKNOWN_ / 0 - _UNKNOWN_ ; } } else { this . radius = ( _UNKNOWN_ - 0 * _UNKNOWN_ ) / ( 0 + Math . cos ( _UNKNOWN_ ) ) ; } this . _UNKNOWN_ = _UNKNOWN_ / 0 - this . radius ; this . _UNKNOWN_ = ( _UNKNOWN_ ) / 0 - this . radius * ( 0 + Math . cos ( _UNKNOWN_ ) ) / 0 ; this . styles . _UNKNOWN_ = `template` ; this . _UNKNOWN_ = this . _UNKNOWN_ / this . _UNKNOWN_ ; this . _UNKNOWN_ = this . _UNKNOWN_ / this . _UNKNOWN_ ; } private _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ / 0 ; const _UNKNOWN_ = this . radius - this . _UNKNOWN_ ; const _UNKNOWN_ = 0 - Math . sin ( _UNKNOWN_ ) ; const _UNKNOWN_ = 0 + Math . cos ( _UNKNOWN_ ) ; const _UNKNOWN_ = 0 + Math . sin ( _UNKNOWN_ ) ; return { outer : { start : { x : _UNKNOWN_ * this . radius , y : _UNKNOWN_ * this . radius , } , end : { x : _UNKNOWN_ * this . radius , y : _UNKNOWN_ * this . radius , } , radius : this . radius , } , inner : { start : { x : _UNKNOWN_ * _UNKNOWN_ + this . _UNKNOWN_ , y : _UNKNOWN_ * _UNKNOWN_ + this . _UNKNOWN_ , } , end : { x : _UNKNOWN_ * _UNKNOWN_ + this . _UNKNOWN_ , y : _UNKNOWN_ * _UNKNOWN_ + this . _UNKNOWN_ , } , radius : _UNKNOWN_ , } , _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ < Math . PI ? 's' : 's' , } ; } private _UNKNOWN_ ( ) { const s = this . _UNKNOWN_ ( ) ; let path = `template` ; path += `template` ; path += `template` ; path += `template` ; path += `template` ; path += 's' ; this . styles . _UNKNOWN_ = path ; } private _UNKNOWN_ ( _UNKNOWN_ ) { const radius = this . radius ; function _UNKNOWN_ ( angle ) { return radius * ( 0 - 0 * Math . sin ( angle ) ) ; } function _UNKNOWN_ ( angle ) { return radius * ( 0 + 0 * Math . cos ( angle ) ) ; } const _UNKNOWN_ = [ ] ; for ( let i = 0 , _UNKNOWN_ = this . _UNKNOWN_ / 0 ; i < this . colors . length ; i ++ , _UNKNOWN_ += _UNKNOWN_ ) { _UNKNOWN_ . push ( { start : { x : _UNKNOWN_ ( _UNKNOWN_ ) , y : _UNKNOWN_ ( _UNKNOWN_ ) } , end : { x : _UNKNOWN_ ( _UNKNOWN_ + _UNKNOWN_ ) , y : _UNKNOWN_ ( _UNKNOWN_ + _UNKNOWN_ ) } , _UNKNOWN_ : Math . PI <= _UNKNOWN_ ? 0 : 0 , } ) ; } return _UNKNOWN_ ; } private _UNKNOWN_ ( ) { const radius = this . radius ; function _UNKNOWN_ ( _UNKNOWN_ ) { return `template` ; } const _UNKNOWN_ = ( 0 * Math . PI - this . _UNKNOWN_ ) / this . colors . length ; const s = this . _UNKNOWN_ ( _UNKNOWN_ ) ; this . styles . _UNKNOWN_ = [ ] ; for ( let i = 0 ; i < s . length ; i ++ ) { const si = s [ i ] ; const _UNKNOWN_ = _UNKNOWN_ ( si ) ; this . styles . _UNKNOWN_ . push ( { color : this . colors [ i ] , d : _UNKNOWN_ , } ) ; } this . styles . _UNKNOWN_ = 0 * radius * Math . sin ( _UNKNOWN_ / 0 ) ; } private _UNKNOWN_ ( ) { const angle = this . _UNKNOWN_ / 0 + ( 0 - this . _UNKNOWN_ ( ) ) * ( 0 * Math . PI - this . _UNKNOWN_ ) ; this . styles . _UNKNOWN_ = { color : this . _UNKNOWN_ , d : `template` , } ; } private _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ / 0 ; const _UNKNOWN_ = this . radius - _UNKNOWN_ ; const _UNKNOWN_ = ( 0 * Math . PI - this . _UNKNOWN_ ) * this . _UNKNOWN_ ( ) + this . _UNKNOWN_ / 0 ; this . styles . _UNKNOWN_ = { x : _UNKNOWN_ * ( 0 - Math . sin ( _UNKNOWN_ ) ) + _UNKNOWN_ , y : _UNKNOWN_ * ( 0 + Math . cos ( _UNKNOWN_ ) ) + _UNKNOWN_ , } ; this . _UNKNOWN_ ( ) ; } private _UNKNOWN_ ( event , _UNKNOWN_ = false ) { if ( this . _UNKNOWN_ && ! this . off ) { const rect = this . svgRoot . nativeElement . getBoundingClientRect ( ) ; const center = { x : rect . left + _UNKNOWN_ * this . _UNKNOWN_ / 0 , y : rect . top + ( this . _UNKNOWN_ + this . radius ) * this . _UNKNOWN_ , } ; let _UNKNOWN_ = Math . 0 ( center . x - event . clientX , event . clientY - center . y ) ; if ( _UNKNOWN_ < 0 ) { _UNKNOWN_ = _UNKNOWN_ + 0 * Math . PI ; } const _UNKNOWN_ = this . _UNKNOWN_ ( ) ; let _UNKNOWN_ = 0 ; if ( _UNKNOWN_ < this . _UNKNOWN_ / 0 ) { _UNKNOWN_ = 0 ; } else if ( _UNKNOWN_ > 0 * Math . PI - this . _UNKNOWN_ / 0 ) { _UNKNOWN_ = 0 ; } else { _UNKNOWN_ = ( _UNKNOWN_ - this . _UNKNOWN_ / 0 ) / ( 0 * Math . PI - this . _UNKNOWN_ ) ; } const value = this . _UNKNOWN_ ( _UNKNOWN_ ) ; if ( this . value !== value && ( _UNKNOWN_ || Math . abs ( _UNKNOWN_ - _UNKNOWN_ ) < this . _UNKNOWN_ ) ) { this . value = value ; this . _UNKNOWN_ . emit ( this . value ) ; this . _UNKNOWN_ ( ) ; } } } private _UNKNOWN_ ( ) { return ( this . value - this . min ) / ( this . max - this . min ) ; } private _UNKNOWN_ ( factor ) { return Math . round ( factor * ( this . max - this . min ) / this . step ) * this . step + this . min ; } private static _UNKNOWN_ ( angle ) { return Math . PI * angle / 0 ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $complex$ O O O O O O O O O O $any$ O O $string$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O $number$ O O O O $any$ O O O $any$ O O $any$ O $NumberConstructor$ O O O O O $any$ O O O O $any$ O $any$ O O O O $number$ O $any$ O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $void$ O $any$ O O O O $void$ O $any$ O O O O $boolean$ O O O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O O O $void$ O $MouseEvent$ O O O O $any$ O O O O O O O $void$ O $any$ O O O O $void$ O O O O $boolean$ O O O $number$ O O O $number$ O O $DateConstructor$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $any$ O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $undefined[]$ O O O O ${}$ O O O O $complex$ O O $number$ O O O $number$ O O O O $number$ O O O O O O $boolean$ O O O O $boolean$ O O O O O O O O O $number$ O O O $number$ O O $void$ O O O $number$ O O O O O O O $void$ O O O O O $boolean$ O O O O O O O $void$ O O O O O O O $boolean$ O O O O $void$ O O O O O $void$ O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O $void$ O $any$ O O O O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O O $any$ O $any$ O O O O $boolean$ O O O O O O $boolean$ O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O $number$ O O O $number$ O O O O $void$ O O O O O $void$ O O O O O $number$ O $any$ O $number$ O O O $number$ O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $number$ O $any$ O $number$ O O O $number$ O O O O $any$ O O O O O $complex$ O O O O O O O $string$ O O O O $string[]$ O O $number$ O O O $number$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $number$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $number$ O O O $number$ O O $number$ O O O $number$ O O O $number$ O O $number$ O O O $number$ O O O $number$ O O $number$ O O O $number$ O O O O O O $number$ O O O O O $number$ O $any$ O $any$ O O O O O O O $complex$ O $string$ O O O O $number$ O O O $number$ O $Math$ O $number$ O O O O O O O $Math$ O $number$ O $number$ O O O O O O O $Math$ O $number$ O $number$ O O O O O $Math$ O $number$ O $number$ O O O O O O $number$ O $number$ O O O O O O $number$ O $Math$ O $number$ O O O O $number$ O O O O O O $number$ O O O O O $Math$ O $number$ O $number$ O O O O O O O O $number$ O O O O O $number$ O O O O O O O $number$ O O $number$ O O O $number$ O O O O O $Math$ O $number$ O $number$ O O O O O O $number$ O O O O O O O $number$ O O O $number$ O O $number$ O O O O O O $number$ O O O O $Math$ O $number$ O $number$ O O O O O O O $complex$ O $string$ O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $complex$ O O O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O $number$ O O $number$ O O O $Math$ O $number$ O $number$ O O O $number$ O O O $Math$ O $number$ O $number$ O O O $number$ O O O $Math$ O $number$ O $number$ O O O O $complex$ O O $complex$ O O $number$ O $number$ O O O $number$ O $number$ O $number$ O O O $number$ O O O $complex$ O O $number$ O $number$ O O O $number$ O $number$ O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $complex$ O O $complex$ O O $number$ O $number$ O $number$ O O O $number$ O $number$ O $number$ O $number$ O O O $number$ O O O $complex$ O O $number$ O $number$ O $number$ O O O $number$ O $number$ O $number$ O $number$ O O O $number$ O O O $number$ O $number$ O O O $number$ O O O $number$ O $string$ O O O $number$ O $Math$ O $number$ O O O O O O O O O $void$ O O O O $complex$ O O O $complex$ O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O $string$ O $string$ O O O $any[]$ O $any$ O O O $number$ O O O $number$ O O $number$ O $any$ O O O $number$ O O O O O O $Math$ O $number$ O $any$ O O O O O $number$ O $any$ O O O $number$ O O O O O O $Math$ O $number$ O $any$ O O O O O $any[]$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $any$ O $any$ O $number$ O O $number$ O $any$ O O $any[]$ O $number$ O O $complex$ O O $number$ O $number$ O $number$ O O $number$ O $number$ O $number$ O O O $complex$ O O $number$ O $number$ O $number$ O $any$ O O $number$ O $number$ O $number$ O $any$ O O O $number$ O $Math$ O $number$ O $any$ O O O O O O O O O O $any[]$ O O O $void$ O O O O $number$ O O O $number$ O O $string$ O $any$ O O O O O O O $number$ O O O O $Math$ O $number$ O O O $number$ O O O O $any$ O $any$ O O $any[]$ O O O $any[]$ O $number$ O O O O $complex$ O $any[]$ O O O O O O O $number$ O O O $number$ O $any[]$ O $number$ O $number$ O O O O $any$ O $any[]$ O $number$ O O O $string$ O $string$ O $any$ O O O O $complex$ O $any[]$ O $number$ O O $any$ O O O $any$ O $number$ O O $string$ O $string$ O O O O O O O $complex$ O $number$ O O O $number$ O $Math$ O $number$ O $number$ O O O O O O $void$ O O O O $number$ O O O $number$ O O O O O O O O $number$ O O O O O O O $Math$ O $number$ O O O $number$ O O O O $complex$ O ${}$ O O $string$ O O O $string$ O $string$ O O O O O O O $void$ O O O O $number$ O O O $number$ O O O O $number$ O O O $number$ O $number$ O O $number$ O O O O $Math$ O $number$ O O O $number$ O O O O $number$ O O O O O $number$ O O O O O $complex$ O $complex$ O O $number$ O $number$ O O O O $Math$ O $number$ O $number$ O O O $number$ O $number$ O $number$ O O O O $Math$ O $number$ O $number$ O O O $number$ O O O O O $void$ O O O O O $void$ O $any$ O $boolean$ O O O O O O O O $boolean$ O O O O $boolean$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O O O O O $number$ O O O $any$ O $any$ O $any$ O O O O $number$ O O O $number$ O O O O $number$ O O O O $number$ O $Math$ O $number$ O $complex$ O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O O O O $number$ O O O O $number$ O $number$ O O O $Math$ O $number$ O O O $number$ O O O $number$ O O O O $number$ O O O O O $number$ O O O $number$ O O O O $number$ O O O O O O O $number$ O O O $Math$ O $number$ O O O $number$ O O O O $number$ O O O O O O $number$ O O $number$ O O O $number$ O O O O O O O $Math$ O $number$ O O O $number$ O O O O $number$ O O O $number$ O $number$ O O O O O O $number$ O $number$ O O $boolean$ O $Math$ O $number$ O $number$ O $number$ O O O O $number$ O O O O O $number$ O $number$ O O O $any$ O $any$ O O O $number$ O O O O $void$ O O O O O O O $number$ O O O O O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O O O $number$ O $any$ O O O $Math$ O $number$ O $any$ O O O O $number$ O O O $number$ O O O O $number$ O O O O $number$ O O O $number$ O O O O $number$ O $any$ O O O $Math$ O $number$ O $any$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ implements OnDestroy { _UNKNOWN_ : string ; _UNKNOWN_ : any ; constructor ( private themeService ) { this . _UNKNOWN_ = this . themeService . _UNKNOWN_ ( ) . subscribe ( theme => { this . _UNKNOWN_ = theme . name ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $string$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $string$ O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { _UNKNOWN_ : any [ ] = [ { title : 's' , source : 's' , } , { title : 's' , source : 's' , } , { title : 's' , source : 's' , } , { title : 's' , source : 's' , } ] ; _UNKNOWN_ : any = this . _UNKNOWN_ [ 0 ] ; _UNKNOWN_ = [ { title : 's' , } , { title : 's' , } ] ; _UNKNOWN_ = false ; _UNKNOWN_ ( _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = true ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any[]$ O O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $any$ O O O O O $any[]$ O O O O $complex$ O O O $string$ O O O O O O $string$ O O O O O O $boolean$ O O O $void$ O $any$ O O O O $any$ O $any$ O O O $boolean$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ implements OnDestroy { data : Array < any > ; type = 's' ; types = [ 's' , 's' , 's' ] ; _UNKNOWN_ : string ; _UNKNOWN_ : any ; constructor ( private _UNKNOWN_ , private themeService ) { this . data = this . _UNKNOWN_ . getData ( ) ; this . _UNKNOWN_ = this . themeService . _UNKNOWN_ ( ) . subscribe ( theme => { this . _UNKNOWN_ = theme . name ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any[]$ O $ArrayConstructor$ O O O O $string$ O O O $string[]$ O O O O O O O O O $string$ O O O $any$ O O O O O O $any$ O O $NbThemeService$ O O O O $any[]$ O O O $any$ O $complex$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $string$ O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { AfterViewInit , Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; declare const echarts ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { option : any ; data : Array < any > ; _UNKNOWN_ : any ; constructor ( private theme ) { const points = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ; this . data = points . map ( ( p , index ) => ( { label : ( index % 0 === 0 ) ? `template` : 's' , value : p , } ) ) ; } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . delay ( 0 ) . subscribe ( config => { const _UNKNOWN_ = config . variables . _UNKNOWN_ ; this . option = { grid : { left : 0 , top : 0 , right : 0 , bottom : 0 , } , tooltip : { trigger : 's' , _UNKNOWN_ : { type : 's' , _UNKNOWN_ : { color : _UNKNOWN_ . _UNKNOWN_ , width : _UNKNOWN_ . _UNKNOWN_ , } , } , textStyle : { color : _UNKNOWN_ . _UNKNOWN_ , fontSize : 0 , fontWeight : _UNKNOWN_ . _UNKNOWN_ , } , position : 's' , backgroundColor : _UNKNOWN_ . _UNKNOWN_ , borderColor : _UNKNOWN_ . _UNKNOWN_ , borderWidth : 0 , formatter : 's' , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { type : 's' , _UNKNOWN_ : false , offset : 0 , data : this . data . map ( i => i . label ) , _UNKNOWN_ : { show : false , } , _UNKNOWN_ : { textStyle : { color : _UNKNOWN_ . _UNKNOWN_ , fontSize : 0 , } , } , _UNKNOWN_ : { _UNKNOWN_ : { color : _UNKNOWN_ . _UNKNOWN_ , width : 's' , } , } , } , _UNKNOWN_ : { _UNKNOWN_ : [ 0 , 's' ] , _UNKNOWN_ : { show : false , } , _UNKNOWN_ : { show : false , } , _UNKNOWN_ : { show : false , } , _UNKNOWN_ : { show : true , _UNKNOWN_ : { color : _UNKNOWN_ . _UNKNOWN_ , width : 's' , } , } , } , series : [ { type : 's' , _UNKNOWN_ : true , _UNKNOWN_ : 0 , _UNKNOWN_ : { normal : { opacity : 0 , } , _UNKNOWN_ : { color : 's' , borderColor : _UNKNOWN_ . _UNKNOWN_ , borderWidth : 0 , opacity : 0 , } , } , _UNKNOWN_ : { normal : { width : _UNKNOWN_ . lineWidth , type : _UNKNOWN_ . _UNKNOWN_ , color : new echarts . _UNKNOWN_ . _UNKNOWN_ ( 0 , 0 , 0 , 0 , [ { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } , { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } ] ) , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , } , } , _UNKNOWN_ : { normal : { color : new echarts . _UNKNOWN_ . _UNKNOWN_ ( 0 , 0 , 0 , 0 , [ { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } , { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } ] ) , } , } , data : this . data . map ( i => i . value ) , } , { type : 's' , _UNKNOWN_ : true , symbol : 's' , _UNKNOWN_ : { normal : { width : _UNKNOWN_ . lineWidth , type : _UNKNOWN_ . _UNKNOWN_ , color : new echarts . _UNKNOWN_ . _UNKNOWN_ ( 0 , 0 , 0 , 0 , [ { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } , { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } ] ) , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : 0 , opacity : 0 , } , } , data : this . data . map ( i => i . value ) , } , ] , } ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any[]$ O $ArrayConstructor$ O O O O $any$ O O O O O O $NbThemeService$ O O O $number[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any[]$ O $number[]$ O $U[]$ O O $number$ O $number$ O O O O $string$ O O $number$ O O O O O O O O O O $number$ O $number$ O O O O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O $complex$ O O $string$ O O O $complex$ O O $string$ O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $number$ O O O $any$ O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $number$ O O O $string$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O O O $boolean$ O O O $number$ O O O $any[]$ O O O $any[]$ O $U[]$ O $any$ O $any$ O $any$ O O $complex$ O O $boolean$ O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O $number$ O O O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O $string$ O O O O O O O O O $complex$ O O $complex$ O O O O O O O $complex$ O O $boolean$ O O O O O $complex$ O O $boolean$ O O O O O $complex$ O O $boolean$ O O O O O $complex$ O O $boolean$ O O O $complex$ O O $any$ O $any$ O $any$ O $string$ O O O O O O O O O $complex$ O O O $string$ O O O $boolean$ O O O $number$ O O O $complex$ O O $complex$ O O $number$ O O O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O $number$ O O O $number$ O O O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $number$ O O O $any$ O $any$ O $any$ O O O O $number$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $number$ O O O $number$ O O O O O O O $complex$ O O $complex$ O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $number$ O O O $any$ O $any$ O $any$ O O O O $number$ O O O $any$ O $any$ O $any$ O O O O O O O O O $any[]$ O O O $any[]$ O $U[]$ O $any$ O $any$ O $any$ O O O O O $string$ O O O $boolean$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $number$ O O O $any$ O $any$ O $any$ O O O O $number$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $number$ O O O $number$ O O O O O O O $any[]$ O O O $any[]$ O $U[]$ O $any$ O $any$ O $any$ O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { AfterViewInit , Component , Input , OnDestroy } from 's' ; import { NbThemeService } from 's' ; declare const echarts ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { private value = 0 ; @ Input ( 's' ) set _UNKNOWN_ ( value ) { this . value = value ; if ( this . option . series ) { this . option . series [ 0 ] . data [ 0 ] . value = value ; this . option . series [ 0 ] . data [ 0 ] . value = 0 - value ; this . option . series [ 0 ] . data [ 0 ] . value = value ; } } option : any = { } ; _UNKNOWN_ : any ; constructor ( private theme ) { } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . delay ( 0 ) . subscribe ( config => { const _UNKNOWN_ = config . variables . _UNKNOWN_ ; this . option = Object . assign ( { } , { tooltip : { trigger : 's' , formatter : 's' , } , series : [ { name : 's' , _UNKNOWN_ : true , _UNKNOWN_ : false , type : 's' , center : [ 's' , 's' ] , radius : _UNKNOWN_ . radius , data : [ { value : this . value , name : 's' , label : { normal : { position : 's' , formatter : 's' , textStyle : { fontSize : 's' , fontFamily : config . variables . _UNKNOWN_ , fontWeight : 's' , color : config . variables . _UNKNOWN_ , } , } , } , tooltip : { show : false , } , _UNKNOWN_ : { normal : { color : new echarts . _UNKNOWN_ . _UNKNOWN_ ( 0 , 0 , 0 , 0 , [ { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } , { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } , ] ) , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , } , } , _UNKNOWN_ : false , } , { value : 0 - this . value , name : 's' , tooltip : { show : false , } , label : { normal : { position : 's' , } , } , _UNKNOWN_ : { normal : { color : config . variables . _UNKNOWN_ , } , } , } , ] , } , { name : 's' , _UNKNOWN_ : true , _UNKNOWN_ : false , type : 's' , center : [ 's' , 's' ] , radius : _UNKNOWN_ . radius , data : [ { value : this . value , name : 's' , label : { normal : { position : 's' , show : false , } , } , tooltip : { show : false , } , _UNKNOWN_ : { normal : { color : new echarts . _UNKNOWN_ . _UNKNOWN_ ( 0 , 0 , 0 , 0 , [ { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } , { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } , ] ) , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : 0 , } , } , _UNKNOWN_ : false , } , { value : 0 , name : 's' , tooltip : { show : false , } , label : { normal : { position : 's' , } , } , _UNKNOWN_ : { normal : { color : 's' , } , } , } , ] , } , ] , } ) ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O $number$ O O O O $any$ O O O O $number$ O $number$ O O O O $number$ O $number$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $number$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O O O $number$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $number$ O O O $any$ O O O O O O $any$ O O O O O O $NbThemeService$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $ObjectConstructor$ O O O O O O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O O $string$ O O O $true$ O O O $false$ O O O $string$ O O O $string[]$ O O O O O O O $any$ O $any$ O $any$ O $complex$ O O O $number$ O O O $number$ O $string$ O O O $complex$ O O $complex$ O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $complex$ O O $false$ O O O O O $complex$ O O $complex$ O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $number$ O O O $any$ O $any$ O $any$ O O O O $number$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $number$ O O O $number$ O O O $number$ O O O O O O O $false$ O O O O O O $number$ O O O O O $number$ O $string$ O O O $complex$ O O $false$ O O O O O $complex$ O O $complex$ O O $string$ O O O O O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O $string$ O O O $true$ O O O $false$ O O O $string$ O O O $string[]$ O O O O O O O $any$ O $any$ O $any$ O $complex$ O O O $number$ O O O $number$ O $string$ O O O $complex$ O O $complex$ O O $string$ O O O $false$ O O O O O O O $complex$ O O $false$ O O O O O $complex$ O O $complex$ O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $number$ O O O $any$ O $any$ O $any$ O O O O $number$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $number$ O O O O O O O $false$ O O O O O O $number$ O O O $string$ O O O $complex$ O O $false$ O O O O O $complex$ O O $complex$ O O $string$ O O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component , HostBinding , Input , OnDestroy } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ implements OnDestroy { @ Input ( ) @ HostBinding ( 's' ) collapsed : boolean ; track : _UNKNOWN_ ; player : _UNKNOWN_ ; _UNKNOWN_ : boolean ; constructor ( private _UNKNOWN_ ) { this . track = this . _UNKNOWN_ . random ( ) ; this . _UNKNOWN_ ( ) ; } ngOnDestroy ( ) { this . player . pause ( ) ; this . player . src = 's' ; this . player . load ( ) ; } prev ( ) { if ( ! this . player . loop ) { if ( this . _UNKNOWN_ ) { this . track = this . _UNKNOWN_ . random ( ) ; } else { this . track = this . _UNKNOWN_ . prev ( ) ; } } this . reload ( ) ; } next ( ) { if ( ! this . player . loop ) { if ( this . _UNKNOWN_ ) { this . track = this . _UNKNOWN_ . random ( ) ; } else { this . track = this . _UNKNOWN_ . next ( ) ; } } this . reload ( ) ; } _UNKNOWN_ ( ) { if ( this . player . paused ) { this . player . play ( ) ; } else { this . player . pause ( ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = ! this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { this . player . loop = ! this . player . loop ; } _UNKNOWN_ ( volume ) { this . player . volume = volume / 0 ; } _UNKNOWN_ ( ) { return this . player . volume * 0 ; } _UNKNOWN_ ( duration ) { this . player . currentTime = this . player . duration * duration / 0 ; } _UNKNOWN_ ( ) { return this . player . currentTime / this . player . duration * 0 || 0 ; } private _UNKNOWN_ ( ) { this . player = new _UNKNOWN_ ( ) ; this . player . _UNKNOWN_ = ( ) => this . next ( ) ; this . _UNKNOWN_ ( ) ; } private reload ( ) { this . _UNKNOWN_ ( ) ; this . player . play ( ) ; } private _UNKNOWN_ ( ) { this . player . src = this . track . url ; this . player . load ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O O $any$ O O O $any$ O O O $boolean$ O O O $any$ O $any$ O $HTMLAudioElement$ O $complex$ O $boolean$ O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $void$ O O O O $void$ O O O O O $HTMLAudioElement$ O $void$ O O O O O $HTMLAudioElement$ O $string$ O O O O O $HTMLAudioElement$ O $void$ O O O O $void$ O O O O O O O O $HTMLAudioElement$ O $boolean$ O O O O O O $boolean$ O O O O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O O O O O O O $void$ O O O O $void$ O O O O O O O O $HTMLAudioElement$ O $boolean$ O O O O O O $boolean$ O O O O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O O O O O O O $void$ O O O O $void$ O O O O O O O $HTMLAudioElement$ O $boolean$ O O O O $HTMLAudioElement$ O $Promise<void>$ O O O O O O O O $HTMLAudioElement$ O $void$ O O O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O $void$ O O O O O $HTMLAudioElement$ O $boolean$ O O O O $HTMLAudioElement$ O $boolean$ O O $void$ O $number$ O O O O $HTMLAudioElement$ O $number$ O $number$ O O O O $number$ O O O O O O $HTMLAudioElement$ O $number$ O O O O $void$ O $number$ O O O O $HTMLAudioElement$ O $number$ O O O $HTMLAudioElement$ O $number$ O $number$ O O O O $number$ O O O O O O $HTMLAudioElement$ O $number$ O O O $HTMLAudioElement$ O $number$ O O O O O O O $void$ O O O O O $HTMLAudioElement$ O O $HTMLAudioElement$ O O O O O $HTMLAudioElement$ O $any$ O O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $HTMLAudioElement$ O $Promise<void>$ O O O O O $void$ O O O O O $HTMLAudioElement$ O $string$ O O O $any$ O $string$ O O O $HTMLAudioElement$ O $void$ O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ implements OnDestroy { type = 's' ; types = [ 's' , 's' , 's' ] ; _UNKNOWN_ : string ; _UNKNOWN_ : any ; constructor ( private themeService ) { this . _UNKNOWN_ = this . themeService . _UNKNOWN_ ( ) . subscribe ( theme => { this . _UNKNOWN_ = theme . name ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $string$ O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $string$ O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { AfterViewInit , Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; declare const echarts ; const points = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { type = 's' ; types = [ 's' , 's' , 's' ] ; option : any = { } ; _UNKNOWN_ : any ; constructor ( private theme ) { } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . theme . _UNKNOWN_ ( ) . delay ( 0 ) . subscribe ( config => { const _UNKNOWN_ = config . variables . _UNKNOWN_ ; this . option = Object . assign ( { } , { grid : { left : 0 , top : 0 , right : 0 , bottom : 0 , } , _UNKNOWN_ : { type : 's' , _UNKNOWN_ : false , data : points , } , _UNKNOWN_ : { _UNKNOWN_ : [ 0 , 's' ] , _UNKNOWN_ : { show : false , } , _UNKNOWN_ : { show : false , } , _UNKNOWN_ : { show : false , } , _UNKNOWN_ : { show : true , _UNKNOWN_ : { color : _UNKNOWN_ . _UNKNOWN_ , opacity : 0 , width : 's' , } , } , } , tooltip : { _UNKNOWN_ : { type : 's' , } , textStyle : { color : _UNKNOWN_ . _UNKNOWN_ , fontWeight : _UNKNOWN_ . _UNKNOWN_ , fontSize : 0 , } , position : 's' , backgroundColor : _UNKNOWN_ . _UNKNOWN_ , borderColor : _UNKNOWN_ . _UNKNOWN_ , borderWidth : 0 , formatter : 's' , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , } , series : [ { type : 's' , symbol : 's' , _UNKNOWN_ : 0 , _UNKNOWN_ : 's' , silent : true , _UNKNOWN_ : { normal : { color : _UNKNOWN_ . _UNKNOWN_ , } , _UNKNOWN_ : { color : 's' , borderColor : 's' , borderWidth : 0 , } , } , _UNKNOWN_ : { normal : { width : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } , } , data : points . map ( p => p - 0 ) , } , { type : 's' , symbol : 's' , _UNKNOWN_ : 0 , _UNKNOWN_ : 's' , _UNKNOWN_ : { normal : { color : _UNKNOWN_ . _UNKNOWN_ , borderColor : _UNKNOWN_ . _UNKNOWN_ , borderWidth : 0 , } , _UNKNOWN_ : { color : 's' , borderColor : _UNKNOWN_ . _UNKNOWN_ , borderWidth : 0 , } , } , _UNKNOWN_ : { normal : { width : 0 , color : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , } , } , _UNKNOWN_ : { normal : { color : new echarts . _UNKNOWN_ . _UNKNOWN_ ( 0 , 0 , 0 , 0 , [ { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } , { offset : 0 , color : _UNKNOWN_ . _UNKNOWN_ , } ] ) , opacity : 0 , } , } , data : points , } , ] , } ) ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O $number[]$ O O O O O O O O O O O O O O O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O O O O O O $any$ O O O O O O $NbThemeService$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $ObjectConstructor$ O O O O O O O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O $complex$ O O $string$ O O O $false$ O O O $number[]$ O $number[]$ O O O $complex$ O O $complex$ O O O O O O O $complex$ O O $false$ O O O O O $complex$ O O $false$ O O O O O $complex$ O O $false$ O O O O O $complex$ O O $true$ O O O $complex$ O O $any$ O $any$ O $any$ O $number$ O O O $string$ O O O O O O O O O $complex$ O O $complex$ O O $string$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $number$ O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $number$ O O O $string$ O O O $any$ O $any$ O $any$ O O O $complex$ O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O $true$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O O O $string$ O O O $number$ O O O O O O O $complex$ O O $complex$ O O $number$ O O O $any$ O $any$ O $any$ O O O O O $number[]$ O $number[]$ O $U[]$ O $number$ O $number$ O O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $number$ O O O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O $number$ O O O O O O O $complex$ O O $complex$ O O $number$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $complex$ O O $complex$ O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O $number$ O O O $any$ O $any$ O $any$ O O O O $number$ O O O $any$ O $any$ O $any$ O O O O O $number$ O O O O O O O $number[]$ O $number[]$ O O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { DashboardComponent } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , ] , declarations : [ DashboardComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O
<s> window [ 's' ] = 's' ; </s>	O $complex$ O O O O O O O
<s> import { Component } from 's' ; import 's' ; import 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ , children : [ { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } ] , } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] , } ) export class _UNKNOWN_ { } export const _UNKNOWN_ = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] ; </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O $complex$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] , declarations : [ ... _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $complex$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $complex$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $number$ O O O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ , children : [ { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } ] , } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) , ] , exports : [ RouterModule , ] , } ) export class _UNKNOWN_ { } export const _UNKNOWN_ = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] ; </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O $complex$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O O $any[]$ O O $any$ O O O O O O O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , ] , declarations : [ ... _UNKNOWN_ , ] , } ) export class FormsModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $complex$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O O O $complex$ O O O $complex$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ { lat = 0 ; lng = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $number$ O O O $number$ O O O O O
<s> import { Component } from 's' ; import * as _UNKNOWN_ from 's' ; import 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , template : `template` , } ) export class _UNKNOWN_ { options = { layers : [ _UNKNOWN_ . _UNKNOWN_ ( 's' , { maxZoom : 0 , _UNKNOWN_ : 's' } ) , ] , zoom : 0 , center : _UNKNOWN_ . latLng ( { lat : 0 , lng : - 0 } ) , } ; } </s>	O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $complex$ O O $any[]$ O O $any$ O $any$ O O O O $number$ O O O $string$ O O O O O O O $number$ O O O $any$ O $any$ O $any$ O O $number$ O O O $number$ O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> export class Location { constructor ( public latitude = 0 , public longitude = 0 ) { } } </s>	O O O $any$ O O O O $number$ O O O O $number$ O O O O O O O
<s> import { Component } from 's' ; import { Location } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class _UNKNOWN_ { _UNKNOWN_ : Location = new Location ( ) ; _UNKNOWN_ ( event ) { this . _UNKNOWN_ = new Location ( event . latitude , event . longitude ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $Location$ O $any$ O O $any$ O O O $void$ O $Location$ O O O O $Location$ O O $any$ O $Location$ O $number$ O $Location$ O $number$ O O O O O
<s> import { Component , Input , OnInit } from 's' ; import { Location } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , } ) export class _UNKNOWN_ implements OnInit { latitude : number ; longitude : number ; zoom : number ; @ Input ( ) public set _UNKNOWN_ ( _UNKNOWN_ ) { this . latitude = _UNKNOWN_ . latitude ; this . longitude = _UNKNOWN_ . longitude ; this . zoom = 0 ; } ngOnInit ( ) { if ( 's' in navigator ) { navigator . _UNKNOWN_ . _UNKNOWN_ ( ( position ) => { this . _UNKNOWN_ = new Location ( position . coords . latitude , position . coords . longitude , ) ; } ) ; } } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $number$ O O O $number$ O O O $number$ O O O O $any$ O O O O $Location$ O $Location$ O O O O $number$ O $Location$ O $number$ O O O $number$ O $Location$ O $number$ O O O $number$ O O O O $void$ O O O O O O O $Navigator$ O O $Navigator$ O $any$ O $void$ O O $Position$ O O O O O $Location$ O O $any$ O $Position$ O $any$ O $number$ O $Position$ O $any$ O $number$ O O O O O O O O O O
<s> import { Component , ElementRef , EventEmitter , NgZone , OnInit , Output , ViewChild } from 's' ; import { MapsAPILoader } from 's' ; import { Location } from 's' ; import { } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class _UNKNOWN_ implements OnInit { @ Output ( ) _UNKNOWN_ = new EventEmitter < Location > ( ) ; @ ViewChild ( 's' ) public _UNKNOWN_ : ElementRef ; constructor ( private _UNKNOWN_ , private ngZone ) { } ngOnInit ( ) { this . _UNKNOWN_ . load ( ) . then ( ( ) => { const autocomplete = new google . maps . _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ . nativeElement , { types : [ 's' ] , } ) ; autocomplete . addListener ( 's' , ( ) => { this . ngZone . run ( ( ) => { const place : google . maps . _UNKNOWN_ . _UNKNOWN_ = autocomplete . _UNKNOWN_ ( ) ; if ( place . _UNKNOWN_ === undefined || place . _UNKNOWN_ === null ) { return ; } this . _UNKNOWN_ . emit ( new Location ( place . _UNKNOWN_ . location . lat ( ) , place . _UNKNOWN_ . location . lng ( ) ) ) ; } ) ; } ) ; } ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O O $NgZone$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $string[]$ O O O O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $undefined$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O
<s> import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ , children : [ { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } ] , } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] , } ) export class _UNKNOWN_ { } export const _UNKNOWN_ = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] ; </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O $complex$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ . forRoot ( { apiKey : 's' , libraries : [ 's' ] , } ) , _UNKNOWN_ . forRoot ( ) , _UNKNOWN_ , _UNKNOWN_ , ] , exports : [ ] , declarations : [ ... _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $complex$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $undefined[]$ O O O O $complex$ O O O $complex$ O O O O O O O $any$ O O O
<s> import { NbMenuItem } from 's' ; export const _UNKNOWN_ : NbMenuItem [ ] = [ { title : 's' , icon : 's' , link : 's' , home : true , } , { title : 's' , group : true , } , { title : 's' , icon : 's' , link : 's' , children : [ { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , ] , } , { title : 's' , icon : 's' , children : [ { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , ] , } , { title : 's' , icon : 's' , children : [ { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , ] , } , { title : 's' , icon : 's' , children : [ { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , ] , } , { title : 's' , icon : 's' , children : [ { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , ] , } , { title : 's' , icon : 's' , children : [ { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , ] , } , { title : 's' , icon : 's' , children : [ { title : 's' , link : 's' , } , ] , } , { title : 's' , icon : 's' , children : [ { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , { title : 's' , link : 's' , } , ] , } , ] ; </s>	O O O $any$ O O O O O O $any[]$ O $any$ O O O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O $string$ O O O $boolean$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { menu = _UNKNOWN_ ; } </s>	O O O $any$ O O O O O O $any[]$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any[]$ O $any[]$ O O O
<s> import { RouterModule , Routes } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { DashboardComponent } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ , children : [ { path : 's' , component : DashboardComponent , } , { path : 's' , loadChildren : 's' , } , { path : 's' , loadChildren : 's' , } , { path : 's' , loadChildren : 's' , } , { path : 's' , loadChildren : 's' , } , { path : 's' , loadChildren : 's' , } , { path : 's' , loadChildren : 's' , } , { path : 's' , loadChildren : 's' , } , { path : 's' , redirectTo : 's' , pathMatch : 's' , } ] , } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O $complex$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = [ _UNKNOWN_ , ] ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] , declarations : [ ... _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $any$ O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $complex$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; import { LocalDataSource } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styles : [ `template` ] , } ) export class _UNKNOWN_ { settings = { add : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , edit : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , delete : { _UNKNOWN_ : 's' , _UNKNOWN_ : true , } , columns : { id : { title : 's' , type : 's' , } , firstName : { title : 's' , type : 's' , } , lastName : { title : 's' , type : 's' , } , username : { title : 's' , type : 's' , } , email : { title : 's' , type : 's' , } , age : { title : 's' , type : 's' , } , } , } ; source : LocalDataSource = new LocalDataSource ( ) ; constructor ( private service ) { const data = this . service . getData ( ) ; this . source . load ( data ) ; } _UNKNOWN_ ( event ) { if ( window . confirm ( 's' ) ) { event . confirm . resolve ( ) ; } else { event . confirm . reject ( ) ; } } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O $any$ O $complex$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $boolean$ O O O O O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O O O $complex$ O O O $any$ O $complex$ O O O O O $any$ O $any$ O $complex$ O O O $void$ O $any$ O O O O $complex$ O $boolean)$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ , children : [ { path : 's' , component : _UNKNOWN_ , } ] , } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] , } ) export class _UNKNOWN_ { } export const _UNKNOWN_ = [ _UNKNOWN_ , _UNKNOWN_ , ] ; </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O $complex$ O O O $string$ O O O $any$ O $any$ O O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O O $any$ O O O O $complex$ O O $any$ O $any$ O O O O
<s> import { NgModule } from 's' ; import { 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , 0 , ] , declarations : [ ... _UNKNOWN_ , ] , providers : [ _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $complex$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $complex$ O O O $complex$ O O $any$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { _UNKNOWN_ = 's' ; _UNKNOWN_ = { left : false , middle : false , right : false , } ; _UNKNOWN_ = { _UNKNOWN_ : true , _UNKNOWN_ : true , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : false , } ; _UNKNOWN_ = 0 ; _UNKNOWN_ = { one : false , two : false , three : true , _UNKNOWN_ : false , _UNKNOWN_ : false , } ; _UNKNOWN_ = 's' ; _UNKNOWN_ = { left : false , middle : false , right : false , } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $string$ O O O $complex$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O $complex$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O $number$ O O O $complex$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O $string$ O O O $complex$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class ButtonsComponent { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { _UNKNOWN_ = [ { title : 's' , key : 's' , } , { title : 's' , key : 's' , } ] ; _UNKNOWN_ = this . _UNKNOWN_ [ 0 ] ; buttons = { 's' : [ { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , ] , 's' : [ { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , { class : 's' , container : 's' , _UNKNOWN_ : 's' , title : 's' , default : 's' , } , ] , } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O $complex$ O O O $complex$ O O O O $complex$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ implements OnDestroy { themeName = 's' ; settings : Array < any > ; _UNKNOWN_ : any ; constructor ( private themeService ) { this . _UNKNOWN_ = this . themeService . _UNKNOWN_ ( ) . subscribe ( theme => { this . themeName = theme . name ; this . init ( theme . variables ) ; } ) ; } init ( colors ) { this . settings = [ { class : 's' , container : 's' , title : 's' , _UNKNOWN_ : 's' , default : { _UNKNOWN_ : `template` , _UNKNOWN_ : colors . primary , } , _UNKNOWN_ : { _UNKNOWN_ : `template` , _UNKNOWN_ : colors . primary , _UNKNOWN_ : `template` , shadow : 's' , _UNKNOWN_ : `template` , } , } , { class : 's' , container : 's' , title : 's' , _UNKNOWN_ : 's' , default : { _UNKNOWN_ : `template` , _UNKNOWN_ : colors . warning , } , _UNKNOWN_ : { _UNKNOWN_ : `template` , _UNKNOWN_ : colors . warning , _UNKNOWN_ : `template` , shadow : 's' , _UNKNOWN_ : `template` , } , } , { class : 's' , container : 's' , title : 's' , _UNKNOWN_ : 's' , default : { _UNKNOWN_ : `template` , _UNKNOWN_ : colors . success , } , _UNKNOWN_ : { _UNKNOWN_ : `template` , _UNKNOWN_ : colors . success , _UNKNOWN_ : `template` , shadow : 's' , _UNKNOWN_ : `template` , } , } , { class : 's' , container : 's' , title : 's' , _UNKNOWN_ : 's' , default : { _UNKNOWN_ : `template` , _UNKNOWN_ : colors . info , } , _UNKNOWN_ : { _UNKNOWN_ : `template` , _UNKNOWN_ : colors . info , _UNKNOWN_ : `template` , shadow : 's' , _UNKNOWN_ : `template` , } , } , { class : 's' , container : 's' , title : 's' , _UNKNOWN_ : 's' , default : { _UNKNOWN_ : `template` , _UNKNOWN_ : colors . danger , } , _UNKNOWN_ : { _UNKNOWN_ : `template` , _UNKNOWN_ : colors . danger , _UNKNOWN_ : `template` , shadow : 's' , _UNKNOWN_ : `template` , } , } , { class : 's' , container : 's' , title : 's' , _UNKNOWN_ : 's' , default : { border : 's' , } , _UNKNOWN_ : { border : colors . primary , _UNKNOWN_ : 's' , shadow : 's' , _UNKNOWN_ : 's' , } , } ] ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $string$ O O O $any[]$ O $ArrayConstructor$ O O O O $any$ O O O O O O $NbThemeService$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $string$ O $any$ O $any$ O O O $void$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O O $any[]$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { ButtonsComponent } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const components = [ ButtonsComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] ; @ NgModule ( { imports : [ _UNKNOWN_ , ] , exports : [ ... components , ] , declarations : [ ... components , ] , providers : [ ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $complex$ O O $any$ O O O $complex$ O O O $complex$ O O O $complex$ O O O $complex$ O O O $undefined[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { icons = { _UNKNOWN_ : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , _UNKNOWN_ : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , ] , _UNKNOWN_ : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , ] , } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $complex$ O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class ModalComponent { _UNKNOWN_ : string ; modalContent = `template` ; constructor ( private _UNKNOWN_ ) { } _UNKNOWN_ ( ) { this . _UNKNOWN_ . close ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $string$ O O O $string$ O O O O O O $any$ O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; import { ModalComponent } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { constructor ( private modalService ) { } _UNKNOWN_ ( ) { const _UNKNOWN_ = this . modalService . open ( ModalComponent , { size : 's' , container : 's' } ) ; _UNKNOWN_ . componentInstance . _UNKNOWN_ = 's' ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = this . modalService . open ( ModalComponent , { size : 's' , container : 's' } ) ; _UNKNOWN_ . componentInstance . _UNKNOWN_ = 's' ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = this . modalService . open ( ModalComponent , { size : 's' , backdrop : 's' , container : 's' , } ) ; _UNKNOWN_ . componentInstance . _UNKNOWN_ = 's' ; _UNKNOWN_ . componentInstance . modalContent = `template` ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O O O O $any$ O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class 0 { } @ Component ( { selector : 's' , template : `template` , } ) export class 0 { } @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ { tabs : any [ ] = [ { title : 's' , route : 's' , } , { title : 's' , route : 's' , } , ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any[]$ O O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O O O O O
<s> import { Component , OnDestroy } from 's' ; import { NbThemeService , NbMediaBreakpoint , NbMediaBreakpointsService } from 's' ; @ Component ( { selector : 's' , styleUrls : [ 's' ] , templateUrl : 's' , } ) export class _UNKNOWN_ implements OnDestroy { breakpoint : NbMediaBreakpoint ; breakpoints : any ; _UNKNOWN_ : any ; constructor ( private themeService , private breakpointService ) { this . breakpoints = this . breakpointService . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = this . themeService . _UNKNOWN_ ( ) . subscribe ( ( [ oldValue , newValue ] ) => { this . breakpoint = newValue ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O $NbThemeService$ O O $NbMediaBreakpointsService$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { ButtonsComponent } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , 0 , 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ , children : [ { path : 's' , component : ButtonsComponent , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , } , { path : 's' , component : _UNKNOWN_ , children : [ { path : 's' , redirectTo : 's' , pathMatch : 's' , } , { path : 's' , component : 0 , } , { path : 's' , component : 0 , } ] , } ] , } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O $complex$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { ModalComponent } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , 0 , 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; const components = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ModalComponent , _UNKNOWN_ , _UNKNOWN_ , 0 , 0 , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] , declarations : [ ... components , ] , entryComponents : [ ModalComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ O O O $complex$ O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O
<s> export const environment = { production : true , } ; </s>	O O O $complex$ O O $boolean$ O O O O O O
<s> export const environment = { production : false , } ; </s>	O O O $complex$ O O $boolean$ O O O O O O
<s> import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) . catch ( err => console . error ( err ) ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O $boolean$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $Console$ O $void$ O $any$ O O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; if ( typeof _UNKNOWN_ . prototype . contains === 's' ) { _UNKNOWN_ . prototype . contains = HTMLDivElement . prototype . contains ; } </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $complex$ O $SVGElement$ O $boolean$ O O O O $complex$ O $SVGElement$ O $boolean$ O $complex$ O $HTMLDivElement$ O $boolean$ O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting , } from 's' ; declare const __karma__ ; declare const require ; __karma__ . loaded = function ( ) { } ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) , ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ; __karma__ . start ( ) ; </s>	O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O
<s> import { Analysis , Document } from 's' ; export function _UNKNOWN_ ( analysis , url ) { const result = analysis . getDocument ( url ) ; if ( result . successful ) { return result . value ; } if ( result . error ) { const message = `template` ; throw new Error ( message ) ; } throw new Error ( `template` ) ; } </s>	O O O $any$ O $any$ O O O O O O $Document$ O $Analysis$ O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $string$ O O O O O $ErrorConstructor$ O $string$ O O O O O $ErrorConstructor$ O O O O O O
<s> export function find < T > ( items < T > , predicate : ( item : T ) => boolean ) : T | undefined { for ( const item of items ) { if ( predicate ( item ) ) { return item ; } } } export function uniq < T , R > ( items < T > , map : ( item : T ) => R ) < R > { const results = new Set ( ) ; for ( const item of items ) { results . add ( map ( item ) ) ; } return results ; } </s>	O O O $T$ O $any$ O O $Iterable$ O $any$ O O $boolean$ O O $T$ O $any$ O O O O O $any$ O O O O O O $T$ O $Iterable<T>$ O O O O $boolean$ O $T$ O O O O $T$ O O O O O O $Set$ O $any$ O $any$ O O $Iterable$ O $any$ O O $R$ O O $T$ O $any$ O O $any$ O O $any$ O O O $Set<unknown>$ O O $SetConstructor$ O O O O O O $T$ O $Iterable<T>$ O O $Set<unknown>$ O $Set<unknown>$ O $R$ O $T$ O O O O O $Set<unknown>$ O O O
<s> import * as clone from 's' ; import { PackageRelativeUrl , ResolvedUrl , UrlResolver } from 's' ; import { uniq } from 's' ; export type _UNKNOWN_ = ( _UNKNOWN_ : _UNKNOWN_ [ ] ) => _UNKNOWN_ [ ] ; export type _UNKNOWN_ = ( _UNKNOWN_ : _UNKNOWN_ [ ] ) => Map < ResolvedUrl , _UNKNOWN_ > ; export type _UNKNOWN_ = Map < ResolvedUrl , Set < ResolvedUrl > > ; export type _UNKNOWN_ = 's' | 's' ; export class _UNKNOWN_ { _UNKNOWN_ = new Set < ResolvedUrl > ( ) ; _UNKNOWN_ = new Set < ResolvedUrl > ( ) ; _UNKNOWN_ = new Set < ResolvedUrl > ( ) ; _UNKNOWN_ = new Set < ResolvedUrl > ( ) ; _UNKNOWN_ = new Set < ResolvedUrl > ( ) ; constructor ( public type , public _UNKNOWN_ = new Set < ResolvedUrl > ( ) , public files = new Set < ResolvedUrl > ( ) ) { } } export class _UNKNOWN_ { bundle : _UNKNOWN_ ; url : ResolvedUrl ; } export interface _UNKNOWN_ { [ entrypoint ] : PackageRelativeUrl [ ] ; } export class _UNKNOWN_ { _UNKNOWN_ : Map < ResolvedUrl , _UNKNOWN_ > ; private _UNKNOWN_ : Map < ResolvedUrl , ResolvedUrl > ; constructor ( _UNKNOWN_ : _UNKNOWN_ [ ] , _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ ( Array . from ( _UNKNOWN_ ) ) ; this . _UNKNOWN_ = new Map ( ) ; for ( const _UNKNOWN_ of this . _UNKNOWN_ ) { const _UNKNOWN_ = _UNKNOWN_ [ 0 ] ; const bundle = _UNKNOWN_ [ 0 ] ; for ( const fileUrl of bundle . files ) { console . assert ( ! this . _UNKNOWN_ . has ( fileUrl ) ) ; this . _UNKNOWN_ . set ( fileUrl , _UNKNOWN_ ) ; } } } fork ( ) { return clone ( this ) ; } _UNKNOWN_ ( url ) : _UNKNOWN_ | undefined { const _UNKNOWN_ = this . _UNKNOWN_ . get ( url ) ; if ( _UNKNOWN_ ) { return { bundle : this . _UNKNOWN_ . get ( _UNKNOWN_ ) ! , url : _UNKNOWN_ } ; } } _UNKNOWN_ ( urlResolver ) { const json = { } ; const _UNKNOWN_ < ResolvedUrl > = new Set ( ) ; for ( const [ url , bundle ] of this . _UNKNOWN_ ) { json [ urlResolver . relative ( url ) ] = [ ... new Set ( [ ... bundle . files , ... bundle . _UNKNOWN_ , ... bundle . _UNKNOWN_ , ... bundle . _UNKNOWN_ ] ) ] . map ( ( url ) => urlResolver . relative ( url ) ) ; for ( const _UNKNOWN_ of bundle . _UNKNOWN_ ) { _UNKNOWN_ . add ( _UNKNOWN_ ) ; } } if ( _UNKNOWN_ . size > 0 ) { json [ 's' ] = [ ... _UNKNOWN_ ] . map ( ( url ) => urlResolver . relative ( url ) ) ; } return json ; } } export function _UNKNOWN_ ( _UNKNOWN_ : _UNKNOWN_ [ ] ) { return _UNKNOWN_ . reduce ( ( 0 , 0 ) => ( b ) => 0 ( 0 ( b ) ) ) ; } export function _UNKNOWN_ ( _UNKNOWN_ ) : _UNKNOWN_ [ ] { const _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; for ( const entry of _UNKNOWN_ . entries ( ) ) { const dep = entry [ 0 ] ; const _UNKNOWN_ < ResolvedUrl > = entry [ 0 ] ; let bundle = _UNKNOWN_ . find ( ( bundle ) => _UNKNOWN_ ( _UNKNOWN_ , bundle . _UNKNOWN_ ) ) ; if ( ! bundle ) { const type = 's' ; bundle = new _UNKNOWN_ ( type , _UNKNOWN_ ) ; _UNKNOWN_ . push ( bundle ) ; } bundle . files . add ( dep ) ; } return _UNKNOWN_ ; } export function _UNKNOWN_ ( _UNKNOWN_ ) { return _UNKNOWN_ ( ( _UNKNOWN_ : _UNKNOWN_ [ ] ) : ResolvedUrl [ ] => { let counter = 0 ; return _UNKNOWN_ . map ( ( b ) => `template` as ResolvedUrl ) ; } ) ; } export function _UNKNOWN_ ( entrypoint ) { return _UNKNOWN_ ( ( b ) => b . files . has ( entrypoint ) || b . _UNKNOWN_ . has ( entrypoint ) && ! _UNKNOWN_ ( b ) ) ; } export function _UNKNOWN_ ( predicate : ( b ) => boolean ) { return ( _UNKNOWN_ : _UNKNOWN_ [ ] ) => _UNKNOWN_ ( _UNKNOWN_ , predicate ) ; } export function _UNKNOWN_ ( mapper : ( _UNKNOWN_ : _UNKNOWN_ [ ] ) => ResolvedUrl [ ] ) { return ( _UNKNOWN_ : _UNKNOWN_ [ ] ) => { const _UNKNOWN_ = new Map < ResolvedUrl , _UNKNOWN_ > ( ) ; const _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; for ( const bundle of _UNKNOWN_ ) { const _UNKNOWN_ = _UNKNOWN_ ( bundle ) ; if ( _UNKNOWN_ ) { _UNKNOWN_ . set ( _UNKNOWN_ , bundle ) ; } else { _UNKNOWN_ . push ( bundle ) ; } } mapper ( _UNKNOWN_ ) . forEach ( ( url , i ) => _UNKNOWN_ . set ( url , _UNKNOWN_ [ i ] ) ) ; return _UNKNOWN_ ; } ; } export function _UNKNOWN_ ( _UNKNOWN_ ? ) { const _UNKNOWN_ = _UNKNOWN_ === undefined ? 0 : _UNKNOWN_ ; if ( _UNKNOWN_ < 0 ) { throw new Error ( `template` ) ; } return _UNKNOWN_ ( ( b ) => b . _UNKNOWN_ . size >= _UNKNOWN_ && ! _UNKNOWN_ ( b ) ) ; } export function _UNKNOWN_ ( shell , _UNKNOWN_ ? ) { const _UNKNOWN_ = _UNKNOWN_ === undefined ? 0 : _UNKNOWN_ ; if ( _UNKNOWN_ < 0 ) { throw new Error ( `template` ) ; } return _UNKNOWN_ ( [ _UNKNOWN_ ( shell ) , _UNKNOWN_ ( ( bundle ) => { return bundle . files . has ( shell ) || bundle . _UNKNOWN_ . size >= _UNKNOWN_ && ! _UNKNOWN_ ( bundle ) ; } ) , _UNKNOWN_ ( [ shell ] ) , ] ) ; } export function _UNKNOWN_ ( urls : ResolvedUrl [ ] ) { return ( _UNKNOWN_ ) => { for ( const bundle of _UNKNOWN_ ) { for ( const url of urls ) { if ( ! bundle . files . has ( url ) ) { bundle . _UNKNOWN_ . add ( url ) ; } } } return _UNKNOWN_ ; } ; } export function _UNKNOWN_ ( _UNKNOWN_ : _UNKNOWN_ [ ] ) { if ( _UNKNOWN_ . length === 0 ) { throw new Error ( 's' ) ; } const _UNKNOWN_ = uniq ( _UNKNOWN_ , ( b ) => b . type ) ; if ( _UNKNOWN_ . size > 0 ) { throw new Error ( 's' + [ ... _UNKNOWN_ ] . join ( 's' ) ) ; } const _UNKNOWN_ = _UNKNOWN_ [ 0 ] . type ; const _UNKNOWN_ = new _UNKNOWN_ ( _UNKNOWN_ ) ; for ( const { _UNKNOWN_ , files , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } of _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ = new Set < ResolvedUrl > ( [ ... _UNKNOWN_ . _UNKNOWN_ , ... _UNKNOWN_ ] ) ; _UNKNOWN_ . files = new Set < ResolvedUrl > ( [ ... _UNKNOWN_ . files , ... files ] ) ; _UNKNOWN_ . _UNKNOWN_ = new Set < ResolvedUrl > ( [ ... _UNKNOWN_ . _UNKNOWN_ , ... _UNKNOWN_ ] ) ; _UNKNOWN_ . _UNKNOWN_ = new Set < ResolvedUrl > ( [ ... _UNKNOWN_ . _UNKNOWN_ , ... _UNKNOWN_ ] ) ; _UNKNOWN_ . _UNKNOWN_ = new Set < ResolvedUrl > ( [ ... _UNKNOWN_ . _UNKNOWN_ , ... _UNKNOWN_ ] ) ; } return _UNKNOWN_ ; } export function _UNKNOWN_ ( _UNKNOWN_ : _UNKNOWN_ [ ] , predicate : ( bundle ) => boolean ) : _UNKNOWN_ [ ] { const _UNKNOWN_ = Array . from ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ . filter ( predicate ) ; if ( _UNKNOWN_ . length > 0 ) { for ( const bundle of _UNKNOWN_ ) { _UNKNOWN_ . splice ( _UNKNOWN_ . indexOf ( bundle ) , 0 ) ; } _UNKNOWN_ . push ( _UNKNOWN_ ( _UNKNOWN_ ) ) ; } return _UNKNOWN_ ; } function _UNKNOWN_ ( bundle ) : ResolvedUrl | null { for ( const entrypoint of bundle . _UNKNOWN_ ) { if ( bundle . files . has ( entrypoint ) ) { return entrypoint ; } } return null ; } function _UNKNOWN_ ( _UNKNOWN_ < any , Set < any > > ) < any , Set < any > > { const _UNKNOWN_ = new Map < any , Set < any > > ( ) ; for ( const entry of _UNKNOWN_ . entries ( ) ) { const value = entry [ 0 ] , keys = entry [ 0 ] ; for ( const key of keys ) { const set = _UNKNOWN_ . get ( key ) || new Set ( ) ; set . add ( value ) ; _UNKNOWN_ . set ( key , set ) ; } } return _UNKNOWN_ ; } function _UNKNOWN_ ( 0 < any > , 0 < any > ) { if ( 0 . size !== 0 . size ) { return false ; } for ( const item of 0 ) { if ( ! 0 . has ( item ) ) { return false ; } } return true ; } </s>	O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O O $any$ O $any$ O O O O $MapConstructor$ O $any$ O $any$ O O O O $any$ O $MapConstructor$ O $any$ O $SetConstructor$ O $any$ O O O O O $any$ O O O O O O O $any$ O $Set<any>$ O O $SetConstructor$ O $any$ O O O O $Set<any>$ O O $SetConstructor$ O $any$ O O O O $Set<any>$ O O $SetConstructor$ O $any$ O O O O $Set<any>$ O O $SetConstructor$ O $any$ O O O O $Set<any>$ O O $SetConstructor$ O $any$ O O O O O O O $any$ O O $Set<any>$ O O $SetConstructor$ O $any$ O O O O O $Set<any>$ O O $SetConstructor$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $string$ O O $any$ O O O O O O $any$ O $complex$ O $MapConstructor$ O $any$ O $any$ O O O $complex$ O $MapConstructor$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O O O $complex$ O $any$ O $ArrayConstructor$ O $complex$ O $any$ O O O O O $complex$ O O $MapConstructor$ O O O O O O $complex$ O O O $complex$ O O O $any$ O $complex$ O O O O O $any$ O $complex$ O O O O O O O $any$ O $any$ O $Set<any>$ O O $Console$ O $void$ O O O O $complex$ O $boolean$ O $any$ O O O O O $complex$ O $complex$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O $any$ O $ResolvedUrl$ O O $any$ O O O O $any$ O O O $complex$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O $complex$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $UrlResolver$ O O O ${}$ O O O O O $Set$ O $any$ O O O $SetConstructor$ O O O O O O O $any$ O $any$ O O O O $complex$ O O ${}$ O $any$ O $any$ O $any$ O O O O O O $SetConstructor$ O O O $any$ O $Set<any>$ O O $any$ O $Set<any>$ O O $any$ O $Set<any>$ O O $any$ O $Set<any>$ O O O O $U[]$ O O $ResolvedUrl$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $Set<any>$ O O $Set<any>$ O $Set<any>$ O $any$ O O O O O O $Set<any>$ O $number$ O O O O ${}$ O O O O O O $Set<any>$ O O $U[]$ O O $ResolvedUrl$ O O $any$ O $any$ O $any$ O O O O O ${}$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $complex$ O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O O $complex$ O $complex$ O $any$ O O O O O $complex$ O $complex$ O $complex$ O O O O O $ResolvedUrl$ O $complex$ O O O O O $Set$ O $any$ O O $complex$ O O O O O $any$ O $any$ O $complex$ O O $any$ O O O O $Set<any>$ O $any$ O $Set<any>$ O O O O O O $any$ O O O O O O O $any$ O O $any$ O O O $Set<any>$ O O $any$ O $number$ O $any$ O O O $any$ O $Set<any>$ O $Set<any>$ O $any$ O O O O $any$ O O O O $any$ O $ResolvedUrl$ O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $number$ O O O O $any$ O $U[]$ O O $any$ O O O O $any$ O O O O O O O O $any$ O $ResolvedUrl$ O O O $any$ O O $any$ O O $any$ O $Set<any>$ O $boolean$ O $any$ O O $any$ O $Set<any>$ O $boolean$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $boolean$ O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $boolean$ O O O O O $any$ O $any[]$ O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $complex$ O O $MapConstructor$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O $complex$ O $complex$ O $any$ O $any$ O O O O O $any$ O $number$ O $any$ O O O O $any[]$ O $any$ O O $void$ O O $any$ O $number$ O O $complex$ O $complex$ O $any$ O $any$ O $number$ O O O O O $complex$ O O O O O O $any$ O $number$ $number$ O O O $number$ O $number$ O $undefined$ O O O $number$ O O O $number$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O O $any$ O $Set<any>$ O $number$ O $number$ O O $any$ O $any$ O O O O O O $any$ O $ResolvedUrl$ O $number$ $number$ O O O $number$ O $number$ O $undefined$ O O O $number$ O O O $number$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O O $any$ O O $any$ O O O O $any$ O $Set<any>$ O $boolean$ O $any$ O O $any$ O $Set<any>$ O $number$ O $number$ O O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O O O O O $any$ O $any[]$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any[]$ O O O O O $any$ O $Set<any>$ O $boolean$ O $any$ O O O $any$ O $Set<any>$ O $Set<any>$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $number$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O $any$ O $number$ O O O O O O $ErrorConstructor$ O O O O O $any$ O O $string$ O O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O O $Set<any>$ O $Set<any>$ O $Set<any>$ O $Set<any>$ O $Set<any>$ O O O $any$ O O $any$ O $Set<any>$ O O $SetConstructor$ O $any$ O O O O $any$ O $Set<any>$ O O $Set<any>$ O O O $any$ O $Set<any>$ O O $SetConstructor$ O $any$ O O O O $any$ O $Set<any>$ O O $Set<any>$ O O O $any$ O $Set<any>$ O O $SetConstructor$ O $any$ O O O O $any$ O $Set<any>$ O O $Set<any>$ O O O $any$ O $Set<any>$ O O $SetConstructor$ O $any$ O O O O $any$ O $Set<any>$ O O $Set<any>$ O O O $any$ O $Set<any>$ O O $SetConstructor$ O $any$ O O O O $any$ O $Set<any>$ O O $Set<any>$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O $boolean$ O O $any$ O O O O O $any$ O O O O $any$ O $ArrayConstructor$ O $complex$ O $any$ O O O $any$ O $any$ O $complex$ O $boolean$ O O O O $any$ O $number$ O O O O O O O $any$ O $any$ O O $any$ O $complex$ O $any$ O $number$ O $any$ O O O O O O $any$ O $number$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $Set<any>$ O O O O $any$ O $Set<any>$ O $boolean$ O $any$ O O O O $any$ O O O O O O O O $Map$ O $Map$ O O O $SetConstructor$ O O O O O O O O $SetConstructor$ O O O O O O $complex$ O O $MapConstructor$ O O O $SetConstructor$ O O O O O O O O O O $complex$ O $complex$ O $complex$ O O O O O $any$ O $complex$ O O O O $Set<any>$ O $complex$ O O O O O O O $any$ O $Set<any>$ O O O $Set<any>$ O $complex$ O $Set<any>$ O $any$ O O O $SetConstructor$ O O O $Set<any>$ O $Set<any>$ O $any$ O O $complex$ O $complex$ O $any$ O $Set<any>$ O O O O O $complex$ O O O $boolean$ O $Set$ O O O O $Set$ O O O O O O O $Set<any>$ O $number$ O $Set<any>$ O $number$ O O O O O O O O O $any$ O $Set<any>$ O O O O O $Set<any>$ O $boolean$ O $any$ O O O O O O O O O O O O O
<s> import { Analyzer , Document , ResolvedUrl } from 's' ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { _UNKNOWN_ : Map < ResolvedUrl , Set < ResolvedUrl > > ; } type _UNKNOWN_ = { deps : Set < ResolvedUrl > , _UNKNOWN_ : Set < ResolvedUrl > , _UNKNOWN_ : Set < ResolvedUrl > , } ; function _UNKNOWN_ ( document ) { const deps = new Set < ResolvedUrl > ( ) ; const _UNKNOWN_ = new Set < ResolvedUrl > ( ) ; const _UNKNOWN_ = new Set < ResolvedUrl > ( ) ; _UNKNOWN_ ( document , true , deps , _UNKNOWN_ , _UNKNOWN_ ) ; return { deps , _UNKNOWN_ , _UNKNOWN_ } ; } function _UNKNOWN_ ( document , _UNKNOWN_ , visited < ResolvedUrl > , _UNKNOWN_ < ResolvedUrl > , _UNKNOWN_ < ResolvedUrl > ) { const _UNKNOWN_ = document . getFeatures ( { kind : 's' , imported : false , externalPackages : true } ) ; for ( const _UNKNOWN_ of _UNKNOWN_ ) { const _UNKNOWN_ = _UNKNOWN_ . document . url ; if ( _UNKNOWN_ . lazy ) { _UNKNOWN_ . add ( _UNKNOWN_ ) ; } if ( _UNKNOWN_ . has ( _UNKNOWN_ ) ) { continue ; } const _UNKNOWN_ = _UNKNOWN_ && ! _UNKNOWN_ . lazy ; if ( _UNKNOWN_ ) { _UNKNOWN_ . add ( _UNKNOWN_ ) ; } else if ( visited . has ( _UNKNOWN_ ) ) { continue ; } visited . add ( _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ . document , _UNKNOWN_ , visited , _UNKNOWN_ , _UNKNOWN_ ) ; } } export async function _UNKNOWN_ ( _UNKNOWN_ : ResolvedUrl [ ] , analyzer ) < _UNKNOWN_ > { const _UNKNOWN_ = { _UNKNOWN_ : new Map < ResolvedUrl , Set < ResolvedUrl > > ( ) } ; const analysis = await analyzer . analyze ( _UNKNOWN_ ) ; const _UNKNOWN_ = new Set < ResolvedUrl > ( _UNKNOWN_ ) ; for ( const entrypoint of _UNKNOWN_ ) { try { const document = _UNKNOWN_ ( analysis , entrypoint ) ; const deps = _UNKNOWN_ ( document ) ; _UNKNOWN_ . _UNKNOWN_ . set ( entrypoint , new Set ( [ entrypoint , ... deps . _UNKNOWN_ ] ) ) ; for ( const dep of deps . _UNKNOWN_ ) { _UNKNOWN_ . add ( dep ) ; } } catch ( e ) { console . warn ( e . message ) ; } } return _UNKNOWN_ ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $complex$ O $MapConstructor$ O $any$ O $SetConstructor$ O $any$ O O O O O $any$ O O $Set<any>$ O $SetConstructor$ O $any$ O O $Set<any>$ O $SetConstructor$ O $any$ O O $Set<any>$ O $SetConstructor$ O $any$ O O O O O $any$ O $Document$ O O O $Set<any>$ O O $SetConstructor$ O $any$ O O O O O $Set<any>$ O O $SetConstructor$ O $any$ O O O O O $Set<any>$ O O $SetConstructor$ O $any$ O O O O $void$ O $any$ O O O $Set<any>$ O $Set<any>$ O $Set<any>$ O O O O $Set<any>$ O $Set<any>$ O $Set<any>$ O O O O $void$ O $Document$ O $boolean$ O $Set$ O $any$ O O $Set$ O $any$ O O $Set$ O $any$ O O O O $any$ O $any$ O $any$ O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $Set<any>$ O $Set<any>$ O $any$ O O O O O $Set<any>$ O $boolean$ O $any$ O O O O O O O $boolean$ O $boolean$ O O $any$ O $any$ O O O $boolean$ O O $Set<any>$ O $Set<any>$ O $any$ O O O O O O $Set<any>$ O $boolean$ O $any$ O O O O O O $Set<any>$ O $Set<any>$ O $any$ O O $void$ O $any$ O $any$ O $boolean$ O $Set<any>$ O $Set<any>$ O $Set<any>$ O O O O O O O $Promise$ O $any[]$ O $any$ O O O $Analyzer$ O O $any$ O O O $complex$ O O $complex$ O O $MapConstructor$ O $any$ O $SetConstructor$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any[]$ O O O $Set<any>$ O O $SetConstructor$ O $any$ O O $any[]$ O O O O O $any$ O $Set<any>$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $complex$ O $complex$ O $complex$ O $any$ O O $SetConstructor$ O O $any$ O O $any$ O $Set<any>$ O O O O O O O $any$ O $any$ O $Set<any>$ O O $Set<any>$ O $Set<any>$ O $any$ O O O O O O $any$ O O $Console$ O $void$ O $any$ O $any$ O O O O O $complex$ O O O
<s> import { ASTNode } from 's' ; import { ResolvedUrl } from 's' ; export interface _UNKNOWN_ { ast : ASTNode ; content : string ; files : ResolvedUrl [ ] ; } export type _UNKNOWN_ = Map < ResolvedUrl , _UNKNOWN_ > ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O $any[]$ O $any$ O O O O O O $any$ O $MapConstructor$ O $any$ O $any$ O O O
<s> export default { _UNKNOWN_ : "s" , _UNKNOWN_ : "s" , URL : "s" , _UNKNOWN_ : [ 's' , 's' , 's' , 's' , 's' ] , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } ; </s>	O O O O $RegExp$ O O O $RegExp$ O O O $RegExp$ O O O $string[]$ O O O O O O O O O O O O O $string$ O O O $string$ O O O O O
<s> 's' ; import constants from 's' ; import { predicates } from 's' ; import * as 0 from 's' ; export interface _UNKNOWN_ { ( node : 0 . ASTNode ) : boolean ; } export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) , predicates . _UNKNOWN_ ( predicates . _UNKNOWN_ ( predicates . hasAttr ( 's' ) ) , predicates . hasAttrValue ( 's' , 's' ) , predicates . hasAttrValue ( 's' , 's' ) ) ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) , predicates . hasAttrValue ( 's' , 's' ) ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) , predicates . hasAttrValue ( 's' , 's' ) , predicates . hasAttrValue ( 's' , 's' ) ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) , predicates . _UNKNOWN_ ( predicates . _UNKNOWN_ ( predicates . hasAttr ( 's' ) ) , predicates . hasAttrValue ( 's' , 's' ) ) ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) , predicates . hasTagName ( 's' ) ) , predicates . _UNKNOWN_ ( predicates . hasAttr ( 's' ) ) ) ; export const head = predicates . hasTagName ( 's' ) ; export const body = predicates . hasTagName ( 's' ) ; export const base = predicates . hasTagName ( 's' ) ; export const template = predicates . hasTagName ( 's' ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) , predicates . hasAttr ( 's' ) , predicates . _UNKNOWN_ ( predicates . hasAttr ( 's' ) ) ) ; export const _UNKNOWN_ = predicates . hasTagName ( 's' ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . hasAttr ( 's' ) , _UNKNOWN_ ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . _UNKNOWN_ ( predicates . hasAttr ( 's' ) ) , _UNKNOWN_ ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) , predicates . hasAttrValue ( 's' , 's' ) , predicates . hasAttr ( 's' ) , predicates . _UNKNOWN_ ( predicates . hasAttrValue ( 's' , 's' ) , predicates . hasAttrValue ( 's' , 's' ) , predicates . _UNKNOWN_ ( predicates . hasAttr ( 's' ) ) ) ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) , predicates . hasAttrValue ( 's' , 's' ) , predicates . hasAttr ( 's' ) , predicates . _UNKNOWN_ ( predicates . hasAttrValue ( 's' , 's' ) , predicates . hasAttrValue ( 's' , 's' ) , predicates . _UNKNOWN_ ( predicates . hasAttr ( 's' ) ) ) ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) , predicates . hasAttrValue ( 's' , 's' ) , predicates . hasAttr ( 's' ) , predicates . hasAttrValue ( 's' , 's' ) ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) , predicates . hasAttr ( 's' ) , predicates . hasAttr ( 's' ) ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( _UNKNOWN_ ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( predicates . _UNKNOWN_ ( ... constants . _UNKNOWN_ . map ( ( attr ) => predicates . hasAttr ( attr ) ) ) , predicates . _UNKNOWN_ ( predicates . _UNKNOWN_ ( predicates . _UNKNOWN_ ( predicates . hasTagName ( 's' ) ) , _UNKNOWN_ ) ) ) ; const _UNKNOWN_ = ( offset ) => { return ( node : 0 . ASTNode ) => { const siblings = node . parentNode ! . childNodes ! ; const _UNKNOWN_ = siblings . indexOf ( node ) + offset ; if ( _UNKNOWN_ < 0 || _UNKNOWN_ >= siblings . length ) { return false ; } return _UNKNOWN_ ( siblings [ _UNKNOWN_ ] ) ; } ; } ; export const _UNKNOWN_ = _UNKNOWN_ ( 0 ) ; export const _UNKNOWN_ = _UNKNOWN_ ( - 0 ) ; export const _UNKNOWN_ = predicates . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; </s>	O O O O $complex$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O $string[]$ O $U[]$ O O $string$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $boolean$ O O $number$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $number$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O $boolean$ O $boolean$ O O O O O O $boolean$ O $boolean$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O
<s> import * as 0 from 's' ; import { ASTNode , parse as _UNKNOWN_ , _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; export function _UNKNOWN_ ( ast , predicate : 0 . _UNKNOWN_ ) : ASTNode | undefined { const visited = new Set ( ) ; while ( ast . parentNode && ! visited . has ( ast . parentNode ) ) { if ( predicate ( ast . parentNode ) ) { return ast . parentNode ; } visited . add ( ast . parentNode ) ; ast = ast . parentNode ; } return undefined ; } export function _UNKNOWN_ ( target , node ) { 0 . remove ( node ) ; const index = target . parentNode ! . childNodes ! . indexOf ( target ) ; target . parentNode ! . childNodes ! . splice ( index + 0 , 0 , node ) ; node . parentNode = target . parentNode ! ; } export function _UNKNOWN_ ( target , after , nodes : ASTNode [ ] ) { let _UNKNOWN_ = after ; for ( let n = nodes . length - 0 ; n >= 0 ; n -- ) { const node = nodes [ n ] ; 0 . insertBefore ( target , _UNKNOWN_ , node ) ; _UNKNOWN_ = node ; } } export function _UNKNOWN_ ( node ) { return node && 0 . isTextNode ( node ) && 0 . _UNKNOWN_ ( node ) . trim ( ) === 's' ; } export function _UNKNOWN_ ( node ) { return ! ! node . data && ! ! node . data . match ( "s" ) ; } export function _UNKNOWN_ ( node ) { if ( 0 . _UNKNOWN_ ( node ) ) { return 0 . _UNKNOWN_ ( node ) . indexOf ( 's' ) > - 0 ; } return false ; } export function _UNKNOWN_ ( node ) { return ! ! node . data && ! ! node . data . match ( "s" ) ; } export function prepend ( parent , node ) { if ( parent . childNodes && parent . childNodes . length ) { 0 . insertBefore ( parent , parent . childNodes [ 0 ] , node ) ; } else { 0 . append ( parent , node ) ; } } export function _UNKNOWN_ ( node , replacement ? ) { const siblings = Array . from ( node . parentNode ! . childNodes ! ) ; let _UNKNOWN_ = siblings . indexOf ( node ) + 0 ; let next = siblings [ _UNKNOWN_ ] ; while ( next && _UNKNOWN_ ( next ) ) { 0 . remove ( next ) ; next = siblings [ ++ _UNKNOWN_ ] ; } if ( replacement ) { 0 . replace ( node , replacement ) ; } else { 0 . remove ( node ) ; } } export function parse ( html , options ? ) { const ast = _UNKNOWN_ ( html , Object . assign ( { _UNKNOWN_ : true } , options ) ) ; 0 . _UNKNOWN_ ( ast ) ; return ast ; } export function _UNKNOWN_ ( left , right ) { const l = left . __location , r = right . __location ; return l && r && l [ 's' ] && r [ 's' ] && ( l [ 's' ] < r [ 's' ] || ( l [ 's' ] === r [ 's' ] && l [ 's' ] < r [ 's' ] ) ) ; } export function _UNKNOWN_ ( 0 , 0 ) { const 0 = 0 . __location , 0 = 0 . __location ; return ! ! ( 0 && 0 && 0 [ 's' ] && 0 [ 's' ] && 0 [ 's' ] === 0 [ 's' ] && 0 [ 's' ] === 0 [ 's' ] ) ; } export function _UNKNOWN_ ( node ) : ASTNode [ ] { const siblings : ASTNode [ ] = Array . from ( node . parentNode ! . childNodes ! ) ; return siblings . slice ( siblings . indexOf ( node ) + 0 ) ; } export function _UNKNOWN_ ( document ) { const _UNKNOWN_ = new Set < string > ( ) ; const _UNKNOWN_ : ASTNode [ ] = [ ] ; for ( const comment of 0 . _UNKNOWN_ ( document , 0 . _UNKNOWN_ , undefined , 0 . _UNKNOWN_ ) ) { if ( _UNKNOWN_ ( comment ) || _UNKNOWN_ ( comment ) ) { continue ; } const commentText = ( comment . data || 's' ) . replace ( "s" , 's' ) . trim ( ) ; if ( _UNKNOWN_ ( comment ) && ! _UNKNOWN_ . has ( commentText ) ) { _UNKNOWN_ . add ( commentText ) ; _UNKNOWN_ . push ( comment ) ; } _UNKNOWN_ ( comment ) ; } const _UNKNOWN_ = 0 . query ( document , _UNKNOWN_ . head ) || document ; for ( const comment of _UNKNOWN_ . reverse ( ) ) { prepend ( _UNKNOWN_ , comment ) ; } } </s>	O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $ASTNode$ O $any$ O $any$ O $any$ O O $any$ O O O O $Set<unknown>$ O O $SetConstructor$ O O O O O $any$ O $any$ O O $Set<unknown>$ O $boolean$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $Set<unknown>$ O $Set<unknown>$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $undefined$ O O O O $void$ O $ASTNode$ O $ASTNode$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $ASTNode$ O $ASTNode$ O $any[]$ O $any$ O O O O O $any$ O $any$ O O O O $number$ O $any[]$ O $number$ O O O $number$ O O O $number$ O O O O $any$ O $any[]$ O $number$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $boolean$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $boolean$ O $ASTNode$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $boolean$ O $ASTNode$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O $boolean$ O $ASTNode$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $void$ O $ASTNode$ O $ASTNode$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $ASTNode$ O $any$ $ASTNode$ O O O $unknown[]$ O $ArrayConstructor$ O $complex$ O $any$ O $any$ O O $any$ O O O O $number$ O $unknown[]$ O $number$ O $any$ O O O O O $unknown$ O $unknown[]$ O $number$ O O O O $unknown$ O $boolean$ O $unknown$ O O O $any$ O $any$ O $unknown$ O O $unknown$ O $unknown[]$ O O $number$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $ASTNode$ O $string$ O $any$ $any$ O O O $any$ O $any$ O $string$ O $ObjectConstructor$ O O O O $true$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O $boolean$ O $ASTNode$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O O $boolean$ O $ASTNode$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O $any[]$ O $ASTNode$ O O $any$ O O O O $any[]$ O $any$ O O O $ArrayConstructor$ O $complex$ O $any$ O $any$ O O $any$ O O O O $any[]$ O $any[]$ O $any[]$ O $number$ O $any$ O O O O O O O O $void$ O $ASTNode$ O O O $Set<string>$ O O $SetConstructor$ O O O O O O O $any[]$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $undefined$ O $any$ O $any$ O O O O O $boolean$ O $any$ O O $boolean$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O O O $boolean$ O $any$ O O O $Set<string>$ O $boolean$ O $any$ O O O $Set<string>$ O $Set<string>$ O $any$ O O $any[]$ O $number$ O $any$ O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any[]$ O $any[]$ O O O O $void$ O $any$ O $any$ O O O O O
<s> import * as 0 from 's' ; import * as _UNKNOWN_ from 's' ; import * as 0 from 's' ; import { Analyzer , Document , ParsedHtmlDocument , ResolvedUrl } from 's' ; import { AnalysisContext } from 's' ; import { RawSourceMap , SourceMapConsumer , SourceMapGenerator } from 's' ; import * as _UNKNOWN_ from 's' ; import * as _UNKNOWN_ from 's' ; import * as 0 from 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = "s" ; const _UNKNOWN_ = "s" ; function 0 ( input ) { return JSON . parse ( Buffer . from ( input , 's' ) . toString ( 's' ) ) as RawSourceMap ; } function 0 ( _UNKNOWN_ ) { return Buffer . from ( JSON . stringify ( _UNKNOWN_ ) , 's' ) . toString ( 's' ) ; } function _UNKNOWN_ ( sourceUrl , _UNKNOWN_ , lineOffset , _UNKNOWN_ ) { const generator = new SourceMapGenerator ( ) ; const tokens = _UNKNOWN_ . tokenize ( _UNKNOWN_ , { loc : true , _UNKNOWN_ : 0 , sourceType : 's' } ) ; tokens . forEach ( token => { if ( ! token . loc ) { return null ; } let mapping = { original : { line : token . loc . start . line + lineOffset , column : token . loc . start . column + ( token . loc . start . line === 0 ? _UNKNOWN_ : 0 ) } , generated : token . loc . start , source : sourceUrl } ; if ( token . type === 's' ) { mapping . name = token . value ; } generator . _UNKNOWN_ ( mapping ) ; } ) ; return generator . toJSON ( ) ; } function _UNKNOWN_ ( _UNKNOWN_ , lineOffset , _UNKNOWN_ ) { const consumer = new SourceMapConsumer ( _UNKNOWN_ ) ; const generator = new SourceMapGenerator ( ) ; consumer . _UNKNOWN_ ( mapping => { const newMapping = { source : mapping . source , generated : { line : mapping . _UNKNOWN_ + lineOffset , column : mapping . _UNKNOWN_ + ( mapping . _UNKNOWN_ === 0 ? _UNKNOWN_ : 0 ) } } ; if ( typeof mapping . _UNKNOWN_ === 's' && typeof mapping . _UNKNOWN_ === 's' ) { newMapping . original = { line : mapping . _UNKNOWN_ , column : mapping . _UNKNOWN_ } ; } if ( mapping . name ) { newMapping . name = mapping . name ; } generator . _UNKNOWN_ ( newMapping ) ; } ) ; return generator . toJSON ( ) ; } export async function _UNKNOWN_ ( analyzer , sourceUrl , _UNKNOWN_ ) { const _UNKNOWN_ = _UNKNOWN_ . match ( _UNKNOWN_ ) ; if ( _UNKNOWN_ === null ) { return null ; } let _UNKNOWN_ ; let _UNKNOWN_ = sourceUrl ; const _UNKNOWN_ = _UNKNOWN_ [ 0 ] . match ( _UNKNOWN_ ) ; if ( _UNKNOWN_ !== null ) { _UNKNOWN_ = 0 ( _UNKNOWN_ [ 0 ] ) ; } else { _UNKNOWN_ = _UNKNOWN_ . resolve ( sourceUrl , _UNKNOWN_ [ 0 ] . trim ( ) ) ; _UNKNOWN_ = JSON . parse ( await analyzer . load ( _UNKNOWN_ as ResolvedUrl ) ) as RawSourceMap ; } if ( _UNKNOWN_ . sources ) { _UNKNOWN_ . sources = _UNKNOWN_ . sources . map ( source => _UNKNOWN_ . resolve ( _UNKNOWN_ , source ) ) ; } return _UNKNOWN_ ; } export async function _UNKNOWN_ ( analyzer : AnalysisContext | Analyzer , sourceUrl , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) { let _UNKNOWN_ : RawSourceMap | null = null ; try { _UNKNOWN_ = await _UNKNOWN_ ( analyzer as Analyzer , sourceUrl , _UNKNOWN_ ) ; } catch ( ex ) { _UNKNOWN_ = _UNKNOWN_ . replace ( _UNKNOWN_ , 's' ) ; } let _UNKNOWN_ = true ; if ( _UNKNOWN_ === null ) { _UNKNOWN_ = false ; _UNKNOWN_ = _UNKNOWN_ ( sourceUrl , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; } else { _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; } if ( _UNKNOWN_ === null ) { return _UNKNOWN_ ; } let _UNKNOWN_ = _UNKNOWN_ + 0 ( _UNKNOWN_ ) + 's' ; if ( _UNKNOWN_ ) { return _UNKNOWN_ . replace ( _UNKNOWN_ , _UNKNOWN_ ) ; } else { if ( _UNKNOWN_ . length > 0 && _UNKNOWN_ [ _UNKNOWN_ . length - 0 ] === 's' ) { _UNKNOWN_ = _UNKNOWN_ . substr ( 0 ) ; } return _UNKNOWN_ + _UNKNOWN_ ; } } export function _UNKNOWN_ ( document , ast : 0 . ASTNode ) { const _UNKNOWN_ = 0 . serialize ( ast ) ; ast = 0 . parse ( _UNKNOWN_ , { _UNKNOWN_ : true } ) ; const _UNKNOWN_ = new ParsedHtmlDocument ( { url : document . parsedDocument . url , baseUrl : document . parsedDocument . baseUrl , contents : _UNKNOWN_ , ast : ast , isInline : document . isInline , locationOffset : undefined , astNode : undefined , } ) ; const _UNKNOWN_ = 0 . queryAll ( ast , _UNKNOWN_ . _UNKNOWN_ ) ; _UNKNOWN_ . forEach ( script => { let content = 0 . _UNKNOWN_ ( script ) ; const _UNKNOWN_ = content . match ( _UNKNOWN_ ) ; if ( ! _UNKNOWN_ ) { return ; } const _UNKNOWN_ = _UNKNOWN_ [ 0 ] . match ( _UNKNOWN_ ) ; if ( ! _UNKNOWN_ ) { return ; } const sourceRange = _UNKNOWN_ . sourceRangeForStartTag ( script ) ! ; const sourceMap = 0 ( _UNKNOWN_ [ 0 ] ) ; const _UNKNOWN_ = _UNKNOWN_ ( sourceMap , sourceRange . end . line , sourceRange . end . column ) ; const 0 = 0 ( _UNKNOWN_ ) ; content = content . replace ( _UNKNOWN_ , `template` ) ; 0 . _UNKNOWN_ ( script , content ) ; } ) ; return ast ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O $RegExp$ O O O O $RegExp$ O O O O $any$ O $string$ O O O $JSON$ O $any$ O $any$ O $any$ O $string$ O O O O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O $any$ O O O O O O $any$ O $string$ O $string$ O $number$ O $number$ O O O $any$ O O $any$ O O O O $Token[]$ O $any$ O O O $string$ O O $true$ O O O $number$ O O O O O O O O O $Token[]$ O $void$ O $Token$ O O O O O $Token$ O $complex$ O O O O O O O $any$ O O $complex$ O O $number$ O $Token$ O $complex$ O $complex$ O $number$ O $number$ O $number$ O $Token$ O $complex$ O $complex$ O $number$ O O $Token$ O $complex$ O $complex$ O $number$ O O O $number$ O O O O O $complex$ O $Token$ O $complex$ O $complex$ O $string$ O $string$ O O O O $Token$ O $string$ O O O O $any$ O $any$ O $Token$ O $string$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $number$ O $number$ O O O $any$ O O $any$ O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O $number$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $number$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $Promise<any>$ O $Analyzer$ O $string$ O $string$ O O O $RegExpMatchArray$ O $string$ O $complex$ O $RegExp$ O O O O $RegExpMatchArray$ O O O O O O O O O $any$ O O $string$ O $string$ O O $RegExpMatchArray$ O $RegExpMatchArray$ O O O O $complex$ O $RegExp$ O O O O $RegExpMatchArray$ O O O O $any$ O $any$ O $RegExpMatchArray$ O O O O O O O O $string$ O $any$ O $any$ O $string$ O $RegExpMatchArray$ O O O O $string$ O O O O $any$ O $JSON$ O $any$ O O $any$ O $any$ O $string$ O $any$ O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O O O O O $any$ O O O O O $Promise<...>$ O $any$ O $any$ O $any$ O $string$ O $string$ O $number$ O $number$ O $number$ O $number$ O O O $any$ O $any$ O O O O O O O $any$ O O $Promise<any>$ O $any$ O $any$ O $string$ O $string$ O O O O O $any$ O O $string$ O $string$ O $complex$ O $RegExp$ O O O O O O $boolean$ O O O O O $any$ O O O O $boolean$ O O O $any$ O $any$ O $string$ O $string$ O $number$ O $number$ O O O O O $any$ O $any$ O $any$ O $number$ O $number$ O O O O O $any$ O O O O O $string$ O O O $string$ O O O $any$ O $any$ O O O O O O $boolean$ O O O $string$ O $complex$ O $RegExp$ O $string$ O O O O O O O $string$ O $number$ O O O $string$ O $string$ O $number$ O O O O O O O $string$ O $string$ O $string$ O O O O O O $string$ O $string$ O O O O O $any$ O $Document$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $undefined$ O $undefined$ O $undefined$ O $undefined$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $RegExp$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $RegExp$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $RegExp$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O
<s> 's' ; export default function _UNKNOWN_ ( str , _UNKNOWN_ ? ) { let ret = str ; if ( _UNKNOWN_ ) { ret = ret . replace ( "s" , 's' ) ; ret = ret . replace ( "s" , 's' ) ; ret = ret . replace ( "s" , 's' ) ; } return ret ; } </s>	O O O O O O $string$ O $string$ O $boolean$ $boolean$ O O O $string$ O $string$ O O O $boolean$ O O $string$ O $string$ O $complex$ O O O O O O $string$ O $string$ O $complex$ O O O O O O $string$ O $string$ O $complex$ O O O O O O O O $string$ O O O
<s> 's' ; import * as path from 's' ; import * as url from 's' ; import constants from 's' ; import { FileRelativeUrl , ResolvedUrl } from 's' ; import Uri from 's' ; export function _UNKNOWN_ < T > ( href : T ) : T { const _UNKNOWN_ = href as any as string ; return _UNKNOWN_ . endsWith ( 's' ) ? href : ( href + 's' ) as any as T ; } export function _UNKNOWN_ ( filename ) { return Uri . file ( resolvePath ( filename ) ) . toString ( ) as ResolvedUrl ; } export function _UNKNOWN_ < T > ( href : T ) : T { const u = url . parse ( href as any ) ; if ( u . pathname != null ) { u . pathname = _UNKNOWN_ ( path . posix . dirname ( u . pathname + 's' ) as FileRelativeUrl ) ; } u . search = undefined ; u . hash = undefined ; return url . format ( u ) as any as T ; } export function _UNKNOWN_ ( href ) { return constants . _UNKNOWN_ . test ( href ) ; } export function _UNKNOWN_ ( href ) { return href . search ( constants . _UNKNOWN_ ) >= 0 ; } function _UNKNOWN_ ( from , to ) { const relative = path . posix . relative ( from , to ) ; return path === path . 0 ? relative . replace ( "s" , 's' ) : relative ; } export function resolvePath ( ... segments : string [ ] ) { if ( segments . length === 0 ) { return _UNKNOWN_ ( path . resolve ( ) ) ; } const _UNKNOWN_ = segments [ segments . length - 0 ] ; const resolved = path . resolve ( ... segments ) ; return _UNKNOWN_ . endsWith ( 's' ) ? _UNKNOWN_ ( resolved ) : resolved ; } export function _UNKNOWN_ < T > ( href : T , _UNKNOWN_ , _UNKNOWN_ ) : T | FileRelativeUrl { if ( _UNKNOWN_ ( href as any ) ) { return href ; } const relativeUrl = url . resolve ( _UNKNOWN_ , href as any ) ; const _UNKNOWN_ = url . parse ( _UNKNOWN_ ) ; const _UNKNOWN_ = url . parse ( relativeUrl ) ; if ( _UNKNOWN_ . protocol === _UNKNOWN_ . protocol && _UNKNOWN_ . host === _UNKNOWN_ . host ) { let _UNKNOWN_ = path . posix . dirname ( _UNKNOWN_ . pathname ? _UNKNOWN_ . pathname + 's' : 's' ) ; let _UNKNOWN_ = _UNKNOWN_ . pathname || 's' ; if ( _UNKNOWN_ ( _UNKNOWN_ ) || _UNKNOWN_ ( _UNKNOWN_ ) ) { _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; } const pathname = _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; return url . format ( { pathname : pathname , search : _UNKNOWN_ . search , hash : _UNKNOWN_ . hash , } ) as FileRelativeUrl ; } return relativeUrl as FileRelativeUrl ; } function _UNKNOWN_ ( path ) { return path . startsWith ( 's' ) ? path : 's' + path ; } </s>	O O O O O O $any$ O O O O O O $any$ O O O O $complex$ O O O O O $any$ O $any$ O O O O O $any$ O O O O O $T$ O $any$ O O $T$ O $any$ O O $any$ O O $string$ O $T$ O O O O O O $string$ O $boolean$ O O O O $T$ O O $T$ O O O O O O $any$ O O O O $ResolvedUrl$ O $string$ O O O $any$ O $any$ O $string$ O $string$ O O O $any$ O O O $any$ O O O O $T$ O $any$ O O $T$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $T$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $T$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O $undefined$ O $any$ O $any$ O $undefined$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O $boolean$ O $string$ O O O $complex$ O $RegExp$ O $boolean$ O $string$ O O O O O $boolean$ O $string$ O O O $string$ O $complex$ O $complex$ O $string$ O O O O O O $string$ O $string$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $string$ O O $string[]$ O O O O O O O O $string[]$ O $number$ O O O O O $T$ O $any$ O $any$ O O O O O O $string$ O $string[]$ O $string[]$ O $number$ O O O O O $any$ O $any$ O $any$ O O $string[]$ O O O $string$ O $boolean$ O O O O $T$ O $any$ O O $any$ O O O O $any$ O $any$ O O $T$ O $any$ O $ResolvedUrl$ O $ResolvedUrl$ O O $any$ O $any$ O O O $boolean$ O $T$ O O O O O O $T$ O O O $any$ O $any$ O $any$ O $any$ O $T$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O $any$ O O $boolean$ O $any$ O O O $any$ O $string$ O $any$ O O $any$ O $string$ O $any$ O O O O $string$ O $string$ O $any$ O $any$ O O O $any$ O $any$ O O $string$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O $string$ O $string$ O O O $string$ O $boolean$ O O O O $string$ O O O $string$ O O O
<s> import * as clone from 's' ; import * as 0 from 's' ; import { ASTNode , _UNKNOWN_ , serialize , treeAdapters } from 's' ; import { Document , FileRelativeUrl , ParsedHtmlDocument , ResolvedUrl } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import constants from 's' ; import { _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , prepend , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import _UNKNOWN_ from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { find } from 's' ; export class _UNKNOWN_ { document : Document ; constructor ( public _UNKNOWN_ , public _UNKNOWN_ , public manifest ) { } async bundle ( ) < _UNKNOWN_ > { this . document = await this . _UNKNOWN_ ( ) ; let ast = clone ( this . document . parsedDocument . ast ) ; 0 . _UNKNOWN_ ( ast ) ; this . _UNKNOWN_ ( ast ) ; this . _UNKNOWN_ ( ast , this . _UNKNOWN_ . url ) ; this . document = await this . _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ . url , serialize ( ast ) ) ; await this . _UNKNOWN_ ( ast ) ; if ( this . _UNKNOWN_ . _UNKNOWN_ ) { await this . _UNKNOWN_ ( ast ) ; } if ( this . _UNKNOWN_ . _UNKNOWN_ ) { await this . _UNKNOWN_ ( ast ) ; await this . _UNKNOWN_ ( ast ) ; } if ( this . _UNKNOWN_ . _UNKNOWN_ ) { _UNKNOWN_ ( ast ) ; } this . _UNKNOWN_ ( ast ) ; if ( this . _UNKNOWN_ . sourcemaps ) { ast = _UNKNOWN_ ( this . document , ast ) ; } const content = serialize ( ast ) ; const files = [ ... this . _UNKNOWN_ . bundle . files ] ; return { ast , content , files } ; } private async _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) { const _UNKNOWN_ = 0 . queryAll ( _UNKNOWN_ . ast , _UNKNOWN_ . _UNKNOWN_ ) ; const promises = _UNKNOWN_ . map ( _UNKNOWN_ => { let content = 0 . _UNKNOWN_ ( _UNKNOWN_ ) ; const sourceRange = _UNKNOWN_ . sourceRangeForStartTag ( _UNKNOWN_ ) ! ; return _UNKNOWN_ ( this . _UNKNOWN_ . analyzer , _UNKNOWN_ , content , sourceRange . end . line , sourceRange . end . column , - sourceRange . end . line + 0 , - sourceRange . end . column ) . then ( _UNKNOWN_ => { 0 . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ( _UNKNOWN_ ) ) ; } ) ; } ) ; return Promise . all ( promises ) ; } private _UNKNOWN_ ( ast , _UNKNOWN_ ) { const _UNKNOWN_ = 0 . query ( ast , _UNKNOWN_ . _UNKNOWN_ ) ; const body = 0 . query ( ast , _UNKNOWN_ . body ) ; if ( body ) { if ( _UNKNOWN_ && 0 . predicates . _UNKNOWN_ ( _UNKNOWN_ . body ) ( _UNKNOWN_ ) ) { _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } else { prepend ( body , _UNKNOWN_ ) ; } } else { 0 . append ( ast , _UNKNOWN_ ) ; } } private _UNKNOWN_ ( ) { const hidden = 0 . constructors . element ( 's' ) ; 0 . setAttribute ( hidden , 's' , 's' ) ; 0 . setAttribute ( hidden , 's' , 's' ) ; return hidden ; } private _UNKNOWN_ ( url : FileRelativeUrl | ResolvedUrl ) { const link = 0 . constructors . element ( 's' ) ; 0 . setAttribute ( link , 's' , 's' ) ; 0 . setAttribute ( link , 's' , url ) ; return link ; } private _UNKNOWN_ ( ast ) { const _UNKNOWN_ = 0 . query ( ast , _UNKNOWN_ . _UNKNOWN_ ) || this . _UNKNOWN_ ( ) ; if ( ! _UNKNOWN_ . parentNode ) { this . _UNKNOWN_ ( ast , _UNKNOWN_ ) ; } return _UNKNOWN_ ; } private _UNKNOWN_ ( ast ) { const _UNKNOWN_ = [ ... this . document . getFeatures ( { kind : 's' , _UNKNOWN_ : true , imported : false } ) ] . filter ( ( i ) => ! i . lazy ) ; const _UNKNOWN_ = new Map ( < [ ResolvedUrl , ResolvedUrl [ ] ] [ ] > _UNKNOWN_ . map ( ( _UNKNOWN_ ) => [ _UNKNOWN_ . document . url , [ ... _UNKNOWN_ . document . getFeatures ( { kind : 's' , imported : true , _UNKNOWN_ : true } ) ] . filter ( ( i ) => ! i . lazy ) . map ( ( feature ) => feature . document . url ) ] ) ) ; for ( const _UNKNOWN_ of this . _UNKNOWN_ . bundle . files ) { if ( this . _UNKNOWN_ . url === _UNKNOWN_ ) { continue ; } if ( _UNKNOWN_ . find ( ( e ) => e . document . url === _UNKNOWN_ ) ) { continue ; } let _UNKNOWN_ = undefined ; for ( const _UNKNOWN_ of _UNKNOWN_ . filter ( ( e ) => ! this . _UNKNOWN_ . bundle . files . has ( e . document . url ) ) ) { if ( _UNKNOWN_ . get ( _UNKNOWN_ . document . url ) ! . indexOf ( _UNKNOWN_ ) !== - 0 ) { const _UNKNOWN_ = 0 . query ( ast , ( node ) => _UNKNOWN_ ( node , _UNKNOWN_ . astNode ) ) ; if ( _UNKNOWN_ && ( ! _UNKNOWN_ || _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ) ) { _UNKNOWN_ = _UNKNOWN_ ; } } } const _UNKNOWN_ = this . _UNKNOWN_ . analyzer . urlResolver . relative ( this . _UNKNOWN_ . url , _UNKNOWN_ ) ; const _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ ) ; if ( _UNKNOWN_ ) { 0 . insertBefore ( _UNKNOWN_ . parentNode ! , _UNKNOWN_ , _UNKNOWN_ ) ; } else { const _UNKNOWN_ = this . _UNKNOWN_ ( ast ) ; 0 . append ( _UNKNOWN_ . parentNode ! , _UNKNOWN_ ) ; } } } private async _UNKNOWN_ ( _UNKNOWN_ ) { const _UNKNOWN_ = 0 . getAttribute ( _UNKNOWN_ , 's' ) ! . match ( "s" ) ; const _UNKNOWN_ = 0 . getAttribute ( _UNKNOWN_ , 's' ) ! as FileRelativeUrl ; const _UNKNOWN_ = this . _UNKNOWN_ . analyzer . urlResolver . resolve ( this . _UNKNOWN_ . url , _UNKNOWN_ ) ; if ( _UNKNOWN_ === undefined ) { return ; } const _UNKNOWN_ = this . manifest . _UNKNOWN_ ( _UNKNOWN_ ) ; if ( ! _UNKNOWN_ ) { if ( this . _UNKNOWN_ . bundle . _UNKNOWN_ . has ( _UNKNOWN_ ) ) { _UNKNOWN_ ( _UNKNOWN_ ) ; return ; } this . _UNKNOWN_ . bundle . _UNKNOWN_ . add ( _UNKNOWN_ ) ; } if ( ! _UNKNOWN_ ) { if ( ! this . _UNKNOWN_ . _UNKNOWN_ . some ( ( u ) => u === _UNKNOWN_ || _UNKNOWN_ . startsWith ( _UNKNOWN_ ( u ) ) ) ) { this . _UNKNOWN_ . bundle . _UNKNOWN_ . add ( _UNKNOWN_ ) ; } return ; } if ( this . _UNKNOWN_ . url === _UNKNOWN_ ) { _UNKNOWN_ ( _UNKNOWN_ ) ; return ; } const _UNKNOWN_ = _UNKNOWN_ . url !== this . _UNKNOWN_ . url ; const _UNKNOWN_ = _UNKNOWN_ && this . _UNKNOWN_ . bundle . _UNKNOWN_ . has ( _UNKNOWN_ . url ) && _UNKNOWN_ !== _UNKNOWN_ . url ; if ( _UNKNOWN_ ) { if ( _UNKNOWN_ && ! _UNKNOWN_ ) { _UNKNOWN_ ( _UNKNOWN_ ) ; return ; } const relative = this . _UNKNOWN_ . analyzer . urlResolver . relative ( this . _UNKNOWN_ . url , _UNKNOWN_ . url ) || _UNKNOWN_ . url ; 0 . setAttribute ( _UNKNOWN_ , 's' , relative ) ; this . _UNKNOWN_ . bundle . _UNKNOWN_ . add ( _UNKNOWN_ . url ) ; return ; } if ( _UNKNOWN_ ) { return ; } const _UNKNOWN_ = find ( this . document . getFeatures ( { kind : 's' , imported : true , externalPackages : true } ) , ( i ) => i . document && i . document . url === _UNKNOWN_ ) ; if ( ! _UNKNOWN_ ) { return ; } const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ . document . parsedDocument . contents , { _UNKNOWN_ : true } ) ; this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , this . document . url ) ; if ( this . _UNKNOWN_ . sourcemaps ) { const _UNKNOWN_ = new ParsedHtmlDocument ( { url : this . _UNKNOWN_ . url , baseUrl : this . document . parsedDocument . baseUrl , contents : _UNKNOWN_ . document . parsedDocument . contents , ast : _UNKNOWN_ , isInline : false , locationOffset : undefined , astNode : undefined , } ) ; await this . _UNKNOWN_ ( this . document , _UNKNOWN_ , _UNKNOWN_ ) ; } const _UNKNOWN_ = 0 . queryAll ( _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ . parentNode ! , _UNKNOWN_ , _UNKNOWN_ . childNodes ! ) ; _UNKNOWN_ ( _UNKNOWN_ ) ; this . _UNKNOWN_ . bundle . _UNKNOWN_ . add ( _UNKNOWN_ ) ; for ( const _UNKNOWN_ of _UNKNOWN_ ) { await this . _UNKNOWN_ ( _UNKNOWN_ ) ; } } private async _UNKNOWN_ ( ast ) { const _UNKNOWN_ = 0 . queryAll ( ast , _UNKNOWN_ . _UNKNOWN_ ) ; for ( const _UNKNOWN_ of _UNKNOWN_ ) { await this . _UNKNOWN_ ( _UNKNOWN_ ) ; } } private async _UNKNOWN_ ( scriptTag ) { const _UNKNOWN_ = 0 . getAttribute ( scriptTag , 's' ) ! ; const _UNKNOWN_ = this . _UNKNOWN_ . analyzer . urlResolver . resolve ( this . _UNKNOWN_ . url , _UNKNOWN_ as FileRelativeUrl ) ; if ( _UNKNOWN_ === undefined ) { return ; } if ( this . _UNKNOWN_ . _UNKNOWN_ . some ( ( e ) => _UNKNOWN_ === e || _UNKNOWN_ . startsWith ( _UNKNOWN_ ( e ) ) ) ) { return ; } const _UNKNOWN_ = find ( this . document . getFeatures ( { kind : 's' , imported : true , externalPackages : true } ) , ( i ) => i . document && i . document . url === _UNKNOWN_ ) ; if ( ! _UNKNOWN_ ) { this . _UNKNOWN_ . bundle . _UNKNOWN_ . add ( _UNKNOWN_ ) ; return ; } let _UNKNOWN_ = _UNKNOWN_ . document . parsedDocument . contents ; if ( this . _UNKNOWN_ . sourcemaps ) { _UNKNOWN_ = await _UNKNOWN_ ( this . _UNKNOWN_ . analyzer , _UNKNOWN_ , 's' + _UNKNOWN_ , - 0 , 0 , 0 , 0 ) ; } 0 . removeAttribute ( scriptTag , 's' ) ; 0 . _UNKNOWN_ ( scriptTag , _UNKNOWN_ ( _UNKNOWN_ , true ) ) ; this . _UNKNOWN_ . bundle . _UNKNOWN_ . add ( _UNKNOWN_ ) ; return _UNKNOWN_ ; } private async _UNKNOWN_ ( ast ) { const _UNKNOWN_ = 0 . queryAll ( ast , _UNKNOWN_ . _UNKNOWN_ ) ; for ( const _UNKNOWN_ of _UNKNOWN_ ) { await this . _UNKNOWN_ ( _UNKNOWN_ ) ; } } private async _UNKNOWN_ ( _UNKNOWN_ ) { const _UNKNOWN_ = 0 . getAttribute ( _UNKNOWN_ , 's' ) ! ; const _UNKNOWN_ = this . _UNKNOWN_ . analyzer . urlResolver . resolve ( this . _UNKNOWN_ . url , _UNKNOWN_ as FileRelativeUrl ) ; if ( _UNKNOWN_ === undefined ) { return ; } if ( this . _UNKNOWN_ . _UNKNOWN_ . some ( ( e ) => _UNKNOWN_ === e || _UNKNOWN_ . startsWith ( _UNKNOWN_ ( e ) ) ) ) { return ; } const _UNKNOWN_ = find ( this . document . getFeatures ( { kind : 's' , imported : true , externalPackages : true } ) , ( i ) => i . document && i . document . url === _UNKNOWN_ ) || find ( this . document . getFeatures ( { kind : 's' , imported : true , externalPackages : true } ) , ( i ) => i . document && i . document . url === _UNKNOWN_ ) ; if ( ! _UNKNOWN_ ) { this . _UNKNOWN_ . bundle . _UNKNOWN_ . add ( _UNKNOWN_ ) ; return ; } const _UNKNOWN_ = _UNKNOWN_ . document . parsedDocument . contents ; const media = 0 . getAttribute ( _UNKNOWN_ , 's' ) ; let _UNKNOWN_ = this . _UNKNOWN_ . url ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ , 0 . predicates . hasTagName ( 's' ) ) ; if ( ! this . _UNKNOWN_ . _UNKNOWN_ && _UNKNOWN_ && 0 . hasAttribute ( _UNKNOWN_ , 's' ) ) { const assetPath = ( 0 . getAttribute ( _UNKNOWN_ , 's' ) || 's' ) as FileRelativeUrl ; if ( assetPath ) { _UNKNOWN_ = this . _UNKNOWN_ . analyzer . urlResolver . resolve ( _UNKNOWN_ , assetPath ) ! ; } } const _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; const _UNKNOWN_ = 0 . constructors . element ( 's' ) ; if ( media ) { 0 . setAttribute ( _UNKNOWN_ , 's' , media ) ; } 0 . replace ( _UNKNOWN_ , _UNKNOWN_ ) ; 0 . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; this . _UNKNOWN_ . bundle . _UNKNOWN_ . add ( _UNKNOWN_ ) ; return _UNKNOWN_ ; } private async _UNKNOWN_ ( ast ) { const _UNKNOWN_ = 0 . queryAll ( ast , _UNKNOWN_ . _UNKNOWN_ ) ; let _UNKNOWN_ : ( ASTNode | undefined ) ; for ( const _UNKNOWN_ of _UNKNOWN_ ) { const style = await this . _UNKNOWN_ ( _UNKNOWN_ ) ; if ( style ) { this . _UNKNOWN_ ( style , _UNKNOWN_ ) ; _UNKNOWN_ = style ; } } } private async _UNKNOWN_ ( ast ) { const _UNKNOWN_ = 0 . queryAll ( ast , _UNKNOWN_ . _UNKNOWN_ , undefined , 0 . _UNKNOWN_ ) ; for ( const _UNKNOWN_ of _UNKNOWN_ ) { await this . _UNKNOWN_ ( _UNKNOWN_ ) ; } } private _UNKNOWN_ ( style , _UNKNOWN_ ? ) { const domModule = 0 . _UNKNOWN_ ( style , 0 . predicates . hasTagName ( 's' ) ) ; if ( ! domModule ) { return ; } let template = 0 . query ( domModule , _UNKNOWN_ . template ) ; if ( ! template ) { template = 0 . constructors . element ( 's' ) ! ; treeAdapters . default . _UNKNOWN_ ( template , 0 . constructors . fragment ( ) ) ; prepend ( domModule , template ) ; } _UNKNOWN_ ( style ) ; if ( _UNKNOWN_ && ! 0 . query ( domModule , ( n ) => n === _UNKNOWN_ , 0 . _UNKNOWN_ ) ) { _UNKNOWN_ = undefined ; } if ( ! _UNKNOWN_ ) { prepend ( treeAdapters . default . _UNKNOWN_ ( template ) , style ) ; } else { _UNKNOWN_ ( _UNKNOWN_ , style ) ; } } private _UNKNOWN_ ( ast ) { const head = 0 . query ( ast , _UNKNOWN_ . head ) ; if ( ! head ) { return ; } const _UNKNOWN_ = 0 . query ( head , _UNKNOWN_ . _UNKNOWN_ ) ; if ( ! _UNKNOWN_ ) { return ; } for ( const node of [ _UNKNOWN_ ] . concat ( _UNKNOWN_ ( _UNKNOWN_ ) ) ) { if ( _UNKNOWN_ . _UNKNOWN_ ( node ) ) { _UNKNOWN_ ( node ) ; 0 . append ( this . _UNKNOWN_ ( ast ) , node ) ; } } } private _UNKNOWN_ ( ast ) { const _UNKNOWN_ = 0 . queryAll ( ast , 0 . predicates . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ , 0 . predicates . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ ) ) ) ; for ( const _UNKNOWN_ of _UNKNOWN_ ) { _UNKNOWN_ ( _UNKNOWN_ ) ; 0 . append ( this . _UNKNOWN_ ( ast ) , _UNKNOWN_ ) ; } } private async _UNKNOWN_ ( ) < Document > { if ( ! this . _UNKNOWN_ . bundle . files . has ( this . _UNKNOWN_ . url ) ) { return this . _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ . url , 's' ) ; } const analysis = await this . _UNKNOWN_ . analyzer . analyze ( [ this . _UNKNOWN_ . url ] ) ; const document = _UNKNOWN_ ( analysis , this . _UNKNOWN_ . url ) ; const ast = clone ( document . parsedDocument . ast ) ; this . _UNKNOWN_ ( ast ) ; this . _UNKNOWN_ ( ast ) ; 0 . _UNKNOWN_ ( ast ) ; return this . _UNKNOWN_ . _UNKNOWN_ ( document . url , serialize ( ast ) ) ; } private _UNKNOWN_ ( ast ) { for ( const div of 0 . queryAll ( ast , _UNKNOWN_ . _UNKNOWN_ ) ) { if ( serialize ( div ) . trim ( ) === 's' ) { 0 . remove ( div ) ; } } } private _UNKNOWN_ ( ast , _UNKNOWN_ , _UNKNOWN_ ) { this . _UNKNOWN_ ( ast , _UNKNOWN_ , _UNKNOWN_ ) ; this . _UNKNOWN_ ( ast , _UNKNOWN_ , _UNKNOWN_ ) ; this . _UNKNOWN_ ( ast , _UNKNOWN_ , _UNKNOWN_ ) ; } private _UNKNOWN_ ( ast , _UNKNOWN_ ) { const _UNKNOWN_ = 0 . query ( ast , _UNKNOWN_ . base ) ; const p = 0 . predicates ; if ( ! _UNKNOWN_ ) { return ; } for ( const _UNKNOWN_ of 0 . queryAll ( ast , _UNKNOWN_ . base ) ) { _UNKNOWN_ ( _UNKNOWN_ ) ; } if ( 0 . predicates . hasAttr ( 's' ) ( _UNKNOWN_ ) ) { const baseUrl = this . _UNKNOWN_ . analyzer . urlResolver . resolve ( _UNKNOWN_ , 0 . getAttribute ( _UNKNOWN_ , 's' ) ! as FileRelativeUrl ) ; if ( baseUrl ) { this . _UNKNOWN_ ( ast , baseUrl , _UNKNOWN_ ) ; } } if ( p . hasAttr ( 's' ) ( _UNKNOWN_ ) ) { const _UNKNOWN_ = 0 . getAttribute ( _UNKNOWN_ , 's' ) ! ; const _UNKNOWN_ = 0 . queryAll ( ast , p . _UNKNOWN_ ( p . _UNKNOWN_ ( p . hasTagName ( 's' ) , p . hasTagName ( 's' ) ) , p . _UNKNOWN_ ( p . hasAttr ( 's' ) ) ) ) ; for ( const tag of _UNKNOWN_ ) { 0 . setAttribute ( tag , 's' , _UNKNOWN_ ) ; } } } private _UNKNOWN_ ( cssText , _UNKNOWN_ , _UNKNOWN_ ) { return cssText . replace ( constants . URL , ( match ) => { let path = match . replace ( "s" , 's' ) . slice ( 0 , - 0 ) ; path = _UNKNOWN_ ( path , _UNKNOWN_ , _UNKNOWN_ ) ; return 's' + path + 's' ; } ) ; } private _UNKNOWN_ ( ast , _UNKNOWN_ , _UNKNOWN_ ) { const nodes = 0 . queryAll ( ast , _UNKNOWN_ . _UNKNOWN_ , undefined , this . _UNKNOWN_ . _UNKNOWN_ ? 0 . _UNKNOWN_ : 0 . _UNKNOWN_ ) ; for ( const node of nodes ) { for ( const attr of constants . _UNKNOWN_ ) { const _UNKNOWN_ = 0 . getAttribute ( node , attr ) ; if ( _UNKNOWN_ && ! _UNKNOWN_ ( _UNKNOWN_ ) ) { let _UNKNOWN_ ; if ( attr === 's' ) { _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; } else { _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; } 0 . setAttribute ( node , attr , _UNKNOWN_ ) ; } } } } private _UNKNOWN_ ( ast , _UNKNOWN_ , _UNKNOWN_ ) { const _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ? 0 . _UNKNOWN_ : 0 . _UNKNOWN_ ; const _UNKNOWN_ = 0 . queryAll ( ast , _UNKNOWN_ . _UNKNOWN_ , undefined , _UNKNOWN_ ) ; if ( ! this . _UNKNOWN_ . _UNKNOWN_ ) { for ( const domModule of 0 . queryAll ( ast , 0 . predicates . hasTagName ( 's' ) ) ) { for ( const _UNKNOWN_ of 0 . queryAll ( domModule , _UNKNOWN_ . _UNKNOWN_ , undefined , _UNKNOWN_ ) ) { const _UNKNOWN_ = _UNKNOWN_ . indexOf ( _UNKNOWN_ ) ; if ( _UNKNOWN_ > - 0 ) { _UNKNOWN_ . splice ( _UNKNOWN_ , 0 ) ; } } } } for ( const node of _UNKNOWN_ ) { let _UNKNOWN_ = 0 . _UNKNOWN_ ( node ) ; _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; 0 . _UNKNOWN_ ( node , _UNKNOWN_ ) ; } } private _UNKNOWN_ ( ast , _UNKNOWN_ , _UNKNOWN_ ) { const domModules = 0 . queryAll ( ast , _UNKNOWN_ . _UNKNOWN_ ) ; for ( let i = 0 , node ; i < domModules . length ; i ++ ) { node = domModules [ i ] ; const _UNKNOWN_ = this . _UNKNOWN_ . analyzer . urlResolver . relative ( _UNKNOWN_ , _UNKNOWN_ ( _UNKNOWN_ ) as ResolvedUrl ) ; if ( _UNKNOWN_ !== 's' ) { 0 . setAttribute ( node , 's' , _UNKNOWN_ ) ; } } } } </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $complex$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $void$ O $void$ O $boolean$ O O O $void$ O $void$ O $any[]$ O $void$ O O O O O O $Promise<...>$ O O O O O O $any$ O O O O O $string$ O O O O O $T$ O $boolean$ O $any$ O $T$ O O O O O O $T$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O $any$ O O O O $Promise$ O O O $any$ O O O O $any$ O O O O $Promise<any>$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $Promise<any>$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $Promise<void>$ O $any$ O O O O O O $any$ O $boolean$ O O O O O $Promise<void>$ O $any$ O O O O O O O $any$ O $boolean$ O O O O O $Promise<void>$ O $any$ O O O O O $Promise<void>$ O $any$ O O O O O O O $any$ O $boolean$ O O $void$ O $any$ O O O O O $void$ O $any$ O O O O O O $any$ O $boolean$ O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any[]$ O O O O O $any$ O $any$ O $Set<any>$ O O O O $any$ O $any$ O $any[]$ O O O O O $complex$ O $Document$ O $ParsedHtmlDocument$ O $ResolvedUrl$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $Promise<...>$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $string$ O O $any$ O $any$ O $any$ O $string$ O $string$ O O O O O O O O O O $PromiseConstructor$ O O O $any$ O O O O $void$ O $ASTNode$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $ASTNode$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $ASTNode$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O $ASTNode$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O $any$ O O O $void$ O $ASTNode$ O O O $any[]$ O O O O O $any$ O $any$ O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O $complex$ O O $any$ O O O $any$ O $any$ O O O $complex$ O O $MapConstructor$ O O O $any$ O $any$ O O O O O O $any[]$ O $U[]$ O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O $complex$ O O $any$ O O O $any$ O $any$ O O $U[]$ O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O $Set<any>$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any[]$ O $complex$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $undefined$ O O O O $any$ O $any[]$ O $complex$ O O $any$ O O O O O $any$ O $any$ O $Set<any>$ O $boolean$ O $any$ O $any$ O $any$ O O O O O O $complex$ O $any[]$ O $any$ O $any$ O $any$ O O O $number$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $boolean$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $Promise<void>$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $undefined$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O $Set<any>$ O $boolean$ O $any$ O O O $void$ O $any$ O O O O O O O $any$ O $any$ O $Set<any>$ O $Set<any>$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any[]$ O $boolean$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $T$ O $any$ O O O O O O O $any$ O $any$ O $Set<any>$ O $Set<any>$ O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O O $void$ O $any$ O O O O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O O $boolean$ O $boolean$ O O O $any$ O $any$ O $Set<any>$ O $boolean$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $boolean$ O O O O $boolean$ O O $any$ O O $void$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $Set<any>$ O $Set<any>$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $unknown$ O $T$ O O O $any$ O $any$ O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O $unknown$ O O $unknown$ O $any$ O $unknown$ O $any$ O $any$ O $any$ O O O O O $unknown$ O O O O O O $any$ O $any$ O $unknown$ O $any$ O $any$ O $any$ O O $boolean$ O O O O O O O $void$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $boolean$ O O O $any$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $unknown$ O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O $undefined$ O $undefined$ O $undefined$ O $undefined$ O O O O O O O $complex$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $void$ O $any$ O O O O $any$ O $any$ O $Set<any>$ O $Set<any>$ O $any$ O O O O O $any$ O $any$ O O O O O $Promise<void>$ O $any$ O O O O O O $Promise<void>$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $Promise<void>$ O $any$ O O O O O O $Promise<any>$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $undefined$ O O O O O O O O O $any$ O $any[]$ O $boolean$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $T$ O $any$ O O O O O O O O O $unknown$ O $T$ O O O $any$ O $any$ O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O $unknown$ O O $unknown$ O $any$ O $unknown$ O $any$ O $any$ O $any$ O O O O O $unknown$ O O O O $any$ O $any$ O $Set<any>$ O $Set<any>$ O $any$ O O O O O O $any$ O $unknown$ O $any$ O $any$ O $any$ O O O O O $any$ O $boolean$ O O $any$ O O $Promise<...>$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $string$ O $any$ O O O O O O O $any$ O $any$ O $Set<any>$ O $Set<any>$ O $any$ O O O $any$ O O O O $Promise<void>$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $Promise<any>$ O $any$ O O O O O O $Promise<any>$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $undefined$ O O O O O O O O O $any$ O $any[]$ O $boolean$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $T$ O $any$ O O O O O O O O O $unknown$ O $T$ O O O $any$ O $any$ O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O $unknown$ O O $unknown$ O $any$ O $unknown$ O $any$ O $any$ O $any$ O O $T$ O O O $any$ O $any$ O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O $unknown$ O O $unknown$ O $any$ O $unknown$ O $any$ O $any$ O $any$ O O O O O $unknown$ O O O O $any$ O $any$ O $Set<any>$ O $Set<any>$ O $any$ O O O O O O $any$ O $unknown$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O $boolean$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $string$ O O O $string$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $Set<any>$ O $Set<any>$ O $any$ O O O $any$ O O O O $Promise<void>$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O O $Promise<any>$ O $any$ O O O O $any$ O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $Promise<void>$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $undefined$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $Promise<any>$ O $any$ O O O O O $void$ O $ASTNode$ O $any$ $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O $void$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $undefined$ O O O O O $any$ O O $void$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $void$ O $any$ O $any$ O O O O O $void$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $any$ O O $complex$ O $any[]$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $void$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O O $void$ O $ASTNode$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O $void$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O O $Promise$ O O O $any$ O O O O O O O $any$ O $any$ O $Set<any>$ O $boolean$ O O O $any$ O $any$ O O O O O O $any$ O $Promise<any>$ O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $Promise<any>$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $ASTNode$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $void$ O $ASTNode$ O $ResolvedUrl$ O $ResolvedUrl$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $void$ O $ASTNode$ O $ResolvedUrl$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O O $string$ O $string$ O $ResolvedUrl$ O $ResolvedUrl$ O O O $string$ O $complex$ O $complex$ O $RegExp$ O O $string$ O O O O $string$ O $string$ O $complex$ O O O O O O $string$ O O O O O O O $string$ O $any$ O $string$ O $any$ O $any$ O O O O O $string$ O O O O O O O O $void$ O $ASTNode$ O $ResolvedUrl$ O $ResolvedUrl$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $undefined$ O O O $any$ O $boolean$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $string$ O $complex$ O $string[]$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O $any$ O O $boolean$ O $any$ O O O O $string$ O O O $string$ O O O O $string$ O O O $string$ O $any$ O $any$ O $any$ O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O $string$ O O O O O O O $void$ O $ASTNode$ O $ResolvedUrl$ O $ResolvedUrl$ O O O $any$ O O O $any$ O $boolean$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $undefined$ O $any$ O O O O O O O $any$ O $boolean$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $undefined$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $string$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $ASTNode$ O $ResolvedUrl$ O $ResolvedUrl$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $number$ O O O $ASTNode$ O $number$ O $any$ O $any$ O $number$ O O O $any$ O $any$ O $number$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $T$ O $any$ O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O
<s> import { Analyzer , Document , FSUrlLoader , InMemoryOverlayUrlLoader , ResolvedUrl } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { resolvePath } from 's' ; export * from 's' ; export interface Options { analyzer ? : Analyzer ; _UNKNOWN_ ? : ResolvedUrl [ ] ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; sourcemaps ? : boolean ; _UNKNOWN_ ? : boolean ; strategy ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; } export interface _UNKNOWN_ { documents : _UNKNOWN_ ; manifest : _UNKNOWN_ ; } export class _UNKNOWN_ { analyzer : Analyzer ; _UNKNOWN_ : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ : ResolvedUrl [ ] ; _UNKNOWN_ : boolean ; sourcemaps : boolean ; _UNKNOWN_ : boolean ; strategy : _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ ; private _UNKNOWN_ : InMemoryOverlayUrlLoader ; constructor ( options ? ) { const opts = options ? options : { } ; if ( opts . analyzer ) { const analyzer = opts . analyzer ; this . _UNKNOWN_ = new InMemoryOverlayUrlLoader ( analyzer ) ; this . analyzer = analyzer . _UNKNOWN_ ( { urlLoader : this . _UNKNOWN_ } ) ; } else { this . _UNKNOWN_ = new InMemoryOverlayUrlLoader ( new FSUrlLoader ( resolvePath ( 's' ) ) ) ; this . analyzer = new Analyzer ( { urlLoader : this . _UNKNOWN_ } ) ; } this . _UNKNOWN_ = Array . isArray ( opts . _UNKNOWN_ ) ? opts . _UNKNOWN_ : [ ] ; this . _UNKNOWN_ = Boolean ( opts . _UNKNOWN_ ) ; this . _UNKNOWN_ = opts . _UNKNOWN_ === undefined ? true : opts . _UNKNOWN_ ; this . _UNKNOWN_ = opts . _UNKNOWN_ === undefined ? true : opts . _UNKNOWN_ ; this . _UNKNOWN_ = Boolean ( opts . _UNKNOWN_ ) ; this . sourcemaps = Boolean ( opts . sourcemaps ) ; this . strategy = opts . strategy || _UNKNOWN_ . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = opts . _UNKNOWN_ || _UNKNOWN_ . _UNKNOWN_ ( this . analyzer . resolveUrl ( 's' ) ! ) ; } async _UNKNOWN_ ( url , contents ) < Document > { this . _UNKNOWN_ . urlContentsMap . set ( url , contents ) ; await this . analyzer . filesChanged ( [ url ] ) ; const analysis = await this . analyzer . analyze ( [ url ] ) ; return _UNKNOWN_ ( analysis , url ) ; } async bundle ( manifest ) < _UNKNOWN_ > { const documents = new Map < ResolvedUrl , _UNKNOWN_ > ( ) ; manifest = manifest . fork ( ) ; for ( const _UNKNOWN_ of manifest . _UNKNOWN_ ) { const _UNKNOWN_ = _UNKNOWN_ [ 0 ] ; const bundle = { url : _UNKNOWN_ , bundle : _UNKNOWN_ [ 0 ] } ; if ( bundle . url . endsWith ( 's' ) ) { documents . set ( _UNKNOWN_ , await ( new _UNKNOWN_ ( this , bundle , manifest ) . bundle ( ) ) ) ; } } return { manifest , documents } ; } async _UNKNOWN_ ( _UNKNOWN_ : ResolvedUrl [ ] ) < _UNKNOWN_ > { const _UNKNOWN_ = await _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , this . analyzer ) ; let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ ) ; this . _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ = this . strategy ( _UNKNOWN_ ) ; return new _UNKNOWN_ ( _UNKNOWN_ , this . _UNKNOWN_ ) ; } private _UNKNOWN_ ( _UNKNOWN_ : _UNKNOWN_ [ ] ) { for ( const bundle of _UNKNOWN_ ) { for ( const exclude of this . _UNKNOWN_ ) { const _UNKNOWN_ = this . analyzer . resolveUrl ( exclude ) ; if ( ! _UNKNOWN_ ) { continue ; } bundle . files . delete ( _UNKNOWN_ ) ; const _UNKNOWN_ = exclude . endsWith ( 's' ) ? exclude : exclude + 's' ; for ( const file of bundle . files ) { if ( file . startsWith ( _UNKNOWN_ ) ) { bundle . files . delete ( file ) ; } } } } let b = 0 ; while ( b < _UNKNOWN_ . length ) { if ( _UNKNOWN_ [ b ] . files . size < 0 ) { _UNKNOWN_ . splice ( b , 0 ) ; continue ; } ++ b ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $string$ O O O O O O O O O O O $any$ O $any$ O O $any$ O $any[]$ O O $any$ O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $boolean$ O O O $boolean$ O O O $any[]$ O $any$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $Options$ $Options$ O O O $Options$ O $Options$ O $Options$ O O O O O O $Options$ O $any$ O O O $any$ O $Options$ O $any$ O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O $string$ O O O O O O O O $any$ O O $any$ O O $any$ O O O $any$ O O O O O O $any[]$ O $ArrayConstructor$ O $complex$ O $Options$ O $any[]$ O O $Options$ O $any[]$ O O O O O O $boolean$ O $BooleanConstructor$ O $Options$ O $boolean$ O O O O $boolean$ O $Options$ O $boolean$ O $undefined$ O O O $Options$ O $boolean$ O O O $boolean$ O $Options$ O $boolean$ O $undefined$ O O O $Options$ O $boolean$ O O O $boolean$ O $BooleanConstructor$ O $Options$ O $boolean$ O O O O $boolean$ O $BooleanConstructor$ O $Options$ O $boolean$ O O O O $any$ O $Options$ O $any$ O $any$ O $any$ O O O O O $any$ O $Options$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $Promise$ O $ResolvedUrl$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $Promise$ O $any$ O O $any$ O O O $any$ O O $MapConstructor$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $complex$ O $any$ O $complex$ O O O $any$ O $complex$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $complex$ O O O O O O O $complex$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O $complex$ O $any$ O O $any$ O O O O O O O O O $any$ O $any$ O O O O $Promise$ O $any[]$ O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any[]$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $complex$ O O O O $void$ O $any$ O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O O O $void$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O O O $any[]$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $Set<any>$ O $boolean$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $Set<any>$ O O O O $any$ O $any$ O $any$ O O O $any$ O $Set<any>$ O $boolean$ O $any$ O O O O O O O $number$ O O O O O $number$ O $any$ O $number$ O O O O $any$ O $number$ O O $Set<any>$ O $number$ O O O O $any$ O $complex$ O $number$ O O O O O O O O $number$ O O O O O
<s> import * as commandLineArgs from 's' ; import * as _UNKNOWN_ from 's' ; import * as fs from 's' ; import * as mkdirp from 's' ; import * as _UNKNOWN_ from 's' ; import { _UNKNOWN_ } from 's' ; import { Analyzer , FSUrlLoader , MultiUrlLoader , _UNKNOWN_ , PackageRelativeUrl , PackageUrlResolver , _UNKNOWN_ , ResolvedUrl , UrlLoader , UrlResolver } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , resolvePath } from 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = [ { name : 's' , type : Boolean , alias : 's' , description : 's' } , { name : 's' , type : Boolean , alias : 's' , description : 's' } , { name : 's' , type : String , multiple : true , description : 's' } , { name : 's' , type : Boolean , description : 's' } , { name : 's' , type : Boolean , description : 's' } , { name : 's' , type : Boolean , description : 's' } , { name : 's' , type : String , _UNKNOWN_ : _UNKNOWN_ , description : `template` + 's' } , { name : 's' , type : String , _UNKNOWN_ : _UNKNOWN_ , description : 's' + `template` } , { name : 's' , type : String , _UNKNOWN_ : _UNKNOWN_ , description : 's' + `template` } , { name : 's' , type : String , _UNKNOWN_ : _UNKNOWN_ , description : 's' + `template` } , { name : 's' , type : String , _UNKNOWN_ : _UNKNOWN_ , defaultOption : true , multiple : true , description : 's' + 's' } , { name : 's' , type : String , _UNKNOWN_ : `template` , multiple : true , description : `template` + `template` + `template` + `template` + `template` + `template` } , { name : 's' , type : Boolean , description : 's' + 's' + 's' } , { name : 's' , type : Boolean , description : 's' } , { name : 's' , alias : 's' , type : String , _UNKNOWN_ : _UNKNOWN_ , description : 's' + 's' } , ] ; const usage = [ { header : 's' , content : [ 's' ] } , { header : 's' , _UNKNOWN_ : _UNKNOWN_ } , { header : 's' , content : [ { desc : 's' , example : 's' } , { desc : 's' , example : 's' } , { desc : 's' , example : 's' } , { desc : 's' , example : 's' } , { desc : 's' , example : 's' } ] } , ] ; const options = commandLineArgs ( _UNKNOWN_ ) ; const projectRoot = resolvePath ( _UNKNOWN_ ( options . root || 's' ) ) ; const _UNKNOWN_ : PackageRelativeUrl [ ] = options [ 's' ] ; function printHelp ( ) { console . log ( _UNKNOWN_ ( usage ) ) ; } const pkg = require ( 's' ) ; function _UNKNOWN_ ( ) { console . log ( 's' , pkg . version ) ; } if ( options . version ) { _UNKNOWN_ ( ) ; process . exit ( 0 ) ; } if ( options . help || ! _UNKNOWN_ ) { printHelp ( ) ; process . exit ( 0 ) ; } options . _UNKNOWN_ = options . exclude || [ ] ; options . _UNKNOWN_ = options [ 's' ] ; options . _UNKNOWN_ = ! options [ 's' ] ; options . _UNKNOWN_ = Boolean ( options [ 's' ] ) ; options . _UNKNOWN_ = Boolean ( options [ 's' ] ) ; options . _UNKNOWN_ = Boolean ( options [ 's' ] ) ; const _UNKNOWN_ = new FSUrlLoader ( projectRoot ) ; const _UNKNOWN_ = new PackageUrlResolver ( { packageDir : projectRoot } ) ; const _UNKNOWN_ = _UNKNOWN_ ( projectRoot ) ; type _UNKNOWN_ = { prefix : ResolvedUrl ; path : ResolvedUrl ; } ; if ( options . redirect ) { const _UNKNOWN_ : _UNKNOWN_ [ ] = options . redirect . map ( ( redirect ) => { const [ prefix , path ] = redirect . split ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ . resolve ( prefix as any ) ; return { prefix : _UNKNOWN_ , path } ; } ) . filter ( ( r ) => r . prefix && r . path ) ; const resolvers : UrlResolver [ ] = _UNKNOWN_ . map ( ( r ) => new _UNKNOWN_ ( _UNKNOWN_ , r . prefix , _UNKNOWN_ ( r . path ) ) ) ; const loaders : UrlLoader [ ] = _UNKNOWN_ . map ( ( r ) => new FSUrlLoader ( resolvePath ( r . path ) ) ) ; if ( _UNKNOWN_ . length > 0 ) { options . analyzer = new Analyzer ( { urlResolver : new _UNKNOWN_ ( [ ... resolvers , _UNKNOWN_ ] ) , urlLoader : new MultiUrlLoader ( [ ... loaders , _UNKNOWN_ ] ) , } ) ; } } if ( ! options . analyzer ) { options . analyzer = new Analyzer ( { urlResolver : _UNKNOWN_ , urlLoader : _UNKNOWN_ , } ) ; } if ( options . shell ) { options . strategy = _UNKNOWN_ ( options . analyzer . resolveUrl ( options . shell ) , 0 ) ; } ( async ( ) => { const _UNKNOWN_ = new _UNKNOWN_ ( options ) ; let documents ; let manifest ; try { const shell = options . shell ; if ( shell ) { if ( _UNKNOWN_ . indexOf ( shell ) === - 0 ) { throw new Error ( 's' ) ; } } ( { documents , manifest } = await _UNKNOWN_ . bundle ( await _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . map ( ( e ) => { const resolvedUrl = _UNKNOWN_ . analyzer . resolveUrl ( e ) ; if ( ! resolvedUrl ) { throw new Error ( `template` ) ; } return resolvedUrl ; } ) ) ) ) ; } catch ( err ) { console . log ( err ) ; return ; } if ( options [ 's' ] ) { const _UNKNOWN_ = manifest . _UNKNOWN_ ( _UNKNOWN_ . analyzer . urlResolver ) ; const fd = fs . openSync ( options [ 's' ] , 's' ) ; fs . writeSync ( fd , JSON . stringify ( _UNKNOWN_ ) ) ; fs . closeSync ( fd ) ; } const outDir = options [ 's' ] ; if ( documents . size > 0 || outDir ) { if ( ! outDir ) { throw new Error ( 's' ) ; } for ( const [ url , document ] of documents ) { const out = resolvePath ( outDir , _UNKNOWN_ . analyzer . urlResolver . relative ( url ) ) ; const _UNKNOWN_ = _UNKNOWN_ . dirname ( out ) ; mkdirp . sync ( _UNKNOWN_ ) ; const fd = fs . openSync ( out , 's' ) ; fs . writeSync ( fd , document . content ) ; fs . closeSync ( fd ) ; } return ; } const doc = documents . get ( _UNKNOWN_ . analyzer . resolveUrl ( _UNKNOWN_ [ 0 ] ) ! ) ; if ( ! doc ) { return ; } if ( options [ 's' ] ) { const fd = fs . openSync ( options [ 's' ] , 's' ) ; fs . writeSync ( fd , doc . content ) ; fs . closeSync ( fd ) ; } else { process . stdout . write ( doc . content ) ; } } ) ( ) . catch ( ( err ) => { console . log ( err . stack ) ; process . stderr . write ( require ( 's' ) . inspect ( err ) ) ; process . exit ( 0 ) ; } ) ; </s>	O O O O $any$ O O O O O O $string$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $T$ O $any$ O $string$ O O O O O O O O O O O O O O O O O O O $string$ O O O $BooleanConstructor$ O $BooleanConstructor$ O $string$ O O O $string$ O O O O O $string$ O O O $BooleanConstructor$ O $BooleanConstructor$ O $string$ O O O $string$ O O O O O $string$ O O O $StringConstructor$ O $StringConstructor$ O $boolean$ O O O $string$ O O O O O $string$ O O O $BooleanConstructor$ O $BooleanConstructor$ O $string$ O O O O O $string$ O O O $BooleanConstructor$ O $BooleanConstructor$ O $string$ O O O O O $string$ O O O $BooleanConstructor$ O $BooleanConstructor$ O $string$ O O O O O $string$ O O O $StringConstructor$ O $StringConstructor$ O $string$ O O O $string$ O O O O O O O $string$ O O O $StringConstructor$ O $StringConstructor$ O $string$ O O O $string$ O O O O O O O $string$ O O O $StringConstructor$ O $StringConstructor$ O $string$ O O O $string$ O O O O O O O $string$ O O O $StringConstructor$ O $StringConstructor$ O $string$ O O O $string$ O O O O O O O $string$ O O O $StringConstructor$ O $StringConstructor$ O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O O O $string$ O O O $StringConstructor$ O $StringConstructor$ O $string$ O O O $boolean$ O O O $string$ O O O O O O O O O O O O O O O $string$ O O O $BooleanConstructor$ O $BooleanConstructor$ O $string$ O O O O O O O O O $string$ O O O $BooleanConstructor$ O $BooleanConstructor$ O $string$ O O O O O $string$ O O O $string$ O O O $StringConstructor$ O $StringConstructor$ O $string$ O O O $string$ O O O O O O O O O O O O O $string$ O O O $string[]$ O O O O O O O $string$ O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O O O $any$ O $any$ O O O O O $string$ O $string$ O $T$ O $any$ O $any$ O O O O O O $any[]$ O $any$ O O O $any$ O O O O O $void$ O O O $Console$ O $void$ O $string$ O O O O O O O $any$ O $any$ O O O O O $void$ O O O $Console$ O $void$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O $void$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O $any[]$ O O $void$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $BooleanConstructor$ O $any$ O O O O O $any$ O $any$ O $BooleanConstructor$ O $any$ O O O O O $any$ O $any$ O $BooleanConstructor$ O $any$ O O O O O O $any$ O O $any$ O $string$ O O O $any$ O O $any$ O O $string$ O $string$ O O O O $any$ O $any$ O $string$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O O O O $string$ O $string$ O O $string$ O $complex$ O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any[]$ O $any$ O O O $any$ O $U[]$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any[]$ O $any$ O O O $any$ O $U[]$ O O $any$ O O O $any$ O $string$ O $any$ O $any$ O O O O O O $any$ O $number$ O O O O $any$ O $any$ O O $any$ O O $any$ O O $any$ O O O $any[]$ O $any$ O O O $any$ O O $any$ O O O $any[]$ O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any[]$ O $number$ O $any$ O O O O O O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any[]$ O $U[]$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O O O O O O O O O O $any$ O O $Console$ O $void$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $JSON$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $number$ O O O $any$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O O $any$ O $any$ O O $any$ O O O $string$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O $void$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any[]$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O O O $complex$ O O $any$ O O O $Console$ O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O
<s> import * as chai from 's' ; import { ResolvedUrl } from 's' ; import { resolvedUrl as r } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; chai . config . _UNKNOWN_ = true ; const assert = chai . assert ; suite ( 's' , ( ) => { function _UNKNOWN_ ( _UNKNOWN_ ) { const _UNKNOWN_ = _UNKNOWN_ . split ( "s" ) ; const _UNKNOWN_ = _UNKNOWN_ [ 0 ] . slice ( 0 , - 0 ) . split ( 's' ) as ResolvedUrl [ ] ; const files = _UNKNOWN_ [ 0 ] . slice ( 0 , - 0 ) . split ( 's' ) as ResolvedUrl [ ] ; return new _UNKNOWN_ ( 's' , new Set ( _UNKNOWN_ ) , new Set ( files ) ) ; } function _UNKNOWN_ ( bundle ) { assert ( bundle , `template` ) ; const _UNKNOWN_ = Array . from ( bundle . _UNKNOWN_ ) . sort ( ) . join ( ) ; const files = Array . from ( bundle . files ) . sort ( ) . join ( ) ; return `template` ; } suite ( 's' , ( ) => { test ( 's' , ( ) => { assert . throws ( ( ) => _UNKNOWN_ ( [ ] ) ) ; } ) ; test ( 's' , ( ) => { assert . throws ( ( ) => _UNKNOWN_ ( [ new _UNKNOWN_ ( 's' , new Set ( [ `template` ] ) , new Set ( [ `template` ] ) ) , new _UNKNOWN_ ( 's' , new Set ( [ `template` ] ) , new Set ( [ `template` ] ) ) , ] ) ) ; } ) ; test ( 's' , ( ) => { assert . equal ( _UNKNOWN_ ( _UNKNOWN_ ( [ new _UNKNOWN_ ( 's' , new Set ( [ `template` ] ) , new Set ( [ `template` ] ) ) , new _UNKNOWN_ ( 's' , new Set ( [ `template` ] ) , new Set ( [ `template` ] ) ) , ] ) ) , 's' ) ; } ) ; } ) ; suite ( 's' , ( ) => { const _UNKNOWN_ = [ 's' , 's' , 's' ] . map ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ ( ( _UNKNOWN_ ) => _UNKNOWN_ . map ( ( b ) => Array . from ( b . _UNKNOWN_ ) . join ( 's' ) as ResolvedUrl ) ) ; test ( 's' , ( ) => { const manifest = new _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; assert . equal ( _UNKNOWN_ ( manifest . _UNKNOWN_ . get ( `template` ) ! ) , 's' ) ; } ) ; test ( 's' , ( ) => { const manifest = new _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; assert . equal ( manifest . _UNKNOWN_ ( `template` ) ! . url , 's' ) ; assert . equal ( _UNKNOWN_ ( manifest . _UNKNOWN_ ( `template` ) ! . bundle ) , 's' ) ; } ) ; test ( 's' , ( ) => { const manifest = new _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ( `template` ) ) ; assert . equal ( _UNKNOWN_ ( manifest . _UNKNOWN_ . get ( `template` ) ! ) , 's' ) ; } ) ; } ) ; suite ( 's' , ( ) => { test ( 's' , ( ) => { const _UNKNOWN_ = new Map < ResolvedUrl , Set < ResolvedUrl > > ( ) ; _UNKNOWN_ . set ( `template` , new Set ( [ `template` , `template` , `template` , `template` ] ) ) ; _UNKNOWN_ . set ( `template` , new Set ( [ `template` , `template` , `template` ] ) ) ; _UNKNOWN_ . set ( `template` , new Set ( [ `template` , `template` ] ) ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' , 's' , 's' , 's' ] ) ; } ) ; } ) ; suite ( 's' , ( ) => { test ( 's' , ( ) => { const _UNKNOWN_ : _UNKNOWN_ [ ] = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] . map ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ ( [ _UNKNOWN_ ( ( b ) => b . files . has ( `template` ) || b . _UNKNOWN_ . has ( `template` ) ) , _UNKNOWN_ ( ( b ) => b . files . has ( `template` ) || b . _UNKNOWN_ . has ( `template` ) ) ] ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; assert . deepEqual ( _UNKNOWN_ , [ 's' ] ) ; const _UNKNOWN_ = _UNKNOWN_ ( [ _UNKNOWN_ ( ( b ) => b . files . has ( `template` ) || b . _UNKNOWN_ . has ( `template` ) ) , _UNKNOWN_ ( ( b ) => b . files . has ( `template` ) || b . _UNKNOWN_ . has ( `template` ) ) ] ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' ] ) ; } ) ; suite ( 's' , ( ) => { suite ( 's' , ( ) => { const _UNKNOWN_ : _UNKNOWN_ [ ] = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , ] . map ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ ( `template` ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; const _UNKNOWN_ = _UNKNOWN_ ( `template` ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; const _UNKNOWN_ = _UNKNOWN_ ( `template` ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; const _UNKNOWN_ = _UNKNOWN_ ( `template` ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; test ( 's' , ( ) => { assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ) ; } ) ; test ( 's' , ( ) => { assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' , 's' , 's' , 's' ] ) ; } ) ; test ( 's' , ( ) => { assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ) ; } ) ; test ( 's' , ( ) => { assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ) ; } ) ; } ) ; test ( 's' , ( ) => { const _UNKNOWN_ = [ 's' , 's' , 's' , 's' ] . map ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ ( `template` ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' , 's' ] ) ; } ) ; } ) ; suite ( 's' , ( ) => { const _UNKNOWN_ : _UNKNOWN_ [ ] = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] . map ( _UNKNOWN_ ) ; const 0 = _UNKNOWN_ ( 0 ) ; const 0 = 0 ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; const 0 = _UNKNOWN_ ( 0 ) ; const 0 = 0 ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; const 0 = _UNKNOWN_ ( 0 ) ; const 0 = 0 ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; const _UNKNOWN_ = _UNKNOWN_ ( ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; test ( 's' , ( ) => { assert . deepEqual ( _UNKNOWN_ , 0 ) ; } ) ; test ( 's' , ( ) => { assert . deepEqual ( 0 , [ 's' , 's' , 's' , 's' , 's' ] ) ; } ) ; test ( 's' , ( ) => { assert . deepEqual ( 0 , [ 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ) ; } ) ; test ( 's' , ( ) => { assert . deepEqual ( _UNKNOWN_ . map ( _UNKNOWN_ ) , [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ) ; } ) ; test ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ . map ( _UNKNOWN_ ) . sort ( ) ; assert . deepEqual ( 0 , _UNKNOWN_ ) ; } ) ; test . skip ( 's' , ( ) => { const _UNKNOWN_ : _UNKNOWN_ [ ] = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] . map ( _UNKNOWN_ ) ; const 0 = _UNKNOWN_ ( 0 ) ; const 0 = 0 ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; assert . deepEqual ( 0 , [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ) ; } ) ; } ) ; suite ( 's' , ( ) => { test ( 's' , ( ) => { const _UNKNOWN_ = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] . map ( _UNKNOWN_ ) ; const 0 = _UNKNOWN_ ( `template` , 0 ) ; const _UNKNOWN_ = 0 ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' , 's' , 's' , 's' ] ) ; } ) ; test ( 's' , ( ) => { const _UNKNOWN_ = [ 's' , 's' , 's' , 's' , 's' ] . map ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ ( `template` , 0 ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' , 's' ] ) ; } ) ; } ) ; } ) ; suite ( 's' , ( ) => { test ( 's' , ( ) => { const _UNKNOWN_ = new Map ( ) ; _UNKNOWN_ . set ( `template` , new Set ( [ `template` ] ) ) ; _UNKNOWN_ . set ( `template` , new Set ( [ `template` , `template` , `template` , `template` , `template` , ] ) ) ; _UNKNOWN_ . set ( `template` , new Set ( [ `template` , `template` , `template` , `template` , ] ) ) ; _UNKNOWN_ . set ( `template` , new Set ( [ `template` , `template` , `template` ] ) ) ; _UNKNOWN_ . set ( `template` , new Set ( [ `template` , `template` ] ) ) ; const expected = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) . map ( _UNKNOWN_ ) . sort ( ) ; assert . equal ( expected . length , _UNKNOWN_ . length ) ; for ( let i = 0 ; i < _UNKNOWN_ . length ; ++ i ) { assert . equal ( _UNKNOWN_ [ i ] , expected [ i ] ) ; } } ) ; } ) ; } ) ; </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $string$ O O O $string[]$ O $string$ O $complex$ O O O O O $any[]$ O $string[]$ O O O O $string$ O O O O O O O $complex$ O O O O $any$ O O O O $any[]$ O $string[]$ O O O O $string$ O O O O O O O $complex$ O O O O $any$ O O O O O $any$ O O O O $SetConstructor$ O $any[]$ O O O $SetConstructor$ O $any[]$ O O O O O $string$ O $any$ O O $any$ O $any$ O O O O O $string$ O $ArrayConstructor$ O $complex$ O $any$ O $Set<any>$ O O $any[]$ O O O $string$ O O O O $string$ O $ArrayConstructor$ O $complex$ O $any$ O $Set<any>$ O O $any[]$ O O O $string$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O $SetConstructor$ O O O O O O O $SetConstructor$ O O O O O O O O $any$ O O O O $SetConstructor$ O O O O O O O $SetConstructor$ O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $any$ O O O $any$ O O O O $SetConstructor$ O O O O O O O $SetConstructor$ O O O O O O O O $any$ O O O O $SetConstructor$ O O O O O O O $SetConstructor$ O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O $U[]$ O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O $U[]$ O O $any$ O O $ArrayConstructor$ O $complex$ O $any$ O $Set<any>$ O O $string$ O O O O $any$ O O O $any$ O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O $complex$ O $any$ O O O O O O O O O O O O $any$ O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $string$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $string$ O $any$ O $complex$ O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O O $MapConstructor$ O $any$ O $SetConstructor$ O $any$ O O O O O $complex$ O $complex$ O O O O $SetConstructor$ O O O O O O O O O O O O O $complex$ O $complex$ O O O O $SetConstructor$ O O O O O O O O O O O $complex$ O $complex$ O O O O $SetConstructor$ O O O O O O O O O O $string[]$ O $any$ O $complex$ O O $U[]$ O $string$ O O $string[]$ O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O $U[]$ O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $Set<any>$ O $boolean$ O O O O $any$ O $Set<any>$ O $boolean$ O O O O O $any$ O O $any$ O O $any$ O $Set<any>$ O $boolean$ O O O O $any$ O $Set<any>$ O $boolean$ O O O O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O $any$ O $any$ O $string[]$ O O O O O O O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $Set<any>$ O $boolean$ O O O O $any$ O $Set<any>$ O $boolean$ O O O O O $any$ O O $any$ O O $any$ O $Set<any>$ O $boolean$ O O O O $any$ O $Set<any>$ O $boolean$ O O O O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O $U[]$ O $any$ O O O $any$ O $any$ O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O O $any$ O $any$ O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O O $any$ O $any$ O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O O $any$ O $any$ O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O O O $U[]$ O $any$ O O O $any$ O $any$ O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O $U[]$ O $any$ O O O $any$ O $any$ O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O O $any$ O $any$ O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O O $any$ O $any$ O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O O $any$ O $any$ O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O $string[]$ O O O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $U[]$ O $string$ O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $string[]$ O $any$ O $U[]$ O $string$ O O $string[]$ O O O $any$ O $any$ O $string[]$ O $string[]$ O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O $U[]$ O $any$ O O O $any$ O $any$ O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O $U[]$ O $any$ O O O $any$ O $any$ O O O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O $U[]$ O $any$ O O O $any$ O $any$ O O O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $MapConstructor$ O O O $any$ O $any$ O O O O $SetConstructor$ O O O O O O O $any$ O $any$ O O O O $SetConstructor$ O O O O O O O O O O O O O O O O $any$ O $any$ O O O O $SetConstructor$ O O O O O O O O O O O O O O $any$ O $any$ O O O O $SetConstructor$ O O O O O O O O O O O $any$ O $any$ O O O O $SetConstructor$ O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O $string[]$ O $any$ O $any$ O O $U[]$ O $string$ O O $string[]$ O O O $any$ O $any$ O $string[]$ O $number$ O $string[]$ O $number$ O O O O O $number$ O O O $number$ O $string[]$ O $number$ O O $number$ O O $any$ O $any$ O $string[]$ O $number$ O O $string[]$ O $number$ O O O O O O O O O O O O O O
<s> import * as chai from 's' ; import constants from 's' ; const assert = chai . assert ; suite ( 's' , ( ) => { suite ( 's' , ( ) => { test ( 's' , ( ) => { const abs = constants . _UNKNOWN_ ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( abs . test ( 's' ) , 's' ) ; assert ( ! abs . test ( 's' ) , 's' ) ; assert ( ! abs . test ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { const url = constants . URL ; assert ( 's' . match ( url ) , 's' ) ; assert ( 's' . match ( url ) , 's' ) ; assert ( 's' . match ( url ) , 's' ) ; } ) ; test ( 's' , ( ) => { const _UNKNOWN_ = constants . _UNKNOWN_ ; assert ( 's' . match ( _UNKNOWN_ ) , 's' ) ; assert ( 's' . match ( _UNKNOWN_ ) , 's' ) ; assert ( 's' . match ( _UNKNOWN_ ) , 's' ) ; assert ( 's' . match ( _UNKNOWN_ ) , 's' ) ; assert ( 's' . match ( _UNKNOWN_ ) , 's' ) ; assert ( 's' . match ( _UNKNOWN_ ) , 's' ) ; assert ( 's' . match ( _UNKNOWN_ ) , 's' ) ; assert ( 's' . match ( _UNKNOWN_ ) , 's' ) ; } ) ; } ) ; } ) ; </s>	O O O O $any$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $RegExp$ O $complex$ O $RegExp$ O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O $RegExp$ O $boolean$ O O O O O O O $any$ O O $RegExp$ O $boolean$ O O O O O O O $any$ O O $RegExp$ O $boolean$ O O O O O O O O O O $any$ O O O O O O O O $RegExp$ O $complex$ O $RegExp$ O $any$ O O O $complex$ O $RegExp$ O O O O O $any$ O O O $complex$ O $RegExp$ O O O O O $any$ O O O $complex$ O $RegExp$ O O O O O O O O $any$ O O O O O O O O $string$ O $complex$ O $string$ O $any$ O O O $complex$ O $string$ O O O O O $any$ O O O $complex$ O $string$ O O O O O $any$ O O O $complex$ O $string$ O O O O O $any$ O O O $complex$ O $string$ O O O O O $any$ O O O $complex$ O $string$ O O O O O $any$ O O O $complex$ O $string$ O O O O O $any$ O O O $complex$ O $string$ O O O O O $any$ O O O $complex$ O $string$ O O O O O O O O O O O O O O O
<s> import * as chai from 's' ; import { Analyzer , FSUrlLoader , PackageRelativeUrl , PackageUrlResolver , ResolvedUrl } from 's' ; import { _UNKNOWN_ } from 's' ; chai . config . _UNKNOWN_ = true ; suite ( 's' , ( ) => { function _UNKNOWN_ ( map < string , Set < string > > ) { let s = 's' ; for ( const key of Array . from ( map . keys ( ) ) . sort ( ) ) { const set = map . get ( key ) ! ; s = s + `template` ; for ( const value of Array . from ( set ) . sort ( ) ) { s = s + `template` ; } } return s ; } suite ( 's' , ( ) => { let analyzer ; function resolve ( url ) { return analyzer . resolveUrl ( url as PackageRelativeUrl ) ! || url as ResolvedUrl ; } test ( 's' , async ( ) => { analyzer = new Analyzer ( { urlResolver : new PackageUrlResolver ( { packageDir : 's' , } ) , urlLoader : new FSUrlLoader ( 's' ) , } ) ; const common = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const _UNKNOWN_ = new Map ( [ [ common , new Set ( [ common ] ) ] , [ 0 , new Set ( [ common , 0 , 0 ] ) ] , [ 0 , new Set ( [ common , 0 , 0 , 0 , 0 ] ) ] , ] ) ; const index = await _UNKNOWN_ ( [ common , 0 , 0 ] , analyzer ) ; chai . assert . deepEqual ( _UNKNOWN_ ( index . _UNKNOWN_ ) , _UNKNOWN_ ( _UNKNOWN_ ) ) ; } ) ; test ( 's' , async ( ) => { analyzer = new Analyzer ( { urlResolver : new PackageUrlResolver ( { packageDir : 's' , } ) , urlLoader : new FSUrlLoader ( 's' ) } ) ; const entrypoint = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const _UNKNOWN_ = new Map ( [ [ entrypoint , new Set ( [ entrypoint , 0 ] ) ] , [ 0 , new Set ( [ 0 , 0 , 0 ] ) ] , [ 0 , new Set ( [ 0 , 0 , 0 , 0 , 0 , 0 ] ) ] , [ 0 , new Set ( [ 0 ] ) ] , [ 0 , new Set ( [ 0 ] ) ] , [ 0 , new Set ( [ 0 , 0 ] ) ] , ] ) ; const index = await _UNKNOWN_ ( [ entrypoint ] , analyzer ) ; chai . assert . deepEqual ( _UNKNOWN_ ( index . _UNKNOWN_ ) , _UNKNOWN_ ( _UNKNOWN_ ) ) ; } ) ; test ( 's' , async ( ) => { analyzer = new Analyzer ( { urlResolver : new PackageUrlResolver ( { packageDir : 's' , } ) , urlLoader : new FSUrlLoader ( 's' ) } ) ; const entrypoint = resolve ( 's' ) ; const _UNKNOWN_ = resolve ( 's' ) ; const _UNKNOWN_ = resolve ( 's' ) ; const util = resolve ( 's' ) ; const shell = resolve ( 's' ) ; const _UNKNOWN_ = new Map ( [ [ entrypoint , new Set ( [ entrypoint , _UNKNOWN_ , shell , util ] ) ] , [ _UNKNOWN_ , new Set ( [ _UNKNOWN_ , util ] ) ] , [ _UNKNOWN_ , new Set ( [ _UNKNOWN_ , util ] ) ] , [ shell , new Set ( [ shell , _UNKNOWN_ , util ] ) ] , ] ) ; const index = await _UNKNOWN_ ( [ entrypoint , _UNKNOWN_ , _UNKNOWN_ , shell ] , analyzer ) ; chai . assert . deepEqual ( _UNKNOWN_ ( index . _UNKNOWN_ ) , _UNKNOWN_ ( _UNKNOWN_ ) ) ; } ) ; } ) ; } ) ; </s>	O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O $string$ O $Map$ O O O $SetConstructor$ O O O O O O O $string$ O O O O O O $string$ O $ArrayConstructor$ O $complex$ O $complex$ O $IterableIterator<string>$ O O O O $string[]$ O O O O O $Set<string>$ O $complex$ O $Set<string>$ O $string$ O O O $string$ O $string$ O O O O O O $string$ O $ArrayConstructor$ O $complex$ O $Set<string>$ O O $string[]$ O O O O $string$ O $string$ O O O O O O $string$ O O $any$ O O O O O O O O $Analyzer$ O O $any$ O $string$ O O O $any$ O $any$ O $string$ O $any$ O O O $string$ O $any$ O O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O O O O O O $any$ O O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $complex$ O O $MapConstructor$ O O O $any$ O O $SetConstructor$ O O $any$ O O O O O $any$ O O $SetConstructor$ O O $any$ O $any$ O $any$ O O O O O $any$ O O $SetConstructor$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $string$ O $any$ O $complex$ O O $string$ O $complex$ O O O O O O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O O O O O O $any$ O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $complex$ O O $MapConstructor$ O O O $any$ O O $SetConstructor$ O O $any$ O $any$ O O O O O $any$ O O $SetConstructor$ O O $any$ O $any$ O $any$ O O O O O $any$ O O $SetConstructor$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $SetConstructor$ O O $any$ O O O O O $any$ O O $SetConstructor$ O O $any$ O O O O O $any$ O O $SetConstructor$ O O $any$ O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $string$ O $any$ O $complex$ O O $string$ O $complex$ O O O O O O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O O O O O O $any$ O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $complex$ O O $MapConstructor$ O O O $any$ O O $SetConstructor$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $SetConstructor$ O O $any$ O $any$ O O O O O $any$ O O $SetConstructor$ O O $any$ O $any$ O O O O O $any$ O O $SetConstructor$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $string$ O $any$ O $complex$ O O $string$ O $complex$ O O O O O O O O O O O O O
<s> import * as chai from 's' ; import * as 0 from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { parse } from 's' ; import { _UNKNOWN_ } from 's' ; chai . config . _UNKNOWN_ = true ; const assert = chai . assert ; const _UNKNOWN_ = ( html ) : string => html . replace ( "s" , 's' ) . replace ( "s" , 's' ) . trim ( ) ; suite ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; let _UNKNOWN_ ; let _UNKNOWN_ ; let manifest ; let bundle ; beforeEach ( async ( ) => { _UNKNOWN_ = new _UNKNOWN_ ( ) ; await _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , 's' ) ; manifest = await _UNKNOWN_ . _UNKNOWN_ ( [ _UNKNOWN_ ] ) ; bundle = manifest . _UNKNOWN_ ( _UNKNOWN_ ) ! ; _UNKNOWN_ = new _UNKNOWN_ ( _UNKNOWN_ , bundle , manifest ) ; } ) ; suite ( 's' , async ( ) => { test ( 's' , async ( ) => { const css = `template` ; const expected = `template` ; const actual = _UNKNOWN_ [ 's' ] ( css , _UNKNOWN_ , _UNKNOWN_ ) ; assert . deepEqual ( actual , expected ) ; } ) ; suite ( 's' , ( ) => { test ( 's' , ( ) => { const html = `template` ; const expected = `template` ; const ast = parse ( html ) ; _UNKNOWN_ . _UNKNOWN_ = false ; _UNKNOWN_ [ 's' ] ( ast , _UNKNOWN_ , _UNKNOWN_ ) ; const actual = 0 . serialize ( ast ) ; assert . deepEqual ( _UNKNOWN_ ( actual ) , _UNKNOWN_ ( expected ) , 's' ) ; } ) ; test ( 's' , ( ) => { const html = `template` ; const expected = `template` ; const ast = parse ( html ) ; _UNKNOWN_ . _UNKNOWN_ = true ; _UNKNOWN_ [ 's' ] ( ast , _UNKNOWN_ , _UNKNOWN_ ) ; const actual = 0 . serialize ( ast ) ; assert . deepEqual ( _UNKNOWN_ ( actual ) , _UNKNOWN_ ( expected ) , 's' ) ; } ) ; } ) ; test ( 's' , ( ) => { const base = `template` ; const ast = parse ( base ) ; _UNKNOWN_ [ 's' ] ( ast , _UNKNOWN_ , _UNKNOWN_ ) ; const actual = 0 . serialize ( ast ) ; assert . deepEqual ( _UNKNOWN_ ( actual ) , _UNKNOWN_ ( base ) , 's' ) ; } ) ; } ) ; suite ( 's' , ( ) => { test ( 's' , ( ) => { const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const ast = parse ( _UNKNOWN_ ) ; _UNKNOWN_ [ 's' ] ( ast , _UNKNOWN_ ( 's' ) ) ; const actual = 0 . serialize ( ast ) ; assert . deepEqual ( _UNKNOWN_ ( actual ) , _UNKNOWN_ ( _UNKNOWN_ ) , 's' ) ; } ) ; test ( 's' , ( ) => { const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const ast = parse ( _UNKNOWN_ ) ; _UNKNOWN_ [ 's' ] ( ast , _UNKNOWN_ ( 's' ) ) ; const actual = 0 . serialize ( ast ) ; assert . deepEqual ( _UNKNOWN_ ( actual ) , _UNKNOWN_ ( _UNKNOWN_ ) , 's' ) ; } ) ; test ( 's' , ( ) => { const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const ast = parse ( _UNKNOWN_ ) ; _UNKNOWN_ [ 's' ] ( ast , _UNKNOWN_ ( 's' ) ) ; const actual = 0 . serialize ( ast ) ; assert . deepEqual ( _UNKNOWN_ ( actual ) , _UNKNOWN_ ( _UNKNOWN_ ) , 's' ) ; } ) ; } ) ; } ) ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $string$ O O $string$ O O O O $string$ O $complex$ O O O O O O $complex$ O O O O O O $string$ O O O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O $any$ O O $any$ O O $any$ O $any$ O O O O O O $any$ O O $any$ O O O O $any$ O $Promise<any>$ O $any$ O O O O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O $string$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O $boolean$ O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O O $string$ O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O $boolean$ O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O O $string$ O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O O $string$ O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O O $string$ O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O O $string$ O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O O $string$ O O O O O O O O O O O O O O O O O
<s> import * as chai from 's' ; import * as clone from 's' ; import * as 0 from 's' ; import * as 0 from 's' ; import * as ast from 's' ; const assert = chai . assert ; suite ( 's' , function ( ) { test ( 's' , ( ) => { const html = 0 . _UNKNOWN_ ( `template` , { _UNKNOWN_ : true } ) ; const spans = 0 . queryAll ( html , 0 . predicates . hasTagName ( 's' ) ) ; assert . isTrue ( ast . _UNKNOWN_ ( spans [ 0 ] , spans [ 0 ] ) , 's' ) ; assert . isTrue ( ast . _UNKNOWN_ ( spans [ 0 ] , spans [ 0 ] ) , 's' ) ; assert . isTrue ( ast . _UNKNOWN_ ( spans [ 0 ] , spans [ 0 ] ) , 's' ) ; assert . isFalse ( ast . _UNKNOWN_ ( spans [ 0 ] , spans [ 0 ] ) , 's' ) ; assert . isFalse ( ast . _UNKNOWN_ ( spans [ 0 ] , spans [ 0 ] ) , 's' ) ; } ) ; test ( 's' , ( ) => { const html = 0 . _UNKNOWN_ ( `template` , { _UNKNOWN_ : true } ) ; const 0 = html . childNodes ! [ 0 ] ! . childNodes ! [ 0 ] ! ; const 0 = html . childNodes ! [ 0 ] ! . childNodes ! [ 0 ] ! ; const 0 = clone ( 0 ) ; assert . isFalse ( 0 === 0 ) ; assert . isFalse ( 0 === 0 ) ; assert . isFalse ( ast . _UNKNOWN_ ( 0 , 0 ) ) ; assert . isTrue ( ast . _UNKNOWN_ ( 0 , 0 ) ) ; } ) ; test ( 's' , ( ) => { const _UNKNOWN_ = 0 . _UNKNOWN_ ( `template` ) ; const ol = _UNKNOWN_ . childNodes ! [ 0 ] ! ; const 0 = ol . childNodes ! [ 0 ] ! ; ast . prepend ( ol , 0 ) ; assert . equal ( 0 . serialize ( ol . parentNode ! ) , 0 . serialize ( 0 . _UNKNOWN_ ( `template` ) ) ) ; } ) ; test ( 's' , ( ) => { const _UNKNOWN_ = 0 . _UNKNOWN_ ( `template` ) ; const 0 = _UNKNOWN_ . childNodes ! [ 0 ] ! . childNodes ! [ 0 ] ! ; const 0 = ast . _UNKNOWN_ ( 0 ) ; assert . equal ( 0 . length , 0 ) ; assert . equal ( 0 . serialize ( 0 [ 0 ] ) , 's' ) ; assert . equal ( 0 . serialize ( 0 [ 0 ] ) , 's' ) ; } ) ; test ( 's' , ( ) => { const dom = 0 . _UNKNOWN_ ( `template` ) ; ast . _UNKNOWN_ ( dom ) ; const html = 0 . serialize ( dom ) ; assert . include ( html , `template` ) ; assert . include ( html , `template` ) ; assert . include ( html , `template` ) ; assert . include ( html , `template` ) ; assert . _UNKNOWN_ ( html , `template` ) ; assert . _UNKNOWN_ ( html , `template` ) ; } ) ; } ) ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $boolean$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $boolean$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $boolean$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $boolean$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $boolean$ O $any$ O O O O $any$ O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any[]$ O $any$ O $any[]$ O $any$ O O $any$ O $any$ O $any[]$ O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any[]$ O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import * as chai from 's' ; import { execSync } from 's' ; import * as fs from 's' ; import * as os from 's' ; import { _UNKNOWN_ , resolvePath } from 's' ; chai . config . _UNKNOWN_ = true ; const assert = chai . assert ; suite ( 's' , ( ) => { const _UNKNOWN_ = ( ) => fs . _UNKNOWN_ ( resolvePath ( _UNKNOWN_ ( os . tmpdir ( ) ) ) ) ; const cliPath = resolvePath ( __dirname , 's' ) ; test ( 's' , async ( ) => { const projectRoot = resolvePath ( 's' ) ; const stdout = execSync ( `template` + `template` ) . toString ( ) ; assert . include ( stdout , 's' ) ; assert . include ( stdout , 's' ) ; } ) ; test ( 's' , async ( ) => { const stdout = execSync ( [ `template` , ] . join ( 's' ) ) . toString ( ) ; assert . include ( stdout , 's' ) ; assert . include ( stdout , 's' ) ; } ) ; test ( 's' , async ( ) => { const stdout = execSync ( [ `template` , ] . join ( 's' ) ) . toString ( ) ; assert . include ( stdout , 's' ) ; assert . include ( stdout , 's' ) ; } ) ; suite ( 's' , ( ) => { test ( 's' , async ( ) => { const projectRoot = resolvePath ( __dirname , 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( ) ; execSync ( `template` + `template` + `template` ) . toString ( ) ; const html = fs . readFileSync ( resolvePath ( _UNKNOWN_ , 's' ) ) . toString ( ) ; assert . notEqual ( html , 's' ) ; } ) ; test ( 's' , async ( ) => { const projectRoot = resolvePath ( __dirname , 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( ) ; execSync ( `template` + `template` + `template` ) . toString ( ) ; const html = fs . readFileSync ( resolvePath ( _UNKNOWN_ , 's' ) ) . toString ( ) ; assert . notEqual ( html , 's' ) ; } ) ; } ) ; suite ( 's' , ( ) => { test ( 's' , async ( ) => { const projectRoot = resolvePath ( __dirname , 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( ) ; const _UNKNOWN_ = resolvePath ( _UNKNOWN_ , 's' ) ; execSync ( `template` + `template` + `template` ) . toString ( ) ; const _UNKNOWN_ = fs . readFileSync ( _UNKNOWN_ ) . toString ( ) ; const manifest = JSON . parse ( _UNKNOWN_ ) ; assert . deepEqual ( manifest , { 's' : [ 's' , 's' , 's' , 's' , ] , 's' : [ 's' , 's' , 's' , ] } ) ; } ) ; test ( 's' , async ( ) => { const projectRoot = resolvePath ( __dirname , 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( ) ; const _UNKNOWN_ = resolvePath ( _UNKNOWN_ , 's' ) ; execSync ( `template` + `template` + `template` + `template` + `template` + `template` + `template` + `template` + `template` ) . toString ( ) ; const _UNKNOWN_ = fs . readFileSync ( _UNKNOWN_ ) . toString ( ) ; const manifest = JSON . parse ( _UNKNOWN_ ) ; assert . deepEqual ( manifest , { 's' : [ 's' , ] , 's' : [ 's' , ] , 's' : [ 's' , ] , 's' : [ 's' , 's' , ] , } ) ; } ) ; } ) ; suite ( 's' , ( ) => { test ( 's' , async ( ) => { const projectRoot = resolvePath ( __dirname , 's' ) . replace ( "s" , 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( ) ; const _UNKNOWN_ = resolvePath ( _UNKNOWN_ , 's' ) ; const stdout = execSync ( [ `template` , `template` + `template` + `template` + `template` ] . join ( 's' ) ) . toString ( ) ; assert . include ( stdout , 's' ) ; assert . include ( stdout , 's' ) ; assert . include ( stdout , 's' ) ; const _UNKNOWN_ = fs . readFileSync ( _UNKNOWN_ ) . toString ( ) ; const manifest = JSON . parse ( _UNKNOWN_ ) ; assert . deepEqual ( manifest , { 's' : [ 's' , 's' , 's' , 's' ] , } ) ; } ) ; } ) ; } ) ; </s>	O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $T$ O $string$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O $string$ O $T$ O $any$ O $any$ O O O O O O O $string$ O $string$ O $any$ O O O O $any$ O O O O O O O O O $string$ O $string$ O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O O O O O O $string$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O O O O O O $string$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $string$ O $string$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $string$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O O $string$ O $string$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $string$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $string$ O $string$ O $any$ O O O O O $any$ O $any$ O O O O $string$ O $string$ O $any$ O O O O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $JSON$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O $string$ O $string$ O $any$ O O O O O $any$ O $any$ O O O O $string$ O $string$ O $any$ O O O O $any$ O O O O O O O O O O O O O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $JSON$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $string$ O $string$ O $any$ O O O O $complex$ O O O O O O O $any$ O $any$ O O O O $string$ O $string$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O O O $string$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $JSON$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import * as chai from 's' ; import * as 0 from 's' ; import * as 0 from 's' ; import { Analyzer , FSUrlLoader , PackageRelativeUrl , PackageUrlResolver } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { Options as _UNKNOWN_ } from 's' ; chai . config . _UNKNOWN_ = true ; const assert = chai . assert ; const _UNKNOWN_ = 0 . predicates ; const _UNKNOWN_ = ( id ) => { return _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . hasAttrValue ( 's' , id ) , _UNKNOWN_ . hasTagName ( 's' ) ) ; } ; suite ( 's' , ( ) => { let analyzer : Analyzer | undefined ; let _UNKNOWN_ : _UNKNOWN_ | undefined ; const shell = resolve ( 's' ) ; const common = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; const 0 = resolve ( 's' ) ; beforeEach ( ( ) => { analyzer = undefined ; _UNKNOWN_ = undefined ; } ) ; function _UNKNOWN_ ( ) { if ( ! analyzer ) { analyzer = new Analyzer ( { urlResolver : new PackageUrlResolver ( { packageDir : 's' } ) , urlLoader : new FSUrlLoader ( 's' ) , } ) ; } return analyzer ; } function _UNKNOWN_ ( opts ? ) { if ( ! _UNKNOWN_ ) { if ( ! opts || ! opts . analyzer ) { opts = Object . assign ( { } , opts || { } , { analyzer : _UNKNOWN_ ( ) } ) ; } _UNKNOWN_ = new _UNKNOWN_ ( opts ) ; } return _UNKNOWN_ ; } function resolve ( url ) { return _UNKNOWN_ ( ) . resolveUrl ( url as PackageRelativeUrl ) ! ; } async function _UNKNOWN_ ( inputPath : string [ ] , opts ? ) < _UNKNOWN_ > { const _UNKNOWN_ = _UNKNOWN_ ( opts ) ; const manifest = await _UNKNOWN_ . _UNKNOWN_ ( inputPath . map ( ( e ) => _UNKNOWN_ . analyzer . resolveUrl ( e ) ! ) ) ; return await _UNKNOWN_ . bundle ( manifest ) ; } function _UNKNOWN_ ( doc : 0 . ASTNode , contains : 0 . _UNKNOWN_ [ ] , _UNKNOWN_ : 0 . _UNKNOWN_ [ ] ) { for ( let test of contains ) { const found = 0 . queryAll ( doc , test ) ; assert . equal ( found . length , 0 ) ; } for ( let test of _UNKNOWN_ ) { const found = 0 . queryAll ( doc , test ) ; assert . equal ( found . length , 0 ) ; } } suite ( 's' , ( ) => { test ( 's' , async ( ) => { const { documents } = await _UNKNOWN_ ( [ common , 0 , 0 ] , { strategy : _UNKNOWN_ ( 0 ) } ) ; assert . equal ( documents . size , 0 ) ; const _UNKNOWN_ : 0 . ASTNode = documents . get ( common ) ! . ast ; assert . isDefined ( _UNKNOWN_ ) ; const 0 = documents . get ( 0 ) ! . ast ; assert . isDefined ( 0 ) ; const 0 = documents . get ( 0 ) ! . ast ; assert . isDefined ( 0 ) ; const _UNKNOWN_ = documents . get ( resolve ( 's' ) ) ! . ast ; assert . isDefined ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; _UNKNOWN_ ( _UNKNOWN_ , [ _UNKNOWN_ ] , [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] ) ; _UNKNOWN_ ( _UNKNOWN_ , [ _UNKNOWN_ ] , [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] ) ; _UNKNOWN_ ( 0 , [ _UNKNOWN_ ] , [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] ) ; _UNKNOWN_ ( 0 , [ _UNKNOWN_ , _UNKNOWN_ ] , [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] ) ; } ) ; test ( 's' , async ( ) => { const analyzer = _UNKNOWN_ ( ) ; const { documents } = await _UNKNOWN_ ( [ shell , 0 , 0 ] , { strategy : _UNKNOWN_ ( analyzer . resolveUrl ( shell ) ! , 0 ) } ) ; assert . equal ( documents . size , 0 ) ; const _UNKNOWN_ : 0 . ASTNode = documents . get ( shell ) ! . ast ; assert . isDefined ( _UNKNOWN_ ) ; const 0 = documents . get ( 0 ) ! . ast ; assert . isDefined ( 0 ) ; const 0 = documents . get ( 0 ) ! . ast ; assert . isDefined ( 0 ) ; const _UNKNOWN_ = 0 . predicates . hasAttrValue ( 's' , 's' ) ; const _UNKNOWN_ = 0 . predicates . _UNKNOWN_ ( 0 . predicates . hasTagName ( 's' ) , 0 . predicates . _UNKNOWN_ ( 's' , 's' ) , 0 . predicates . hasAttrValue ( 's' , 's' ) ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( 's' ) ; _UNKNOWN_ ( _UNKNOWN_ , [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] ) ; _UNKNOWN_ ( 0 , [ _UNKNOWN_ ] , [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] ) ; _UNKNOWN_ ( 0 , [ _UNKNOWN_ , _UNKNOWN_ ] , [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] ) ; } ) ; } ) ; } ) ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $string$ O O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $undefined$ O $any$ O $undefined$ O O O O O $Analyzer$ O O O O O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O O O O O $any$ O O $any$ O O O O O O O O O $any$ O O O $any$ O $any$ $any$ O O O O O $any$ O O O O O $any$ O O $any$ O $any$ O O $any$ O $ObjectConstructor$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O $any$ O $string$ O O O $any$ O O O $any$ O $string$ O $any$ O O O O O O $Promise$ O $string[]$ O O O O O $Options$ $any$ O O $any$ O O O $any$ O $any$ O $Options$ O O O $any$ O O $any$ O $any$ O $string[]$ O $U[]$ O O $string$ O O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O $any[]$ O $any$ O $any$ O O O $any[]$ O $any$ O $any$ O O O O O O O $any$ O $any[]$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any[]$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $void$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O $void$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $any$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $void$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O
<s> import * as chai from 's' ; import * as 0 from 's' ; import * as path from 's' ; import { Analyzer , FSUrlLoader , PackageRelativeUrl , PackageUrlResolver , ResolvedUrl } from 's' ; import { _UNKNOWN_ , RawSourceMap , SourceMapConsumer } from 's' ; import { _UNKNOWN_ } from 's' ; import { Options as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { resolvePath } from 's' ; chai . config . _UNKNOWN_ = true ; const assert = chai . assert ; const _UNKNOWN_ = require ( 's' ) ; suite ( 's' , ( ) => { let _UNKNOWN_ ; async function bundle ( inputPath , opts ? ) < _UNKNOWN_ > { const _UNKNOWN_ = Object . assign ( { } , opts || { } ) ; if ( ! _UNKNOWN_ . analyzer ) { _UNKNOWN_ . analyzer = new Analyzer ( { urlLoader : new FSUrlLoader ( path . dirname ( inputPath ) ) } ) ; inputPath = path . basename ( inputPath ) ; } _UNKNOWN_ = new _UNKNOWN_ ( _UNKNOWN_ ) ; const manifest = await _UNKNOWN_ . _UNKNOWN_ ( [ _UNKNOWN_ . analyzer . resolveUrl ( inputPath as PackageRelativeUrl ) ! ] ) ; const { documents } = await _UNKNOWN_ . bundle ( manifest ) ; return documents . get ( _UNKNOWN_ . analyzer . resolveUrl ( inputPath ) ! ) ! ; } function getLine ( original , lineNum ) { const lines = original . split ( 's' ) ; return lines [ lineNum - 0 ] ; } async function _UNKNOWN_ ( _UNKNOWN_ , html , name ) { const consumer = new SourceMapConsumer ( _UNKNOWN_ ! ) ; let _UNKNOWN_ = false ; const mappings : _UNKNOWN_ [ ] = [ ] ; consumer . _UNKNOWN_ ( mapping => mappings . push ( mapping ) ) ; for ( let j = 0 ; j < mappings . length ; j ++ ) { if ( mappings [ j ] . name === name ) { _UNKNOWN_ = true ; const _UNKNOWN_ = getLine ( html , mappings [ j ] . _UNKNOWN_ ) ; assert ( _UNKNOWN_ , 's' ) ; assert . equal ( mappings [ j ] . _UNKNOWN_ , _UNKNOWN_ ! . indexOf ( name ) , 's' ) ; const originalContents = await urlLoader . load ( mappings [ j ] . source as ResolvedUrl ) ; const _UNKNOWN_ = getLine ( originalContents , mappings [ j ] . _UNKNOWN_ ) ; assert ( _UNKNOWN_ , 's' ) ; assert . equal ( mappings [ j ] . _UNKNOWN_ , _UNKNOWN_ ! . indexOf ( name ) , 's' ) ; } } } const basePath = resolvePath ( 's' ) ; const urlLoader = new FSUrlLoader ( basePath ) ; const analyzer = new Analyzer ( { urlResolver : new PackageUrlResolver ( { packageDir : basePath } ) , urlLoader : urlLoader } ) ; suite ( 's' , ( ) => { test ( 's' , async ( ) => { const { ast : doc , content : _UNKNOWN_ } = await bundle ( 's' , { _UNKNOWN_ : true , sourcemaps : true , analyzer : analyzer } ) ; assert ( doc ) ; const _UNKNOWN_ = 0 . queryAll ( doc , _UNKNOWN_ . _UNKNOWN_ ) ; assert . equal ( _UNKNOWN_ . length , 0 ) ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { if ( i === 0 ) { continue ; } const _UNKNOWN_ = await _UNKNOWN_ ( analyzer , 's' , 0 . _UNKNOWN_ ( _UNKNOWN_ [ i ] ) ) ; assert ( _UNKNOWN_ , 's' ) ; await _UNKNOWN_ ( _UNKNOWN_ ! , _UNKNOWN_ , 's' ) ; } } ) ; test ( 's' , async ( ) => { const { ast : doc , content : _UNKNOWN_ } = await bundle ( 's' , { _UNKNOWN_ : true , sourcemaps : true , analyzer : analyzer } ) ; assert ( doc ) ; const _UNKNOWN_ = 0 . queryAll ( doc , _UNKNOWN_ . _UNKNOWN_ ) ; assert . equal ( _UNKNOWN_ . length , 0 ) ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { const _UNKNOWN_ = await _UNKNOWN_ ( analyzer , 's' , 0 . _UNKNOWN_ ( _UNKNOWN_ [ i ] ) ) ; assert ( _UNKNOWN_ , 's' ) ; await _UNKNOWN_ ( _UNKNOWN_ ! , _UNKNOWN_ , 's' ) ; } } ) ; test ( 's' , async ( ) => { const { ast : doc , content : _UNKNOWN_ } = await bundle ( 's' , { _UNKNOWN_ : true , sourcemaps : true , analyzer : analyzer } ) ; assert ( doc ) ; const _UNKNOWN_ = 0 . queryAll ( doc , _UNKNOWN_ . _UNKNOWN_ ) ; assert . equal ( _UNKNOWN_ . length , 0 ) ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { const _UNKNOWN_ = await _UNKNOWN_ ( analyzer , 's' , 0 . _UNKNOWN_ ( _UNKNOWN_ [ i ] ) ) ; assert ( _UNKNOWN_ , 's' ) ; await _UNKNOWN_ ( _UNKNOWN_ ! , _UNKNOWN_ , 's' ) ; } } ) ; test ( 's' , async ( ) => { const { ast : doc , content : _UNKNOWN_ } = await bundle ( 's' , { _UNKNOWN_ : true , sourcemaps : true , analyzer : analyzer } ) ; assert ( doc ) ; const _UNKNOWN_ = 0 . queryAll ( doc , _UNKNOWN_ . _UNKNOWN_ ) ; assert . equal ( _UNKNOWN_ . length , 0 ) ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { const _UNKNOWN_ = await _UNKNOWN_ ( analyzer , 's' , 0 . _UNKNOWN_ ( _UNKNOWN_ [ i ] ) ) ; assert ( _UNKNOWN_ , 's' ) ; await _UNKNOWN_ ( _UNKNOWN_ ! , _UNKNOWN_ , 's' ) ; } } ) ; } ) ; } ) ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $Promise<any>$ O O O O O O $string$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O O O $Promise$ O $string$ O $Options$ $any$ O O $any$ O O O $Options$ O $ObjectConstructor$ O O O O O O $Options$ O O O O O O O O $Options$ O $any$ O O $Options$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O O $string$ O $any$ O $any$ O $string$ O O O $any$ O O $any$ O $Options$ O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O O $string$ O $string$ O $number$ O O O $string[]$ O $string$ O $complex$ O O O O O $string[]$ O $number$ O O O O O O O $Promise<void>$ O $any$ O $string$ O $string$ O O O $any$ O O $any$ O $any$ O O O O $boolean$ O O O O $any[]$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any[]$ O $number$ O $any$ O O O O O O $number$ O O O $number$ O $any[]$ O $number$ O $number$ O O O O O $any[]$ O $number$ O O $any$ O $string$ O O $boolean$ O O O O $string$ O $string$ O $string$ O $any[]$ O $number$ O O $any$ O O $any$ O $string$ O O O O $any$ O $any$ O $any[]$ O $number$ O O $any$ O $string$ O O $number$ O $string$ O O O O O O $any$ O O $any$ O $any$ O $any[]$ O $number$ O O $any$ O $any$ O O O $string$ O $string$ O $any$ O $any[]$ O $number$ O O $any$ O O $any$ O $string$ O O O O $any$ O $any$ O $any[]$ O $number$ O O $any$ O $string$ O O $number$ O $string$ O O O O O O O O O $string$ O $string$ O O O O O $any$ O O $any$ O $string$ O O O $any$ O O $any$ O O $any$ O O $any$ O O $string$ O $string$ O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O O O O $any$ O $any$ O $string$ O $string$ O O O $any$ O O O O $true$ O O O $true$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O O $number$ O O O O O O O O $any$ O O $Promise<any>$ O $any$ O O O $any$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O O O O O $Promise<void>$ O $any$ O O $string$ O O O O O O O O $any$ O O O O O O O O O O $any$ O $any$ O $string$ O $string$ O O O $any$ O O O O $true$ O O O $true$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O $any$ O O $Promise<any>$ O $any$ O O O $any$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O O O O O $Promise<void>$ O $any$ O O $string$ O O O O O O O O $any$ O O O O O O O O O O $any$ O $any$ O $string$ O $string$ O O O $any$ O O O O $true$ O O O $true$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O $any$ O O $Promise<any>$ O $any$ O O O $any$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O O O O O $Promise<void>$ O $any$ O O $string$ O O O O O O O O $any$ O O O O O O O O O O $any$ O $any$ O $string$ O $string$ O O O $any$ O O O O $true$ O O O $true$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O $any$ O O $Promise<any>$ O $any$ O O O $any$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O O O O O $Promise<void>$ O $any$ O O $string$ O O O O O O O O O O O O O O O
<s> import * as chai from 's' ; import { FileRelativeUrl , ResolvedUrl } from 's' ; import * as _UNKNOWN_ from 's' ; const assert = chai . assert ; suite ( 's' , ( ) => { suite ( 's' , ( ) => { test ( 's' , ( ) => { assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) , 's' ) ; } ) ; } ) ; suite ( 's' , ( ) => { function _UNKNOWN_ ( href , _UNKNOWN_ , _UNKNOWN_ ) { return _UNKNOWN_ . _UNKNOWN_ ( href as FileRelativeUrl , _UNKNOWN_ as ResolvedUrl , _UNKNOWN_ as ResolvedUrl ) ; } test ( 's' , ( ) => { const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; assert . equal ( _UNKNOWN_ ( 's' , _UNKNOWN_ , _UNKNOWN_ ) , 's' , 's' ) ; assert . equal ( _UNKNOWN_ ( 's' , _UNKNOWN_ , _UNKNOWN_ ) , 's' , 's' ) ; assert . equal ( _UNKNOWN_ ( 's' , _UNKNOWN_ , _UNKNOWN_ ) , 's' , 's' ) ; } ) ; test ( 's' , ( ) => { const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; assert . equal ( _UNKNOWN_ ( 's' , _UNKNOWN_ , _UNKNOWN_ ) , 's' , 's' ) ; assert . equal ( _UNKNOWN_ ( 's' , _UNKNOWN_ , _UNKNOWN_ ) , 's' , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( _UNKNOWN_ ( 's' , 's' , 's' ) , 's' , 's' ) ; assert . equal ( _UNKNOWN_ ( 's' , 's' , 's' ) , 's' , 's' ) ; assert . equal ( _UNKNOWN_ ( 's' , 's' , 's' ) , 's' , 's' ) ; assert . equal ( _UNKNOWN_ ( 's' , 's' , 's' ) , 's' , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( _UNKNOWN_ ( 's' , 's' , 's' ) , 's' , 's' ) ; } ) ; test ( 's' , ( ) => { assert . equal ( _UNKNOWN_ ( 's' , 's' , 's' ) , 's' ) ; } ) ; } ) ; } ) ; </s>	O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $T$ O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $T$ O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $T$ O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $T$ O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $T$ O O O O O O O O O O O O O $any$ O O O O O O O O $string$ O $string$ O $string$ O $string$ O O O $any$ O $any$ O $string$ O $any$ O $string$ O $any$ O $string$ O $any$ O O O $any$ O O O O O O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O O O O O O O
<s> export enum _UNKNOWN_ { _UNKNOWN_ = 0 , _UNKNOWN_ = 0 , _UNKNOWN_ = 0 , _UNKNOWN_ = 0 , _UNKNOWN_ = 0 , _UNKNOWN_ = 0 } </s>	O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O
<s> import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ { public name : string | null = null ; public path : string | null = null ; public size : number = 0 ; public _UNKNOWN_ : number = 0 ; public _UNKNOWN_ : number | null = null ; public offset : number = 0 ; public blockSize : number = 0 ; public _UNKNOWN_ : number = 0 ; public _UNKNOWN_ : boolean = false ; public version : number | null = null ; public time : Date | null = null ; public method : _UNKNOWN_ | null = null ; public os : string | null = null ; public partial : boolean = false ; public _UNKNOWN_ : boolean = false ; public _UNKNOWN_ : boolean = false ; } </s>	O O O $any$ O O O O O O $any$ O O $string$ O O O O O O O O $string$ O O O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O $boolean$ O O O O O O $number$ O O O O O O O O $Date$ O $DateConstructor$ O O O O O O $any$ O $any$ O O O O O O $string$ O O O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O $boolean$ O O O O O O O
<s> export abstract class _UNKNOWN_ { public size : number = 0 ; public abstract open ( ) < void > ; public abstract close ( ) < void > ; public abstract read ( length , position ) < ArrayBuffer > ; public abstract reset ( ) ; public async _UNKNOWN_ ( length , position , _UNKNOWN_ ? ) < Blob > { if ( ! _UNKNOWN_ ) { _UNKNOWN_ = 's' ; } const data = this . read ( length , position ) ; return new Blob ( [ data ] , { type : _UNKNOWN_ } ) ; } } </s>	O O O O $any$ O O $number$ O O O O O O O $Promise$ O O O O O O O O $Promise$ O O O O O O O O $Promise$ O $number$ O $number$ O O $ArrayBufferConstructor$ O O O O $void$ O O O O O $Promise$ O $number$ O $number$ O $string$ $string$ O O $complex$ O O O O O $string$ O O $string$ O O O O O $Promise<ArrayBuffer>$ O O O $Promise<ArrayBuffer>$ O $number$ O $number$ O O O O $complex$ O O $Promise<ArrayBuffer>$ O O O $string$ O $string$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { public uri : string ; constructor ( uri ) { super ( ) ; this . uri = uri ; } public async open ( ) { return fetch ( this . uri , { method : 's' } ) . then ( ( response ) => { if ( ! response . ok ) { throw new Error ( 's' ) ; } const length = response . headers . get ( 's' ) ; if ( length !== null ) { this . size = parseInt ( length , 0 ) ; } } ) ; } public close ( ) { return Promise . resolve ( ) ; } public reset ( ) { return ; } public async read ( length , position ) { return fetch ( this . uri , { method : 's' , headers : { Range : `template` } } ) . then ( ( response ) => { if ( ! response . ok ) { throw new Error ( 's' ) ; } return response . _UNKNOWN_ ( ) ; } ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O $string$ O O O O O $string$ O O O O O O O O $string$ O $string$ O O O O $Promise<void>$ O O O O $Promise<Response>$ O O O $string$ O O $string$ O O O O O O O O $Response$ O O O O O O $Response$ O $boolean$ O O O O $ErrorConstructor$ O O O O O O $string$ O $Response$ O $Headers$ O $string$ O O O O O O $string$ O O O O O O $number$ O $number$ O $string$ O O O O O O O O O O $Promise<void>$ O O O O $PromiseConstructor$ O $complex$ O O O O O $void$ O O O O O O O O $Promise<ArrayBuffer>$ O $number$ O $number$ O O O $Promise<Response>$ O O O $string$ O O $string$ O O O $complex$ O O $string$ O O O O O O O O O $Response$ O O O O O O $Response$ O $boolean$ O O O O $ErrorConstructor$ O O O O O O $Response$ O $Promise<ArrayBuffer>$ O O O O O O O O O
<s> import * as fs from 's' ; import { _UNKNOWN_ } from 's' ; let _UNKNOWN_ : typeof fs ; if ( typeof require === 's' ) { _UNKNOWN_ = require ( 's' ) ; } export class _UNKNOWN_ extends _UNKNOWN_ { public path : string ; constructor ( path ) { super ( ) ; this . path = path ; } public async open ( ) { return new Promise < void > ( ( resolve , reject ) => { _UNKNOWN_ . stat ( this . path , ( err , stat ) => { if ( err ) { reject ( new Error ( 's' ) ) ; return ; } this . size = stat . size ; resolve ( ) ; } ) ; } ) ; } public close ( ) { return Promise . resolve ( ) ; } public reset ( ) { return ; } public async read ( length , position ) { return new Promise < ArrayBuffer > ( ( resolve , reject ) => { _UNKNOWN_ . open ( this . path , 's' , ( err , fd ) => { if ( err ) { reject ( new Error ( 's' ) ) ; return ; } _UNKNOWN_ . read ( fd , new Buffer ( length ) , 0 , length , position , ( _UNKNOWN_ , _UNKNOWN_ , buffer ) => { if ( _UNKNOWN_ ) { reject ( new Error ( 's' ) ) ; return ; } const ab = new ArrayBuffer ( buffer . length ) ; const view = new 0 ( ab ) ; for ( let i = 0 ; i < buffer . length ; i ++ ) { view [ i ] = buffer [ i ] ; } _UNKNOWN_ . close ( fd , ( _UNKNOWN_ ) => { if ( _UNKNOWN_ ) { reject ( new Error ( 's' ) ) ; return ; } resolve ( ab ) ; } ) ; } ) ; } ) ; } ) ; } } </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O $string$ O O O O O $string$ O O O O O O O O $string$ O $string$ O O O O $Promise<void>$ O O O O O $PromiseConstructor$ O O O O O $void$ O $void$ O O O $any$ O $any$ O O O $string$ O O $any$ O $any$ O O O O O $any$ O O $void$ O O $ErrorConstructor$ O O O O O O O O O O $number$ O $any$ O $any$ O $void$ O O O O O O O O O O O $Promise<void>$ O O O O $PromiseConstructor$ O $complex$ O O O O O $void$ O O O O O O O O $Promise<ArrayBuffer>$ O $number$ O $number$ O O O O $PromiseConstructor$ O $ArrayBufferConstructor$ O O O $void$ O $void$ O O O $any$ O $any$ O O O $string$ O O O O $any$ O $any$ O O O O O $any$ O O $void$ O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $number$ O O O O $number$ O $number$ O O $any$ O $any$ O $any$ O O O O O $any$ O O $void$ O O $ErrorConstructor$ O O O O O O O O O $ArrayBuffer$ O O $ArrayBufferConstructor$ O $any$ O $any$ O O O O O O O O $ArrayBuffer$ O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O O $number$ O O $any$ O $number$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O O $void$ O O $ErrorConstructor$ O O O O O O O O $void$ O $ArrayBuffer$ O O O O O O O O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { public file : File ; constructor ( file ) { super ( ) ; this . file = file ; this . size = file . size ; } public open ( ) { return Promise . resolve ( ) ; } public close ( ) { return Promise . resolve ( ) ; } public reset ( ) { return ; } public read ( length , position ) { const slice = this . file . slice ( position , position + length ) ; const fr = new FileReader ( ) ; return new Promise < ArrayBuffer > ( ( resolve , reject ) => { fr . addEventListener ( 's' , ( ) => { resolve ( fr . result ) ; } ) ; fr . addEventListener ( 's' , ( ) => { reject ( new Error ( 's' ) ) ; } ) ; fr . _UNKNOWN_ ( slice ) ; } ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O $File$ O $complex$ O O O $File$ O O O O O O O O $File$ O $File$ O O O $number$ O $File$ O $number$ O O O $Promise<void>$ O O O O $PromiseConstructor$ O $complex$ O O O O O $Promise<void>$ O O O O $PromiseConstructor$ O $complex$ O O O O O $void$ O O O O O O O $Promise<ArrayBuffer>$ O $number$ O $number$ O O O $Blob$ O O O $File$ O $Blob$ O $number$ O $number$ O $number$ O O O $FileReader$ O O $complex$ O O O O O $PromiseConstructor$ O $ArrayBufferConstructor$ O O O $void$ O $void$ O O O $FileReader$ O $complex$ O O O O O O O $void$ O $FileReader$ O $complex$ O O O O O $FileReader$ O $complex$ O O O O O O O $void$ O O $ErrorConstructor$ O O O O O O O O $FileReader$ O $void$ O $Blob$ O O O O O O O O
<s> export function getString ( view , length ? , offset ? , raw ? ) { offset = offset || 0 ; length = length || ( view . byteLength - offset ) ; if ( length < 0 ) { length += view . byteLength ; } let str = 's' ; if ( typeof Buffer !== 's' ) { const data = [ ] ; for ( let i = offset ; i < ( offset + length ) ; i ++ ) { data . push ( view . 0 ( i ) ) ; } return ( new Buffer ( data ) ) . toString ( ) ; } else { for ( let i = offset ; i < ( offset + length ) ; i ++ ) { str += String . fromCharCode ( view . 0 ( i ) ) ; } if ( raw ) { return str ; } return decodeURIComponent ( ( window as any ) . escape ( str ) ) ; } } </s>	O O O $any$ O $any$ O $number$ $number$ O $number$ $number$ O $boolean$ $boolean$ O O $number$ O $number$ O O O $number$ O $number$ O O $any$ O $number$ O $number$ O O O O $number$ O O O O $number$ O $any$ O $number$ O O O $string$ O O O O O O $any$ O O O O O $any[]$ O O O O O O O $number$ O $number$ O $number$ O O $number$ O $number$ O O $number$ O O O $any[]$ O $number$ O $any$ O $number$ O $number$ O O O O O O O $any$ O $any[]$ O O O $any$ O O O O O O O O O $number$ O $number$ O $number$ O O $number$ O $number$ O O $number$ O O O $string$ O $StringConstructor$ O $string$ O $any$ O $number$ O $number$ O O O O O O $boolean$ O O O $string$ O O O $string$ O O $complex$ O O O O $any$ O $string$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as util from 's' ; export { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } ; export async function _UNKNOWN_ ( file ) { return _UNKNOWN_ ( new _UNKNOWN_ ( file ) ) ; } export async function _UNKNOWN_ ( uri ) { return _UNKNOWN_ ( new _UNKNOWN_ ( uri ) ) ; } export async function _UNKNOWN_ ( path ) { return _UNKNOWN_ ( new _UNKNOWN_ ( path ) ) ; } export async function _UNKNOWN_ ( reader ) { const result = new _UNKNOWN_ ( reader ) ; await result . load ( ) ; return result ; } export class _UNKNOWN_ { public entries : _UNKNOWN_ [ ] = [ ] ; private _UNKNOWN_ : _UNKNOWN_ ; private _UNKNOWN_ : boolean = false ; public get loaded ( ) : boolean { return this . _UNKNOWN_ ; } constructor ( reader ) { this . _UNKNOWN_ = reader ; } public async load ( ) < void > { if ( this . loaded ) { return ; } await this . _UNKNOWN_ . open ( ) ; const header = await this . _UNKNOWN_ . read ( 0 , 0 ) ; const _UNKNOWN_ = new _UNKNOWN_ ( header ) ; if ( util . getString ( _UNKNOWN_ , 0 , 0 , true ) !== 's' ) { throw new Error ( 's' ) ; } const _UNKNOWN_ = _UNKNOWN_ . 0 ( 0 ) ; const headerFlags = _UNKNOWN_ . 0 ( 0 , true ) ; const _UNKNOWN_ = _UNKNOWN_ . 0 ( 0 , true ) ; if ( _UNKNOWN_ !== 0 ) { throw new Error ( 's' ) ; } if ( ( headerFlags & 0 ) !== 0 ) { throw new Error ( 's' ) ; } if ( this . _UNKNOWN_ . size <= 0 ) { return ; } const _UNKNOWN_ = this . _UNKNOWN_ . size ; let offset = _UNKNOWN_ + 0 ; while ( offset < _UNKNOWN_ ) { const piece = await this . _UNKNOWN_ . read ( 0 , offset ) ; const view = new _UNKNOWN_ ( piece ) ; const type = view . 0 ( 0 ) ; const flags = view . 0 ( 0 , true ) ; let size = view . 0 ( 0 , true ) ; if ( ( flags & 0 ) !== 0 ) { size += view . 0 ( 0 , true ) ; } switch ( type ) { case 0 : const entry = await this . _UNKNOWN_ ( size , offset ) ; this . entries . push ( entry ) ; offset += entry . blockSize ; break ; default : offset += size ; } } } public async get ( entry ) < Blob > { if ( entry . method !== _UNKNOWN_ . _UNKNOWN_ ) { throw new Error ( 's' ) ; } const blob = await this . _UNKNOWN_ . _UNKNOWN_ ( entry . blockSize - 0 , entry . offset + entry . _UNKNOWN_ ) ; return blob ; } private _UNKNOWN_ ( time ) { if ( time . length < 0 ) { time = ( new Array ( 0 - time . length + 0 ) ) . join ( 's' ) + time ; } const matches = time . match ( "s" ) ; if ( ! matches ) { return new Date ( ) ; } const vals = matches . slice ( 0 ) . map ( ( val ) => { return parseInt ( val , 0 ) ; } ) ; return new Date ( 0 + vals [ 0 ] , vals [ 0 ] - 0 , vals [ 0 ] , vals [ 0 ] , vals [ 0 ] , vals [ 0 ] ) ; } private _UNKNOWN_ ( value ) { if ( value < 0 || value > 0 ) { return 's' ; } return [ 's' , 's' , 's' , 's' , 's' , 's' ] [ value ] ; } private async _UNKNOWN_ ( size , offset ) < _UNKNOWN_ > { const data = await this . _UNKNOWN_ . read ( size , offset ) ; const view = new _UNKNOWN_ ( data ) ; const flags = view . 0 ( 0 , true ) ; const entry = new _UNKNOWN_ ( ) ; entry . partial = ( ( flags & 0 ) !== 0 || ( flags & 0 ) !== 0 ) ; entry . _UNKNOWN_ = ( ( flags & 0 ) !== 0 ) ; entry . _UNKNOWN_ = ( ( flags & 0 ) !== 0 ) ; entry . offset = offset ; entry . _UNKNOWN_ = view . 0 ( 0 , true ) ; entry . size = view . 0 ( 0 , true ) ; entry . _UNKNOWN_ = view . 0 ( 0 , true ) ; entry . time = this . _UNKNOWN_ ( view . 0 ( 0 , true ) . toString ( 0 ) ) ; entry . os = this . _UNKNOWN_ ( view . 0 ( 0 ) ) ; entry . version = view . 0 ( 0 ) ; entry . method = view . 0 ( 0 ) ; entry . _UNKNOWN_ = ( ( flags & 0 ) !== 0 ) ; const _UNKNOWN_ = view . 0 ( 0 , true ) ; if ( ( flags & 0 ) !== 0 ) { entry . _UNKNOWN_ += view . 0 ( 0 , true ) * 0 ; entry . size += view . 0 ( 0 , true ) * 0 ; entry . path = util . getString ( view , _UNKNOWN_ , 0 ) ; } else { entry . path = util . getString ( view , _UNKNOWN_ , 0 ) ; } if ( ( flags & 0 ) !== 0 && entry . path . indexOf ( 's' ) !== - 0 ) { entry . path = entry . path . split ( 's' ) [ 0 ] ; } entry . name = entry . path ; if ( entry . name . indexOf ( 's' ) !== - 0 ) { entry . name = entry . name . substr ( entry . name . lastIndexOf ( 's' ) + 0 ) ; } else { entry . name = entry . name . substr ( entry . name . lastIndexOf ( 's' ) + 0 ) ; } entry . _UNKNOWN_ = size ; entry . blockSize = entry . _UNKNOWN_ + entry . _UNKNOWN_ ; return entry ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $File$ O O O $any$ O O $any$ O $File$ O O O O O O O $any$ O $string$ O O O $any$ O O $any$ O $string$ O O O O O O O $any$ O $string$ O O O $any$ O O $any$ O $string$ O O O O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O $Promise<void>$ O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O $boolean$ O O O O O O O $boolean$ O O O O O O O O $boolean$ O O O O $any$ O O O O $any$ O $any$ O O O O $Promise$ O O O O O O O O O O $boolean$ O O O O O O O O $any$ O $Promise<void>$ O O O O $ArrayBuffer$ O O O O $any$ O $Promise<ArrayBuffer>$ O O O O O O O $any$ O O $any$ O $ArrayBuffer$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O $ErrorConstructor$ O O O O O O $number$ O $any$ O $number$ O O O O O $number$ O $any$ O $number$ O O O O O O O $number$ O $any$ O $number$ O O O O O O O O $number$ O O O O O O $ErrorConstructor$ O O O O O O O O $number$ O O O O O O O O O $ErrorConstructor$ O O O O O O O O O $any$ O $number$ O O O O O O O O $number$ O O O $any$ O $number$ O O $number$ O $number$ O O O O O $number$ O $number$ O O O $ArrayBuffer$ O O O O $any$ O $Promise<ArrayBuffer>$ O O O $number$ O O O $any$ O O $any$ O $ArrayBuffer$ O O O $number$ O $any$ O $number$ O O O O O $number$ O $any$ O $number$ O O O O O O O $number$ O $any$ O $number$ O O O O O O O O O $number$ O O O O O O O $number$ O $any$ O $number$ O O O O O O O O O $number$ O O O O O O $any$ O O O O $any$ O $number$ O $number$ O O O O $any$ O $number$ O $any$ O O $number$ O $any$ O $number$ O O O O O $number$ O $number$ O O O O O O $Promise$ O $any$ O O $complex$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $ErrorConstructor$ O O O O O O $Blob$ O O O O $any$ O $any$ O $any$ O $number$ O O O $any$ O $number$ O $any$ O $number$ O O O $Blob$ O O O $Date$ O $string$ O O O O $string$ O $number$ O O O O $string$ O O O $ArrayConstructor$ O O O $string$ O $number$ O O O O O $string$ O O O O $string$ O O O $RegExpMatchArray$ O $string$ O $complex$ O O O O O O O $RegExpMatchArray$ O O O O $DateConstructor$ O O O O O $number[]$ O $RegExpMatchArray$ O $string[]$ O O O O $U[]$ O O $string$ O O O O $number$ O $string$ O O O O O O O O O $DateConstructor$ O O O $number[]$ O O O O $number[]$ O O O O O O $number[]$ O O O O $number[]$ O O O O $number[]$ O O O O $number[]$ O O O O O O O $string$ O $number$ O O O O $number$ O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O $number$ O O O O O $Promise$ O $number$ O $number$ O O $any$ O O O $ArrayBuffer$ O O O O $any$ O $Promise<ArrayBuffer>$ O $number$ O $number$ O O O $any$ O O $any$ O $ArrayBuffer$ O O O $number$ O $any$ O $number$ O O O O O O O $any$ O O $any$ O O O $any$ O $boolean$ O O O $number$ O O O O O O O $number$ O O O O O O O $any$ O $boolean$ O O O $number$ O O O O O O O $any$ O $boolean$ O O O $number$ O O O O O O O $any$ O $number$ O $number$ O $any$ O $number$ O $any$ O $number$ O O O O O O $any$ O $number$ O $any$ O $number$ O O O O O O $any$ O $number$ O $any$ O $number$ O O O O O O $any$ O $Date$ O O O $Date$ O $any$ O $number$ O O O O O O $string$ O O O O O $any$ O $string$ O O O $string$ O $any$ O $number$ O O O O O $any$ O $number$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $number$ O O O O $any$ O $boolean$ O O O $number$ O O O O O O O O $number$ O $any$ O $number$ O O O O O O O O O $number$ O O O O O O O $any$ O $number$ O $any$ O $number$ O O O O O O O O $any$ O $number$ O $any$ O $number$ O O O O O O O O $any$ O $string$ O $any$ O $any$ O $any$ O $number$ O O O O O O O $any$ O $string$ O $any$ O $any$ O $any$ O $number$ O O O O O O O O $number$ O O O O O O $any$ O $string$ O $number$ O O O O O O O O $any$ O $string$ O $any$ O $string$ O $complex$ O O O O O O O O $any$ O $string$ O $any$ O $string$ O O O $any$ O $string$ O $number$ O O O O O O O O $any$ O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O $number$ O O O O O O O O O O $any$ O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O $number$ O O O O O O O O $any$ O $number$ O $number$ O $any$ O $number$ O $any$ O $number$ O $any$ O $number$ O O $any$ O O O O
<s> import { assert } from 's' ; import { _UNKNOWN_ } from 's' ; import * as path from 's' ; const testFile = path . join ( __dirname , 's' ) ; const _UNKNOWN_ = path . join ( __dirname , 's' ) ; const _UNKNOWN_ = ( buf ) => { return String . fromCharCode . apply ( null , new 0 ( buf ) ) ; } ; suite ( 's' , ( ) => { let reader ; setup ( ( ) => { reader = new _UNKNOWN_ ( testFile ) ; } ) ; test ( 's' , async ( ) => { await reader . open ( ) ; assert . equal ( reader . size , 0 ) ; } ) ; test ( 's' , async ( ) => { reader = new _UNKNOWN_ ( _UNKNOWN_ ) ; try { await reader . open ( ) ; throw new Error ( 's' ) ; } catch ( e ) { assert . equal ( e . message , 's' ) ; } } ) ; test ( 's' , async ( ) => { await reader . open ( ) ; let result = _UNKNOWN_ ( await reader . read ( 0 , 0 ) ) ; assert . equal ( result , 's' ) ; result = _UNKNOWN_ ( await reader . read ( 0 , 0 ) ) ; assert . equal ( result , 's' ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $ArrayBuffer$ O O O O $StringConstructor$ O $string$ O $any$ O O O O O O $ArrayBuffer$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O O $any$ O $Promise<void>$ O O O $any$ O $any$ O $any$ O $number$ O O O O O O O $any$ O O O O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $Promise<void>$ O O O O O $ErrorConstructor$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $Promise<void>$ O O O O $any$ O $any$ O O $any$ O $Promise<ArrayBuffer>$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $Promise<ArrayBuffer>$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import { assert } from 's' ; import { _UNKNOWN_ } from 's' ; import * as sinon from 's' ; const _UNKNOWN_ = ( buf ) => { return String . fromCharCode . apply ( null , new 0 ( buf ) ) ; } ; class _UNKNOWN_ { private _UNKNOWN_ : { [ k ] : string } ; constructor ( obj : { [ k ] : string } ) { this . _UNKNOWN_ = obj ; } public get ( k ) { return this . _UNKNOWN_ [ k ] ; } } class _UNKNOWN_ { public status : number ; public body : string ; public headers : _UNKNOWN_ ; public get ok ( ) { return this . status < 0 ; } constructor ( status , body , headers : { [ k ] : string } ) { this . status = status ; this . headers = new _UNKNOWN_ ( headers ) ; this . body = body ; } public _UNKNOWN_ ( ) { const buffer = new ArrayBuffer ( this . body . length ) ; const view = new 0 ( buffer ) ; for ( let i = 0 , len = this . body . length ; i < len ; i ++ ) { view [ i ] = this . body . charCodeAt ( i ) ; } return buffer ; } } suite ( 's' , ( ) => { let reader ; let fetch : sinon . SinonStub ; setup ( ( ) => { fetch = ( global as any ) . fetch = sinon . stub ( ) ; reader = new _UNKNOWN_ ( 's' ) ; } ) ; test ( 's' , async ( ) => { fetch . resolves ( new _UNKNOWN_ ( 0 , 's' , { 's' : 's' } ) ) ; await reader . open ( ) ; assert . equal ( reader . size , 0 ) ; } ) ; test ( 's' , async ( ) => { fetch . resolves ( new _UNKNOWN_ ( 0 , 's' , { 's' : 's' } ) ) ; try { await reader . open ( ) ; throw new Error ( 's' ) ; } catch ( e ) { assert . equal ( e . message , 's' ) ; } } ) ; test ( 's' , async ( ) => { fetch . resolves ( new _UNKNOWN_ ( 0 , 's' , { 's' : 's' } ) ) ; await reader . open ( ) ; assert . isTrue ( fetch . calledWithExactly ( 's' , { method : 's' } ) ) ; fetch . resolves ( new _UNKNOWN_ ( 0 , 's' , { 's' : 's' , 's' : 's' , 's' : 's' } ) ) ; let result = _UNKNOWN_ ( await reader . read ( 0 , 0 ) ) ; assert . isTrue ( fetch . calledWithExactly ( 's' , { method : 's' , headers : { Range : 's' } } ) ) ; assert . equal ( result , 's' ) ; fetch . resolves ( new _UNKNOWN_ ( 0 , 's' , { 's' : 's' , 's' : 's' , 's' : 's' } ) ) ; result = _UNKNOWN_ ( await reader . read ( 0 , 0 ) ) ; assert . isTrue ( fetch . calledWithExactly ( 's' , { method : 's' , headers : { Range : 's' } } ) ) ; assert . equal ( result , 's' ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O $ArrayBuffer$ O O O O $StringConstructor$ O $string$ O $any$ O O O O O O $ArrayBuffer$ O O O O O O $any$ O O $complex$ O O O $string$ O O O O O O O $complex$ O O O $string$ O O O O O O O O $complex$ O $complex$ O O O $string$ O $string$ O O O O O $complex$ O $string$ O O O O O $any$ O O $number$ O O O O $string$ O O O O $any$ O $any$ O O O $boolean$ O O O O O O $number$ O O O O O O $number$ O $string$ O $complex$ O O O $string$ O O O O O O O O $number$ O $number$ O O O $any$ O O $any$ O $complex$ O O O O $string$ O $string$ O O O $ArrayBuffer$ O O O O $ArrayBuffer$ O O $ArrayBufferConstructor$ O O O $string$ O $number$ O O O O O O O O $ArrayBuffer$ O O O O O $number$ O O O $number$ O O O $string$ O $number$ O $number$ O $number$ O $number$ O O O O O $number$ O O O O $string$ O $number$ O $number$ O O O O $ArrayBuffer$ O O O $any$ O O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O $any$ O $Promise<void>$ O O O $any$ O $any$ O $any$ O $number$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O O O $any$ O $Promise<void>$ O O O O O $ErrorConstructor$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O $any$ O $Promise<void>$ O O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O $any$ O $Promise<ArrayBuffer>$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O $complex$ O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O $any$ O $Promise<ArrayBuffer>$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O $complex$ O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import { assert } from 's' ; import * as util from 's' ; suite ( 's' , ( ) => { suite ( 's' , ( ) => { let view ; setup ( ( ) => { const buffer = new ArrayBuffer ( 0 ) ; const data = new 0 ( buffer ) ; data [ 0 ] = 0 ; data [ 0 ] = 0 ; data [ 0 ] = 0 ; view = new _UNKNOWN_ ( buffer ) ; } ) ; test ( 's' , ( ) => { const result = util . getString ( view ) ; assert . equal ( result , 's' ) ; } ) ; test ( 's' , ( ) => { const result = util . getString ( view , 0 ) ; assert . equal ( result , 's' ) ; } ) ; test ( 's' , ( ) => { const result = util . getString ( view , undefined , 0 ) ; assert . equal ( result , 's' ) ; } ) ; test ( 's' , ( ) => { const result = util . getString ( view , 0 , 0 ) ; assert . equal ( result , 's' ) ; } ) ; test ( 's' ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O $ArrayBuffer$ O O $ArrayBufferConstructor$ O O O O O O O O O O $ArrayBuffer$ O O O O O O O O O O O O O O O O O O O O O O O $any$ O O $any$ O $ArrayBuffer$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $undefined$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O O O O
<s> import { config as _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import { Store , Middleware } from 's' ; export interface _UNKNOWN_ { getItem ( key ) : Promise < string > ; removeItem ( key ) : Promise < string > ; setItem ( key , value ) : Promise < string > ; } export type _UNKNOWN_ = _UNKNOWN_ & { store ? : Store < object > ; _UNKNOWN_ ? : Middleware ; _UNKNOWN_ ? : string ; tokenStorage ? : _UNKNOWN_ ; server ? : string ; _UNKNOWN_ ? : string ; title ? : string ; _UNKNOWN_ ? : any [ ] ; _UNKNOWN_ ? : object ; _UNKNOWN_ ? : object ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : ( user ) => Promise < any > ; _UNKNOWN_ ? : boolean ; history ? : string [ ] ; _UNKNOWN_ ? : boolean ; } ; const _UNKNOWN_ = ( ) => { return { getItem ( key ) { return Promise . resolve ( localStorage . getItem ( key ) ) ; } , removeItem ( key ) { const value = localStorage . getItem ( key ) ; localStorage . removeItem ( key ) ; return Promise . resolve ( value ) ; } , setItem ( key , value ) { localStorage . setItem ( key , value ) ; return Promise . resolve ( value ) ; } , } ; } ; export default { ... _UNKNOWN_ , store : null , _UNKNOWN_ : null , _UNKNOWN_ : 's' , tokenStorage : _UNKNOWN_ ( ) , server : 's' , _UNKNOWN_ : 's' , title : 's' , _UNKNOWN_ : [ ] , _UNKNOWN_ : { } , _UNKNOWN_ : { } , _UNKNOWN_ : false , _UNKNOWN_ : 's' , _UNKNOWN_ : null , _UNKNOWN_ : null , _UNKNOWN_ : 's' , _UNKNOWN_ : null , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : true , _UNKNOWN_ : true , } ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $Promise<string>$ O $string$ O O $PromiseConstructor$ O O O O $Promise<string>$ O $string$ O O $PromiseConstructor$ O O O O $Promise<string>$ O $string$ O $string$ O O $PromiseConstructor$ O O O O O O O $any$ O $any$ O O $any$ O O $any$ O O O O $any$ O O $any$ O $string$ O O O O $any$ O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O $any[]$ O O O O O O $object$ O O O O $object$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $Promise<any>$ O O O $object$ O O $PromiseConstructor$ O O O O $boolean$ O O O O $string[]$ O O O O O O $boolean$ O O O O O O O $complex$ O O O O O O O $Promise<string>$ O $string$ O O O $PromiseConstructor$ O $complex$ O $Storage$ O $string$ O $string$ O O O O O $Promise<string>$ O $string$ O O O $string$ O $Storage$ O $string$ O $string$ O O $Storage$ O $void$ O $string$ O O O $PromiseConstructor$ O $complex$ O $string$ O O O O $Promise<string>$ O $string$ O $string$ O O $Storage$ O $void$ O $string$ O $string$ O O O $PromiseConstructor$ O $complex$ O $string$ O O O O O O O O O O O O $any$ O $null$ O O O $null$ O O O $string$ O O O $complex$ O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $undefined[]$ O O O O ${}$ O O O O ${}$ O O O O $boolean$ O O O $string$ O O O $null$ O O O $null$ O O O $string$ O O O $null$ O O O $string$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O
<s> import { createStore , applyMiddleware , compose , Store , Middleware , } from 's' ; import { Map } from 's' ; import { combineReducers } from 's' ; export default ( { reducers = { } , middleware = [ ] , state = Map ( ) , } : { reducers ? : object ; middleware ? : Middleware [ ] ; state ? : Map < string , any > ; } ) => createStore ( combineReducers ( reducers ) , state , compose ( applyMiddleware ( ... middleware ) ) ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O O O $object$ O O O O $any[]$ O O O O $any$ O $any$ O O O O O O $object$ O O O O $any[]$ O O $any$ O O O $any$ O O $any$ O O O O O O O O O $any$ O $any$ O $object$ O O $any$ O $any$ O $any$ O O $any[]$ O O O O O
<s> import { Map } from 's' ; const PATH = 's' ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const initialState = Map < string , any > ( { isLoading : false , user : null , tokens : null , _UNKNOWN_ : false , _UNKNOWN_ : null , _UNKNOWN_ : false , } ) ; const reducer = ( state = initialState , action ) => { const nextState = state ; switch ( action . type ) { case _UNKNOWN_ : { break ; } case _UNKNOWN_ : { const { user } = action . payload ; return state . set ( 's' , Map ( user ) ) ; } case _UNKNOWN_ : { const { tokens } = action . payload ; return state . set ( 's' , Map ( tokens ) ) ; } case _UNKNOWN_ : { state . set ( 's' , null ) ; return state . set ( 's' , null ) ; } case _UNKNOWN_ : { return state . set ( 's' , null ) ; } case _UNKNOWN_ : { const { _UNKNOWN_ } = action . payload ; return state . set ( 's' , _UNKNOWN_ ) ; } case _UNKNOWN_ : { const { tokens } = action . payload ; return state . set ( 's' , Map ( tokens ) ) ; } case _UNKNOWN_ : { return state . set ( 's' , null ) ; } case _UNKNOWN_ : { const { _UNKNOWN_ } = action . payload ; return state . set ( 's' , _UNKNOWN_ ) ; } default : break ; } return nextState ; } ; export default reducer ; export const _UNKNOWN_ = _UNKNOWN_ => ( { type : _UNKNOWN_ , payload : { _UNKNOWN_ , } , } ) ; export const _UNKNOWN_ = user => ( { type : _UNKNOWN_ , payload : { user , } , } ) ; export const _UNKNOWN_ = tokens => ( { type : _UNKNOWN_ , payload : { tokens , } , } ) ; export const _UNKNOWN_ = ( ) => ( { type : _UNKNOWN_ , } ) ; export const _UNKNOWN_ = ( ) => ( { type : _UNKNOWN_ , } ) ; export const _UNKNOWN_ = tokens => ( { type : _UNKNOWN_ , payload : { tokens , } , } ) ; export const _UNKNOWN_ = ( ) => ( { type : _UNKNOWN_ , } ) ; export const _UNKNOWN_ = _UNKNOWN_ => ( { type : _UNKNOWN_ , payload : { _UNKNOWN_ , } , } ) ; </s>	O O O $any$ O O O O O O O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $any$ O $any$ O O O O O O O $boolean$ O O O $null$ O O O $null$ O O O $boolean$ O O O $null$ O O O $boolean$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $string$ O O O O O O $string$ O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O $string$ O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O $string$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O O O O O O O O $string$ O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O $string$ O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O $string$ O O O $any$ O $any$ O O O O O O O O $string$ O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O O O $any$ O O O O O $any$ O O O $complex$ O $any$ O O O $string$ O $string$ O $complex$ O O $any$ O O O O O O O O $complex$ O $any$ O O O $string$ O $string$ O $complex$ O O $any$ O O O O O O O O $complex$ O $any$ O O O $string$ O $string$ O $complex$ O O $any$ O O O O O O O O $complex$ O O O O O O $string$ O $string$ O O O O O O $complex$ O O O O O O $string$ O $string$ O O O O O O $complex$ O $any$ O O O $string$ O $string$ O $complex$ O O $any$ O O O O O O O O $complex$ O O O O O O $string$ O $string$ O O O O O O $complex$ O $any$ O O O $string$ O $string$ O $complex$ O O $any$ O O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; export interface _UNKNOWN_ { createUser ( user ) : Promise < string > ; _UNKNOWN_ ( service , _UNKNOWN_ : { [ key ] : string | object ; } ) : Promise < _UNKNOWN_ > ; logout ( accessToken ) : Promise < void > ; _UNKNOWN_ ( accessToken , refreshToken ) : Promise < _UNKNOWN_ > ; _UNKNOWN_ ( token ) : Promise < void > ; _UNKNOWN_ ( email ) : Promise < void > ; _UNKNOWN_ ( email ) : Promise < void > ; _UNKNOWN_ ( token , username ) : Promise < _UNKNOWN_ > ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $Promise<string>$ O $any$ O O $PromiseConstructor$ O O O O $Promise<any>$ O $string$ O $complex$ O O O $string$ O O O O O O O O O $PromiseConstructor$ O $any$ O O $Promise<void>$ O $string$ O O $PromiseConstructor$ O O O O $Promise<any>$ O $string$ O $string$ O O $PromiseConstructor$ O $any$ O O $Promise<void>$ O $string$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O O $PromiseConstructor$ O O O O $Promise<any>$ O $string$ O $string$ O O $PromiseConstructor$ O $any$ O O O O
<s> import { isFunction , isString , has } from 's' ; import { Map } from 's' ; import { Store , Middleware } from 's' ; import * as _UNKNOWN_ from 's' ; import { _UNKNOWN_ , validators , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import config , { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import createStore from 's' ; import reducer , { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ as _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = ( type , options ) => isString ( options . _UNKNOWN_ ) && options . _UNKNOWN_ . length > 0 ? `template` : type ; export class _UNKNOWN_ { private options : _UNKNOWN_ ; private _UNKNOWN_ : _UNKNOWN_ ; private store : Store < object > ; private storage : _UNKNOWN_ ; constructor ( options , _UNKNOWN_ ) { this . options = { ... config , ... options } ; this . storage = options . tokenStorage || config . tokenStorage ; if ( ! _UNKNOWN_ ) { throw new _UNKNOWN_ ( 's' ) ; } this . _UNKNOWN_ = _UNKNOWN_ ; const middleware : Middleware [ ] = options . _UNKNOWN_ ? [ options . _UNKNOWN_ ] : [ ] ; const _UNKNOWN_ = options . _UNKNOWN_ || config . _UNKNOWN_ ; this . store = options . store || createStore ( { reducers : { [ _UNKNOWN_ ] : reducer , } , middleware , } ) ; } public async config ( ) < void > { await this . _UNKNOWN_ ( ) ; await this . _UNKNOWN_ ( ) ; } public getState ( ) < string , any > { const state : object | Map < string , any > = this . store . getState ( ) ; if ( typeof ( state as Map < string , any > ) . get === 's' ) { return ( state as Map < string , any > ) . get ( this . options . _UNKNOWN_ ) ; } return state [ this . options . _UNKNOWN_ ] ; } public async _UNKNOWN_ ( _UNKNOWN_ ) < string > { return Promise . resolve ( this . storage . getItem ( _UNKNOWN_ ) ) ; } public async _UNKNOWN_ ( _UNKNOWN_ , value ) < string > { return Promise . resolve ( this . storage . setItem ( _UNKNOWN_ , value ) ) ; } public async _UNKNOWN_ ( _UNKNOWN_ ) < string > { return Promise . resolve ( this . storage . removeItem ( _UNKNOWN_ ) ) ; } public async _UNKNOWN_ ( ) < void > { const tokens = { accessToken : ( await this . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ , this . options ) ) ) || null , refreshToken : ( await this . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ , this . options ) ) ) || null , } ; this . store . dispatch ( _UNKNOWN_ ( tokens ) ) ; } public async _UNKNOWN_ ( ) < void > { const tokens = { accessToken : ( await this . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ , this . options ) ) ) || null , refreshToken : ( await this . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ , this . options ) ) ) || null , } ; this . store . dispatch ( _UNKNOWN_ ( tokens ) ) ; } public user ( ) { const user = this . getState ( ) . get ( 's' ) ; return user ? user . _UNKNOWN_ ( ) : null ; } public async _UNKNOWN_ ( username ) < _UNKNOWN_ > { if ( ! isString ( username ) ) { throw new _UNKNOWN_ ( 's' ) ; } if ( this . _UNKNOWN_ ( ) ) { throw new _UNKNOWN_ ( 's' ) ; } const { accessToken , refreshToken } = await this . tokens ( ) ; if ( ! accessToken ) { throw new _UNKNOWN_ ( 's' ) ; } const res = await this . _UNKNOWN_ . _UNKNOWN_ ( accessToken , username ) ; if ( ! res . _UNKNOWN_ ) { throw new _UNKNOWN_ ( `template` ) ; } else { const { _UNKNOWN_ } = this . options ; this . store . dispatch ( _UNKNOWN_ ( true ) ) ; this . store . dispatch ( _UNKNOWN_ ( { accessToken , refreshToken } ) ) ; if ( _UNKNOWN_ ) { await this . _UNKNOWN_ ( { accessToken , refreshToken } ) ; await this . _UNKNOWN_ ( res . tokens ) ; } this . store . dispatch ( _UNKNOWN_ ( res . tokens ) ) ; return res ; } } public async _UNKNOWN_ ( ) < void > { if ( this . _UNKNOWN_ ( ) ) { this . store . dispatch ( _UNKNOWN_ ( this . _UNKNOWN_ ( ) ) ) ; this . store . dispatch ( _UNKNOWN_ ( ) ) ; this . store . dispatch ( _UNKNOWN_ ( false ) ) ; await this . _UNKNOWN_ ( ) ; } } public _UNKNOWN_ ( ) { return this . getState ( ) . get ( 's' ) ; } public _UNKNOWN_ ( ) { const tokens = this . getState ( ) . get ( 's' ) ; return tokens ? tokens . _UNKNOWN_ ( ) : { accessToken : null , refreshToken : null , } ; } public tokens ( ) { const tokens = this . getState ( ) . get ( 's' ) ; return tokens ? tokens . _UNKNOWN_ ( ) : { accessToken : null , refreshToken : null , } ; } public async _UNKNOWN_ ( ) < void > { this . store . dispatch ( _UNKNOWN_ ( ) ) ; await this . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ , this . options ) ) ; await this . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ , this . options ) ) ; } public async _UNKNOWN_ ( tokens ) < void > { if ( tokens ) { const _UNKNOWN_ = tokens . accessToken ; if ( _UNKNOWN_ ) { await this . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ , this . options ) , _UNKNOWN_ ) ; } const _UNKNOWN_ = tokens . refreshToken ; if ( _UNKNOWN_ ) { await this . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ , this . options ) , _UNKNOWN_ ) ; } } } public async _UNKNOWN_ ( tokens ) < void > { if ( tokens ) { const _UNKNOWN_ = tokens . accessToken ; if ( _UNKNOWN_ ) { await this . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ , this . options ) , _UNKNOWN_ ) ; } const _UNKNOWN_ = tokens . refreshToken ; if ( _UNKNOWN_ ) { await this . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ , this . options ) , _UNKNOWN_ ) ; } } } public _UNKNOWN_ ( ) { this . store . dispatch ( _UNKNOWN_ ( ) ) ; } public async _UNKNOWN_ ( ) < void > { try { await this . _UNKNOWN_ ( ) ; if ( this . options . _UNKNOWN_ && isFunction ( this . options . _UNKNOWN_ ) ) { this . options . _UNKNOWN_ ( ) ; } } catch ( err ) { throw err ; } } public async _UNKNOWN_ ( ) < void > { const { accessToken , refreshToken } = await this . tokens ( ) ; if ( accessToken && refreshToken ) { try { this . store . dispatch ( _UNKNOWN_ ( true ) ) ; const _UNKNOWN_ = _UNKNOWN_ ( refreshToken ) ; const currentTime = Date . now ( ) / 0 ; if ( _UNKNOWN_ . exp < currentTime ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } else { const _UNKNOWN_ = await this . _UNKNOWN_ . _UNKNOWN_ ( accessToken , refreshToken ) ; this . store . dispatch ( _UNKNOWN_ ( false ) ) ; await this . _UNKNOWN_ ( _UNKNOWN_ . tokens ) ; this . store . dispatch ( _UNKNOWN_ ( _UNKNOWN_ . tokens ) ) ; } } catch ( err ) { this . store . dispatch ( _UNKNOWN_ ( false ) ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; throw new _UNKNOWN_ ( 's' ) ; } } else { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; throw new _UNKNOWN_ ( 's' ) ; } } public async createUser ( user ) < void > { if ( ! user ) { throw new _UNKNOWN_ ( 's' , { username : user && user . username , email : user && user . email , } , 0 ) ; } if ( ! validators . _UNKNOWN_ ( user . username ) && ! validators . _UNKNOWN_ ( user . email ) ) { throw new _UNKNOWN_ ( 's' ) ; } const _UNKNOWN_ = { ... user , } ; try { const userId = await this . _UNKNOWN_ . createUser ( _UNKNOWN_ ) ; const { _UNKNOWN_ } = this . options ; if ( isFunction ( _UNKNOWN_ ) ) { try { await _UNKNOWN_ ( { id : userId } ) ; } catch ( err ) { console . error ( err ) ; } } } catch ( err ) { throw new _UNKNOWN_ ( err . message ) ; } } public async _UNKNOWN_ ( service , credentials : { [ key ] : string | object } ) < _UNKNOWN_ > { if ( ! isString ( service ) ) { throw new _UNKNOWN_ ( 's' ) ; } try { this . store . dispatch ( _UNKNOWN_ ( true ) ) ; const response = await this . _UNKNOWN_ . _UNKNOWN_ ( service , credentials ) ; this . store . dispatch ( _UNKNOWN_ ( false ) ) ; await this . _UNKNOWN_ ( response . tokens ) ; this . store . dispatch ( _UNKNOWN_ ( response . tokens ) ) ; const { _UNKNOWN_ } = this . options ; if ( isFunction ( _UNKNOWN_ ) ) { try { await _UNKNOWN_ ( response ) ; } catch ( err ) { console . error ( err ) ; } } return response ; } catch ( err ) { this . _UNKNOWN_ ( ) ; this . store . dispatch ( _UNKNOWN_ ( ) ) ; this . store . dispatch ( _UNKNOWN_ ( false ) ) ; throw new _UNKNOWN_ ( err . message ) ; } } public _UNKNOWN_ ( ) { return this . getState ( ) . get ( 's' ) ; } public isLoading ( ) { return this . getState ( ) . get ( 's' ) ; } public async logout ( callback ? : ( err ? ) => void ) < void > { try { const { accessToken } = await this . tokens ( ) ; if ( accessToken ) { await this . _UNKNOWN_ . logout ( accessToken ) ; } this . _UNKNOWN_ ( ) ; this . store . dispatch ( _UNKNOWN_ ( ) ) ; if ( callback && isFunction ( callback ) ) { callback ( ) ; } if ( this . options . _UNKNOWN_ ) { this . options . _UNKNOWN_ ( ) ; } } catch ( err ) { this . _UNKNOWN_ ( ) ; this . store . dispatch ( _UNKNOWN_ ( ) ) ; if ( callback && isFunction ( callback ) ) { callback ( err ) ; } throw new _UNKNOWN_ ( err . message ) ; } } public async _UNKNOWN_ ( token ) < void > { try { await this . _UNKNOWN_ . _UNKNOWN_ ( token ) ; } catch ( err ) { throw new _UNKNOWN_ ( err . message ) ; } } } const _UNKNOWN_ = { instance : { } as _UNKNOWN_ , ui : { } , async config ( options , _UNKNOWN_ ) < _UNKNOWN_ > { this . instance = new _UNKNOWN_ ( { ... config , ... options , } , _UNKNOWN_ ) ; await this . instance . _UNKNOWN_ ( ) ; await this . instance . _UNKNOWN_ ( ) ; return this . instance ; } , user ( ) : _UNKNOWN_ | null { return this . instance . user ( ) ; } , options ( ) { return this . instance . options ; } , createUser ( user , callback ? : ( err ? ) => void ) < void > { return this . instance . createUser ( user , callback ) ; } , _UNKNOWN_ ( service , credentials : { [ key ] : string | object } ) < _UNKNOWN_ > { return this . instance . _UNKNOWN_ ( service , credentials ) ; } , _UNKNOWN_ ( ) { return this . instance . _UNKNOWN_ ( ) ; } , isLoading ( ) { return this . instance . isLoading ( ) ; } , logout ( callback : ( err ? ) => void ) < void > { return this . instance . logout ( callback ) ; } , tokens ( ) { return this . instance . tokens ( ) ; } , _UNKNOWN_ ( ) < void > { return this . instance . _UNKNOWN_ ( ) ; } , _UNKNOWN_ ( ) < void > { return this . instance . _UNKNOWN_ ( ) ; } , _UNKNOWN_ ( token ) < void > { return this . instance . _UNKNOWN_ ( token ) ; } , _UNKNOWN_ ( email ? ) < void > { return this . instance . _UNKNOWN_ ( email ) ; } , _UNKNOWN_ ( username ) < any > { return this . instance . _UNKNOWN_ ( username ) ; } , _UNKNOWN_ ( ) < void > { return this . instance . _UNKNOWN_ ( ) ; } , _UNKNOWN_ ( ) { return this . instance . _UNKNOWN_ ( ) ; } , _UNKNOWN_ ( ) { return this . instance . _UNKNOWN_ ( ) ; } , } ; export default _UNKNOWN_ ; </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $complex$ O $complex$ O $complex$ O $complex$ O $complex$ O $complex$ O $complex$ O $complex$ O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O $string$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $string$ O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O $any[]$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O O $any$ O O $any$ O O O $any[]$ O O O O O O O $Promise$ O O O O O O O O O $Promise<void>$ O O O O O O $Promise<void>$ O O O O O $Map$ O O O O O O O O O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $Promise$ O $string$ O O O O O O $PromiseConstructor$ O $complex$ O O O $any$ O $Promise<string>$ O $string$ O O O O O O $Promise$ O $string$ O $any$ O O O O O O $PromiseConstructor$ O $complex$ O O O $any$ O $Promise<string>$ O $string$ O $any$ O O O O O O $Promise$ O $string$ O O O O O O $PromiseConstructor$ O $complex$ O O O $any$ O $Promise<string>$ O $string$ O O O O O O $Promise$ O O O O O O O $complex$ O O $string$ O O O O O $Promise<string>$ O $string$ O O O O O $any$ O O O O O O $string$ O O O O O $Promise<string>$ O $string$ O O O O O $any$ O O O O O O O O O O $any$ O $any$ O $complex$ O $complex$ O O O O O O $Promise$ O O O O O O O $complex$ O O $string$ O O O O O $Promise<string>$ O $string$ O O O O O $any$ O O O O O O $string$ O O O O O $Promise<string>$ O $string$ O O O O O $any$ O O O O O O O O O O $any$ O $any$ O $complex$ O $complex$ O O O O O $any$ O O O O $any$ O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $Promise$ O $string$ O O $any$ O O O O O $any$ O $string$ O O O O O $any$ O O O O O O O O O $boolean$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O $any$ O $Promise<any>$ O $any$ O $string$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $complex$ O O O O O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O O O O O O $any$ O O O O O $Promise<void>$ O O $any$ O $any$ O O O O O O $Promise<void>$ O $any$ O $any$ O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O $Promise$ O O O O O O O O O O $boolean$ O O O O O O $any$ O $any$ O $complex$ O O O $any$ O O O O O O O $any$ O $any$ O $complex$ O O O O O O $any$ O $any$ O $complex$ O O O O O O O O $Promise<void>$ O O O O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $null$ O O O $null$ O O O O O O O $any$ O O O O $any$ O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $null$ O O O $null$ O O O O O O O O $Promise$ O O O O O O O O $any$ O $any$ O $complex$ O O O O O O O $Promise<string>$ O $string$ O O O O O $any$ O O O O O O $Promise<string>$ O $string$ O O O O O $any$ O O O O O O $Promise$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $Promise<string>$ O $string$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $Promise<string>$ O $string$ O O O O O $any$ O O $any$ O O O O O O O $Promise$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $Promise<string>$ O $string$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $Promise<string>$ O $string$ O O O O O $any$ O O $any$ O O O O O O $void$ O O O O O $any$ O $any$ O $complex$ O O O O O O O $Promise$ O O O O O O O O O O O $Promise<void>$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O O O O $Promise$ O O O O O O O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $complex$ O O O O O O $any$ O $any$ O $any$ O O O $number$ O $DateConstructor$ O $number$ O O O O O O O $any$ O $any$ O $number$ O O O O $Promise<void>$ O O O O O $void$ O O O O O O O $any$ O O O O $any$ O $Promise<any>$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O O O O O O O O $Promise<void>$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $complex$ O O O O O O O $Promise<void>$ O O O O O $void$ O O O O O $any$ O O O O O O O O O O $Promise<void>$ O O O O O $void$ O O O O O $any$ O O O O O O O O $Promise$ O $any$ O O O O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O O $any$ O O O O O O $string$ O O O O $any$ O $Promise<string>$ O $any$ O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O $string$ O $string$ O O O O O O $any$ O O $Console$ O $void$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $Promise$ O $string$ O $complex$ O O O $string$ O O O O O O O O $any$ O O O O O $any$ O $string$ O O O O O $any$ O O O O O O O O O $any$ O $any$ O $complex$ O O O O O O $any$ O O O O $any$ O $Promise<any>$ O $string$ O $complex$ O O O O $any$ O $any$ O $complex$ O O O O O O O O $Promise<void>$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $Console$ O $void$ O $any$ O O O O O $any$ O O O O $any$ O O O O $Promise<void>$ O O O O O $any$ O $any$ O $complex$ O O O O O O $any$ O $any$ O $complex$ O O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O $Promise$ O $void$ O O O $Error$ $Error$ O O O O O O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $Promise<void>$ O $any$ O O O O O $Promise<void>$ O O O O O $any$ O $any$ O $complex$ O O O O O O $void$ O $any$ O $void$ O O O $void$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O $Promise<void>$ O O O O O $any$ O $any$ O $complex$ O O O O O O $void$ O $any$ O $void$ O O O $void$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $Promise$ O $string$ O O O O O O O O O O $any$ O $Promise<void>$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O O O $any$ O ${}$ O O O O O $Promise$ O $any$ O $any$ O O $any$ O O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O $Promise$ O $any$ O $void$ O O O $Error$ $Error$ O O O O O O O O O O O $any$ O $any$ O $any$ O $void$ O O O O $Promise$ O $string$ O $complex$ O O O $string$ O O O O O O O O $any$ O O O O O $any$ O $any$ O $string$ O $complex$ O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O $Promise$ O $void$ O O $Error$ $Error$ O O O O O O O O O O O $any$ O $any$ O $void$ O O O O $any$ O O O O O O $any$ O $any$ O O O O O $Promise$ O O O O O O O O O $any$ O $any$ O O O O O $Promise$ O O O O O O O O O $any$ O $any$ O O O O O $Promise$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O $Promise$ O $string$ $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O $Promise$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O $Promise$ O O O O O O O O O $any$ O $any$ O O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O
<s> import _UNKNOWN_ , { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import config , { _UNKNOWN_ } from 's' ; import reducer from 's' ; export default _UNKNOWN_ ; export { _UNKNOWN_ , config , reducer } ; export { _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O
<s> import { Map } from 's' ; import * as crypto from 's' ; import * as jwt from 's' ; import 's' ; import _UNKNOWN_ , { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { user : { id : 's' , username : 's' , email : 's' , } , sessionId : 's' , tokens : { accessToken : 's' , refreshToken : 's' , } , } ; const _UNKNOWN_ = { _UNKNOWN_ : true , tokens : { accessToken : 's' , refreshToken : 's' } , user : { id : 's' , username : 's' } , } ; const history = [ ] ; const _UNKNOWN_ = { getItem : ( ) => Promise . resolve ( 's' ) , removeItem : ( ) => Promise . resolve ( 's' ) , setItem : ( ) => Promise . resolve ( 's' ) , } ; const _UNKNOWN_ = { createUser : jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ . user . id ) ) , _UNKNOWN_ : jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) , logout : jest . fn ( ( ) => Promise . resolve ( ) ) , _UNKNOWN_ : jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) , _UNKNOWN_ : jest . fn ( ( ) => Promise . resolve ( ) ) , _UNKNOWN_ : jest . fn ( ( ) => Promise . resolve ( ) ) , _UNKNOWN_ : jest . fn ( ( ) => Promise . resolve ( ) ) , _UNKNOWN_ : jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) , } ; global [ 's' ] = ( ) => null ; describe ( 's' , ( ) => { afterEach ( ( ) => { jest . clearAllMocks ( ) ; localStorage . clear ( ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { try { await _UNKNOWN_ . config ( { history , } , undefined ) ; throw new Error ( ) ; } catch ( err ) { const { message } = err ; expect ( message ) . toEqual ( 's' ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = { _UNKNOWN_ : ( ) => Promise . resolve ( _UNKNOWN_ ) , } ; await _UNKNOWN_ . config ( { history , tokenStorage : _UNKNOWN_ , } , _UNKNOWN_ ) ; const tokens = _UNKNOWN_ . tokens ( ) ; expect ( tokens . accessToken ) . toBeDefined ( ) ; expect ( tokens . refreshToken ) . toBeDefined ( ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = { } ; _UNKNOWN_ . config ( { history , } , _UNKNOWN_ ) ; expect ( _UNKNOWN_ . instance [ 's' ] ) . toEqual ( _UNKNOWN_ ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { _UNKNOWN_ . config ( { history , } , _UNKNOWN_ ) ; try { await _UNKNOWN_ . createUser ( undefined ) ; throw new Error ( ) ; } catch ( err ) { const { message } = err ; expect ( message ) . toEqual ( 's' ) ; } } ) ; it ( 's' , async ( ) => { _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; try { await _UNKNOWN_ . createUser ( { username : 's' , email : 's' , } ) ; throw new Error ( ) ; } catch ( err ) { const { message } = err ; expect ( message ) . toEqual ( 's' ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ) ; _UNKNOWN_ . config ( { history , _UNKNOWN_ , } , _UNKNOWN_ ) ; await _UNKNOWN_ . createUser ( { username : 's' , } ) ; expect ( _UNKNOWN_ . mock . calls . length ) . toEqual ( 0 ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] [ 0 ] ) . toEqual ( { id : 's' } ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; try { await _UNKNOWN_ . _UNKNOWN_ ( undefined , { } ) ; throw new Error ( ) ; } catch ( err ) { const { message } = err ; expect ( message ) . toEqual ( 's' ) ; } } ) ; it ( 's' , async ( ) => { _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; try { await _UNKNOWN_ . _UNKNOWN_ ( { } , { password : 's' } ) ; throw new Error ( ) ; } catch ( err ) { const { message } = err ; expect ( message ) . toEqual ( 's' ) ; } } ) ; it ( 's' , async ( ) => { _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' , { username : 's' , password : 's' , } ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledTimes ( 0 ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( 's' , { username : 's' , password : 's' , } ) ; } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ) ; _UNKNOWN_ . config ( { history , _UNKNOWN_ } , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' , { username : 's' , password : 's' , } ) ; expect ( _UNKNOWN_ ) . toHaveBeenCalledTimes ( 0 ) ; } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = { ... _UNKNOWN_ , _UNKNOWN_ : ( ) => Promise . reject ( 's' ) , } ; _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; try { await _UNKNOWN_ . _UNKNOWN_ ( 's' , { username : 's' , password : 's' , } ) ; throw new Error ( ) ; } catch ( err ) { expect ( _UNKNOWN_ . _UNKNOWN_ ( ) ) . toBe ( false ) ; } } ) ; it ( 's' , async ( ) => { _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' , { username : 's' , password : 's' , } ) ; expect ( localStorage . getItem ( 's' ) ) . toEqual ( 's' ) ; expect ( localStorage . getItem ( 's' ) ) . toEqual ( 's' ) ; } ) ; it ( 's' , async ( ) => { await _UNKNOWN_ . config ( { history , tokenStorage : _UNKNOWN_ , } , _UNKNOWN_ ) ; const tokens = _UNKNOWN_ . tokens ( ) ; expect ( tokens . accessToken ) . toBe ( 's' ) ; expect ( tokens . refreshToken ) . toBe ( 's' ) ; } ) ; it ( 's' , async ( ) => { _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' , 's' ) ; } ) ; it ( 's' , async ( ) => { _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' , 's' ) ; expect ( _UNKNOWN_ . instance . getState ( ) . get ( 's' ) ) . toEqual ( Map ( { ... _UNKNOWN_ . tokens , } ) ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; const callback = jest . fn ( ) ; await _UNKNOWN_ . logout ( callback ) ; expect ( callback ) . toHaveBeenCalledTimes ( 0 ) ; } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ) ; _UNKNOWN_ . config ( { history , _UNKNOWN_ } , _UNKNOWN_ ) ; await _UNKNOWN_ . logout ( undefined ) ; expect ( _UNKNOWN_ ) . toHaveBeenCalledTimes ( 0 ) ; } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = { ... _UNKNOWN_ , logout : ( ) => Promise . reject ( { message : 's' } ) , } ; await _UNKNOWN_ . instance . _UNKNOWN_ ( { accessToken : 's' } ) ; await _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; const callback = jest . fn ( ) ; try { await _UNKNOWN_ . logout ( callback ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toEqual ( 's' ) ; expect ( callback ) . toHaveBeenCalledTimes ( 0 ) ; expect ( callback ) . toHaveBeenCalledWith ( { message : 's' } ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = { ... _UNKNOWN_ , logout : ( ) => Promise . reject ( { message : 's' } ) , } ; _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; await _UNKNOWN_ . instance . _UNKNOWN_ ( { accessToken : 's' } ) ; await _UNKNOWN_ . instance . _UNKNOWN_ ( ) ; const callback = jest . fn ( ) ; try { await _UNKNOWN_ . logout ( callback ) ; throw new Error ( ) ; } catch ( err ) { expect ( _UNKNOWN_ . instance . getState ( ) . get ( 's' ) ) . toEqual ( null ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = { ... _UNKNOWN_ , logout : ( ) => Promise . reject ( { message : 's' } ) , } ; _UNKNOWN_ . instance . _UNKNOWN_ ( { accessToken : 's' } ) ; _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; const callback = jest . fn ( ) ; try { await _UNKNOWN_ . logout ( callback ) ; throw new Error ( ) ; } catch ( err ) { expect ( _UNKNOWN_ . instance . getState ( ) . get ( 's' ) ) . toEqual ( null ) ; } } ) ; } ) ; describe ( 's' , async ( ) => { it ( 's' , async ( ) => { _UNKNOWN_ . config ( { } , _UNKNOWN_ ) ; _UNKNOWN_ . instance . _UNKNOWN_ = jest . fn ( ( ) => _UNKNOWN_ . instance . _UNKNOWN_ ) ; _UNKNOWN_ . instance . _UNKNOWN_ = jest . fn ( ( ) => _UNKNOWN_ . instance . _UNKNOWN_ ) ; try { await _UNKNOWN_ . _UNKNOWN_ ( ) ; } catch ( err ) { expect ( err . message ) . toEqual ( 's' ) ; expect ( _UNKNOWN_ . instance . _UNKNOWN_ ) . toHaveBeenCalledTimes ( 0 ) ; expect ( _UNKNOWN_ . instance . _UNKNOWN_ ) . toHaveBeenCalledTimes ( 0 ) ; } } ) ; it ( 's' , async ( ) => { localStorage . setItem ( 's' , 's' ) ; localStorage . setItem ( 's' , 's' ) ; await _UNKNOWN_ . config ( { } , _UNKNOWN_ ) ; _UNKNOWN_ . instance . _UNKNOWN_ = jest . fn ( ( ) => _UNKNOWN_ . instance . _UNKNOWN_ ) ; _UNKNOWN_ . instance . _UNKNOWN_ = jest . fn ( ( ) => _UNKNOWN_ . instance . _UNKNOWN_ ) ; try { await _UNKNOWN_ . _UNKNOWN_ ( ) ; throw new Error ( ) ; } catch ( err ) { const { message } = err ; expect ( message ) . toEqual ( 's' ) ; } } ) ; it ( 's' , async ( ) => { _UNKNOWN_ . config ( { } , _UNKNOWN_ ) ; const _UNKNOWN_ = { accessToken : 's' , refreshToken : jwt . sign ( { data : 's' } , 's' , { _UNKNOWN_ : 's' , } ) , } ; _UNKNOWN_ . instance [ 's' ] . dispatch ( _UNKNOWN_ ( _UNKNOWN_ ) ) ; await _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( localStorage . getItem ( 's' ) ) . toEqual ( 's' ) ; expect ( localStorage . getItem ( 's' ) ) . toEqual ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const error = 's' ; _UNKNOWN_ . config ( { } , { ... _UNKNOWN_ , _UNKNOWN_ : ( ) => Promise . reject ( { message : error } ) , } ) ; try { await _UNKNOWN_ . _UNKNOWN_ ( undefined ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toEqual ( error ) ; } } ) ; it ( 's' , async ( ) => { _UNKNOWN_ . config ( { } , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledTimes ( 0 ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { await _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; try { await _UNKNOWN_ . _UNKNOWN_ ( undefined ) ; } catch ( err ) { expect ( err . message ) . toEqual ( 's' ) ; } } ) ; it ( 's' , async ( ) => { await _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; _UNKNOWN_ . instance . _UNKNOWN_ = ( ) => true ; try { await _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; } catch ( err ) { expect ( err . message ) . toEqual ( 's' ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = { ... _UNKNOWN_ , _UNKNOWN_ : jest . fn ( ( ) => Promise . resolve ( { _UNKNOWN_ : false } ) ) , } ; await _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; try { await _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; } catch ( err ) { expect ( err . message ) . toEqual ( 's' ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . not . toHaveBeenCalled ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = { ... _UNKNOWN_ , _UNKNOWN_ : ( ) => Promise . resolve ( { _UNKNOWN_ : false } ) , } ; await _UNKNOWN_ . instance . _UNKNOWN_ ( { accessToken : 's' } ) ; await _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; try { await _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; } catch ( err ) { expect ( err . message ) . toEqual ( 's' ) ; } } ) ; it ( 's' , async ( ) => { await _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' , { username : 's' , password : 's' , } ) ; const result = await _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; const tokens = _UNKNOWN_ . tokens ( ) ; expect ( tokens ) . toEqual ( { accessToken : 's' , refreshToken : 's' , } ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) ) . toBe ( true ) ; expect ( _UNKNOWN_ . tokens ( ) ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) ) . toEqual ( { accessToken : 's' , refreshToken : 's' , } ) ; expect ( result ) . toBe ( _UNKNOWN_ ) ; } ) ; it ( 's' , async ( ) => { await _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' , { username : 's' , password : 's' , } ) ; _UNKNOWN_ . instance . _UNKNOWN_ = jest . fn ( ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ . instance . _UNKNOWN_ ) . toHaveBeenCalledTimes ( 0 ) ; } ) ; it ( 's' , async ( ) => { await _UNKNOWN_ . config ( { history , _UNKNOWN_ : false } , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' , { username : 's' , password : 's' , } ) ; _UNKNOWN_ . instance . _UNKNOWN_ = jest . fn ( ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ . instance . _UNKNOWN_ ) . not . toHaveBeenCalled ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { await _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' , { username : 's' , password : 's' , } ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) ) . toEqual ( { accessToken : null , refreshToken : null , } ) ; expect ( _UNKNOWN_ . tokens ( ) ) . toEqual ( _UNKNOWN_ . tokens ) ; await _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) ) . toEqual ( { accessToken : null , refreshToken : null , } ) ; expect ( _UNKNOWN_ . tokens ( ) ) . toEqual ( _UNKNOWN_ . tokens ) ; } ) ; it ( 's' , async ( ) => { await _UNKNOWN_ . instance . _UNKNOWN_ ( { accessToken : 's' } ) ; await _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; _UNKNOWN_ . instance . _UNKNOWN_ = ( ) => Promise . resolve ( ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) ) . toBe ( true ) ; await _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) ) . toBe ( false ) ; } ) ; it ( 's' , async ( ) => { await _UNKNOWN_ . config ( { history } , _UNKNOWN_ ) ; _UNKNOWN_ . instance . _UNKNOWN_ = ( ) => Promise . resolve ( ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' , { username : 's' , password : 's' , } ) ; const tokens = _UNKNOWN_ . tokens ( ) ; await _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ . tokens ( ) ) . toEqual ( { accessToken : 's' , refreshToken : 's' , } ) ; await _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( _UNKNOWN_ . tokens ( ) ) . toEqual ( tokens ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) ) . toEqual ( { accessToken : null , refreshToken : null , } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O $any$ O O O O O O $complex$ O O O O O $complex$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O O O O $complex$ O O $boolean$ O O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O $string$ O O O $string$ O O O O O O O $any[]$ O O O O O $complex$ O O $Promise<string>$ O O O O $PromiseConstructor$ O $complex$ O O O O $Promise<string>$ O O O O $PromiseConstructor$ O $complex$ O O O O $Promise<string>$ O O O O $PromiseConstructor$ O $complex$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $complex$ O $complex$ O $string$ O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $complex$ O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $complex$ O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $complex$ O O O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O $Storage$ O $void$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O $any[]$ O O O $undefined$ O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O $complex$ O O $complex$ O O O O $PromiseConstructor$ O $complex$ O $complex$ O O O O O O O $any$ O O $any[]$ O $complex$ O $complex$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O O O O O ${}$ O O O O O O $any$ O O $any[]$ O O O $any$ O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O $any$ O O $any[]$ O O O $any$ O O O O O O O $Promise<void>$ O $undefined$ O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O O O $Promise<void>$ O O $string$ O O O $string$ O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any[]$ O $any$ O O O $any$ O O O O O $Promise<void>$ O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $string$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O O O $Promise<any>$ O $undefined$ O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O O O $Promise<any>$ O O O O O $string$ O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O $Promise<any>$ O O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $Promise<any>$ O O $any$ O O O O $any$ O $any$ O $Promise<any>$ O O $any$ O O O O $string$ O O O $string$ O O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any[]$ O $any$ O O $any$ O O O O O $Promise<any>$ O O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $complex$ O O O $any$ O $Promise<never>$ O O O O $PromiseConstructor$ O $Promise<T>$ O O O O O O O O $any$ O O $any[]$ O O $complex$ O O O O O O O $Promise<any>$ O O O O $string$ O O O $string$ O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O O O O O O O $any$ O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O $Promise<any>$ O O O O $string$ O O O $string$ O O O O O O $any$ O $Storage$ O $string$ O O O O O $any$ O O O O $any$ O $Storage$ O $string$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O $any$ O O $any[]$ O $complex$ O $complex$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O $Promise<any>$ O O O O O O O O O $any$ O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O $Promise<any>$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $complex$ O $complex$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O O $Promise<void>$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any[]$ O $any$ O O $any$ O O O O O $Promise<void>$ O $undefined$ O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $any$ O $Promise<never>$ O O O O $PromiseConstructor$ O $Promise<T>$ O O $string$ O O O O O O O O O O $any$ O $Promise<void>$ O O $string$ O O O O O O O O $any$ O O $any[]$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O $Promise<void>$ O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O $string$ O O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O $Promise<never>$ O O O O $PromiseConstructor$ O $Promise<T>$ O O $string$ O O O O O O O O O $any$ O O $any[]$ O O O O O O O O $any$ O $Promise<void>$ O O $string$ O O O O O O O O $any$ O $Promise<void>$ O O O O $any$ O $any$ O $any$ O O O O O O O O $Promise<void>$ O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O $Promise<never>$ O O O O $PromiseConstructor$ O $Promise<T>$ O O $string$ O O O O O O O O O $any$ O $Promise<void>$ O O $string$ O O O O O O O $any$ O O $any[]$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O $Promise<void>$ O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O O $any$ O O O O $any$ O O O O $any$ O $Promise<void>$ O $any$ O $any$ O O O O O O $any$ O $Promise<void>$ O O O O $any$ O $void$ O $any$ O $any$ O O O O O O $any$ O $void$ O O O O O O O $Promise<void>$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O $any$ O $Promise<void>$ O O $any$ O O O O $any$ O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O O O O O O O O $Storage$ O $void$ O O O O O O $Storage$ O $void$ O O O O O O O O O $any$ O O O O $any$ O O O O $any$ O $Promise<void>$ O $any$ O $any$ O O O O O O $any$ O $Promise<void>$ O O O O $any$ O $void$ O $any$ O $any$ O O O O O O $any$ O $void$ O O O O O O O $Promise<void>$ O O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O O $any$ O O O O $any$ O O O $complex$ O O $string$ O O O $any$ O $any$ O $any$ O O $string$ O O O O O O O $string$ O O O O O O O O O O $any$ O O O O $any$ O $complex$ O $complex$ O O O O O O $Promise<void>$ O O O $any$ O $Storage$ O $string$ O O O O O $any$ O O O O $any$ O $Storage$ O $string$ O O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O $Promise<void>$ O O O O $PromiseConstructor$ O $Promise<T>$ O O $string$ O O O O O O O O O O O O O $Promise<void>$ O $undefined$ O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O O $any$ O O O O $any$ O O O O O $Promise<void>$ O O O O $any$ O $any$ O $Promise<void>$ O O $any$ O O O O $any$ O $any$ O $Promise<void>$ O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O O O $Promise<any>$ O $undefined$ O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O $any$ O $boolean$ O O O O O O O O O O O $Promise<any>$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O $false$ O O O O O O O O O O O $any$ O O $any[]$ O O O O O O O O O O $Promise<any>$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $any$ O $complex$ O O O O $PromiseConstructor$ O $complex$ O O $false$ O O O O O O O O O O $any$ O $Promise<void>$ O O $string$ O O O O O O O O $any$ O O $any[]$ O O O O O O O O O O $Promise<any>$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O $Promise<any>$ O O O O $string$ O O O $string$ O O O O O O O $any$ O O O O $Promise<any>$ O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O $boolean$ O O O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O $any$ O $complex$ O O O O O $any$ O O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O $Promise<any>$ O O O O $string$ O O O $string$ O O O O O O O O $any$ O $Promise<void>$ O $any$ O $any$ O O O O O O $Promise<any>$ O O O O $any$ O O O $any$ O $Promise<void>$ O O $any$ O O O O O O O $any$ O O O O O O O O O O O $any$ O O $any[]$ O $boolean$ O O O O $any$ O O O O O $Promise<any>$ O O O O $string$ O O O $string$ O O O O O O O O $any$ O $Promise<void>$ O $any$ O $any$ O O O O O O $Promise<any>$ O O O O $any$ O O O $any$ O $Promise<void>$ O O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O O $Promise<any>$ O O O O $string$ O O O $string$ O O O O O O $any$ O O O $any$ O O O O $any$ O O $null$ O O O $null$ O O O O O O $any$ O O O $any$ O O O O $any$ O $complex$ O $complex$ O O O O O $Promise<void>$ O O O $any$ O O O $any$ O O O O $any$ O O $null$ O O O $null$ O O O O O O $any$ O O O $any$ O O O O $any$ O $complex$ O $complex$ O O O O O $any$ O O O O O O O O O O O $any$ O $Promise<void>$ O O $string$ O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O $any$ O $Promise<void>$ O O O O $PromiseConstructor$ O $complex$ O O O O O O $Promise<any>$ O O O O $any$ O O O $boolean$ O O O O $any$ O O O O O O O $Promise<void>$ O O O $any$ O O O $boolean$ O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O $any$ O O $any[]$ O O $any$ O O O O $any$ O $Promise<void>$ O O O O $PromiseConstructor$ O $complex$ O O O O O O $Promise<any>$ O O O O $string$ O O O $string$ O O O O O O O $any$ O O O $any$ O O O O O O $Promise<any>$ O O O O $any$ O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O O O O $Promise<void>$ O O O $any$ O O O $any$ O O O O $any$ O $any$ O O $any$ O O O $any$ O O O O $any$ O O $null$ O O O $null$ O O O O O O O O O O O O O O O O
<s> class _UNKNOWN_ { private store : object ; constructor ( ) { this . store = { } ; } public clear ( ) { this . store = { } ; } public getItem ( key ) { return this . store [ key ] ; } public setItem ( key , value ) { this . store [ key ] = value . toString ( ) ; } public removeItem ( key ) { if ( this . store [ key ] ) { delete this . store [ key ] ; } } } global [ 's' ] = new _UNKNOWN_ ( ) ; </s>	O O $any$ O O $object$ O O O O O O O O O $object$ O O O O O O $void$ O O O O O $object$ O O O O O O $any$ O $any$ O O O O O $object$ O $any$ O O O O $void$ O $any$ O $any$ O O O O $object$ O $any$ O O $any$ O $any$ O O O O O $void$ O $any$ O O O O O O $object$ O $any$ O O O O O O $object$ O $any$ O O O O O $any$ O O O O O $any$ O O O O
<s> import _UNKNOWN_ from 's' ; export default ( path ) => _UNKNOWN_ . options ( ) . history . push ( path ) ; </s>	O O O O O O O O O $string$ O O O O $any$ O O O $any$ O $any$ O $string$ O O O
<s> export interface _UNKNOWN_ { token : string ; address : string ; when : number ; reason : string ; } export interface _UNKNOWN_ { address : string ; _UNKNOWN_ : boolean ; } export interface _UNKNOWN_ { username ? : string ; email ? : string ; emails ? : _UNKNOWN_ [ ] ; id : string ; profile ? : object ; services ? : object ; } export interface _UNKNOWN_ { username ? : string ; email ? : string ; profile ? : object ; [ _UNKNOWN_ ] : any ; } export interface _UNKNOWN_ { id ? : string ; username ? : string ; email ? : string ; } export interface _UNKNOWN_ { accessToken ? : string ; refreshToken ? : string ; } export interface _UNKNOWN_ { sessionId : string ; tokens : _UNKNOWN_ ; } export interface _UNKNOWN_ { _UNKNOWN_ : boolean ; tokens ? : _UNKNOWN_ ; user ? : _UNKNOWN_ ; } export interface _UNKNOWN_ { sessionId : string ; userId : string ; valid : boolean ; userAgent ? : string ; createdAt : string ; updatedAt : string ; } export type _UNKNOWN_ = ( event ? ) => void ; </s>	O O O $any$ O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $any$ O $string$ O O O $boolean$ O O O O O O $any$ O $string$ O O O O $string$ O O O O $any$ O O $any$ O O O $string$ O O O $object$ O O O O $object$ O O O O O O O $any$ O $string$ O O O O $string$ O O O O $object$ O O O O O $string$ O O O O O O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O O O O $any$ O $string$ O O O O $string$ O O O O O O O $any$ O $string$ O O O $any$ O $any$ O O O O $any$ O $boolean$ O O O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O $string$ O O O $string$ O O O $boolean$ O O O $string$ O O O O $string$ O O O $string$ O O O O O O $any$ O O $object$ $object$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends Error { public _UNKNOWN_ : _UNKNOWN_ ; public errorCode : string | number ; public _UNKNOWN_ : number ; constructor ( message , _UNKNOWN_ ? , errorCode ? : string | number ) { super ( message ) ; Object . setPrototypeOf ( this , _UNKNOWN_ . prototype ) ; this . _UNKNOWN_ = Date . now ( ) ; if ( _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ ; } if ( errorCode ) { this . errorCode = errorCode ; } } public toString ( ) { try { return JSON . stringify ( { message : this . message , _UNKNOWN_ : this . _UNKNOWN_ , errorCode : this . errorCode , _UNKNOWN_ : this . _UNKNOWN_ , } ) ; } catch ( e ) { return ( 's' + 's' ) ; } } public serialize ( ) { return this . toString ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O $ErrorConstructor$ O O $any$ O $any$ O O $complex$ O O O O O O $number$ O O O O O $string$ O $any$ $any$ O $complex$ O O O O O O O O O $string$ O O $ObjectConstructor$ O $any$ O O O $any$ O $any$ O O O O $number$ O $DateConstructor$ O $number$ O O O O O $any$ O O O O $any$ O $any$ O O O O $complex$ O O O O $complex$ O $complex$ O O O O $string$ O O O O O O $JSON$ O $complex$ O O $string$ O O O $string$ O $any$ O O O $any$ O $complex$ O O O $complex$ O $number$ O O O $number$ O O O O O O O $any$ O O O O O O O O O O O O $string$ O O O O O O $string$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; const error = new _UNKNOWN_ ( 's' , { username : 's' , } , 's' ) ; const throws = ( ) => { throw error ; } ; describe ( 's' , ( ) => { it ( 's' , ( ) => expect ( throws ) . toThrow ( ) ) ; it ( 's' , ( ) => { try { throws ( ) ; } catch ( e ) { expect ( e . message ) . toBe ( 's' ) ; expect ( e . _UNKNOWN_ ) . toMatchObject ( { username : 's' } ) ; expect ( e . errorCode ) . toBe ( 's' ) ; expect ( e . _UNKNOWN_ ) . toBeDefined ( ) ; } } ) ; it ( 's' , ( ) => { try { throws ( ) ; } catch ( e ) { expect ( e . serialize ( ) ) . toBe ( 's' + 's' + 's' + 's' + e . _UNKNOWN_ + 's' ) ; } } ) ; it ( 's' , ( ) => { expect ( throws ) . toThrowError ( _UNKNOWN_ ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O $any$ O O $any$ O O O O $string$ O O O O O O O O O $never$ O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O $any$ O $never$ O O $any$ O O O O $any$ O O O O O O O O O $never$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O $string$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $never$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $never$ O O $any$ O $any$ O O O O O O O O O
<s> import * as isEmpty from 's' ; import * as trim from 's' ; export const isEmail = ( email ? ) => { const re = "s" ; return email && re . test ( email ) ; } ; export const _UNKNOWN_ = ( email ? ) : boolean => { const isValid = ! isEmpty ( trim ( email || 's' ) ) && isEmail ( email ) ; return Boolean ( isValid ) ; } ; export const _UNKNOWN_ = ( password ? ) : boolean => { const isValid = ! isEmpty ( password ) ; return isValid ; } ; export const _UNKNOWN_ = ( username ? ) : boolean => { const _UNKNOWN_ = "s" ; const isValid = username && ! isEmpty ( trim ( username ) ) && _UNKNOWN_ . test ( username ) ; return Boolean ( isValid ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $boolean$ O O $string$ $string$ O O O O $RegExp$ O O O O $string$ O $RegExp$ O $boolean$ O $string$ O O O O O O $boolean$ O O $string$ $string$ O O O O O O $boolean$ O O $any$ O $any$ O $string$ O O O O O $boolean$ O $string$ O O O $BooleanConstructor$ O $boolean$ O O O O O O $boolean$ O O $string$ $string$ O O O O O O $boolean$ O O $any$ O $string$ O O O $boolean$ O O O O O $boolean$ O O $string$ $string$ O O O O O O $RegExp$ O O O O $boolean$ O $string$ O O $any$ O $any$ O $string$ O O O $RegExp$ O $boolean$ O $string$ O O O $BooleanConstructor$ O $boolean$ O O O O O
<s> import { isEmail } from 's' ; const _UNKNOWN_ = ( { user , username , email , id , } : { user ? : string ; username ? : string ; email ? : string ; id ? : string ; } ) => { if ( user && ! username && ! email ) { if ( isEmail ( user ) ) { email = user ; username = null ; } else { username = user ; email = null ; } } return { username , email , id } ; } ; export default _UNKNOWN_ ; </s>	O O O $boolean$ O O O O O $complex$ O O O $string$ O $string$ O $string$ O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O O O O O O $string$ O O $string$ O O $string$ O O O O $boolean$ O $string$ O O O $string$ O $string$ O $string$ O O O O O O $string$ O $string$ O $string$ O O O O O O O $string$ O $string$ O $string$ O O O O O O $complex$ O O
<s> export enum _UNKNOWN_ { _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , _UNKNOWN_ = 's' , } export default _UNKNOWN_ ; </s>	O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O O
<s> import { _UNKNOWN_ } from 's' ; export type _UNKNOWN_ = | 's' | 's' | 's' | 's' | 's' | 's' | 's' | 's' ; export interface _UNKNOWN_ { siteUrl ? : string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : number ; path ? : string ; _UNKNOWN_ ? : _UNKNOWN_ ; } const common = { siteUrl : 's' , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : null , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : 0 , path : 's' , } ; export default common ; </s>	O O O $any$ O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O $any$ O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $number$ O O O O $number$ O O O O $any$ O O $any$ O $number$ O O O O $string$ O O O O $any$ O O $any$ O O O $any$ O O $string$ O O O $false$ O O O $false$ O O O $false$ O O O $false$ O O O $null$ O O O $number$ O O O $number$ O O O $any$ O $any$ O $any$ O $number$ O O O $string$ O O O O O O O $any$ O O
<s> import * as validators from 's' ; import { _UNKNOWN_ } from 's' ; import _UNKNOWN_ from 's' ; import config from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export * from 's' ; export { validators , _UNKNOWN_ , _UNKNOWN_ , config } ; </s>	O O O O $any$ O O O O O $any$ O O O O O $complex$ O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O $complex$ O $any$ O O O
<s> import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( typeof _UNKNOWN_ ) . toBe ( 's' ) ; } ) ; } ) ; </s>	O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O O O O O O O O O O
<s> import _UNKNOWN_ from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( _UNKNOWN_ ( { user : 's' } ) ) . toEqual ( { username : 's' , email : null , } ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ ( { user : 's' } ) ) . toEqual ( { username : null , email : 's' , } ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ ( { user : null , username : 's' , email : 's' , } ) ) . toEqual ( { username : 's' , email : 's' , } ) ; } ) ; } ) ; </s>	O O $complex$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $complex$ O O $string$ O O O O O O $any$ O O $string$ O O O $null$ O O O O O O O O O $any$ O O O O O O O $any$ O $complex$ O O $string$ O O O O O O $any$ O O $null$ O O O $string$ O O O O O O O O O $any$ O O O O O O O $any$ O $complex$ O O $null$ O O O $string$ O O O $string$ O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , AuthService } from 's' ; import * as _UNKNOWN_ from 's' ; export interface _UNKNOWN_ { id : string ; email ? : string ; profile ? : object ; } export interface _UNKNOWN_ { [ provider ] : { authenticate : ( params ) => Promise < _UNKNOWN_ > ; } ; } export class _UNKNOWN_ implements AuthService { public server : _UNKNOWN_ ; public serviceName = 's' ; private db : _UNKNOWN_ ; private options : _UNKNOWN_ ; constructor ( options ) { this . options = options ; } public _UNKNOWN_ ( store ) { this . db = store ; } public async authenticate ( params ) < _UNKNOWN_ | null > { if ( ! params . provider || ! this . options [ params . provider ] ) { throw new Error ( 's' ) ; } const _UNKNOWN_ = this . options [ params . provider ] ; if ( typeof _UNKNOWN_ . authenticate !== 's' ) { throw new Error ( 's' ) ; } const _UNKNOWN_ = await _UNKNOWN_ . authenticate ( params ) ; let user = await this . db . _UNKNOWN_ ( params . provider , _UNKNOWN_ . id ) ; if ( ! user && _UNKNOWN_ . email ) { user = await this . db . _UNKNOWN_ ( _UNKNOWN_ . email ) ; } if ( ! user ) { const userId = await this . db . createUser ( { email : _UNKNOWN_ . email , profile : _UNKNOWN_ . profile , } ) ; user = await this . db . _UNKNOWN_ ( userId ) ; } else { this . db . _UNKNOWN_ ( user . id , _UNKNOWN_ . profile ) ; } await this . db . _UNKNOWN_ ( user . id , params . provider , _UNKNOWN_ ) ; return user ; } public async unlink ( userId , provider ) { if ( ! provider || ! this . options [ provider ] ) { throw new Error ( 's' ) ; } await this . db . _UNKNOWN_ ( userId , provider , null ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $string$ O O O $string$ O O O O $object$ O O O O O O O $any$ O O $string$ O O O $any$ O O $any$ O O $PromiseConstructor$ O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $string$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O $void$ O $any$ O O O O $any$ O $any$ O O O O $Promise$ O $any$ O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O $complex$ O O O $any$ O $any$ O $any$ O O O O O $complex$ O $any$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $complex$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O O O $any$ O O O O $any$ O $any$ O O $string$ O $any$ O $string$ O $object$ O $any$ O $object$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $object$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $Promise<void>$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export default _UNKNOWN_ ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const user = { id : 's' , username : 's' , email : 's' , } ; const _UNKNOWN_ = { _UNKNOWN_ : jest . fn ( ( ) => user ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , createUser : jest . fn ( ) , setUsername : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , } ; describe ( 's' , ( ) => { beforeEach ( ( ) => { jest . clearAllMocks ( ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const oauth = new _UNKNOWN_ ( { } ) ; try { await oauth . authenticate ( { provider : 's' , } ) ; } catch ( err ) { expect ( err . message ) . toBe ( 's' ) ; } } ) ; it ( 's' , async ( ) => { const oauth = new _UNKNOWN_ ( { _UNKNOWN_ : { } , } ) ; try { await oauth . authenticate ( { provider : 's' , } ) ; } catch ( err ) { expect ( err . message ) . toBe ( 's' ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => ( { id : 's' , name : 's' , email : 's' , } ) ) ; const oauth = new _UNKNOWN_ ( { _UNKNOWN_ : { authenticate : _UNKNOWN_ , } , } ) ; oauth . _UNKNOWN_ ( _UNKNOWN_ ) ; const params = { provider : 's' , } ; await oauth . authenticate ( params ) ; expect ( _UNKNOWN_ ) . _UNKNOWN_ ( params ) ; } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => ( { id : 's' , name : 's' , email : 's' , } ) ) ; const oauth = new _UNKNOWN_ ( { _UNKNOWN_ : { authenticate : _UNKNOWN_ , } , } ) ; const store = { ... _UNKNOWN_ , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ( ) => user ) , } ; oauth . _UNKNOWN_ ( store ) ; const params = { provider : 's' , } ; await oauth . authenticate ( params ) ; expect ( _UNKNOWN_ ) . _UNKNOWN_ ( params ) ; expect ( store . _UNKNOWN_ ) . _UNKNOWN_ ( 's' , 's' ) ; expect ( store . _UNKNOWN_ ) . _UNKNOWN_ ( 's' ) ; } ) ; it ( 's' , async ( ) => { const 0 = { id : 's' , name : 's' , email : 's' , } ; const _UNKNOWN_ = jest . fn ( ( ) => 0 ) ; const oauth = new _UNKNOWN_ ( { _UNKNOWN_ : { authenticate : _UNKNOWN_ , } , } ) ; const store = { ... _UNKNOWN_ , _UNKNOWN_ : jest . fn ( ) , _UNKNOWN_ : jest . fn ( ) , createUser : jest . fn ( ( ) => 's' ) , _UNKNOWN_ : jest . fn ( ( ) => ( { id : 's' , email : 0 . email , } ) ) , } ; oauth . _UNKNOWN_ ( store ) ; const params = { provider : 's' , } ; await oauth . authenticate ( params ) ; expect ( _UNKNOWN_ ) . _UNKNOWN_ ( params ) ; expect ( store . _UNKNOWN_ ) . _UNKNOWN_ ( 's' , 's' ) ; expect ( store . _UNKNOWN_ ) . _UNKNOWN_ ( 's' ) ; expect ( store . createUser ) . _UNKNOWN_ ( { email : 0 . email } ) ; expect ( store . _UNKNOWN_ ) . _UNKNOWN_ ( 's' ) ; expect ( store . _UNKNOWN_ ) . _UNKNOWN_ ( 's' , 's' , 0 ) ; } ) ; } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = { id : 's' , name : 's' , email : 's' , profile : { gender : 's' , } , } ; const _UNKNOWN_ = jest . fn ( ( ) => _UNKNOWN_ ) ; const oauth = new _UNKNOWN_ ( { _UNKNOWN_ : { authenticate : _UNKNOWN_ , } , } ) ; oauth . _UNKNOWN_ ( _UNKNOWN_ ) ; const params = { provider : 's' , } ; await oauth . authenticate ( params ) ; expect ( _UNKNOWN_ ) . _UNKNOWN_ ( params ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . _UNKNOWN_ ( 's' , 's' ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . _UNKNOWN_ ( user . id , _UNKNOWN_ . profile ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . _UNKNOWN_ ( user . id , 's' , _UNKNOWN_ ) ; } ) ; } ) ; describe ( 's' , ( ) => { const oauth = new _UNKNOWN_ ( { _UNKNOWN_ : { authenticate : jest . fn ( ) , } , } ) ; oauth . _UNKNOWN_ ( _UNKNOWN_ ) ; it ( 's' , async ( ) => { try { await oauth . unlink ( 's' , 's' ) ; } catch ( e ) { expect ( e . message ) . toBe ( 's' ) ; } } ) ; it ( 's' , async ( ) => { await oauth . unlink ( 's' , 's' ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . _UNKNOWN_ ( 's' , 's' , null ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O O O O O O O $any$ O $Promise<any>$ O O $string$ O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O ${}$ O O O O O O O O O O $any$ O $Promise<any>$ O O $string$ O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $any$ O O $any$ O O $complex$ O O $any$ O $any$ O O O O O O $any$ O $void$ O $any$ O O O $complex$ O O $string$ O O O O O O $any$ O $Promise<any>$ O $complex$ O O $any$ O $any$ O O $any$ O $complex$ O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $any$ O O $any$ O O $complex$ O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $void$ O $any$ O O O $complex$ O O $string$ O O O O O O $any$ O $Promise<any>$ O $complex$ O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $complex$ O O O $any$ O O $any$ O O $complex$ O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $string$ O O O $string$ O $complex$ O $string$ O O O O O O O $any$ O $void$ O $any$ O O O $complex$ O O $string$ O O O O O O $any$ O $Promise<any>$ O $complex$ O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O $string$ O $complex$ O $string$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $complex$ O O O O O O O O $any$ O O O O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O O O O O O $any$ O $any$ O $any$ O O O O $complex$ O O O $any$ O O $any$ O O $complex$ O O $any$ O $any$ O O O O O O $any$ O $void$ O $any$ O O O $complex$ O O $string$ O O O O O O $any$ O $Promise<any>$ O $complex$ O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $complex$ O $complex$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $complex$ O O O O O O O O $any$ O O O O O O O O $any$ O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $void$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $Promise<void>$ O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $Promise<void>$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O O
<s> import _UNKNOWN_ from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( typeof _UNKNOWN_ ) . toBe ( 's' ) ; } ) ; } ) ; </s>	O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O O O O O O O O O O
<s> import * as _UNKNOWN_ from 's' ; export class _UNKNOWN_ { public async authenticate ( params ) { let data = await _UNKNOWN_ ( `template` ) ; data = JSON . parse ( data ) . data ; return { id : data . id , username : data . username , _UNKNOWN_ : data . _UNKNOWN_ , accessToken : params . access_token , } ; } } </s>	O O O O $any$ O O O O O $any$ O O O $complex$ O $any$ O O O $any$ O O $any$ O O O O $any$ O $JSON$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export default _UNKNOWN_ ; </s>	O O O $any$ O O O O O O $any$ O O
<s> import _UNKNOWN_ from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( typeof _UNKNOWN_ ) . toBe ( 's' ) ; } ) ; } ) ; </s>	O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O O O O O O O O O O
<s> import * as oauth from 's' ; export interface _UNKNOWN_ { key : string ; secret : string ; } export class _UNKNOWN_ { private options : _UNKNOWN_ ; private oauth : any ; constructor ( options ) { this . options = options ; this . oauth = new oauth . _UNKNOWN_ ( 's' , 's' , this . options . key , this . options . secret , 's' , null , 's' ) ; } public authenticate ( params ) { return new Promise ( ( resolve , reject ) => { this . oauth . get ( 's' , params . access_token , params . _UNKNOWN_ , ( err , data ) => { if ( err ) { reject ( err ) ; } else { data = JSON . parse ( data ) ; const user = { id : data . _UNKNOWN_ , _UNKNOWN_ : data . _UNKNOWN_ , _UNKNOWN_ : data . _UNKNOWN_ , email : data . email , accessToken : params . access_token , _UNKNOWN_ : params . _UNKNOWN_ , } ; resolve ( user ) ; } } ) ; } ) ; } } </s>	O O O O $any$ O O O O O $any$ O $string$ O O O $string$ O O O O O O $any$ O O $any$ O $any$ O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O $string$ O O O $any$ O $string$ O O O O O O O O O O $Promise<unknown>$ O $any$ O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O $void$ O $any$ O O O O O $any$ O $JSON$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $void$ O $complex$ O O O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export default _UNKNOWN_ ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O
<s> import _UNKNOWN_ from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( typeof _UNKNOWN_ ) . toBe ( 's' ) ; } ) ; } ) ; </s>	O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O O O O O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; export type _UNKNOWN_ = | string | { digest : string ; _UNKNOWN_ : _UNKNOWN_ ; } ; export interface _UNKNOWN_ { user : string | _UNKNOWN_ ; password : _UNKNOWN_ ; } export interface _UNKNOWN_ extends _UNKNOWN_ { password : _UNKNOWN_ ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $string$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O
<s> import * as _UNKNOWN_ from 's' ; import * as crypto from 's' ; import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = async ( password ) : Promise < string > => { const salt = await _UNKNOWN_ . _UNKNOWN_ ( 0 ) ; const hash = await _UNKNOWN_ . hash ( password , salt ) ; return hash ; } ; export const _UNKNOWN_ = ( password , _UNKNOWN_ ) => { if ( typeof password === 's' ) { const hash = crypto . createHash ( _UNKNOWN_ ) ; hash . update ( password ) ; return hash . digest ( 's' ) ; } return password . digest ; } ; export const _UNKNOWN_ = async ( password , hash ) : Promise < boolean > => _UNKNOWN_ . compare ( password , hash ) ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $Promise<string>$ O O O $string$ O O $PromiseConstructor$ O O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $string$ O $any$ O O O $any$ O O O O O $any$ O O $any$ O $string$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O O O O $complex$ O $string$ O O O O O $Promise<boolean>$ O O O $string$ O $string$ O O $PromiseConstructor$ O O O O $any$ O $any$ O $string$ O $string$ O O O
<s> import { trim , isEmpty , isFunction , isString , isPlainObject , get , find , includes , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , AuthService , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; export const isEmail = ( email ? ) => { const re = "s" ; return email && re . test ( email ) ; } ; export interface _UNKNOWN_ { _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : ( user ) => Promise < boolean > ; _UNKNOWN_ ? ( email ? ) : boolean ; _UNKNOWN_ ? ( password ? ) : boolean ; _UNKNOWN_ ? ( username ? ) : boolean ; } const defaultOptions = { _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ ( email ? ) { const isValid = ! isEmpty ( trim ( email || 's' ) ) && isEmail ( email ) ; return Boolean ( isValid ) ; } , _UNKNOWN_ ( password ? ) { const isValid = ! isEmpty ( password ) ; return isValid ; } , _UNKNOWN_ ( username ? ) { const _UNKNOWN_ = "s" ; const isValid = username && ! isEmpty ( trim ( username ) ) && _UNKNOWN_ . test ( username ) ; return Boolean ( isValid ) ; } , } ; export default class _UNKNOWN_ implements AuthService { public serviceName = 's' ; public server : _UNKNOWN_ ; private options : _UNKNOWN_ ; private db : _UNKNOWN_ ; constructor ( options = { } ) { this . options = { ... defaultOptions , ... options } ; } public _UNKNOWN_ ( store ) { this . db = store ; } public async authenticate ( params ) < _UNKNOWN_ > { const { user , password } = params ; if ( ! user || ! password ) { throw new Error ( 's' ) ; } if ( ( ! isString ( user ) && ! isPlainObject ( user ) ) || ! isString ( password ) ) { throw new Error ( 's' ) ; } let _UNKNOWN_ ; _UNKNOWN_ = await this . _UNKNOWN_ ( user , password ) ; if ( ! _UNKNOWN_ ) { throw new Error ( 's' ) ; } return _UNKNOWN_ ; } public _UNKNOWN_ ( email ) < _UNKNOWN_ | null > { return this . db . _UNKNOWN_ ( email ) ; } public _UNKNOWN_ ( username ) < _UNKNOWN_ | null > { return this . db . _UNKNOWN_ ( username ) ; } public _UNKNOWN_ ( userId , _UNKNOWN_ , _UNKNOWN_ ) < void > { return this . db . _UNKNOWN_ ( userId , _UNKNOWN_ , _UNKNOWN_ ) ; } public _UNKNOWN_ ( userId , email ) < void > { return this . db . _UNKNOWN_ ( userId , email ) ; } public async _UNKNOWN_ ( token ) < void > { const user = await this . db . _UNKNOWN_ ( token ) ; if ( ! user ) { throw new Error ( 's' ) ; } const _UNKNOWN_ : _UNKNOWN_ [ ] = get ( user , [ 's' , 's' , 's' ] , [ ] ) ; const _UNKNOWN_ = find ( _UNKNOWN_ , ( t ) => t . token === token ) ; if ( ! _UNKNOWN_ ) { throw new Error ( 's' ) ; } const _UNKNOWN_ = find ( user . emails , ( e ) => e . address === _UNKNOWN_ . address ) ; if ( ! _UNKNOWN_ ) { throw new Error ( 's' ) ; } await this . db . _UNKNOWN_ ( user . id , _UNKNOWN_ . address ) ; } public async resetPassword ( token , newPassword ) < void > { const user = await this . db . _UNKNOWN_ ( token ) ; if ( ! user ) { throw new Error ( 's' ) ; } const _UNKNOWN_ = get ( user , [ 's' , 's' , 's' ] ) ; const _UNKNOWN_ = find ( _UNKNOWN_ , t => t . token === token ) ; if ( this . server . _UNKNOWN_ ( token , _UNKNOWN_ ) ) { throw new Error ( 's' ) ; } const emails = user . emails || [ ] ; if ( ! includes ( emails . map ( ( email ) => email . address ) , _UNKNOWN_ . address ) ) { throw new Error ( 's' ) ; } const password = await this . _UNKNOWN_ ( newPassword ) ; await this . db . _UNKNOWN_ ( user . id , _UNKNOWN_ . address , password , token ) ; this . db . _UNKNOWN_ ( user . id ) ; } public async _UNKNOWN_ ( userId , newPassword ) < void > { const password = await _UNKNOWN_ ( newPassword ) ; return this . db . _UNKNOWN_ ( userId , password ) ; } public async _UNKNOWN_ ( address ) < void > { if ( ! address ) { throw new Error ( 's' ) ; } const user = await this . db . _UNKNOWN_ ( address ) ; if ( ! user ) { throw new Error ( 's' ) ; } const emails = user . emails || [ ] ; if ( ! address || ! includes ( emails . map ( email => email . address ) , address ) ) { throw new Error ( 's' ) ; } const token = _UNKNOWN_ ( ) ; await this . db . _UNKNOWN_ ( user . id , address , token ) ; const _UNKNOWN_ = this . server . _UNKNOWN_ ( address , token , this . server . _UNKNOWN_ ( user ) , 's' , this . server . options . _UNKNOWN_ . _UNKNOWN_ , this . server . options . _UNKNOWN_ . from ) ; await this . server . options . _UNKNOWN_ ( _UNKNOWN_ ) ; } public async _UNKNOWN_ ( address ) < void > { if ( ! address ) { throw new Error ( 's' ) ; } const user = await this . db . _UNKNOWN_ ( address ) ; if ( ! user ) { throw new Error ( 's' ) ; } address = _UNKNOWN_ ( user , address ) ; const token = _UNKNOWN_ ( ) ; await this . db . _UNKNOWN_ ( user . id , address , token ) ; const _UNKNOWN_ = this . server . _UNKNOWN_ ( address , token , this . server . _UNKNOWN_ ( user ) , 's' , this . server . options . _UNKNOWN_ . resetPassword , this . server . options . _UNKNOWN_ . from ) ; await this . server . options . _UNKNOWN_ ( _UNKNOWN_ ) ; } public async _UNKNOWN_ ( address ) < void > { const user = await this . db . _UNKNOWN_ ( address ) ; if ( ! user ) { throw new Error ( 's' ) ; } address = _UNKNOWN_ ( user , address ) ; const token = _UNKNOWN_ ( ) ; await this . db . _UNKNOWN_ ( user . id , address , token , 's' ) ; const _UNKNOWN_ = this . server . _UNKNOWN_ ( address , token , this . server . _UNKNOWN_ ( user ) , 's' , this . server . options . _UNKNOWN_ . _UNKNOWN_ , this . server . options . _UNKNOWN_ . from ) ; await this . server . options . _UNKNOWN_ ( _UNKNOWN_ ) ; } public async createUser ( user ) < string > { if ( ! this . options . _UNKNOWN_ ( user . username ) && ! this . options . _UNKNOWN_ ( user . email ) ) { throw new Error ( 's' ) ; } if ( user . username && ( await this . db . _UNKNOWN_ ( user . username ) ) ) { throw new Error ( 's' ) ; } if ( user . email && ( await this . db . _UNKNOWN_ ( user . email ) ) ) { throw new Error ( 's' ) ; } let password ; if ( user . password ) { if ( ! this . options . _UNKNOWN_ ( user . password ) ) { throw new Error ( 's' ) ; } password = await this . _UNKNOWN_ ( user . password ) ; } const _UNKNOWN_ = { username : user . username , email : user . email && user . email . toLowerCase ( ) , password , profile : user . profile , } ; const { _UNKNOWN_ } = this . options ; if ( isFunction ( _UNKNOWN_ ) && ! await _UNKNOWN_ ( _UNKNOWN_ ) ) { throw new Error ( 's' ) ; } return this . db . createUser ( _UNKNOWN_ ) ; } private async _UNKNOWN_ ( user : string | _UNKNOWN_ , password ) < any > { const { username , email , id } = isString ( user ) ? this . _UNKNOWN_ ( { user } ) : this . _UNKNOWN_ ( { ... user } ) ; let _UNKNOWN_ ; if ( id ) { _UNKNOWN_ = await this . db . _UNKNOWN_ ( id ) ; } else if ( username ) { _UNKNOWN_ = await this . db . _UNKNOWN_ ( username ) ; } else if ( email ) { _UNKNOWN_ = await this . db . _UNKNOWN_ ( email ) ; } if ( ! _UNKNOWN_ ) { throw new Error ( 's' ) ; } const hash = await this . db . _UNKNOWN_ ( _UNKNOWN_ . id ) ; if ( ! hash ) { throw new Error ( 's' ) ; } const _UNKNOWN_ = this . options . _UNKNOWN_ ; const pass = _UNKNOWN_ ? _UNKNOWN_ ( password , _UNKNOWN_ ) : password ; const _UNKNOWN_ = await _UNKNOWN_ ( pass , hash ) ; if ( ! _UNKNOWN_ ) { throw new Error ( 's' ) ; } return _UNKNOWN_ ; } private async _UNKNOWN_ ( password ) < string > { const _UNKNOWN_ = this . options . _UNKNOWN_ ; const _UNKNOWN_ = _UNKNOWN_ ? _UNKNOWN_ ( password , _UNKNOWN_ ) : password ; return _UNKNOWN_ ( _UNKNOWN_ ) ; } private _UNKNOWN_ ( { user , username , email , id } ) { if ( user && ! username && ! email ) { if ( isEmail ( user ) ) { email = user ; username = null ; } else { username = user ; email = null ; } } return { username , email , id } ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $Promise<string>$ O $Promise<boolean>$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O $string$ $string$ O O O O $RegExp$ O O O O $string$ O $RegExp$ O $boolean$ O $string$ O O O O O O $any$ O $any$ O O $any$ O $number$ O O O O $number$ O O O O $number$ O O O O $Promise<boolean>$ O O O $any$ O O $PromiseConstructor$ O O O O $boolean$ O O $string$ $string$ O O O O $boolean$ O O $any$ $any$ O O O O $boolean$ O O $string$ $string$ O O O O O O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $boolean$ O $string$ $string$ O O O $boolean$ O O $any$ O $any$ O $string$ O O O O O $boolean$ O $string$ O O O $BooleanConstructor$ O $boolean$ O O O O $boolean$ O $any$ $any$ O O O $boolean$ O O $any$ O $any$ O O O $boolean$ O O O $boolean$ O $string$ $string$ O O O $RegExp$ O O O O $boolean$ O $string$ O O $any$ O $any$ O $string$ O O O $RegExp$ O $boolean$ O $string$ O O O $BooleanConstructor$ O $boolean$ O O O O O O O O O $any$ O $any$ O O $string$ O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O $complex$ O O $any$ O O O O $void$ O $any$ O O O O $any$ O $any$ O O O O $Promise$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O $any$ O O O O $ErrorConstructor$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O O O O $Promise<any>$ O $any$ O $any$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O O O $Promise$ O $string$ O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O O $Promise$ O $string$ O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O O $Promise$ O $string$ O $string$ O $boolean$ O O O O O O O O $any$ O $any$ O $string$ O $string$ O $boolean$ O O O O $Promise$ O $string$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O $string$ O O O O O $Promise$ O $string$ O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any[]$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O O O O $any$ O $any$ O $any[]$ O O $any$ O O $any$ O $any$ O $string$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Promise$ O $string$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O $any$ O O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O $string$ O O O O $Promise<string>$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $Promise$ O $string$ O $string$ O O O O O O $string$ O O $Promise<string>$ O $string$ O O O O O $any$ O $any$ O $string$ O $string$ O O O O O $Promise$ O $string$ O O O O O O O O $string$ O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $string$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $string$ O O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O O O $any$ O O O $any$ O $any$ O $string$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $Promise$ O $string$ O O O O O O O O $string$ O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O $string$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O O O $any$ O O O $any$ O $any$ O $string$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $Promise$ O $string$ O O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O $string$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $string$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $Promise$ O $any$ O O O O O O O O O O $any$ O $boolean$ O $any$ O $any$ O O O O O $any$ O $boolean$ O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $ErrorConstructor$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O $boolean$ O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O $any$ O O O O $Promise<string>$ O $any$ O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $Promise<boolean>$ O O O O $any$ O O O $any$ O $Promise<boolean>$ O O O O $Promise<boolean>$ O $complex$ O O O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $complex$ O O O O O $Promise$ O $any$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $boolean$ O O $Promise<boolean>$ O $any$ O $any$ O O O O O $boolean$ O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $Promise$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $Promise<string>$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ $any$ O O O O $any$ O O $any$ O O $any$ O O O O $boolean$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O
<s> import _UNKNOWN_ from 's' ; export default _UNKNOWN_ ; export { _UNKNOWN_ } ; </s>	O O $any$ O O O O O $any$ O O O $any$ O O O
<s> import { set } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { const password = new _UNKNOWN_ ( { } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { expect ( password . options . _UNKNOWN_ ) . toBe ( 0 ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { try { await password . authenticate ( { } as any ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { try { await password . authenticate ( { user : 's' , password : 0 } as any ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const user = 's' ; const _UNKNOWN_ = new _UNKNOWN_ ( { } ) ; _UNKNOWN_ . _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( user ) ) ; const ret = await _UNKNOWN_ . authenticate ( { user : 's' , password : 's' , } as any ) ; expect ( ret ) . toEqual ( user ) ; } ) ; it ( 's' , async ( ) => { try { const _UNKNOWN_ = new _UNKNOWN_ ( { } ) ; _UNKNOWN_ . _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; await _UNKNOWN_ . authenticate ( { user : 's' , password : 's' , } as any ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . authenticate ( { user : 's' , password : 's' , } as any ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( { id : 's' } ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ , _UNKNOWN_ } as any ) ; try { await password . authenticate ( { user : 's' , password : 's' , } as any ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( { id : 's' } ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( 's' ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ , _UNKNOWN_ } as any ) ; try { await password . authenticate ( { user : 's' , password : 's' , } as any ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( 's' ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; const user = await password . _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] ) . toMatchSnapshot ( ) ; expect ( user ) . toEqual ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( 's' ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; const user = await password . _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] ) . toMatchSnapshot ( ) ; expect ( user ) . toEqual ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; await password . _UNKNOWN_ ( 's' , 's' , true ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] ) . toMatchSnapshot ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; await password . _UNKNOWN_ ( 's' , 's' ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] ) . toMatchSnapshot ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { const token = 's' ; const _UNKNOWN_ = { } ; const email = 's' ; set ( _UNKNOWN_ , 's' , [ { token , address : email } , ] ) ; _UNKNOWN_ . emails = [ { address : email } ] ; const _UNKNOWN_ = { ... _UNKNOWN_ } ; _UNKNOWN_ . emails = [ ] ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . _UNKNOWN_ ( token ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( { } ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . _UNKNOWN_ ( token ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . _UNKNOWN_ ( token ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ , _UNKNOWN_ , } as any ) ; await password . _UNKNOWN_ ( token ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] ) . toMatchSnapshot ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { const token = 's' ; const newPassword = 's' ; const email = 's' ; const _UNKNOWN_ = { id : 's' , } ; set ( _UNKNOWN_ , 's' , [ { token , address : email } ] ) ; _UNKNOWN_ . emails = [ { address : email } ] ; const _UNKNOWN_ = { ... _UNKNOWN_ } ; _UNKNOWN_ . emails = [ ] ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . resetPassword ( token , newPassword ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => true ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; password . server = { _UNKNOWN_ } as any ; try { await password . resetPassword ( token , newPassword ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => false ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; password . server = { _UNKNOWN_ } as any ; try { await password . resetPassword ( token , newPassword ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => false ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } as any ) ; password . server = { _UNKNOWN_ } as any ; await password . resetPassword ( token , newPassword ) ; expect ( _UNKNOWN_ . mock . calls . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] ) . toMatchSnapshot ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const userId = 's' ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( 's' ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; const user = await password . _UNKNOWN_ ( userId , 's' ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] [ 0 ] ) . toEqual ( userId ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] [ 0 ] ) . toBeTruthy ( ) ; expect ( user ) . toEqual ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { const email = 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = { emails : [ { address : email } , { address : _UNKNOWN_ , _UNKNOWN_ : true } ] , } ; const _UNKNOWN_ = { } ; it ( 's' , async ( ) => { try { await password . _UNKNOWN_ ( 's' ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . _UNKNOWN_ ( email ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . _UNKNOWN_ ( email ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ , _UNKNOWN_ } as any ) ; password . server = { _UNKNOWN_ , options : { _UNKNOWN_ } , _UNKNOWN_ , } as any ; set ( password . server , 's' , { } ) ; await password . _UNKNOWN_ ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ , _UNKNOWN_ } as any ) ; password . server = { _UNKNOWN_ , options : { _UNKNOWN_ } , _UNKNOWN_ , } as any ; set ( password . server , 's' , { } ) ; await password . _UNKNOWN_ ( email ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; } ) ; } ) ; describe ( 's' , ( ) => { const email = 's' ; const _UNKNOWN_ = { emails : [ { address : email } ] } ; it ( 's' , async ( ) => { try { await password . _UNKNOWN_ ( 's' ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . _UNKNOWN_ ( email ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( email ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ , _UNKNOWN_ } as any ) ; password . server = { _UNKNOWN_ , options : { _UNKNOWN_ } , _UNKNOWN_ , _UNKNOWN_ , } as any ; set ( password . server , 's' , { } ) ; await password . _UNKNOWN_ ( email ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; } ) ; } ) ; describe ( 's' , ( ) => { const email = 's' ; const _UNKNOWN_ = { emails : [ { address : email } ] } ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . _UNKNOWN_ ( email ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( email ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ , _UNKNOWN_ } as any ) ; password . server = { _UNKNOWN_ , options : { _UNKNOWN_ } , _UNKNOWN_ , _UNKNOWN_ , } as any ; set ( password . server , 's' , { } ) ; await password . _UNKNOWN_ ( email ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ . mock . calls [ 0 ] . length ) . toBe ( 0 ) ; } ) ; } ) ; describe ( 's' , async ( ) => { it ( 's' , async ( ) => { try { await password . createUser ( { password : 's' , username : 's' , email : 's' , } ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( 's' ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . createUser ( { password : 's' , username : 's' , } ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( 's' ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await password . createUser ( { password : 's' , email : 's' , } ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : ( ) => Promise . resolve ( false ) , } ) ; const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; _UNKNOWN_ . _UNKNOWN_ ( { _UNKNOWN_ } as any ) ; try { await _UNKNOWN_ . createUser ( { password : 's' , email : 's' , } ) ; throw new Error ( ) ; } catch ( err ) { expect ( err . message ) . toMatchSnapshot ( ) ; } } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => Promise . resolve ( ) ) ; const createUser = jest . fn ( ( ) => Promise . resolve ( ) ) ; password . _UNKNOWN_ ( { _UNKNOWN_ , createUser } as any ) ; await password . createUser ( { password : 's' , email : 's' , } ) ; expect ( _UNKNOWN_ . mock . calls . length ) . toBe ( 0 ) ; expect ( createUser . mock . calls . length ) . toBe ( 0 ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $number$ O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O $any$ O $Promise<any>$ O O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O O O $any$ O $Promise<any>$ O O $string$ O O O $number$ O O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O $any$ O O $any$ O O O O O $any$ O $Promise<any>$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O O $any$ O O $any$ O $Promise<any>$ O O $string$ O O O $string$ O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O O O $any$ O O $any$ O O O O O $any$ O $Promise<any>$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $Promise<any>$ O O $string$ O O O $string$ O O O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<any>$ O O $string$ O O O $string$ O O O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O $any$ O O O O O O O O $any$ O $Promise<any>$ O O $string$ O O O $string$ O O O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $void$ O O $any$ O $any$ O O O O O O O O $any$ O $Promise<any>$ O O $string$ O O O $string$ O O O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $void$ O O $any$ O O O O O O $any$ O O $any$ O $Promise<any>$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $void$ O O $any$ O O O O O O $any$ O O $any$ O $Promise<any>$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O O O O O O $any$ O $Promise<void>$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O O O O O O $any$ O $Promise<void>$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O O O O O $string$ O $string$ O O O O O O O $any$ O $any$ O O O $string$ O O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $any$ O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O $any$ O O O O O O O $any$ O $Promise<void>$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O $any$ O O $string$ O O O O O $any$ O $any$ O O O O O $string$ O $string$ O O O O O O $any$ O $any$ O O O $string$ O O O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $void$ O O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O $Promise<void>$ O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $void$ O O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O $Promise<void>$ O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O O O O O $any$ O $Promise<void>$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $void$ O O $any$ O O O O O O $void$ O O $any$ O $Promise<void>$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O $void$ O O $any$ O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O $complex$ O O $complex$ O O O $string$ O O O O O $string$ O O O $boolean$ O O O O O O O O ${}$ O O O O $any$ O O O O O O O O O O O $any$ O $Promise<void>$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O ${}$ O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O O O O O O O $complex$ O O $complex$ O O O $string$ O O O O O O $any$ O O O O O O O O O O O $any$ O $Promise<void>$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $void$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O O O O O O O $complex$ O O $complex$ O O O $string$ O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $void$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O O O $any$ O $Promise<string>$ O O $string$ O O O $string$ O O O $string$ O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<string>$ O O $string$ O O O $string$ O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<string>$ O O $string$ O O O $string$ O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O O O O O O O O $any$ O $Promise<string>$ O O $string$ O O O $string$ O O O O O O O O $ErrorConstructor$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O $any$ O $void$ O O $any$ O $any$ O O O O O O $any$ O $Promise<string>$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { const password = 's' ; expect ( _UNKNOWN_ ( password ) ) . not . toBe ( password ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const password = 's' ; expect ( _UNKNOWN_ ( password , 's' ) ) . not . toBe ( password ) ; } ) ; it ( 's' , ( ) => { const password = { digest : 's' } ; expect ( _UNKNOWN_ ( password as any , 's' ) ) . toBe ( password . digest ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const _UNKNOWN_ = await _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ ( 's' , _UNKNOWN_ ) ) . toBeTruthy ( ) ; } ) ; } ) ; } ) ; </s>	O O O $Promise<string>$ O $any$ O $Promise<boolean>$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O $any$ O $Promise<string>$ O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O O $string$ O O O O $any$ O $any$ O $complex$ O O O O O O O $any$ O $complex$ O $string$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $string$ O O $Promise<string>$ O O O O $any$ O $Promise<boolean>$ O O O $string$ O O O $any$ O O O O O O O O O O O O O
<s> import _UNKNOWN_ from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( typeof _UNKNOWN_ ) . toBe ( 's' ) ; } ) ; } ) ; </s>	O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O O O O O O O O O O
<s> import * as jwt from 's' ; import { randomBytes } from 's' ; export const _UNKNOWN_ = ( length = 0 ) => randomBytes ( length ) . toString ( 's' ) ; export const _UNKNOWN_ = ( { secret , data , config , } : { secret : string ; data ? : any ; config : object ; } ) => jwt . sign ( { data , } , secret , config ) ; export const _UNKNOWN_ = ( { secret , data , config , } : { secret : string ; data ? : any ; config : object ; } ) => jwt . sign ( { data , } , secret , config ) ; </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O O $number$ O O O O $any$ O $number$ O O $any$ O O O O O O $any$ O O O $string$ O $any$ O $object$ O O O O $string$ O O O $any$ O O O O $object$ O O O O O O $any$ O $any$ O O $any$ O O O $string$ O $object$ O O O O $any$ O O O $string$ O $any$ O $object$ O O O O $string$ O O O $any$ O O O O $object$ O O O O O O $any$ O $any$ O O $any$ O O O $string$ O $object$ O O O
<s> import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { from ? : string ; subject : ( user ? ) => string ; text : ( user , url ) => string ; } export interface _UNKNOWN_ { from : string ; _UNKNOWN_ : _UNKNOWN_ ; resetPassword : _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ ; } export const _UNKNOWN_ = { from : 's' , _UNKNOWN_ : { subject : ( ) => 's' , text : ( user , url ) => `template` , } , resetPassword : { subject : ( ) => 's' , text : ( user , url ) => `template` , } , _UNKNOWN_ : { subject : ( ) => 's' , text : ( user , url ) => `template` , } , } ; export type _UNKNOWN_ = ( _UNKNOWN_ ) => Promise < void > ; export const _UNKNOWN_ = async ( _UNKNOWN_ ) : Promise < void > => { console . warn ( 's' ) ; console . log ( _UNKNOWN_ ) ; } ; </s>	O O O $any$ O O O O O O $any$ O $string$ O O O O $string$ O O $any$ $any$ O O O O $string$ O O $any$ O $string$ O O O O O O O $any$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $complex$ O O $string$ O O O $complex$ O O $string$ O O O O O O $string$ O O $any$ O $string$ O O O O O O $complex$ O O $string$ O O O O O O $string$ O O $any$ O $string$ O O O O O O $complex$ O O $string$ O O O O O O $string$ O O $any$ O $string$ O O O O O O O O O O $any$ O O $object$ O O $PromiseConstructor$ O O O O O O $Promise<void>$ O O O $object$ O O $PromiseConstructor$ O O O O O $Console$ O $void$ O O O O $Console$ O $void$ O $object$ O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export interface AuthService { server : _UNKNOWN_ ; serviceName : string ; _UNKNOWN_ ( store ) : void ; authenticate ( params ) : Promise < _UNKNOWN_ | null > ; } export type _UNKNOWN_ = ( _UNKNOWN_ , _UNKNOWN_ : ( _UNKNOWN_ , fields : string [ ] ) => _UNKNOWN_ , _UNKNOWN_ : ( _UNKNOWN_ , fields : string [ ] ) => _UNKNOWN_ ) => any ; export type _UNKNOWN_ = ( user , session ) => Promise < any > ; export type _UNKNOWN_ = ( to , token , user , _UNKNOWN_ , _UNKNOWN_ , from ) => object ; export type _UNKNOWN_ = _UNKNOWN_ & { to : string } ; export interface _UNKNOWN_ { db : _UNKNOWN_ ; _UNKNOWN_ : string ; _UNKNOWN_ ? : { accessToken ? : { _UNKNOWN_ ? : string ; } ; refreshToken ? : { _UNKNOWN_ ? : string ; } ; } ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : ( user , _UNKNOWN_ ) => Promise < any > ; _UNKNOWN_ ? : _UNKNOWN_ ; siteUrl ? : string ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; email ? : object ; } export interface _UNKNOWN_ { ip ? : string ; userAgent ? : string ; } export interface _UNKNOWN_ { _UNKNOWN_ ( email ) : Promise < _UNKNOWN_ | null > ; _UNKNOWN_ ( username ) : Promise < _UNKNOWN_ | null > ; _UNKNOWN_ ( userId ) : Promise < _UNKNOWN_ | null > ; createUser ( user ) : Promise < string > ; setUsername ( userId , _UNKNOWN_ ) : Promise < void > ; _UNKNOWN_ ( userId , profile ) : Promise < object > ; _UNKNOWN_ ( serviceName , _UNKNOWN_ ) : Promise < _UNKNOWN_ | null > ; _UNKNOWN_ ( userId , serviceName , data ) : Promise < void > ; _UNKNOWN_ ( userId ) : Promise < string > ; _UNKNOWN_ ( token ) : Promise < _UNKNOWN_ | null > ; _UNKNOWN_ ( userId , newPassword ) : Promise < void > ; _UNKNOWN_ ( userId , email , token , reason ? ) : Promise < void > ; _UNKNOWN_ ( userId , email , newPassword , token ) : Promise < void > ; _UNKNOWN_ ( token ) : Promise < _UNKNOWN_ | null > ; _UNKNOWN_ ( userId , _UNKNOWN_ , _UNKNOWN_ ) : Promise < void > ; _UNKNOWN_ ( userId , email ) : Promise < void > ; _UNKNOWN_ ( userId , email ) : Promise < void > ; _UNKNOWN_ ( userId , email , token ) : Promise < void > ; _UNKNOWN_ ( sessionId ) : Promise < _UNKNOWN_ > ; _UNKNOWN_ ( userId , ip ? , userAgent ? , _UNKNOWN_ ? ) : Promise < string > ; _UNKNOWN_ ( sessionId , ip ? , userAgent ? ) : Promise < void > ; _UNKNOWN_ ( sessionId ) : Promise < void > ; _UNKNOWN_ ( userId ) : Promise < void > ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O $void$ O $any$ O O O O $Promise<any>$ O $any$ O O $PromiseConstructor$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O O $object$ O $string[]$ O O O O O O $any$ O $any$ O O $object$ O $string[]$ O O O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O O $PromiseConstructor$ O O O O O O $any$ O O $string$ O $string$ O $any$ O $string$ O $any$ O $string$ O O O O O O $any$ O $any$ O O $string$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $complex$ O O O $string$ O O O O O O $complex$ O O O $string$ O O O O O O O O $number$ O O O O $any$ O O $any$ O $any$ O O $any$ O $Promise<any>$ O O O $any$ O $any$ O O $PromiseConstructor$ O O O O $any$ O O $any$ O $string$ O O O O $any$ O O $any$ O $any$ O O $any$ O $object$ O O O O O O O $any$ O $string$ O O O O $string$ O O O O O O O $any$ O $Promise<any>$ O $string$ O O $PromiseConstructor$ O $any$ O O O O $Promise<any>$ O $string$ O O $PromiseConstructor$ O $any$ O O O O $Promise<any>$ O $string$ O O $PromiseConstructor$ O $any$ O O O O $Promise<string>$ O $any$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O $string$ O O $PromiseConstructor$ O O O O $any$ O $string$ O $object$ O O $PromiseConstructor$ O O O O $Promise<any>$ O $string$ O $string$ O O $PromiseConstructor$ O $any$ O O O O $Promise<void>$ O $string$ O $string$ O $object$ O O $PromiseConstructor$ O O O O $Promise<string>$ O $string$ O O $PromiseConstructor$ O O O O $Promise<any>$ O $string$ O O $PromiseConstructor$ O $any$ O O O O $Promise<void>$ O $string$ O $string$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O $string$ O $string$ O $string$ $string$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O $string$ O $string$ O $string$ O O $PromiseConstructor$ O O O O $Promise<any>$ O $string$ O O $PromiseConstructor$ O $any$ O O O O $Promise<void>$ O $string$ O $string$ O $boolean$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O $string$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O $string$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O $string$ O $string$ O O $PromiseConstructor$ O O O O $Promise<any>$ O $string$ O O $PromiseConstructor$ O $any$ O O $Promise<string>$ O $string$ O $string$ $string$ O $string$ $string$ O $object$ $object$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O $string$ $string$ O $string$ $string$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O O $PromiseConstructor$ O O O O $Promise<void>$ O $string$ O O $PromiseConstructor$ O O O O O O
<s> import * as pick from 's' ; import * as omit from 's' ; import * as isString from 's' ; import { EventEmitter } from 's' ; import * as jwt from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , AuthService , _UNKNOWN_ , } from 's' ; export interface _UNKNOWN_ { token : string ; address : string ; when : number ; reason : string ; } const defaultOptions = { _UNKNOWN_ : 's' , _UNKNOWN_ : { accessToken : { _UNKNOWN_ : 's' , } , refreshToken : { _UNKNOWN_ : 's' , } , } , _UNKNOWN_ , _UNKNOWN_ : ( user ) => user , _UNKNOWN_ , siteUrl : 's' , } ; export type _UNKNOWN_ = ( ) => EventEmitter ; export const _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } ; export class _UNKNOWN_ { public options : _UNKNOWN_ ; private services : { [ key ] : AuthService } ; private db : _UNKNOWN_ ; private hooks : EventEmitter ; constructor ( options , services ) { this . options = { ... defaultOptions , ... options } ; if ( ! this . options . db ) { throw new _UNKNOWN_ ( 's' ) ; } this . services = services ; this . db = this . options . db ; for ( const service in this . services ) { this . services [ service ] . _UNKNOWN_ ( this . db ) ; this . services [ service ] . server = this ; } this . hooks = new EventEmitter ( ) ; } public _UNKNOWN_ ( ) : { [ key ] : AuthService } { return this . services ; } public getOptions ( ) { return this . options ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public _UNKNOWN_ ( callback ) { return this . on ( _UNKNOWN_ . _UNKNOWN_ , callback ) ; } public async _UNKNOWN_ ( serviceName , params , infos ) < _UNKNOWN_ > { if ( ! this . services [ serviceName ] ) { throw new Error ( `template` ) ; } const user = await this . services [ serviceName ] . authenticate ( params ) ; if ( ! user ) { throw new Error ( `template` ) ; } return this . _UNKNOWN_ ( user , infos ) ; } public async _UNKNOWN_ ( user , infos ) < _UNKNOWN_ > { const { ip , userAgent } = infos ; try { const sessionId = await this . db . _UNKNOWN_ ( user . id , ip , userAgent ) ; const { accessToken , refreshToken } = this . _UNKNOWN_ ( sessionId ) ; const _UNKNOWN_ = { sessionId , user : this . _UNKNOWN_ ( user ) , tokens : { refreshToken , accessToken , } , } ; this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , user ) ; return _UNKNOWN_ ; } catch ( e ) { this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , e ) ; throw e ; } } public async _UNKNOWN_ ( accessToken , username , ip , userAgent ) < _UNKNOWN_ > { try { if ( ! isString ( accessToken ) ) { throw new _UNKNOWN_ ( 's' ) ; } try { jwt . verify ( accessToken , this . options . _UNKNOWN_ ) ; } catch ( err ) { throw new _UNKNOWN_ ( 's' ) ; } const session = await this . _UNKNOWN_ ( accessToken ) ; if ( ! session . valid ) { throw new _UNKNOWN_ ( 's' ) ; } const user = await this . db . _UNKNOWN_ ( session . userId ) ; if ( ! user ) { throw new _UNKNOWN_ ( 's' ) ; } const _UNKNOWN_ = await this . db . _UNKNOWN_ ( username ) ; if ( ! _UNKNOWN_ ) { throw new _UNKNOWN_ ( `template` ) ; } if ( ! this . options . _UNKNOWN_ ) { return { _UNKNOWN_ : false } ; } const isAuthorized = await this . options . _UNKNOWN_ ( user , _UNKNOWN_ ) ; if ( ! isAuthorized ) { return { _UNKNOWN_ : false } ; } const _UNKNOWN_ = await this . db . _UNKNOWN_ ( _UNKNOWN_ . id , ip , userAgent , { _UNKNOWN_ : user . id } ) ; const _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ , true ) ; const _UNKNOWN_ = { _UNKNOWN_ : true , tokens : _UNKNOWN_ , user : this . _UNKNOWN_ ( _UNKNOWN_ ) , } ; this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , user , _UNKNOWN_ ) ; return _UNKNOWN_ ; } catch ( e ) { this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , e ) ; throw e ; } } public async _UNKNOWN_ ( accessToken , refreshToken , ip , userAgent ) < _UNKNOWN_ > { try { if ( ! isString ( accessToken ) || ! isString ( refreshToken ) ) { throw new _UNKNOWN_ ( 's' ) ; } let sessionId ; try { jwt . verify ( refreshToken , this . options . _UNKNOWN_ ) ; const _UNKNOWN_ = jwt . verify ( accessToken , this . options . _UNKNOWN_ , { _UNKNOWN_ : true , } ) ; sessionId = _UNKNOWN_ . data . sessionId ; } catch ( err ) { throw new _UNKNOWN_ ( 's' ) ; } const session = await this . db . _UNKNOWN_ ( sessionId ) ; if ( ! session ) { throw new _UNKNOWN_ ( 's' ) ; } if ( session . valid ) { const user = await this . db . _UNKNOWN_ ( session . userId ) ; if ( ! user ) { throw new _UNKNOWN_ ( 's' , { id : session . userId } ) ; } const tokens = this . _UNKNOWN_ ( sessionId ) ; await this . db . _UNKNOWN_ ( sessionId , ip , userAgent ) ; const result = { sessionId , user : this . _UNKNOWN_ ( user ) , tokens , } ; this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , result ) ; return result ; } else { throw new _UNKNOWN_ ( 's' , { id : session . userId , } ) ; } } catch ( err ) { this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , err ) ; throw err ; } } public _UNKNOWN_ ( sessionId , _UNKNOWN_ = false ) { const { _UNKNOWN_ , _UNKNOWN_ } = this . options ; const accessToken = _UNKNOWN_ ( { data : { sessionId , _UNKNOWN_ , } , secret : _UNKNOWN_ , config : _UNKNOWN_ . accessToken || { } , } ) ; const refreshToken = _UNKNOWN_ ( { secret : _UNKNOWN_ , config : _UNKNOWN_ . refreshToken || { } , } ) ; return { accessToken , refreshToken } ; } public async logout ( accessToken ) < void > { try { const session = await this . _UNKNOWN_ ( accessToken ) ; if ( session . valid ) { const user = await this . db . _UNKNOWN_ ( session . userId ) ; if ( ! user ) { throw new _UNKNOWN_ ( 's' , { id : session . userId } ) ; } await this . db . _UNKNOWN_ ( session . sessionId ) ; this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , this . _UNKNOWN_ ( user ) , session , accessToken ) ; } else { throw new _UNKNOWN_ ( 's' , { id : session . userId , } ) ; } } catch ( error ) { this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , error ) ; throw error ; } } public async _UNKNOWN_ ( accessToken ) < _UNKNOWN_ > { try { const session = await this . _UNKNOWN_ ( accessToken ) ; if ( session . valid ) { const user = await this . db . _UNKNOWN_ ( session . userId ) ; if ( ! user ) { throw new _UNKNOWN_ ( 's' , { id : session . userId } ) ; } if ( this . options . _UNKNOWN_ ) { try { await this . options . _UNKNOWN_ ( user , session ) ; } catch ( e ) { throw new _UNKNOWN_ ( e , { id : session . userId } , 0 ) ; } } this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , user , accessToken ) ; return this . _UNKNOWN_ ( user ) ; } this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , new _UNKNOWN_ ( 's' , { id : session . userId } ) ) ; return null ; } catch ( e ) { this . hooks . emit ( _UNKNOWN_ . _UNKNOWN_ , e ) ; throw e ; } } public async _UNKNOWN_ ( accessToken ) < _UNKNOWN_ > { if ( ! isString ( accessToken ) ) { throw new _UNKNOWN_ ( 's' ) ; } let sessionId ; try { const _UNKNOWN_ = jwt . verify ( accessToken , this . options . _UNKNOWN_ ) ; sessionId = _UNKNOWN_ . data . sessionId ; } catch ( err ) { throw new _UNKNOWN_ ( 's' ) ; } const session = await this . db . _UNKNOWN_ ( sessionId ) ; if ( ! session ) { throw new _UNKNOWN_ ( 's' ) ; } return session ; } public _UNKNOWN_ ( userId ) < _UNKNOWN_ > { return this . db . _UNKNOWN_ ( userId ) ; } public async _UNKNOWN_ ( userId , profile ) < void > { const user = await this . db . _UNKNOWN_ ( userId ) ; if ( ! user ) { throw new _UNKNOWN_ ( 's' , { id : userId } ) ; } await this . db . _UNKNOWN_ ( userId , profile ) ; } public async _UNKNOWN_ ( userId , profile ) < object > { const user = await this . db . _UNKNOWN_ ( userId ) ; if ( ! user ) { throw new _UNKNOWN_ ( 's' , { id : userId } ) ; } return this . db . _UNKNOWN_ ( userId , { ... user . profile , ... profile } ) ; } public on ( eventName , callback ) { this . hooks . on ( eventName , callback ) ; return ( ) => this . hooks . removeListener ( eventName , callback ) ; } public _UNKNOWN_ ( token , _UNKNOWN_ ? ) { return ( ! _UNKNOWN_ || Number ( _UNKNOWN_ . when ) + this . options . _UNKNOWN_ < Date . now ( ) ) ; } public _UNKNOWN_ ( to , token , user , _UNKNOWN_ , _UNKNOWN_ , from ) { if ( this . options . _UNKNOWN_ ) { return this . options . _UNKNOWN_ ( to , token , user , _UNKNOWN_ , _UNKNOWN_ , from ) ; } return this . _UNKNOWN_ ( to , token , user , _UNKNOWN_ , _UNKNOWN_ , from ) ; } public _UNKNOWN_ ( user ) { const { _UNKNOWN_ } = this . options ; return _UNKNOWN_ ( this . _UNKNOWN_ ( user ) , omit , pick ) ; } private _UNKNOWN_ ( user ) { return omit ( user , [ 's' ] ) ; } private _UNKNOWN_ ( to , token , user , _UNKNOWN_ , _UNKNOWN_ , from ) { const _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ , token ) ; return { from : _UNKNOWN_ . from || from , to , subject : _UNKNOWN_ . subject ( user ) , text : _UNKNOWN_ . text ( user , _UNKNOWN_ ) , } ; } private _UNKNOWN_ ( _UNKNOWN_ , token ) { const siteUrl = this . options . siteUrl ; return `template` ; } } export default _UNKNOWN_ ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $complex$ O $any$ O $Promise<void>$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O $complex$ O O $string$ O O O $complex$ O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O O O $complex$ O $any$ O O $any$ O O $any$ O $Promise<void>$ O $string$ O O O O O O O $any$ O O O O $any$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O $any$ O O $any$ O $any$ O O $complex$ O O O $string$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O $complex$ O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $complex$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O $string$ O O O $complex$ O O O O $complex$ O $string$ O O $void$ O O O $any$ O O O O $complex$ O $string$ O O $any$ O O O O O O $any$ O O $any$ O O O O O $complex$ O O O O O $string$ O O $any$ O O O O O $complex$ O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $string$ O $any$ O O O O O $Promise$ O $string$ O $any$ O $any$ O O $any$ O O O O O O O $complex$ O $string$ O O O O O $ErrorConstructor$ O O O O O O $any$ O O O O $complex$ O $string$ O O $Promise<any>$ O $any$ O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O $Promise<any>$ O $any$ O $any$ O O O O O $Promise$ O $any$ O $any$ O O $any$ O O O O $string$ O $string$ O O $any$ O O O O $string$ O O O O $any$ O $Promise<string>$ O $any$ O $any$ O $string$ O $string$ O O O O $any$ O $any$ O O O O $any$ O $string$ O O O $complex$ O O $string$ O $any$ O O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O $complex$ O $string$ O $any$ O O O $complex$ O O O O $any$ O O O O $any$ O $any$ O $complex$ O $string$ O $any$ O O O $any$ O O O O O $Promise$ O $string$ O $string$ O $string$ O $string$ O O $any$ O O O O O O O $any$ O $string$ O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O $Promise<any>$ O $string$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O O $any$ O $Promise<any>$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O $any$ O $Promise<any>$ O $string$ O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $Promise<any>$ O O O O $boolean$ O O O O O O $any$ O O O O $any$ O $Promise<any>$ O $any$ O $any$ O O O O O $any$ O O O O $boolean$ O O O O O O $string$ O O O O $any$ O $Promise<string>$ O $any$ O $any$ O $string$ O $string$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $string$ O O O O O $complex$ O O $boolean$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O $complex$ O $string$ O $any$ O $complex$ O O O $complex$ O O O O $any$ O O O O $any$ O $any$ O $complex$ O $string$ O $any$ O O O $any$ O O O O O $Promise$ O $string$ O $string$ O $string$ O $string$ O O $any$ O O O O O O O $any$ O $string$ O O O $any$ O $string$ O O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $string$ O O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O $any$ O $Promise<any>$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $Promise<any>$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $Promise<void>$ O $any$ O $string$ O $string$ O O O $complex$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $complex$ O $string$ O $complex$ O O O $complex$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O $complex$ O $string$ O $any$ O O O $any$ O O O O $any$ O $string$ O $boolean$ O O O O O O $string$ O $complex$ O O O O $any$ O O $any$ O $any$ O O $complex$ O O $string$ O $boolean$ O O O $string$ O $string$ O $complex$ O $complex$ O $complex$ O O O O O O O O $any$ O $any$ O O $string$ O $string$ O $complex$ O $complex$ O $complex$ O O O O O O O O O $any$ O $any$ O O O O O $Promise$ O $string$ O O O O O O O O $any$ O O O O $Promise<any>$ O $string$ O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $Promise<any>$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $Promise<void>$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O $string$ O O O $any$ O $any$ O O $any$ O $string$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O $complex$ O $string$ O $any$ O O O $any$ O O O O O $Promise$ O $string$ O O $any$ O O O O O $any$ O O O O $Promise<any>$ O $string$ O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $Promise<any>$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $complex$ O $string$ O $any$ O $string$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $complex$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O $any$ O $any$ O $complex$ O $string$ O $any$ O O O $any$ O O O O O $Promise$ O $string$ O O $any$ O O O O O $any$ O $string$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $string$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O $any$ O $Promise<any>$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O $Promise$ O $string$ O O $any$ O O O O O $any$ O $Promise<any>$ O $string$ O O O O O $Promise$ O $string$ O $object$ O O O O O O $any$ O O O O $any$ O $Promise<any>$ O $string$ O O O O O $any$ O O O O $any$ O O O O $string$ O $string$ O O O O O O O $any$ O $any$ O $string$ O $object$ O O O O O $Promise$ O $string$ O $object$ O O O O O O $any$ O O O O $any$ O $Promise<any>$ O $string$ O O O O O $any$ O O O O $any$ O O O O $string$ O $string$ O O O O O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O O $object$ O O O O O $any$ O $string$ O $any$ O O O O $any$ O $any$ O $string$ O $any$ O O O O O O O O $any$ O $any$ O $string$ O $any$ O O O O $boolean$ O $string$ O $any$ $any$ O O O O O $any$ O $NumberConstructor$ O $any$ O $number$ O O O O $any$ O $number$ O $DateConstructor$ O $number$ O O O O O O $any$ O $string$ O $string$ O $any$ O $string$ O $any$ O $string$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $string$ O $string$ O $any$ O $string$ O $any$ O $string$ O O O O O O $object$ O $string$ O $string$ O $any$ O $string$ O $any$ O $string$ O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $object$ O $string$ O $string$ O $any$ O $string$ O $any$ O $string$ O O O $string$ O O O $string$ O $string$ O $string$ O O O O $string$ O $any$ O $string$ O $string$ O $string$ O $string$ O $any$ O $string$ O $any$ O O $string$ O $any$ O $string$ O $any$ O $string$ O O O O O O $string$ O $string$ O $string$ O O O $string$ O O O $any$ O $string$ O O O O O O O O $any$ O O
<s> import * as _UNKNOWN_ from 's' ; import { createHash } from 's' ; import * as isString from 's' ; const _UNKNOWN_ = async password => { const salt = await _UNKNOWN_ . _UNKNOWN_ ( 0 ) ; const hash = await _UNKNOWN_ . hash ( password , salt ) ; return hash ; } ; const _UNKNOWN_ = ( password , _UNKNOWN_ ) => { if ( isString ( password ) ) { const hash = createHash ( _UNKNOWN_ ) ; hash . update ( password ) ; return hash . digest ( 's' ) ; } return password . digest ; } ; const _UNKNOWN_ = async ( password , hash ) => _UNKNOWN_ . compare ( password , hash ) ; export { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O $Promise<any>$ O O $any$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $Promise<any>$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $Promise<any>$ O $any$ O $Promise<any>$ O O O
<s> import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( _UNKNOWN_ . _UNKNOWN_ . subject ( ) ) . toMatchSnapshot ( ) ; expect ( _UNKNOWN_ . resetPassword . subject ( ) ) . toMatchSnapshot ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . subject ( ) ) . toMatchSnapshot ( ) ; } ) ; it ( 's' , ( ) => { const user = { } ; const url = 's' ; expect ( _UNKNOWN_ . _UNKNOWN_ . text ( user , url ) ) . toMatchSnapshot ( ) ; expect ( _UNKNOWN_ . resetPassword . text ( user , url ) ) . toMatchSnapshot ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . text ( user , url ) ) . toMatchSnapshot ( ) ; } ) ; } ) ; } ) ; </s>	O O O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $complex$ O $complex$ O $string$ O O O O $any$ O O O $any$ O $complex$ O $complex$ O $string$ O O O O $any$ O O O $any$ O $complex$ O $complex$ O $string$ O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O O $any$ O $complex$ O $complex$ O $string$ O $any$ O O O O O $any$ O O O $any$ O $complex$ O $complex$ O $string$ O $any$ O O O O O $any$ O O O $any$ O $complex$ O $complex$ O $string$ O $any$ O O O O O $any$ O O O O O O O O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const hash = await _UNKNOWN_ ( 's' ) ; expect ( hash ) . toBeTruthy ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const hash = await _UNKNOWN_ ( 's' , 's' ) ; expect ( hash ) . toBe ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const password = 's' ; const hash = await _UNKNOWN_ ( password ) ; expect ( await _UNKNOWN_ ( password , hash ) ) . toBe ( true ) ; } ) ; it ( 's' , async ( ) => { const password = 's' ; const _UNKNOWN_ = 's' ; const hash = await _UNKNOWN_ ( password ) ; expect ( await _UNKNOWN_ ( _UNKNOWN_ , hash ) ) . toBe ( false ) ; } ) ; } ) ; </s>	O O O $Promise<any>$ O $any$ O $Promise<any>$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $Promise<any>$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O $any$ O O $Promise<any>$ O O O O $any$ O O $Promise<any>$ O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O $any$ O O $Promise<any>$ O O O O $any$ O O $Promise<any>$ O O O $any$ O O O $any$ O O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; import { _UNKNOWN_ } from 's' ; import { AuthService , _UNKNOWN_ } from 's' ; export default _UNKNOWN_ ; export { _UNKNOWN_ , AuthService , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } ; </s>	O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O
<s> import _UNKNOWN_ from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( typeof _UNKNOWN_ ) . toBe ( 's' ) ; } ) ; } ) ; </s>	O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O O O O O O O O O O
<s> import * as includes from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( user , address ) { if ( ! address && user . emails && user . emails [ 0 ] ) { address = user . emails [ 0 ] . address ; } const emails = user . emails || [ ] ; if ( ! address || ! includes ( emails . map ( ( email ) => email . address ) , address ) ) { throw new _UNKNOWN_ ( 's' ) ; } return address ; } </s>	O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $string$ O $any$ O $string$ O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $string$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $string$ O O O O O $any$ O O O O O O $string$ O O O
<s> import Observable from 's' ; import { ExecutionResult , DocumentNode } from 's' ; export interface _UNKNOWN_ { query : DocumentNode ; variables ? : Record < string , any > ; operationName ? : string ; context ? : Record < string , any > ; extensions ? : Record < string , any > ; } export interface Operation { query : DocumentNode ; variables : Record < string , any > ; operationName : string ; extensions : Record < string , any > ; _UNKNOWN_ : ( context < string , any > ) => Record < string , any > ; getContext : ( ) => Record < string , any > ; _UNKNOWN_ : ( ) => string ; } export type FetchResult < C = Record < string , any > , E = Record < string , any > > = ExecutionResult & { extensions ? : E ; context ? : C ; } ; export type _UNKNOWN_ = ( operation ) => Observable < FetchResult > ; export type RequestHandler = ( operation , forward ? , ) => Observable < FetchResult > | null ; </s>	O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $complex$ O O $any$ O O O O O O $string$ O O O O $complex$ O O $any$ O O O O O O $complex$ O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $complex$ O $any$ O O O O O O $string$ O O O $complex$ O $any$ O O O O O O $complex$ O O $Record$ O O O O O O O $any$ O O O O O O $complex$ O O O O $any$ O O O O O O $string$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O $any$ O O $any$ O $C$ O O $any$ O O O O O $any$ O O $Operation$ O O $any$ O $any$ O O O O $any$ O O $Operation$ O $any$ $any$ O O O $any$ O $any$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import Observable from 's' ; import { print } from 's' ; import { _UNKNOWN_ , Operation } from 's' ; import { ApolloLink } from 's' ; export function _UNKNOWN_ ( operation ) { const _UNKNOWN_ = [ 's' , 's' , 's' , 's' , 's' , ] ; for ( let key of Object . keys ( operation ) ) { if ( _UNKNOWN_ . indexOf ( key ) < 0 ) { throw new Error ( `template` ) ; } } return operation ; } export class _UNKNOWN_ extends Error { public link : ApolloLink ; constructor ( message ? , link ? ) { super ( message ) ; this . link = link ; } } export function _UNKNOWN_ ( link ) { return link . request . length <= 0 ; } export function toPromise < R > ( observable < R > ) < R > { let completed = false ; return new Promise < R > ( ( resolve , reject ) => { observable . subscribe ( { next => { if ( completed ) { console . warn ( `template` , ) ; } else { completed = true ; resolve ( data ) ; } } , error : reject , } ) ; } ) ; } export const _UNKNOWN_ = toPromise ; export function fromPromise < T > ( promise < T > ) < T > { return new Observable < T > ( observer => { promise . then ( ( value : T ) => { observer . next ( value ) ; observer . complete ( ) ; } ) . catch ( observer . error . bind ( observer ) ) ; } ) ; } export function _UNKNOWN_ < T > ( errorValue ) < T > { return new Observable < T > ( observer => { observer . error ( errorValue ) ; } ) ; } export function _UNKNOWN_ ( operation ) { const _UNKNOWN_ = { variables : operation . variables || { } , extensions : operation . extensions || { } , operationName : operation . operationName , query : operation . query , } ; if ( ! _UNKNOWN_ . operationName ) { _UNKNOWN_ . operationName = typeof _UNKNOWN_ . query !== 's' ? _UNKNOWN_ ( _UNKNOWN_ . query ) : 's' ; } return _UNKNOWN_ as Operation ; } export function _UNKNOWN_ ( _UNKNOWN_ , operation , ) { let context = { ... _UNKNOWN_ } ; const _UNKNOWN_ = next => { if ( typeof next === 's' ) { context = { ... context , ... next ( context ) } ; } else { context = { ... context , ... next } ; } } ; const getContext = ( ) => ( { ... context } ) ; Object . defineProperty ( operation , 's' , { enumerable : false , value : _UNKNOWN_ , } ) ; Object . defineProperty ( operation , 's' , { enumerable : false , value : getContext , } ) ; Object . defineProperty ( operation , 's' , { enumerable : false , value : ( ) => getKey ( operation ) , } ) ; return operation as Operation ; } export function getKey ( operation ) { return `template` ; } </s>	O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O $string[]$ O O O O O O O O O O O O O O O O O $string$ O $ObjectConstructor$ O $complex$ O $any$ O O O O O $string[]$ O $number$ O $string$ O O O O O O O $ErrorConstructor$ O O O O O O O $any$ O O O O $any$ O $ErrorConstructor$ O O $any$ O $any$ O O O $string$ $string$ O $any$ $any$ O O O O $string$ O O O O $any$ O $any$ O O O O O $boolean$ O $any$ O O O $any$ O $any$ O $number$ O O O O O O $Promise$ O $any$ O O $Observable$ O $any$ O O O $any$ O O O $boolean$ O O O O O $PromiseConstructor$ O $any$ O O O $void$ O $void$ O O O $any$ O $any$ O O $any$ O O O O $boolean$ O O $Console$ O $void$ O O O O O O O O $boolean$ O O O $void$ O $any$ O O O O O $void$ O $void$ O O O O O O O O O O $any$ O $any$ O O O $Observable$ O $any$ O O $Promise$ O $any$ O O O $any$ O O O O $any$ O $any$ O O $any$ O O $Promise<T>$ O O O O $T$ O $any$ O O O $any$ O $any$ O $T$ O O $any$ O $any$ O O O O O O $complex$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $Observable$ O $any$ O O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O O $complex$ O $any$ O $complex$ O O O O $complex$ O $any$ O $complex$ O O O O $string$ O $any$ O $string$ O $any$ O $any$ O $any$ O O O O O O $any$ O $string$ O O $any$ O $string$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $Operation$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O $void$ O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O $ObjectConstructor$ O $any$ O $any$ O O O O $false$ O O O $void$ O $void$ O O O O $ObjectConstructor$ O $any$ O $any$ O O O O $false$ O O O $any$ O $any$ O O O O $ObjectConstructor$ O $any$ O $any$ O O O O $false$ O O O $string$ O O O O $string$ O $any$ O O O O O O $any$ O $any$ O O O O $string$ O $any$ O O O O O O O
<s> import Observable from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , Operation , RequestHandler , FetchResult , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; const _UNKNOWN_ = ( op , forward ) => ( forward ? forward ( op ) : Observable . of ( ) ) ; const _UNKNOWN_ = ( handler : RequestHandler | ApolloLink ) => typeof handler === 's' ? new ApolloLink ( handler ) : handler ; export const empty = ( ) : ApolloLink => new ApolloLink ( ( op , forward ) => Observable . of ( ) ) ; export const from = ( links : ApolloLink [ ] ) : ApolloLink => { if ( links . length === 0 ) return empty ( ) ; return links . map ( _UNKNOWN_ ) . reduce ( ( x , y ) => x . concat ( y ) ) ; } ; export const split = ( test : ( op ) => boolean , left : ApolloLink | RequestHandler , right : ApolloLink | RequestHandler = new ApolloLink ( _UNKNOWN_ ) , ) : ApolloLink => { const _UNKNOWN_ = _UNKNOWN_ ( left ) ; const _UNKNOWN_ = _UNKNOWN_ ( right ) ; if ( _UNKNOWN_ ( _UNKNOWN_ ) && _UNKNOWN_ ( _UNKNOWN_ ) ) { return new ApolloLink ( operation => { return test ( operation ) ? _UNKNOWN_ . request ( operation ) || Observable . of ( ) : _UNKNOWN_ . request ( operation ) || Observable . of ( ) ; } ) ; } else { return new ApolloLink ( ( operation , forward ) => { return test ( operation ) ? _UNKNOWN_ . request ( operation , forward ) || Observable . of ( ) : _UNKNOWN_ . request ( operation , forward ) || Observable . of ( ) ; } ) ; } } ; export const concat = ( first : ApolloLink | RequestHandler , second : ApolloLink | RequestHandler , ) => { const _UNKNOWN_ = _UNKNOWN_ ( first ) ; if ( _UNKNOWN_ ( _UNKNOWN_ ) ) { console . warn ( new _UNKNOWN_ ( `template` , _UNKNOWN_ , ) , ) ; return _UNKNOWN_ ; } const nextLink = _UNKNOWN_ ( second ) ; if ( _UNKNOWN_ ( nextLink ) ) { return new ApolloLink ( operation => _UNKNOWN_ . request ( operation , op => nextLink . request ( op ) || Observable . of ( ) , ) || Observable . of ( ) , ) ; } else { return new ApolloLink ( ( operation , forward ) => { return ( _UNKNOWN_ . request ( operation , op => { return nextLink . request ( op , forward ) || Observable . of ( ) ; } ) || Observable . of ( ) ) ; } ) ; } } ; export class ApolloLink { constructor ( request ? ) { if ( request ) this . request = request ; } public static empty = empty ; public static from = from ; public static split = split ; public static execute = execute ; public split ( test : ( op ) => boolean , left : ApolloLink | RequestHandler , right : ApolloLink | RequestHandler = new ApolloLink ( _UNKNOWN_ ) , ) { return this . concat ( split ( test , left , right ) ) ; } public concat ( next : ApolloLink | RequestHandler ) { return concat ( this , next ) ; } public request ( operation , forward ? , ) : Observable < FetchResult > | null { throw new Error ( 's' ) ; } } export function execute ( link , operation , ) < FetchResult > { return ( link . request ( _UNKNOWN_ ( operation . context , _UNKNOWN_ ( _UNKNOWN_ ( operation ) ) , ) , ) || Observable . of ( ) ) ; } </s>	O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $boolean$ O $any$ O $any$ O $Operation$ O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O $complex$ O $any$ O $any$ O O O $complex$ O O O O $any$ O $any$ O O $any$ O O O $any$ O O O O $any$ O O $any$ O O $Operation$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O $any$ O $number$ O O O O $any$ O O O O $any$ O $U[]$ O $any$ O O $complex$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O $boolean$ O O $Operation$ O O O O $complex$ O $any$ O $any$ O $complex$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $complex$ O O O O $boolean$ O $any$ O O $boolean$ O $any$ O O O O O $any$ O $Operation$ O O O $boolean$ O $Operation$ O O $any$ O $any$ O $Operation$ O O $any$ O $any$ O O O $any$ O $any$ O $Operation$ O O $any$ O $any$ O O O O O O O O O O O $any$ O O $Operation$ O $any$ O O O O $boolean$ O $Operation$ O O $any$ O $any$ O $Operation$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $Operation$ O $any$ O O $any$ O $any$ O O O O O O O O O O O $any$ O O $complex$ O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O O $any$ O $any$ O $complex$ O O O O $boolean$ O $any$ O O O $Console$ O $void$ O O $any$ O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O $complex$ O O O O $boolean$ O $any$ O O O O O $any$ O $Operation$ O $any$ O $any$ O $Operation$ O $Operation$ O $any$ O $any$ O $Operation$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O $Operation$ O $any$ O O O O O $any$ O $any$ O $Operation$ O $Operation$ O O O $any$ O $any$ O $Operation$ O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O $any$ O O O $any$ $any$ O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $boolean$ O O $Operation$ O O O O $complex$ O $any$ O $any$ O $complex$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O $boolean$ O $complex$ O $complex$ O O O O O $any$ O $complex$ O $any$ O $any$ O O O $any$ O O O $complex$ O O O O $any$ O $Operation$ O $any$ $any$ O O O $any$ O $any$ O O O O O O $ErrorConstructor$ O O O O O O O O $Observable$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $Operation$ O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O
<s> import { Operation , RequestHandler , _UNKNOWN_ , FetchResult } from 's' ; import Observable from 's' ; import { ApolloLink } from 's' ; export default class _UNKNOWN_ extends ApolloLink { constructor ( handleRequest = ( ) => null ) { super ( ) ; this . request = handleRequest ; } public request ( operation , forward ? , ) : Observable < FetchResult > | null { throw Error ( 's' ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O $Operation$ O $any$ $any$ O O O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O O
<s> import { Operation , _UNKNOWN_ , FetchResult } from 's' ; import Observable from 's' ; import { ApolloLink } from 's' ; export default class _UNKNOWN_ extends ApolloLink { constructor ( private _UNKNOWN_ : ( context < string , any > , ) => Record < string , any > = c => c , ) { super ( ) ; } public request ( operation , forward , ) < FetchResult > { operation . _UNKNOWN_ ( this . _UNKNOWN_ ( operation . getContext ( ) ) ) ; return forward ( operation ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O O O O $complex$ O O $Record$ O O O O O O O O $any$ O O O O O O $complex$ O $complex$ O O O O O O O O O $Observable$ O $Operation$ O $any$ O O O $any$ O O $Operation$ O $complex$ O O O $complex$ O $Operation$ O $complex$ O O O O O O $any$ O $Operation$ O O O O O
<s> import gql from 's' ; import { execute , ApolloLink } from 's' ; const _UNKNOWN_ = `template` ; export function _UNKNOWN_ < T > ( calls : any [ ] = [ ] , results < T > ) { expect ( calls . length ) . toBe ( results . length ) ; calls . map ( ( call , i ) => expect ( call . data ) . toEqual ( results [ i ] ) ) ; } export interface _UNKNOWN_ { link : ApolloLink ; results ? : any [ ] ; query ? : string ; done ? : ( ) => void ; context ? : any ; variables ? : any ; } export function _UNKNOWN_ ( params ) { const { link , context , variables } = params ; const results = params . results || [ ] ; const query = params . query || _UNKNOWN_ ; const done = params . done || ( ( ) => void 0 ) ; const spy = jest . fn ( ) ; execute ( link , { query , context , variables } ) . subscribe ( { next : spy , error => { expect ( error ) . toEqual ( results . pop ( ) ) ; _UNKNOWN_ ( spy . mock . calls [ 0 ] , results ) ; if ( done ) { done ( ) ; } } , complete : ( ) => { _UNKNOWN_ ( spy . mock . calls [ 0 ] , results ) ; if ( done ) { done ( ) ; } } , } ) ; } </s>	O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O O $void$ O $any$ O O $any[]$ O O O O O O O O $Array$ O $any$ O O O $any$ O $any[]$ O $number$ O O $any$ O $T[]$ O $number$ O O $any[]$ O $U[]$ O O $any$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O $T[]$ O $number$ O O O O O O O $any$ O $any$ O $any$ O $any[]$ O O O O O O $string$ O O O O $void$ O O O O O O O $any$ O O O O $any$ O O O O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O $any[]$ O $any$ O $any[]$ O O O O O $any$ O $any$ O $string$ O $any$ O O $void$ O $any$ O $void$ O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any[]$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $any[]$ O O O O $void$ O O $void$ O O O O O O $void$ O O O O O $void$ O $any$ O $any$ O $any$ O O O O $any[]$ O O O O $void$ O O $void$ O O O O O O O O O O O
<s> import _UNKNOWN_ from 's' ; import _UNKNOWN_ from 's' ; export * from 's' ; export { _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O O O
<s> import { _UNKNOWN_ , fromPromise , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import Observable from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( ( ) => _UNKNOWN_ ( < any > { _UNKNOWN_ : 's' } ) ) . toThrow ( ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => _UNKNOWN_ ( { query : 's' , context : { } , variables : { } , } ) , ) . not . toThrow ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { const data = { data : { hello : 's' , } , } ; const error = new Error ( 's' ) ; it ( 's' , ( ) => { return _UNKNOWN_ ( Observable . of ( data ) ) . then ( result => expect ( data ) . toEqual ( result ) , ) ; } ) ; it ( 's' , ( ) => { return _UNKNOWN_ ( _UNKNOWN_ ( error ) ) . then ( expect . fail ) . catch ( _UNKNOWN_ => expect ( error ) . toEqual ( _UNKNOWN_ ) ) ; } ) ; describe ( 's' , ( ) => { const spy = jest . fn ( ) ; let _UNKNOWN_ : ( message ? , ... _UNKNOWN_ : any [ ] ) => void ; beforeEach ( ( ) => { _UNKNOWN_ = console . warn ; console . warn = spy ; } ) ; afterEach ( ( ) => { console . warn = _UNKNOWN_ ; } ) ; it ( 's' , done => { _UNKNOWN_ ( Observable . of ( data , data ) ) . then ( result => { expect ( data ) . toEqual ( result ) ; expect ( spy ) . toHaveBeenCalled ( ) ; done ( ) ; } ) ; } ) ; } ) ; } ) ; describe ( 's' , ( ) => { const data = { data : { hello : 's' , } , } ; const error = new Error ( 's' ) ; it ( 's' , ( ) => { const observable = fromPromise ( Promise . resolve ( data ) ) ; return _UNKNOWN_ ( observable ) . then ( result => expect ( data ) . toEqual ( result ) , ) ; } ) ; it ( 's' , ( ) => { const observable = fromPromise ( Promise . reject ( error ) ) ; return _UNKNOWN_ ( observable ) . then ( expect . fail ) . catch ( _UNKNOWN_ => expect ( error ) . toEqual ( _UNKNOWN_ ) ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const error = new Error ( 's' ) ; const observable = _UNKNOWN_ ( error ) ; return _UNKNOWN_ ( observable ) . then ( expect . fail ) . catch ( _UNKNOWN_ => expect ( error ) . toEqual ( _UNKNOWN_ ) ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O O $string$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O $string$ O O O ${}$ O O O O ${}$ O O O O O O O O O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O O O $Error$ O O $ErrorConstructor$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $complex$ O O O O O $unknown$ O $any$ O $complex$ O O $any$ O $unknown$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $Error$ O O O O O $any$ O $any$ O O $Promise<unknown>$ O $any$ O $any$ O $Error$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $void$ O O $any$ $any$ O O $any[]$ O O O O O O O O $any$ O O O O O $void$ O $Console$ O $void$ O $Console$ O $void$ O $any$ O O O O $any$ O O O O O $Console$ O $void$ O $void$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $complex$ O $complex$ O O O O O $unknown$ O O $any$ O $complex$ O O $any$ O $unknown$ O O $any$ O $any$ O O $any$ O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O O O $Error$ O O $ErrorConstructor$ O O O O $any$ O O O O O O O O $any$ O $any$ O $PromiseConstructor$ O $complex$ O $complex$ O O O O $any$ O $any$ O O O O $unknown$ O $any$ O $complex$ O O $any$ O $unknown$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $PromiseConstructor$ O $Promise<T>$ O $Error$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $Promise<unknown>$ O $any$ O $any$ O $Error$ O O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $Error$ O O $ErrorConstructor$ O O O O O $any$ O $any$ O $Error$ O O O $any$ O $any$ O O O O $any$ O $any$ O O $Promise<unknown>$ O $any$ O $any$ O $Error$ O O $any$ O $any$ O O O O O O O O O O O O O
<s> export * from 's' ; export { _UNKNOWN_ , _UNKNOWN_ , toPromise , fromPromise , _UNKNOWN_ , } from 's' ; export * from 's' ; import Observable from 's' ; export { Observable } ; </s>	O O O O O O O O $Operation$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O O O O $any$ O O O
<s> import { Observable , Operation , _UNKNOWN_ , FetchResult } from 's' ; export type _UNKNOWN_ = ( operations : Operation [ ] , forward ? : ( _UNKNOWN_ | undefined ) [ ] , ) => Observable < FetchResult [ ] > | null ; export interface _UNKNOWN_ { operation : Operation ; forward ? : _UNKNOWN_ ; observable ? : Observable < FetchResult > ; next ? : Array < ( result ) => void > ; error ? : Array < ( error ) => void > ; complete ? : Array < ( ) => void > ; } export class _UNKNOWN_ { public _UNKNOWN_ : Map < string , _UNKNOWN_ [ ] > ; private _UNKNOWN_ : number ; private _UNKNOWN_ : number ; private _UNKNOWN_ : _UNKNOWN_ ; private _UNKNOWN_ : ( Operation ) => string ; constructor ( { _UNKNOWN_ , _UNKNOWN_ = 0 , _UNKNOWN_ , _UNKNOWN_ = ( ) => 's' , } : { _UNKNOWN_ : number ; _UNKNOWN_ ? : number ; _UNKNOWN_ : _UNKNOWN_ ; _UNKNOWN_ ? : ( Operation ) => string ; } ) { this . _UNKNOWN_ = new Map ( ) ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = _UNKNOWN_ ; } public _UNKNOWN_ ( request ) < FetchResult > { const _UNKNOWN_ = { ... request , } ; let _UNKNOWN_ = false ; const key = this . _UNKNOWN_ ( request . operation ) ; if ( ! _UNKNOWN_ . observable ) { _UNKNOWN_ . observable = new Observable < FetchResult > ( observer => { if ( ! this . _UNKNOWN_ . has ( key ) ) { this . _UNKNOWN_ . set ( key , [ ] ) ; } if ( ! _UNKNOWN_ ) { this . _UNKNOWN_ . get ( key ) . push ( _UNKNOWN_ ) ; _UNKNOWN_ = true ; } _UNKNOWN_ . next = _UNKNOWN_ . next || [ ] ; if ( observer . next ) _UNKNOWN_ . next . push ( observer . next . bind ( observer ) ) ; _UNKNOWN_ . error = _UNKNOWN_ . error || [ ] ; if ( observer . error ) _UNKNOWN_ . error . push ( observer . error . bind ( observer ) ) ; _UNKNOWN_ . complete = _UNKNOWN_ . complete || [ ] ; if ( observer . complete ) _UNKNOWN_ . complete . push ( observer . complete . bind ( observer ) ) ; if ( this . _UNKNOWN_ . get ( key ) . length === 0 ) { this . _UNKNOWN_ ( key ) ; } if ( this . _UNKNOWN_ . get ( key ) . length === this . _UNKNOWN_ ) { this . _UNKNOWN_ ( key ) ; } } ) ; } return _UNKNOWN_ . observable ; } public _UNKNOWN_ ( key = 's' , ) : ( Observable < FetchResult > | undefined ) [ ] | undefined { const _UNKNOWN_ = this . _UNKNOWN_ . get ( key ) ; if ( ! _UNKNOWN_ ) { return ; } this . _UNKNOWN_ . delete ( key ) ; const requests : Operation [ ] = _UNKNOWN_ . map ( _UNKNOWN_ => _UNKNOWN_ . operation , ) ; const _UNKNOWN_ : _UNKNOWN_ [ ] = _UNKNOWN_ . map ( _UNKNOWN_ => _UNKNOWN_ . forward , ) ; const observables : ( Observable < FetchResult > | undefined ) [ ] = [ ] ; const nexts : any [ ] = [ ] ; const errors : any [ ] = [ ] ; const _UNKNOWN_ : any [ ] = [ ] ; _UNKNOWN_ . forEach ( ( _UNKNOWN_ , index ) => { observables . push ( _UNKNOWN_ . observable ) ; nexts . push ( _UNKNOWN_ . next ) ; errors . push ( _UNKNOWN_ . error ) ; _UNKNOWN_ . push ( _UNKNOWN_ . complete ) ; } ) ; const _UNKNOWN_ = this . _UNKNOWN_ ( requests , _UNKNOWN_ ) || Observable . of ( ) ; const onError = error => { errors . forEach ( _UNKNOWN_ => { if ( _UNKNOWN_ ) { _UNKNOWN_ . forEach ( e => e ( error ) ) ; } } ) ; } ; _UNKNOWN_ . subscribe ( { next => { if ( ! Array . isArray ( results ) ) { results = [ results ] ; } if ( nexts . length !== results . length ) { const error = new Error ( `template` , ) ; ( error as any ) . result = results ; return onError ( error ) ; } results . forEach ( ( result , index ) => { requests [ index ] . _UNKNOWN_ ( { response : result } ) ; if ( nexts [ index ] ) { nexts [ index ] . forEach ( next => next ( result ) ) ; } } ) ; } , error : onError , complete : ( ) => { _UNKNOWN_ . forEach ( complete => { if ( complete ) { complete . forEach ( c => c ( ) ) ; } } ) ; } , } ) ; return observables ; } private _UNKNOWN_ ( key = 's' ) { setTimeout ( ( ) => { if ( this . _UNKNOWN_ . get ( key ) && this . _UNKNOWN_ . get ( key ) . length ) { this . _UNKNOWN_ ( key ) ; } } , this . _UNKNOWN_ ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $any[]$ O $any$ O O O $any[]$ O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $void)[]$ O O $ArrayConstructor$ O O $any$ O O O O O $void)[]$ O O $ArrayConstructor$ O O $Error$ O O O O O $void)[]$ O O $ArrayConstructor$ O O O O O O O O O O $any$ O O $complex$ O $MapConstructor$ O O O $any$ O O O O O $number$ O O O O $number$ O O O O $any$ O $any$ O O $string$ O O $any$ O O O O O O O $number$ O $number$ O O O $any$ O $string$ O O O O O O O O O $number$ O O O $number$ O O O O $any$ O $any$ O $string$ O O O $any$ O O O O O O O O O $complex$ O O $MapConstructor$ O O O O O $number$ O $number$ O O O $number$ O $number$ O O O $any$ O $any$ O O O $string$ O $string$ O O O $Observable$ O $any$ O O $any$ O O O $complex$ O O O $any$ O O O O $boolean$ O O O O $string$ O O O $string$ O $any$ O $any$ O O O O O $complex$ O $any$ O O $complex$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O O $complex$ O $boolean$ O $string$ O O O O O $complex$ O $complex$ O $string$ O O O O O O O O O $boolean$ O O O O $complex$ O $any$ O $string$ O O $number$ O $complex$ O O $boolean$ O O O O $complex$ O $void)[]$ O $complex$ O $void)[]$ O O O O O O $any$ O $any$ O $complex$ O $void)[]$ O $number$ O $any$ O $any$ O $any$ O $any$ O O O $complex$ O $void)[]$ O $complex$ O $void)[]$ O O O O O O $any$ O $any$ O $complex$ O $void)[]$ O $number$ O $any$ O $any$ O $any$ O $any$ O O O $complex$ O $void)[]$ O $complex$ O $void)[]$ O O O O O O $any$ O $any$ O $complex$ O $void)[]$ O $number$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $complex$ O $any$ O $string$ O O $number$ O O O O O O $void$ O $string$ O O O O O O O $complex$ O $any$ O $string$ O O $number$ O O O $number$ O O O O $any[]$ O $string$ O O O O O O O O $complex$ O $any$ O O O $any[]$ O $string$ O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O $complex$ O $any$ O $string$ O O O O O $any$ O O O O O O O $complex$ O $boolean$ O $string$ O O O $any[]$ O $any$ O O O $any$ O $U[]$ O $any$ O $any$ O $any$ O O O O $any[]$ O $any$ O O O $any$ O $U[]$ O $any$ O $any$ O $any$ O O O O $any[]$ O O $any$ O $any$ O O O O O O O O O O O $any[]$ O O O O O O O O O $any[]$ O O O O O O O O O $any[]$ O O O O O O O O $any$ O $void$ O O $any$ O $number$ O O O $any[]$ O $number$ O $any$ O $any$ O O $any[]$ O $number$ O $any$ O $void)[]$ O O $any[]$ O $number$ O $any$ O $void)[]$ O O $any[]$ O $number$ O $any$ O $void)[]$ O O O O O O $any$ O O O $any$ O $any[]$ O $any[]$ O O $any$ O $any$ O O O O $void$ O $any$ O O $any[]$ O $void$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O $any$ O O O O O $ArrayConstructor$ O $complex$ O $any$ O O O $any$ O O $any$ O O O O O $any[]$ O $number$ O $any$ O $any$ O O O $Error$ O O $ErrorConstructor$ O O O O O O $Error$ O O O O $any$ O $any$ O O $void$ O $Error$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any[]$ O $any$ O O $any$ O O $any$ O $any$ O O O O O $any[]$ O $any$ O O O $any[]$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O $void$ O $void$ O O O O O $any[]$ O $void$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O $any[]$ O O O $void$ O $string$ O O O O $number$ O O O O O O O O O $complex$ O $any$ O $string$ O O O O $complex$ O $any$ O $string$ O O $number$ O O O O $any[]$ O $string$ O O O O O O O $number$ O O O O O
<s> import { ApolloLink , Operation , FetchResult , Observable , _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; export namespace _UNKNOWN_ { export interface Options { _UNKNOWN_ ? : number ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : ( Operation ) => string ; } } export class _UNKNOWN_ extends ApolloLink { private _UNKNOWN_ : _UNKNOWN_ ; constructor ( _UNKNOWN_ : _UNKNOWN_ . Options = { } ) { super ( ) ; const { _UNKNOWN_ = 0 , _UNKNOWN_ = 0 , _UNKNOWN_ = ( ) => null , _UNKNOWN_ = ( ) => 's' , } = _UNKNOWN_ ; this . _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } ) ; if ( _UNKNOWN_ . _UNKNOWN_ . length <= 0 ) { this . request = operation => this . _UNKNOWN_ . _UNKNOWN_ ( { operation } ) ; } } public request ( operation , forward ? , ) : Observable < FetchResult > | null { return this . _UNKNOWN_ . _UNKNOWN_ ( { operation , forward , } ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $number$ O O O O $number$ O O O O $any$ O O $any$ O $string$ O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $Options$ O $any$ O $any$ O O O O O O O O O O O $number$ O O O $number$ O O O $any$ O O O O O O $string)$ O O O O O O O O $Options$ O O O $any$ O O $any$ O O $number$ O $number$ O $any$ O $string)$ O O O O O O $Options$ O $any$ O $number$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O O $any$ O $Operation$ O $any$ $any$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O
<s> import { ApolloLink , execute , Observable , Operation , FetchResult , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import gql from 's' ; import { print } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; interface _UNKNOWN_ { request : _UNKNOWN_ ; result ? : FetchResult ; error ? : Error ; delay ? : number ; } const _UNKNOWN_ = ( done , body ) => { return ( ... args ) => { try { body ( ... args ) ; done ( ) ; } catch ( error ) { done . fail ( error ) ; } } ; } ; function _UNKNOWN_ ( request ) { const queryString = typeof request . query === 's' ? request . query : print ( request . query ) ; return JSON . stringify ( { variables : request . variables || { } , query : queryString , } ) ; } function _UNKNOWN_ ( ... _UNKNOWN_ : _UNKNOWN_ [ ] ) { const _UNKNOWN_ : { [ key ] : _UNKNOWN_ [ ] } = { } ; const _UNKNOWN_ = ( operations : Operation [ ] ) => { return new Observable ( observer => { const results = operations . map ( operation => { const key = _UNKNOWN_ ( operation ) ; const responses = _UNKNOWN_ [ key ] ; if ( ! responses || responses . length === 0 ) { throw new Error ( `template` , ) ; } const { result , error } = responses . shift ( ) ! ; if ( ! result && ! error ) { throw new Error ( `template` , ) ; } if ( error ) { observer . error ( error ) ; } return result ; } ) ; observer . next ( results ) ; } ) ; } ; ( _UNKNOWN_ as any ) . _UNKNOWN_ = ( _UNKNOWN_ , ) => { const key = _UNKNOWN_ ( _UNKNOWN_ . request ) ; let _UNKNOWN_ = _UNKNOWN_ [ key ] ; if ( ! _UNKNOWN_ ) { _UNKNOWN_ = [ ] ; _UNKNOWN_ [ key ] = _UNKNOWN_ ; } _UNKNOWN_ . push ( _UNKNOWN_ ) ; } ; _UNKNOWN_ . map ( ( _UNKNOWN_ as any ) . _UNKNOWN_ ) ; return _UNKNOWN_ ; } describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( ( ) => { const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : ( ) => null , } ) ; _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; } ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : ( ) => { return null ; } , _UNKNOWN_ : ( ) => 's' , } ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) ) . toBeUndefined ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) ) . toBeUndefined ( ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) ) . toBeUndefined ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) ) . toBeUndefined ( ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : ( ) => { return null ; } , } ) ; const query = `template` ; const request = { operation : _UNKNOWN_ ( { } , { query } ) , } ; expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) ) . toBeUndefined ( ) ; _UNKNOWN_ . _UNKNOWN_ ( request ) . subscribe ( { } ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) . length ) . toBe ( 0 ) ; _UNKNOWN_ . _UNKNOWN_ ( request ) . subscribe ( { } ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) . length ) . toBe ( 0 ) ; } ) ; describe ( 's' , ( ) => { const query = `template` ; const data = { author : { firstName : 's' , lastName : 's' , } , } ; const _UNKNOWN_ = _UNKNOWN_ ( { request : { query } , result : { data } , } , { request : { query } , result : { data } , } , ) ; const operation = _UNKNOWN_ ( { } , { query , } , ) ; it ( 's' , done => { const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ , } ) ; _UNKNOWN_ . _UNKNOWN_ ( { operation } ) . subscribe ( _UNKNOWN_ ( done , resultObj => { expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) ) . toBeUndefined ( ) ; expect ( resultObj ) . toEqual ( { data } ) ; } ) , ) ; const observables : ( | Observable < FetchResult > | undefined ) [ ] = _UNKNOWN_ . _UNKNOWN_ ( ) ! ; try { expect ( observables . length ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } } ) ; it ( 's' , done => { const 0 = _UNKNOWN_ ( { } , { query , } , ) ; const _UNKNOWN_ = _UNKNOWN_ ( { request : { query } , result : { data } , } , { request : { query } , result : { data } , } , ) ; const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : _UNKNOWN_ , } ) ; const 0 = _UNKNOWN_ . _UNKNOWN_ ( { operation } ) ; const 0 = _UNKNOWN_ . _UNKNOWN_ ( { operation : 0 } ) ; let notify = false ; 0 . subscribe ( 0 => { try { expect ( 0 ) . toEqual ( { data } ) ; } catch ( e ) { done . fail ( e ) ; } if ( notify ) { done ( ) ; } else { notify = true ; } } ) ; 0 . subscribe ( 0 => { try { expect ( 0 ) . toEqual ( { data } ) ; } catch ( e ) { done . fail ( e ) ; } if ( notify ) { done ( ) ; } else { notify = true ; } } ) ; try { expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) . length ) . toBe ( 0 ) ; const observables : ( | Observable < FetchResult > | undefined ) [ ] = _UNKNOWN_ . _UNKNOWN_ ( ) ! ; expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) ) . toBeUndefined ( ) ; expect ( observables . length ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } } ) ; it ( 's' , done => { const _UNKNOWN_ = _UNKNOWN_ ( { request : { query } , result : { data } , } ) ; const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : _UNKNOWN_ , } ) ; const observable = _UNKNOWN_ . _UNKNOWN_ ( { operation } ) ; observable . subscribe ( _UNKNOWN_ ( done , result => { expect ( result ) . toEqual ( { data } ) ; } ) , ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; } ) ; } ) ; it ( 's' , done => { const data = { lastName : 's' , firstName : 's' , } ; const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : ( ) => new Observable ( observer => { observer . next ( [ { data } ] ) ; setTimeout ( observer . complete . bind ( observer ) ) ; } ) , } ) ; const query = `template` ; const operation = _UNKNOWN_ ( { } , { query } ) ; _UNKNOWN_ . _UNKNOWN_ ( { operation } ) . subscribe ( { } ) ; try { expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) . length ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } setTimeout ( _UNKNOWN_ ( done , ( ) => { expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) ) . toBeUndefined ( ) ; expect ( operation . getContext ( ) ) . toEqual ( { response : { data } } ) ; } ) , 0 , ) ; } ) ; it ( 's' , done => { const data = { lastName : 's' , firstName : 's' , } ; const 0 = { lastName : 's' , firstName : 's' , } ; const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : ( ) => new Observable ( observer => { observer . next ( [ { data } , { data : 0 } , { data } ] ) ; setTimeout ( observer . complete . bind ( observer ) ) ; } ) , } ) ; const query = `template` ; const operation = _UNKNOWN_ ( { } , { query } ) ; const 0 = _UNKNOWN_ ( { } , { query } ) ; const 0 = _UNKNOWN_ ( { } , { query } ) ; _UNKNOWN_ . _UNKNOWN_ ( { operation } ) . subscribe ( { } ) ; _UNKNOWN_ . _UNKNOWN_ ( { operation : 0 } ) . subscribe ( { } ) ; try { expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) . length ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } setTimeout ( ( ) => { _UNKNOWN_ . _UNKNOWN_ ( { operation : 0 } ) . subscribe ( { } ) ; try { expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) . length ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } } , 0 ) ; setTimeout ( _UNKNOWN_ ( done , ( ) => { expect ( operation . getContext ( ) ) . toEqual ( { response : { data } } ) ; expect ( 0 . getContext ( ) ) . toEqual ( { response : { data : 0 } } ) ; expect ( 0 . getContext ( ) ) . toEqual ( { response : { data } } ) ; expect ( _UNKNOWN_ . _UNKNOWN_ . get ( 's' ) ) . toBeUndefined ( ) ; } ) , 0 , ) ; } ) ; it ( 's' , done => { const query = `template` ; const operation = _UNKNOWN_ ( { } , { query } ) ; const error = new Error ( 's' ) ; const _UNKNOWN_ = _UNKNOWN_ ( { request : { query } , error , } ) ; const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : _UNKNOWN_ , } ) ; const observable = _UNKNOWN_ . _UNKNOWN_ ( { operation } ) ; observable . subscribe ( { error : _UNKNOWN_ ( done , ( _UNKNOWN_ ) => { expect ( _UNKNOWN_ . message ) . toBe ( 's' ) ; } ) , } ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { const query = `template` ; it ( 's' , ( ) => { expect ( ( ) => new _UNKNOWN_ ( { _UNKNOWN_ : ( ) => Observable . of ( ) } ) , ) . not . toThrow ( ) ; } ) ; it ( 's' , done => { const link = ApolloLink . from ( [ new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : ( operation , forward ) => { try { expect ( forward . length ) . toBe ( 0 ) ; expect ( operation . length ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } return forward [ 0 ] ( operation [ 0 ] ) . map ( result => [ result ] ) ; } , } ) , new ApolloLink ( operation => { _UNKNOWN_ ( done , ( ) => { expect ( operation . query ) . toEqual ( query ) ; } ) ( ) ; return null ; } ) , ] ) ; execute ( link , _UNKNOWN_ ( { } , { query , } , ) , ) . subscribe ( result => done . fail ( ) ) ; } ) ; it ( 's' , ( ) => { let calls = 0 ; const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : ( operation , forward ) => forward [ 0 ] ( operation [ 0 ] ) . map ( r => [ r ] ) , } ) ; const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ => Observable . of ( ) , } ) ; const _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : ( ) => Observable . of ( ) } ) ; const _UNKNOWN_ = console . warn ; console . warn = warning => { calls ++ ; expect ( warning . message ) . toBeDefined ( ) ; } ; expect ( _UNKNOWN_ . concat ( ( operation , forward ) => forward ( operation ) ) , ) . toEqual ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ . concat ( ( operation , forward ) => forward ( operation ) ) , ) . toEqual ( _UNKNOWN_ ) ; console . warn = warning => { throw Error ( 's' ) ; } ; expect ( _UNKNOWN_ . concat ( ( operation , forward ) => forward ( operation ) ) , ) . not . toEqual ( _UNKNOWN_ ) ; console . warn = _UNKNOWN_ ; expect ( calls ) . toBe ( 0 ) ; } ) ; it ( 's' , done => { const sizes = [ 0 , 0 , 0 ] ; const _UNKNOWN_ = new ApolloLink ( operation => { try { expect ( operation . query ) . toEqual ( query ) ; } catch ( e ) { done . fail ( e ) ; } return Observable . of ( operation . variables . count ) ; } ) ; let _UNKNOWN_ = ( ) => { const size = sizes . pop ( ) ; if ( ! size ) done ( ) ; const _UNKNOWN_ = jest . fn ( ( operation , forward ) => { try { expect ( operation . length ) . toBe ( size ) ; expect ( forward . length ) . toBe ( size ) ; } catch ( e ) { done . fail ( e ) ; } const observables = forward . map ( ( f , i ) => f ( operation [ i ] ) ) ; return new Observable ( observer => { const data = [ ] ; observables . forEach ( obs => obs . subscribe ( d => { data . push ( d ) ; if ( data . length === observables . length ) { observer . next ( data ) ; observer . complete ( ) ; } } ) , ) ; } ) ; } ) ; const link = ApolloLink . from ( [ new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : size , _UNKNOWN_ , } ) , _UNKNOWN_ , ] ) ; Array . from ( new Array ( size ) ) . forEach ( ( _ , i ) => { execute ( link , { query , variables : { count : i } , } ) . subscribe ( { next => { expect ( data ) . toBe ( i ) ; } , complete : ( ) => { try { expect ( _UNKNOWN_ . mock . calls . length ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } _UNKNOWN_ ( ) ; } , } ) ; } ) ; } ; _UNKNOWN_ ( ) ; } ) ; it ( 's' , done => { const _UNKNOWN_ = [ 0 , 0 , 0 ] ; const _UNKNOWN_ = ( ) => { const mock = jest . fn ( ) ; const _UNKNOWN_ = _UNKNOWN_ . pop ( ) ; if ( ! _UNKNOWN_ ) return done ( ) ; const _UNKNOWN_ = jest . fn ( ( operation , forward ) => { try { expect ( operation . length ) . toBe ( 0 ) ; expect ( forward . length ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } return forward [ 0 ] ( operation [ 0 ] ) . map ( d => [ d ] ) ; } ) ; const link = ApolloLink . from ( [ new _UNKNOWN_ ( { _UNKNOWN_ , _UNKNOWN_ : 0 , _UNKNOWN_ , } ) , ( ) => Observable . of ( 0 ) , ] ) ; execute ( link , _UNKNOWN_ ( { } , { query , } , ) , ) . subscribe ( { next => { try { expect ( data ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } } , complete : ( ) => { mock ( _UNKNOWN_ . mock . calls . length ) ; } , } ) ; setTimeout ( ( ) => { const _UNKNOWN_ = mock . mock . calls . slice ( 0 , - 0 ) ; try { expect ( _UNKNOWN_ . length ) . toBe ( 0 ) ; _UNKNOWN_ . forEach ( args => expect ( args [ 0 ] ) . toBe ( 0 ) ) ; expect ( mock ) . _UNKNOWN_ ( 0 ) ; expect ( _UNKNOWN_ . mock . calls . length ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } _UNKNOWN_ ( ) ; } , _UNKNOWN_ + 0 ) ; setTimeout ( ( ) => mock ( _UNKNOWN_ . mock . calls . length ) , _UNKNOWN_ - 0 ) ; setTimeout ( ( ) => mock ( _UNKNOWN_ . mock . calls . length ) , _UNKNOWN_ / 0 ) ; } ; _UNKNOWN_ ( ) ; } ) ; it ( 's' , done => { const result = [ { data : { } } ] ; const _UNKNOWN_ = jest . fn ( op => Observable . of ( result ) ) ; const link = ApolloLink . from ( [ new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ , } ) , ] ) ; [ 0 , 0 ] . forEach ( x => { execute ( link , { query , } ) . subscribe ( { next => { done . fail ( 's' ) ; } , error : _UNKNOWN_ ( done , error => { expect ( error ) . toBeDefined ( ) ; expect ( error . result ) . toEqual ( result ) ; } ) , complete : ( ) => { done . fail ( 's' ) ; } , } ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , done => { const data = { data : { } } ; const result = [ data , data ] ; const _UNKNOWN_ = jest . fn ( op => { try { expect ( op . length ) . toBe ( 0 ) ; } catch ( e ) { done . fail ( e ) ; } return Observable . of ( result ) ; } ) ; let key = true ; const _UNKNOWN_ = ( ) => { key = ! key ; return 's' + ! key ; } ; const link = ApolloLink . from ( [ new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ , _UNKNOWN_ , } ) , ] ) ; let count = 0 ; [ 0 , 0 , 0 , 0 ] . forEach ( x => { execute ( link , { query , } ) . subscribe ( { next : d => { try { expect ( d ) . toEqual ( data ) ; } catch ( e ) { done . fail ( e ) ; } } , error : done . fail , complete : ( ) => { count ++ ; if ( count === 0 ) { try { expect ( _UNKNOWN_ . mock . calls . length ) . toBe ( 0 ) ; done ( ) ; } catch ( e ) { done . fail ( e ) ; } } } , } ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $Error$ O O $ErrorConstructor$ O $number$ O O O O O O $void$ O O $any$ O $any$ O O O O O O $any[]$ O O O O O $any$ O O $any[]$ O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O $string$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $JSON$ O $complex$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O $MockedResponse[]$ O $any$ O O O O O $complex$ O O O $string$ O O $any$ O O O O O O O O $any$ O O $any[]$ O $any$ O O O O O O O $any$ O $any$ O O O $any[]$ O $any[]$ O $U[]$ O $any$ O O O $string$ O $string$ O $any$ O O O $MockedResponse[]$ O $complex$ O $string$ O O O O O $MockedResponse[]$ O $MockedResponse[]$ O $number$ O O O O O O $ErrorConstructor$ O O O O O O O O $any$ O $Error$ O O $MockedResponse[]$ O $any$ O O O O O O O $any$ O O $Error$ O O O O $ErrorConstructor$ O O O O O O O O $Error$ O O $any$ O $any$ O $Error$ O O O O $any$ O O O O $any$ O $any$ O $any[]$ O O O O O O O O $any$ O O O O $any$ O O $any$ O O O O O $string$ O $string$ O $any$ O $any$ O O O $MockedResponse[]$ O $complex$ O $string$ O O O O O $MockedResponse[]$ O O $MockedResponse[]$ O O O O $complex$ O $string$ O O $MockedResponse[]$ O O $MockedResponse[]$ O $number$ O $any$ O O O O $MockedResponse[]$ O $U[]$ O O $any$ O O O O $any$ O O O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O $any$ O O $number$ O O O $any$ O O O O O O O O O $any$ O $any[]$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O O $any$ O O $number$ O O O $any$ O O O O O O O O O O $string$ O O O O O O O O O $any$ O $any$ O $complex$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $complex$ O $any$ O O O O O $any$ O O O $any$ O $any[]$ O O O $any$ O $any$ O $complex$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $complex$ O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O O $any$ O O $number$ O O O $any$ O O O O O O O O O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $complex$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $complex$ O $any$ O O O O $number$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $complex$ O $any$ O O O O $number$ O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O O O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $complex$ O O O O O $complex$ O O $any$ O O $complex$ O O $complex$ O O O O O O O $Operation$ O $any$ O O O O O $any$ O O O O O $any$ O O O $any$ O O O $any$ O O $any$ O O $number$ O O O $any$ O O O O $any$ O $any$ O O $any$ O O O $any$ O $void$ O $any$ O $any$ O O $any$ O $any$ O $complex$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O $complex$ O O O O O O O O O $any[]$ O O O $any$ O $any$ O O O O O O O $any$ O $any[]$ O O O O O O $any$ O $any[]$ O $number$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $Operation$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $complex$ O O O O O $complex$ O O $any$ O O $complex$ O O $complex$ O O O O O O O $any$ O O $any$ O O $number$ O O O $number$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $boolean$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O $complex$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $boolean$ O O $any$ O O O O O O $boolean$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O $complex$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $boolean$ O O $any$ O O O O O O $boolean$ O O O O O O O O O $any$ O $any$ O $complex$ O $any$ O O O O $number$ O O $any$ O O O O O $any[]$ O O O $any$ O $any$ O O O O O O O $any$ O $any[]$ O O O O $any$ O $any$ O $complex$ O $any$ O O O O O $any$ O O O $any$ O $any[]$ O $number$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $complex$ O O O O O O $any$ O O $any$ O O $number$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $void$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $complex$ O O O O O O O O $any$ O $any[]$ O O O O O O O O O $any$ O O O $any$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O O $any$ O O $number$ O O O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O $complex$ O O O O $number$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O $Operation$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $complex$ O $any$ O O O O $number$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O $number$ O $void$ O $any$ O O O O O $any$ O $any$ O $complex$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O $complex$ O O $complex$ O O O O O O O O O O O O O O $any$ O O O $any$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $complex$ O O $string$ O O O $string$ O O O O O O $any$ O O $any$ O O $number$ O O O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O $complex$ O O O $complex$ O $complex$ O O O $complex$ O O O O $number$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O $Operation$ O $any$ O O O O O $any$ O O O O $Operation$ O $any$ O O O O O $any$ O O O O $Operation$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $complex$ O $any$ O O O O $number$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O $number$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $complex$ O $any$ O O O O $number$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O $number$ O $void$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O $complex$ O O $complex$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O $complex$ O O $complex$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O $complex$ O O $complex$ O O O O $any$ O $any$ O $complex$ O $any$ O O O O O $any$ O O O O O O O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $Operation$ O $any$ O O O O O $any$ O O O O $Error$ O O $ErrorConstructor$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $Error$ O O O O O $any$ O O $any$ O O $number$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $void$ O $void$ O $any$ O O $Error$ O O O $any$ O $Error$ O $string$ O O $any$ O O O O O O O O O O $any$ O $any[]$ O O O O O O O O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O $number$ O O O $number$ O O O $any$ O O $any[]$ O $any[]$ O O O O O $any$ O $any[]$ O $number$ O O $any$ O O O O $any$ O $any[]$ O $number$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any[]$ O O O O $any[]$ O O O O O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O $any$ O O $void$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $number$ O O O O $any$ O O $any$ O O $any$ O O $any[]$ O $any[]$ O O $any[]$ O O O O $any[]$ O O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O $void$ O $Console$ O $void$ O $Console$ O $void$ O $any$ O O $number$ O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $Console$ O $void$ O $any$ O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $Console$ O $void$ O $void$ O $any$ O $number$ O O $any$ O O O O O O O $any$ O O O $any$ O O O $number[]$ O O O O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O O $number$ O $number[]$ O $number$ O O O O O O $number$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $number$ O O $any$ O $any$ O $any$ O O $any$ O $number$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any[]$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O $number$ O $any$ O O O O $any[]$ O $number$ O $any$ O $any$ O O $any$ O $any$ O $any[]$ O O $any$ O $any$ O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $number$ O O O $number$ O $number$ O $any$ O O O O $any$ O O O O $ArrayConstructor$ O $complex$ O O $ArrayConstructor$ O $number$ O O O $void$ O O $any$ O $number$ O O O $any$ O $any$ O O $any$ O $complex$ O O $number$ O $number$ O O O O O $any$ O O $any$ O O $any$ O $any$ O O $any$ O $number$ O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O $void$ O O O O O O O O O O O O O $void$ O O O O O O $any$ O O O $any$ O O O $number[]$ O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $number$ O $number[]$ O $number$ O O O O O O $number$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $number$ O $number$ O O O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $number$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O $number$ O O O O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $number$ O O O O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $number$ O O O O O O $any$ O O O O O O $any$ O O O $any$ O O O $complex$ O O O ${}$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O O O O $any$ O $any$ O $any$ O O O $any$ O O $number$ O O O $number$ O O O $any$ O O O O O O O O O O O O O $void$ O $number$ O O $any$ O $any$ O O $any$ O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O O $void$ O $void$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O $complex$ O O ${}$ O O O O O O $complex$ O O $complex$ O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O O O O O O $boolean$ O O O O $string$ O O O O O $boolean$ O O $boolean$ O O O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O $any$ O O $number$ O O O $number$ O O O $any$ O $string$ O O O O O O O O $number$ O O O O O O O O O O O O O $void$ O $number$ O O $any$ O $any$ O O $any$ O O O O $any$ O O $void$ O $any$ O O O O $any$ O $any$ O O $any$ O $complex$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $void$ O O O O O $number$ O O O O $number$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { ApolloLink , Operation , FetchResult , Observable , _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ } from 's' ; export namespace _UNKNOWN_ { export interface Options extends _UNKNOWN_ { _UNKNOWN_ ? : number ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : ( Operation ) => string ; } } export class _UNKNOWN_ extends ApolloLink { private _UNKNOWN_ : number ; private _UNKNOWN_ : number ; private _UNKNOWN_ : ApolloLink ; constructor ( _UNKNOWN_ : _UNKNOWN_ . Options = { } ) { super ( ) ; let { uri = 's' , fetch : fetcher , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ... requestOptions } = _UNKNOWN_ ; _UNKNOWN_ ( fetcher ) ; if ( ! fetcher ) { fetcher = fetch ; } const _UNKNOWN_ = { http : { _UNKNOWN_ } , options : requestOptions . fetchOptions , credentials : requestOptions . credentials , headers : requestOptions . headers , } ; this . _UNKNOWN_ = _UNKNOWN_ || 0 ; this . _UNKNOWN_ = _UNKNOWN_ || 0 ; const _UNKNOWN_ = ( operations : Operation [ ] ) => { const _UNKNOWN_ = _UNKNOWN_ ( operations [ 0 ] , uri ) ; const context = operations [ 0 ] . getContext ( ) ; const _UNKNOWN_ = { http : context . http , options : context . fetchOptions , credentials : context . credentials , headers : context . headers , } ; const _UNKNOWN_ = operations . map ( operation => _UNKNOWN_ ( operation , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ) , ) ; const body = _UNKNOWN_ . map ( ( { body } ) => body ) ; const options = _UNKNOWN_ [ 0 ] . options ; if ( options . method === 's' ) { return _UNKNOWN_ < FetchResult [ ] > ( new Error ( 's' ) , ) ; } try { ( options as any ) . body = _UNKNOWN_ ( body , 's' ) ; } catch ( parseError ) { return _UNKNOWN_ < FetchResult [ ] > ( parseError ) ; } const { controller , signal } = _UNKNOWN_ ( ) ; if ( controller ) ( options as any ) . signal = signal ; return new Observable < FetchResult [ ] > ( observer => { fetcher ( _UNKNOWN_ , options ) . then ( _UNKNOWN_ ( operations ) ) . then ( result => { observer . next ( result ) ; observer . complete ( ) ; return result ; } ) . catch ( err => { if ( err . name === 's' ) return ; if ( err . result && err . result . errors && err . result . data ) { observer . next ( err . result ) ; } observer . error ( err ) ; } ) ; return ( ) => { if ( controller ) controller . abort ( ) ; } ; } ) ; } ; _UNKNOWN_ = _UNKNOWN_ || ( ( operation ) => { const context = operation . getContext ( ) ; const _UNKNOWN_ = { http : context . http , options : context . fetchOptions , credentials : context . credentials , headers : context . headers , } ; return _UNKNOWN_ ( operation , uri ) + JSON . stringify ( _UNKNOWN_ ) ; } ) ; this . _UNKNOWN_ = new _UNKNOWN_ ( { _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } ) ; } public request ( operation ) : Observable < FetchResult > | null { return this . _UNKNOWN_ . request ( operation ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O $number$ O O O O $number$ O O O O $string$ O O O $any$ O O O O O O O O $any$ O $any$ O O $number$ O O O O $number$ O O O O $any$ O $any$ O O O $Options$ O $any$ O $any$ O O O O O O O O O O O $any$ O O O $any$ O $any$ O $any$ O $number$ O $number$ O $string$ O O ${}$ O O $Options$ O $any$ O $any$ O O O O O $any$ O O $any$ O $Promise<Response>$ O O O $complex$ O O $complex$ O O $any$ O O $any$ O ${}$ O $any$ O $any$ O ${}$ O $any$ O $any$ O ${}$ O $any$ O O O O O $number$ O $number$ O O O O O $number$ O $number$ O O O O $any$ O O $any[]$ O $any$ O O O O O O $any$ O $any$ O $any[]$ O O O O $any$ O O O $any$ O $any[]$ O O O O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any[]$ O $any[]$ O $U[]$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $complex$ O O O O O O $any[]$ O $any[]$ O $U[]$ O O O $any$ O O O $any$ O O O $any$ O $any[]$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O O O O O $any$ O O O O $any$ O $any$ O $any[]$ O O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any[]$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O $string$ O $string$ O O O $Operation$ O O O O $any$ O $any$ O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $JSON$ O $complex$ O $complex$ O O O O O O O $any$ O O $any$ O O $number$ O O O $number$ O $number$ O O O $number$ O $string$ O $any$ O O O O O O $any$ O $Operation$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O
<s> import { ApolloLink , execute , Observable , _UNKNOWN_ } from 's' ; import { print } from 's' ; import * as fetchMock from 's' ; import gql from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = `template` ; const operation = { query : `template` , } ; describe ( 's' , ( ) => { _UNKNOWN_ ( 's' , _UNKNOWN_ => { const args = { ... _UNKNOWN_ , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , } ; return new _UNKNOWN_ ( args ) ; } , true , ) ; beforeAll ( ( ) => { jest . _UNKNOWN_ ( ) ; } ) ; const data = { data : { hello : 's' } } ; const 0 = { data : { hello : 's' } } ; const _UNKNOWN_ = { data : { _UNKNOWN_ : 's' } } ; const _UNKNOWN_ = { data : { _UNKNOWN_ : 's' } } ; const _UNKNOWN_ = res => new Promise ( ( resolve , reject ) => setTimeout ( ( ) => resolve ( res ) ) ) ; let subscriber ; beforeEach ( ( ) => { fetchMock . restore ( ) ; fetchMock . post ( 's' , _UNKNOWN_ ( [ data , 0 ] ) ) ; fetchMock . post ( 's' , _UNKNOWN_ ( [ _UNKNOWN_ , _UNKNOWN_ ] ) ) ; fetchMock . post ( 's' , _UNKNOWN_ ( [ _UNKNOWN_ , _UNKNOWN_ ] ) ) ; const next = jest . fn ( ) ; const error = jest . fn ( ) ; const complete = jest . fn ( ) ; subscriber = { next , error , complete , } ; } ) ; it ( 's' , ( ) => { expect ( ( ) => new _UNKNOWN_ ( ) ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { jest . mock ( 's' , ( ) => ( { _UNKNOWN_ : jest . fn ( ) , } ) ) ; const _UNKNOWN_ = require ( 's' ) . _UNKNOWN_ ; const _UNKNOWN_ = require ( 's' ) . _UNKNOWN_ ; const _UNKNOWN_ = ( ) => 's' ; const _UNKNOWN_ = operations => Observable . of ( ) ; const batch = new _UNKNOWN_ ( { _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ , _UNKNOWN_ , } ) ; const { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , } = _UNKNOWN_ . mock . calls [ 0 ] [ 0 ] ; expect ( _UNKNOWN_ ) . toBe ( 0 ) ; expect ( _UNKNOWN_ ) . toBe ( 0 ) ; expect ( _UNKNOWN_ ( ) ) . toEqual ( _UNKNOWN_ ( ) ) ; } ) ; it ( 's' , done => { const link = new _UNKNOWN_ ( { uri : 's' , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , } ) ; let _UNKNOWN_ = 0 ; let completions = 0 ; const next = _UNKNOWN_ => data => { try { expect ( data ) . toEqual ( _UNKNOWN_ ) ; _UNKNOWN_ ++ ; } catch ( error ) { done . fail ( error ) ; } } ; const complete = ( ) => { try { const calls = fetchMock . calls ( 's' ) ; expect ( calls . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ ) . toBe ( 0 ) ; const options = fetchMock . _UNKNOWN_ ( 's' ) ; expect ( options . credentials ) . toEqual ( 's' ) ; completions ++ ; if ( completions === 0 ) { done ( ) ; } } catch ( error ) { done . fail ( error ) ; } } ; const error = error => { done . fail ( error ) ; } ; execute ( link , { query : _UNKNOWN_ , context : { credentials : 's' } , } ) . subscribe ( next ( data ) , error , complete ) ; execute ( link , { query : _UNKNOWN_ , context : { credentials : 's' } , } ) . subscribe ( next ( 0 ) , error , complete ) ; } ) ; it ( 's' , done => { const link = new _UNKNOWN_ ( { uri : 's' , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , } ) ; let errors = 0 ; const next = data => { done . fail ( 's' ) ; } ; const complete = ( ) => { done . fail ( 's' ) ; } ; const error = error => { errors ++ ; if ( errors === 0 ) { done ( ) ; } } ; execute ( link , { query : _UNKNOWN_ } ) . subscribe ( next , error , complete ) ; execute ( link , { query : _UNKNOWN_ } ) . subscribe ( next , error , complete ) ; execute ( link , { query : _UNKNOWN_ } ) . subscribe ( next , error , complete ) ; } ) ; describe ( 's' , ( ) => { const query = `template` ; it ( 's' , done => { let key = true ; const _UNKNOWN_ = ( ) => { key = ! key ; return 's' + ! key ; } ; const link = ApolloLink . from ( [ new _UNKNOWN_ ( { uri => { return operation . variables . endpoint ; } , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ , } ) , ] ) ; let count = 0 ; const next = expected => _UNKNOWN_ => { try { expect ( _UNKNOWN_ ) . toEqual ( expected ) ; } catch ( e ) { done . fail ( e ) ; } } ; const complete = ( ) => { count ++ ; if ( count === 0 ) { try { const _UNKNOWN_ = fetchMock . calls ( 's' ) ; expect ( _UNKNOWN_ . length ) . toBe ( 0 ) ; const _UNKNOWN_ = fetchMock . calls ( 's' ) ; expect ( _UNKNOWN_ . length ) . toBe ( 0 ) ; done ( ) ; } catch ( e ) { done . fail ( e ) ; } } } ; [ 0 , 0 ] . forEach ( x => { execute ( link , { query , variables : { endpoint : 's' } , } ) . subscribe ( { next : next ( _UNKNOWN_ ) , error : done . fail , complete , } ) ; execute ( link , { query , variables : { endpoint : 's' } , } ) . subscribe ( { next : next ( _UNKNOWN_ ) , error : done . fail , complete , } ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O O $void$ O O O O O O $any$ O O O O O $any$ O O O O $complex$ O O $any$ O O O O O $any$ O O O O O O O $void$ O O O $any$ O O O $any$ O O O $any$ O $number$ O O O $number$ O O O O O O O $any$ O $any$ O O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O $Promise<unknown>$ O $any$ O O $PromiseConstructor$ O O $void$ O $void$ O O $number$ O O O O $void$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $Promise<unknown>$ O O $complex$ O $complex$ O O O O $any$ O $any$ O O O $Promise<unknown>$ O O $complex$ O $complex$ O O O O $any$ O $any$ O O O $Promise<unknown>$ O O $complex$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O $number$ O O O $number$ O O O $string$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O $any$ O $string$ O O O O O O O $any$ O O O $any$ O O O $any$ O O $any$ O O $string$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O O $number$ O O O O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O $number$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $number$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $number$ O O O O $number$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $string$ O O O O O O O $any$ O $void$ O $complex$ O O $void$ O $void$ O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $string$ O O O O O O O $any$ O $void$ O $complex$ O O $void$ O $void$ O O O O O $any$ O O O $any$ O O O $any$ O O $any$ O O $string$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O O $void$ O $any$ O O $any$ O $any$ O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O O $void$ O $any$ O O $number$ O O O O $number$ O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $void$ O $void$ O $void$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $void$ O $void$ O $void$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $void$ O $void$ O $void$ O O O O O $any$ O O O O O O O O $any$ O O O $any$ O O O $any$ O O O $boolean$ O O O O $string$ O O O O O $boolean$ O O $boolean$ O O O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O $number$ O O O $number$ O O O $string$ O O O O O O O O $number$ O O O O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O $number$ O O O O $number$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O $void$ O $number$ O O $any$ O $any$ O O $any$ O $complex$ O O $string$ O O O O O O O $any$ O O $void$ O $void$ O $complex$ O O $any$ O $any$ O $any$ O $void$ O O O O $any$ O $any$ O O $any$ O $complex$ O O $string$ O O O O O O O $any$ O O $void$ O $void$ O $complex$ O O $any$ O $any$ O $any$ O $void$ O O O O O O O O O O O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { ApolloLink , Observable , Operation , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; export type _UNKNOWN_ = ( operation , _UNKNOWN_ , ) => Promise < any > | any ; export const _UNKNOWN_ = ( setter ) : ApolloLink => new ApolloLink ( ( operation , forward ) => { const { ... request } = operation ; return new Observable ( observer => { let handle ; Promise . resolve ( request ) . then ( req => setter ( req , operation . getContext ( ) ) ) . then ( operation . _UNKNOWN_ ) . then ( ( ) => { handle = forward ( operation ) . subscribe ( { next : observer . next . bind ( observer ) , error : observer . error . bind ( observer ) , complete : observer . complete . bind ( observer ) , } ) ; } ) . catch ( observer . error . bind ( observer ) ) ; return ( ) => { if ( handle ) handle . unsubscribe ( ) ; } ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O $PromiseConstructor$ O O O O O O O O $any$ O O $any$ O O $any$ O O $any$ O O $Operation$ O $any$ O O O O O O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O $PromiseConstructor$ O $complex$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $complex$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O
<s> import gql from 's' ; import { ApolloLink , execute , Observable } from 's' ; import { _UNKNOWN_ } from 's' ; const sleep = ms => new Promise ( s => setTimeout ( s , ms ) ) ; const query = `template` ; const data = { foo : { bar : true } , } ; it ( 's' , done => { const _UNKNOWN_ = _UNKNOWN_ ( ( ) => ( { _UNKNOWN_ : true } ) ) ; const _UNKNOWN_ = new ApolloLink ( operation => { expect ( operation . getContext ( ) . _UNKNOWN_ ) . toBe ( true ) ; return Observable . of ( { data } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( result => { expect ( result . data ) . toEqual ( data ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const _UNKNOWN_ = _UNKNOWN_ ( ( ) => Promise . resolve ( { _UNKNOWN_ : true } ) , ) ; const _UNKNOWN_ = new ApolloLink ( operation => { expect ( operation . getContext ( ) . _UNKNOWN_ ) . toBe ( true ) ; return Observable . of ( { data } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( result => { expect ( result . data ) . toEqual ( data ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const _UNKNOWN_ = _UNKNOWN_ ( ( ) => sleep ( 0 ) . then ( ( ) => ( { _UNKNOWN_ : true } ) ) , ) ; const _UNKNOWN_ = new ApolloLink ( operation => { expect ( operation . getContext ( ) . _UNKNOWN_ ) . toBe ( true ) ; return Observable . of ( { data } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( result => { expect ( result . data ) . toEqual ( data ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const _UNKNOWN_ = _UNKNOWN_ ( ( ) => sleep ( 0 ) . then ( ( ) => { throw new Error ( 's' ) ; } ) , ) ; const _UNKNOWN_ = new ApolloLink ( operation => { return Observable . of ( { data } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( done . fail , e => { expect ( e . message ) . toBe ( 's' ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const _UNKNOWN_ = _UNKNOWN_ ( ( ) => { throw new Error ( 's' ) ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { return Observable . of ( { data } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( done . fail , e => { expect ( e . message ) . toBe ( 's' ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const _UNKNOWN_ = _UNKNOWN_ ( ( { operationName , query , variables } ) => sleep ( 0 ) . then ( ( ) => Promise . resolve ( { variables : variables ? true : false , operation : query ? true : false , operationName : operationName . toUpperCase ( ) , } ) , ) , ) ; const _UNKNOWN_ = new ApolloLink ( operation => { const { variables , operation , operationName } = operation . getContext ( ) ; expect ( variables ) . toBe ( true ) ; expect ( operation ) . toBe ( true ) ; expect ( operationName ) . toBe ( 's' ) ; return Observable . of ( { data } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query , variables : { id : 0 } } ) . subscribe ( result => { expect ( result . data ) . toEqual ( data ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const _UNKNOWN_ = _UNKNOWN_ ( ( _ , { count } ) => sleep ( 0 ) . then ( ( ) => ( { count : count + 0 } ) ) , ) ; const _UNKNOWN_ = new ApolloLink ( operation => { const { count } = operation . getContext ( ) ; expect ( count ) . toEqual ( 0 ) ; return Observable . of ( { data } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query , context : { count : 0 } } ) . subscribe ( result => { expect ( result . data ) . toEqual ( data ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const _UNKNOWN_ = _UNKNOWN_ ( ( _ , { count } ) => sleep ( 0 ) . then ( ( ) => ( { count : count + 0 } ) ) , ) ; const _UNKNOWN_ = new ApolloLink ( operation => { const { count } = operation . getContext ( ) ; expect ( count ) . toEqual ( 0 ) ; return Observable . of ( { data } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; let handle = execute ( link , { query , context : { count : 0 } , } ) . subscribe ( result => { expect ( result . data ) . toEqual ( data ) ; handle . unsubscribe ( ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { let called ; const _UNKNOWN_ = _UNKNOWN_ ( ( _ , { count } ) => { called = true ; return sleep ( 0 ) . then ( ( ) => ( { count : count + 0 } ) ) ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { const { count } = operation . getContext ( ) ; expect ( count ) . toEqual ( 0 ) ; return new Observable ( obs => { setTimeout ( ( ) => { obs . next ( { data } ) ; obs . complete ( ) ; } , 0 ) ; } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; let handle = execute ( link , { query , context : { count : 0 } , } ) . subscribe ( result => { done . fail ( 's' ) ; } ) ; setTimeout ( ( ) => { handle . unsubscribe ( ) ; expect ( called ) . toBe ( true ) ; done ( ) ; } , 0 ) ; } ) ; </s>	O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $Promise<unknown>$ O $any$ O O $PromiseConstructor$ O $void$ O $number$ O $void$ O $any$ O O O O $any$ O O O O $complex$ O O $complex$ O O $boolean$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O $boolean$ O O O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O $any$ O $any$ O O $complex$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O $true$ O O O O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O $any$ O $any$ O O $complex$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $Promise<unknown>$ O O O O O O O O O O O $true$ O O O O O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O $any$ O $any$ O O $complex$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $Promise<unknown>$ O O O O O O O O O O O O $ErrorConstructor$ O O O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $complex$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O O $ErrorConstructor$ O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $complex$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $Promise<unknown>$ O O O O O O O O O $PromiseConstructor$ O $complex$ O O $boolean$ O $any$ O O O O O $boolean$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O $complex$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $complex$ O O $number$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O $Promise<unknown>$ O O O O O O O O O O O $any$ O $any$ O O O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O $complex$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $complex$ O O $number$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O $Promise<unknown>$ O O O O O O O O O O O $any$ O $any$ O O O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O $complex$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $number$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $any$ O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O O $any$ O $any$ O O $any$ O O $any$ O O O O $any$ O O O O $Promise<unknown>$ O O O O O O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O O $number$ O O O O O $any$ O $any$ O O $complex$ O O O $any$ O $any$ O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $number$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O $number$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O O O
<s> import { ApolloLink , Operation , _UNKNOWN_ , FetchResult , Observable , } from 's' ; export class _UNKNOWN_ extends ApolloLink { private _UNKNOWN_ : Map < string , Observable < FetchResult > > = new Map ( ) ; private _UNKNOWN_ : Map < string , any > = new Map ( ) ; public request ( operation , forward , ) < FetchResult > { if ( operation . getContext ( ) . _UNKNOWN_ ) { return forward ( operation ) ; } const key = operation . _UNKNOWN_ ( ) ; const cleanup = key => { this . _UNKNOWN_ . delete ( key ) ; const prev = this . _UNKNOWN_ . get ( key ) ; return prev ; } ; if ( ! this . _UNKNOWN_ . get ( key ) ) { const _UNKNOWN_ = forward ( operation ) ; let subscription ; const _UNKNOWN_ = new Observable ( observer => { let prev = this . _UNKNOWN_ . get ( key ) ; if ( ! prev ) prev = { next : [ ] , error : [ ] , complete : [ ] } ; this . _UNKNOWN_ . set ( key , { next : prev . next . concat ( [ observer . next . bind ( observer ) ] ) , error : prev . error . concat ( [ observer . error . bind ( observer ) ] ) , complete : prev . complete . concat ( [ observer . complete . bind ( observer ) ] ) , } ) ; if ( ! subscription ) { subscription = _UNKNOWN_ . subscribe ( { next => { const prev = cleanup ( key ) ; this . _UNKNOWN_ . delete ( key ) ; if ( prev ) { prev . next . forEach ( next => next ( result ) ) ; prev . complete . forEach ( complete => complete ( ) ) ; } } , error => { const prev = cleanup ( key ) ; this . _UNKNOWN_ . delete ( key ) ; if ( prev ) prev . error . forEach ( err => err ( error ) ) ; } , } ) ; } return ( ) => { if ( subscription ) subscription . unsubscribe ( ) ; this . _UNKNOWN_ . delete ( key ) ; } ; } ) ; this . _UNKNOWN_ . set ( key , _UNKNOWN_ ) ; } return this . _UNKNOWN_ . get ( key ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O $complex$ O $MapConstructor$ O O O $any$ O $any$ O O O O $MapConstructor$ O O O O $complex$ O $MapConstructor$ O O O O O O O $MapConstructor$ O O O O $Observable$ O $Operation$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $complex$ O $boolean$ O $any$ O O O $any$ O O O $complex$ O $any$ O $any$ O O O $any$ O O O O O O O O $complex$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O $any$ O $any$ O O O $any$ O O O $complex$ O $any$ O $any$ O O O O O $any$ O $any$ O O $undefined[]$ O O O O $undefined[]$ O O O O $undefined[]$ O O O O O O O $complex$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $result$ O O O $any$ O $any$ O $any$ O O O O $complex$ O $boolean$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $complex$ O $boolean$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O O O $complex$ O $boolean$ O $any$ O O O O O O O O O $complex$ O $complex$ O $any$ O $any$ O O O O O O $complex$ O $any$ O $any$ O O O O O
<s> import { ApolloLink , execute , Operation , _UNKNOWN_ , Observable , } from 's' ; import gql from 's' ; import { DocumentNode } from 's' ; import { _UNKNOWN_ } from 's' ; function _UNKNOWN_ ( doc ) : string | null { let res : string | null = null ; doc . definitions . forEach ( definition => { if ( definition . kind === 's' && definition . name ) { res = definition . name . value ; } } ) ; return res ; } describe ( 's' , ( ) => { it ( `template` , ( ) => { const document = `template` ; const 0 = { x : 's' } ; const 0 = { x : 's' } ; const 0 = { query : document , variables : 0 , operationName : _UNKNOWN_ ( document ) , } ; const 0 = { query : document , variables : 0 , operationName : _UNKNOWN_ ( document ) , } ; let called = 0 ; const _UNKNOWN_ = ApolloLink . from ( [ new _UNKNOWN_ ( ) , new ApolloLink ( ( ) => { called += 0 ; return null ; } ) , ] ) ; execute ( _UNKNOWN_ , 0 ) ; execute ( _UNKNOWN_ , 0 ) ; expect ( called ) . toBe ( 0 ) ; } ) ; it ( `template` , done => { const document = `template` ; const variables = { x : 's' } ; let error ; const data = { data : 's' } ; const request = { query : document , variables : variables , operationName : _UNKNOWN_ ( document ) , } ; let called = 0 ; const _UNKNOWN_ = ApolloLink . from ( [ new _UNKNOWN_ ( ) , new ApolloLink ( ( ) => { called += 0 ; switch ( called ) { case 0 : return new Observable ( observer => { error = new Error ( 's' ) ; observer . error ( error ) ; } ) ; case 0 : return new Observable ( observer => { observer . next ( data ) ; observer . complete ( ) ; } ) ; default : expect ( false ) ; return null ; } } ) , ] ) ; try { execute ( _UNKNOWN_ , request ) . subscribe ( { error => { expect ( _UNKNOWN_ ) . toEqual ( error ) ; execute ( _UNKNOWN_ , request ) . subscribe ( { next => { expect ( result ) . toEqual ( data ) ; expect ( called ) . toBe ( 0 ) ; done ( ) ; } , } ) ; } , } ) ; } catch ( e ) { done . fail ( e ) ; } } ) ; it ( `template` , ( ) => { const document = `template` ; const 0 = { x : 's' } ; const 0 = { x : 's' } ; const 0 = { query : document , variables : 0 , operationName : _UNKNOWN_ ( document ) , } ; const 0 = { query : document , variables : 0 , operationName : _UNKNOWN_ ( document ) , } ; let called = 0 ; const _UNKNOWN_ = ApolloLink . from ( [ new _UNKNOWN_ ( ) , new ApolloLink ( ( ) => { return new Observable ( observer => { called += 0 ; setTimeout ( observer . complete . bind ( observer ) ) ; } ) ; } ) , ] ) ; execute ( _UNKNOWN_ , 0 ) . subscribe ( { } ) ; execute ( _UNKNOWN_ , 0 ) . subscribe ( { } ) ; expect ( called ) . toBe ( 0 ) ; } ) ; it ( `template` , done => { const document = `template` ; const 0 = { x : 's' } ; const 0 = { x : 's' } ; const 0 = { query : document , variables : 0 , operationName : _UNKNOWN_ ( document ) , } ; const 0 = { query : document , variables : 0 , operationName : _UNKNOWN_ ( document ) , } ; let called = 0 ; const _UNKNOWN_ = ApolloLink . from ( [ new _UNKNOWN_ ( ) , new ApolloLink ( ( ) => { return new Observable ( observer => { called += 0 ; observer . next ( { data : { test : 0 } } ) ; } ) ; } ) , ] ) ; execute ( _UNKNOWN_ , 0 ) . subscribe ( { complete : ( ) => { execute ( _UNKNOWN_ , 0 ) . subscribe ( { complete : ( ) => { expect ( called ) . toBe ( 0 ) ; done ( ) ; } , } ) ; } , } ) ; } ) ; it ( `template` , ( ) => { const document = `template` ; const 0 = { x : 's' } ; const 0 = { x : 's' } ; const 0 = { query : document , variables : 0 , operationName : _UNKNOWN_ ( document ) , context : { _UNKNOWN_ : true , } , } ; const 0 = { query : document , variables : 0 , operationName : _UNKNOWN_ ( document ) , context : { _UNKNOWN_ : true , } , } ; let called = 0 ; const _UNKNOWN_ = ApolloLink . from ( [ new _UNKNOWN_ ( ) , new ApolloLink ( ( ) => { called += 0 ; return null ; } ) , ] ) ; execute ( _UNKNOWN_ , 0 ) . subscribe ( { } ) ; execute ( _UNKNOWN_ , 0 ) . subscribe ( { } ) ; expect ( called ) . toBe ( 0 ) ; } ) ; it ( `template` , ( ) => { const document = `template` ; const 0 = { x : 's' } ; const 0 = { x : 's' } ; const 0 = { query : document , variables : 0 , operationName : _UNKNOWN_ ( document ) , } ; const 0 = { query : document , variables : 0 , operationName : _UNKNOWN_ ( document ) , } ; let _UNKNOWN_ = false ; const _UNKNOWN_ = ApolloLink . from ( [ new _UNKNOWN_ ( ) , new ApolloLink ( ( ) => { return new Observable ( ( ) => { return ( ) => { _UNKNOWN_ = true ; } ; } ) ; } ) , ] ) ; const 0 = execute ( _UNKNOWN_ , 0 ) . subscribe ( { } ) ; const 0 = execute ( _UNKNOWN_ , 0 ) . subscribe ( { } ) ; 0 . unsubscribe ( ) ; 0 . unsubscribe ( ) ; expect ( _UNKNOWN_ ) . toBe ( true ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $string$ O $DocumentNode$ O O O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O $string$ O $any$ O $any$ O $any$ O O O O O O $string$ O O $any$ O O O O O O O $any$ O O O O O O O O $DocumentNode$ O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O O O O $number$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O $number$ O O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $number$ O O $any$ O O O O O O O $any$ O O O $any$ O O O $DocumentNode$ O O O O $complex$ O O $string$ O O O O O $any$ O O $complex$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O O O O $number$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O $number$ O O O O O $number$ O O O O O O O $any$ O $any$ O O $any$ O O $ErrorConstructor$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $result$ O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $number$ O O $any$ O O O O $any$ O O O O O O O O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $DocumentNode$ O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O O O O $number$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O $number$ O O O $number$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $number$ O O $any$ O O O O O O O $any$ O O O $any$ O O O $DocumentNode$ O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O O O O $number$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O $number$ O O O $any$ O $any$ O O $complex$ O O $number$ O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O $void$ O O O O O $any$ O $any$ O $any$ O O $any$ O O $void$ O O O O O $any$ O $number$ O O $any$ O O O O $any$ O O O O O O O O O O O O O O O O $any$ O O O O O O O O $DocumentNode$ O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O $complex$ O O $boolean$ O O O O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O $complex$ O O $boolean$ O O O O O O O O $number$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O $number$ O O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $number$ O O $any$ O O O O O O O $any$ O O O O O O O O $DocumentNode$ O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O $string$ O $string$ O $any$ O O O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O O O $boolean$ O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $false$ O O $any$ O O O O O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { ApolloLink , Observable , Operation } from 's' ; import { _UNKNOWN_ , ExecutionResult } from 's' ; export interface _UNKNOWN_ { _UNKNOWN_ ? : _UNKNOWN_ [ ] ; _UNKNOWN_ ? : Error ; response ? : ExecutionResult ; operation : Operation ; } export namespace _UNKNOWN_ { export interface ErrorHandler { ( error ) : void ; } } export import ErrorHandler = _UNKNOWN_ . ErrorHandler ; export const onError = ( errorHandler ) : ApolloLink => { return new ApolloLink ( ( operation , forward ) => { return new Observable ( observer => { let sub ; try { sub = forward ( operation ) . subscribe ( { next => { if ( result . errors ) { errorHandler ( { _UNKNOWN_ : result . errors , response : result , operation , } ) ; } observer . next ( result ) ; } , error => { errorHandler ( { operation , _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ . result && _UNKNOWN_ . result . errors , } ) ; observer . error ( _UNKNOWN_ ) ; } , complete : observer . complete . bind ( observer ) , } ) ; } catch ( e ) { errorHandler ( { _UNKNOWN_ : e , operation } ) ; observer . error ( e ) ; } return ( ) => { if ( sub ) sub . unsubscribe ( ) ; } ; } ) ; } ) ; } ; export class _UNKNOWN_ extends ApolloLink { private link : ApolloLink ; constructor ( errorHandler : _UNKNOWN_ . ErrorHandler ) { super ( ) ; this . link = onError ( errorHandler ) ; } public request ( operation , forward ) : Observable < ExecutionResult > | null { return this . link . request ( operation , forward ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any[]$ O O $any$ O O O $Error$ O O $ErrorConstructor$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $result$ O O O O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O
<s> import gql from 's' ; import { ApolloLink , execute , Observable } from 's' ; import { onError , _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = onError ( ( { _UNKNOWN_ , _UNKNOWN_ } ) => { expect ( _UNKNOWN_ [ 0 ] . message ) . toBe ( 's' ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => Observable . of ( { errors : [ { message : 's' , } , ] , } ) , ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( result => { expect ( result . errors [ 0 ] . message ) . toBe ( 's' ) ; expect ( called ) . toBe ( true ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = onError ( ( { operation , _UNKNOWN_ } ) => { expect ( _UNKNOWN_ . message ) . toBe ( 's' ) ; expect ( operation . operationName ) . toBe ( 's' ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { throw new Error ( 's' ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( { error : e => { expect ( e . message ) . toBe ( 's' ) ; expect ( called ) . toBe ( true ) ; done ( ) ; } , } ) ; } ) ; it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = onError ( ( { operation , _UNKNOWN_ } ) => { expect ( _UNKNOWN_ . message ) . toBe ( 's' ) ; expect ( operation . operationName ) . toBe ( 's' ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { return new Observable ( obs => { throw new Error ( 's' ) ; } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( { error : e => { expect ( e . message ) . toBe ( 's' ) ; expect ( called ) . toBe ( true ) ; done ( ) ; } , } ) ; } ) ; it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = onError ( ( { _UNKNOWN_ , _UNKNOWN_ } ) => { expect ( _UNKNOWN_ . message ) . toBe ( 's' ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { return Observable . of ( { data : { foo : { id : 0 } } } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( { complete : done , } ) ; } ) ; it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = onError ( ( { _UNKNOWN_ , response } ) => { expect ( _UNKNOWN_ [ 0 ] . message ) . toBe ( 's' ) ; response . errors = null ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { return Observable . of ( { data : { foo : { id : 0 } } , errors : [ { message : 's' } ] , } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( { next : ( { errors , data } ) => { expect ( errors ) . toBe ( null ) ; expect ( data ) . toEqual ( { foo : { id : 0 } } ) ; } , complete : done , } ) ; } ) ; it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = onError ( ( { _UNKNOWN_ } ) => { expect ( _UNKNOWN_ . message ) . toBe ( 's' ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { return new Observable ( obs => { setTimeout ( ( ) => { obs . next ( { data : { foo : { id : 0 } } } ) ; obs . complete ( ) ; } , 0 ) ; } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; const sub = execute ( link , { query } ) . subscribe ( { complete : ( ) => { done . fail ( 's' ) ; } , } ) ; sub . unsubscribe ( ) ; setTimeout ( done , 0 ) ; } ) ; it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = onError ( ( { _UNKNOWN_ , response , operation } ) => { expect ( _UNKNOWN_ [ 0 ] . message ) . toBe ( 's' ) ; expect ( response . data . foo ) . toBe ( true ) ; expect ( operation . operationName ) . toBe ( 's' ) ; expect ( operation . getContext ( ) . bar ) . toBe ( true ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => Observable . of ( { data : { foo : true } , errors : [ { message : 's' , } , ] , } ) , ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query , context : { bar : true } } ) . subscribe ( result => { expect ( result . errors [ 0 ] . message ) . toBe ( 's' ) ; expect ( called ) . toBe ( true ) ; done ( ) ; } ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = new _UNKNOWN_ ( ( { _UNKNOWN_ , _UNKNOWN_ } ) => { expect ( _UNKNOWN_ [ 0 ] . message ) . toBe ( 's' ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => Observable . of ( { errors : [ { message : 's' , } , ] , } ) , ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( result => { expect ( result . errors [ 0 ] . message ) . toBe ( 's' ) ; expect ( called ) . toBe ( true ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = new _UNKNOWN_ ( ( { _UNKNOWN_ } ) => { expect ( _UNKNOWN_ . message ) . toBe ( 's' ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { throw new Error ( 's' ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( { error : e => { expect ( e . message ) . toBe ( 's' ) ; expect ( called ) . toBe ( true ) ; done ( ) ; } , } ) ; } ) ; it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = new _UNKNOWN_ ( ( { _UNKNOWN_ } ) => { expect ( _UNKNOWN_ . message ) . toBe ( 's' ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { return new Observable ( obs => { throw new Error ( 's' ) ; } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( { error : e => { expect ( e . message ) . toBe ( 's' ) ; expect ( called ) . toBe ( true ) ; done ( ) ; } , } ) ; } ) ; it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = new _UNKNOWN_ ( ( { _UNKNOWN_ } ) => { expect ( _UNKNOWN_ . message ) . toBe ( 's' ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { return Observable . of ( { data : { foo : { id : 0 } } } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; execute ( link , { query } ) . subscribe ( { complete : done , } ) ; } ) ; it ( 's' , done => { const query = `template` ; let called ; const _UNKNOWN_ = new _UNKNOWN_ ( ( { _UNKNOWN_ } ) => { expect ( _UNKNOWN_ . message ) . toBe ( 's' ) ; called = true ; } ) ; const _UNKNOWN_ = new ApolloLink ( operation => { return new Observable ( obs => { setTimeout ( ( ) => { obs . next ( { data : { foo : { id : 0 } } } ) ; obs . complete ( ) ; } , 0 ) ; } ) ; } ) ; const link = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; const sub = execute ( link , { query } ) . subscribe ( { complete : ( ) => { done . fail ( 's' ) ; } , } ) ; sub . unsubscribe ( ) ; setTimeout ( done , 0 ) ; } ) ; } ) ; </s>	O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O $any[]$ O $Error$ O O O O $any$ O $any[]$ O O O O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O O $string$ O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O $Error$ O O O O $any$ O $Error$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O O $void$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O $Error$ O O O O $any$ O $Error$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O $ErrorConstructor$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O O $void$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O $any[]$ O $Error$ O O O O $any$ O $Error$ O $string$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $complex$ O O $complex$ O O $number$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O $any[]$ O $any$ O O O O $any$ O $any[]$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $complex$ O O $complex$ O O $number$ O O O O O $complex$ O O O $string$ O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O O $void$ O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O $complex$ O O $number$ O O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O $Error$ O O O O $any$ O $Error$ O $string$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O $number$ O O O O O $any$ O $any$ O O $complex$ O O $complex$ O O $number$ O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O $void$ O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O $number$ O $any$ O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O $any[]$ O $any$ O $any$ O O O O $any$ O $any[]$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $boolean$ O O O O $complex$ O O O $string$ O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $complex$ O O $boolean$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O O $any$ O O O $any[]$ O $Error$ O O O O $any$ O $any[]$ O O O O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O O $string$ O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O O $any$ O O O $Error$ O O O O $any$ O $Error$ O $string$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O $ErrorConstructor$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O O $void$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O O $any$ O O O $Error$ O O O O $any$ O $Error$ O $string$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O $ErrorConstructor$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O O $void$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O O $any$ O O O $Error$ O O O O $any$ O $Error$ O $string$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $complex$ O O $complex$ O O $number$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O $any$ O O $any$ O O O $Error$ O O O O $any$ O $Error$ O $string$ O O $any$ O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O $number$ O O O O O $any$ O $any$ O O $complex$ O O $complex$ O O $number$ O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O $void$ O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O $number$ O $any$ O O O O O O O O O O O
<s> import { ApolloLink , Observable , RequestHandler , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , Body , _UNKNOWN_ , _UNKNOWN_ as _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ } from 's' ; export namespace HttpLink { export interface _UNKNOWN_ extends _UNKNOWN_ { } export interface Options extends _UNKNOWN_ { _UNKNOWN_ ? : boolean ; } } export import FetchOptions = HttpLink . Options ; export import _UNKNOWN_ = HttpLink . _UNKNOWN_ ; export const _UNKNOWN_ = ( _UNKNOWN_ : HttpLink . Options = { } ) => { let { uri = 's' , fetch : fetcher , _UNKNOWN_ , _UNKNOWN_ , ... requestOptions } = _UNKNOWN_ ; _UNKNOWN_ ( fetcher ) ; if ( ! fetcher ) { fetcher = fetch ; } const _UNKNOWN_ = { http : { _UNKNOWN_ } , options : requestOptions . fetchOptions , credentials : requestOptions . credentials , headers : requestOptions . headers , } ; return new ApolloLink ( operation => { let _UNKNOWN_ = _UNKNOWN_ ( operation , uri ) ; const context = operation . getContext ( ) ; const _UNKNOWN_ = { http : context . http , options : context . fetchOptions , credentials : context . credentials , headers : context . headers , } ; const { options , body } = _UNKNOWN_ ( operation , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ) ; const { controller , signal } = _UNKNOWN_ ( ) ; if ( controller ) ( options as any ) . signal = signal ; const _UNKNOWN_ = ( d ) => { return d . kind === 's' && d . operation === 's' ; } ; if ( _UNKNOWN_ && ! operation . query . definitions . some ( _UNKNOWN_ ) ) { options . method = 's' ; } if ( options . method === 's' ) { const { _UNKNOWN_ , parseError } = _UNKNOWN_ ( _UNKNOWN_ , body ) ; if ( parseError ) { return _UNKNOWN_ ( parseError ) ; } _UNKNOWN_ = _UNKNOWN_ ; } else { try { ( options as any ) . body = _UNKNOWN_ ( body , 's' ) ; } catch ( parseError ) { return _UNKNOWN_ ( parseError ) ; } } return new Observable ( observer => { fetcher ( _UNKNOWN_ , options ) . then ( response => { operation . _UNKNOWN_ ( { response } ) ; return response ; } ) . then ( _UNKNOWN_ ( operation ) ) . then ( result => { observer . next ( result ) ; observer . complete ( ) ; return result ; } ) . catch ( err => { if ( err . name === 's' ) return ; if ( err . result && err . result . errors && err . result . data ) { observer . next ( err . result ) ; } observer . error ( err ) ; } ) ; return ( ) => { if ( controller ) controller . abort ( ) ; } ; } ) ; } ) ; } ; function _UNKNOWN_ ( _UNKNOWN_ , body ) { const queryParams = [ ] ; const _UNKNOWN_ = ( key , value ) => { queryParams . push ( `template` ) ; } ; if ( 's' in body ) { _UNKNOWN_ ( 's' , body . query ) ; } if ( body . operationName ) { _UNKNOWN_ ( 's' , body . operationName ) ; } if ( body . variables ) { let _UNKNOWN_ ; try { _UNKNOWN_ = _UNKNOWN_ ( body . variables , 's' , ) ; } catch ( parseError ) { return { parseError } ; } _UNKNOWN_ ( 's' , _UNKNOWN_ ) ; } if ( body . extensions ) { let _UNKNOWN_ ; try { _UNKNOWN_ = _UNKNOWN_ ( body . extensions , 's' , ) ; } catch ( parseError ) { return { parseError } ; } _UNKNOWN_ ( 's' , _UNKNOWN_ ) ; } let fragment = 's' , _UNKNOWN_ = _UNKNOWN_ ; const _UNKNOWN_ = _UNKNOWN_ . indexOf ( 's' ) ; if ( _UNKNOWN_ !== - 0 ) { fragment = _UNKNOWN_ . substr ( _UNKNOWN_ ) ; _UNKNOWN_ = _UNKNOWN_ . substr ( 0 , _UNKNOWN_ ) ; } const _UNKNOWN_ = _UNKNOWN_ . indexOf ( 's' ) === - 0 ? 's' : 's' ; const _UNKNOWN_ = _UNKNOWN_ + _UNKNOWN_ + queryParams . join ( 's' ) + fragment ; return { _UNKNOWN_ } ; } export class HttpLink extends ApolloLink { public _UNKNOWN_ : RequestHandler ; constructor ( opts ? : HttpLink . Options ) { super ( _UNKNOWN_ ( opts ) . request ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $boolean$ O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O $Options$ O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O $any$ O $boolean$ O O ${}$ O O $Options$ O $any$ O $any$ O O O O O $any$ O O $any$ O $Promise<Response>$ O O O $complex$ O O $complex$ O O $any$ O O $any$ O ${}$ O $any$ O $any$ O ${}$ O $any$ O $any$ O ${}$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $complex$ O $complex$ O O O O O $any$ O $any$ O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O $boolean$ O O $DefinitionNode$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $boolean$ O O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $string$ O $any$ O O $complex$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $string$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O $complex$ O $string$ O $any$ O O O $any[]$ O O O O O $void$ O O $string$ O $string$ O O O $any[]$ O $number$ O O O O O O O O O O $any$ O O $void$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O $void$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O O O $void$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O O O $void$ O O O $any$ O O O O $string$ O O O $string$ O $string$ O O $number$ O $string$ O $number$ O O O O O O $number$ O O O O O $string$ O $string$ O $string$ O $number$ O O $string$ O $string$ O $string$ O O O $number$ O O O O O O $string$ O $number$ O O O O O O O O O O O O $string$ O $string$ O O O $any[]$ O $string$ O O O O $string$ O O O $string$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O $Options$ O O $any$ O $any$ O O O O $any$ O $Options$ O O $any$ O O O O O
<s> import { Observable , ApolloLink , execute } from 's' ; import gql from 's' ; import * as fetchMock from 's' ; import _UNKNOWN_ from 's' ; import { _UNKNOWN_ } from 's' ; import { HttpLink , _UNKNOWN_ } from 's' ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = ( done , body ) => { return ( ... args ) => { try { body ( ... args ) ; done ( ) ; } catch ( error ) { done . fail ( error ) ; } } ; } ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( ( ) => new HttpLink ( ) ) . not . toThrow ( ) ; } ) ; const _UNKNOWN_ = res => new Promise ( ( resolve , reject ) => setTimeout ( ( ) => resolve ( res ) ) ) ; const data = { data : { hello : 's' } } ; beforeEach ( ( ) => { fetchMock . restore ( ) ; fetchMock . post ( 's' , _UNKNOWN_ ( data ) ) ; fetchMock . get ( 's' , _UNKNOWN_ ( data ) ) ; } ) ; afterEach ( ( ) => { fetchMock . restore ( ) ; } ) ; it ( 's' , done => { const next = jest . fn ( ) ; const link = new HttpLink ( { uri : 's' } ) ; const observable = execute ( link , { query : _UNKNOWN_ , } ) ; observable . subscribe ( { next , error => expect ( false ) , complete : ( ) => { expect ( next ) . toHaveBeenCalledTimes ( 0 ) ; done ( ) ; } , } ) ; } ) ; it ( 's' , done => { const variables = { params : 's' } ; const extensions = { _UNKNOWN_ : 's' } ; const link = _UNKNOWN_ ( { uri : 's' , fetchOptions : { method : 's' } , _UNKNOWN_ : true , } ) ; execute ( link , { query : _UNKNOWN_ , variables , extensions } ) . subscribe ( { next : _UNKNOWN_ ( done , result => { const [ uri , options ] = fetchMock . _UNKNOWN_ ( ) ; const { method , body } = options ; expect ( body ) . toBeUndefined ( ) ; expect ( method ) . toBe ( 's' ) ; expect ( uri ) . toBe ( 's' , ) ; } ) , error => done . fail ( error ) , } ) ; } ) ; it ( 's' , done => { const variables = { params : 's' } ; const link = _UNKNOWN_ ( { uri : 's' , fetchOptions : { method : 's' } , } ) ; execute ( link , { query : _UNKNOWN_ , variables } ) . subscribe ( { next : _UNKNOWN_ ( done , result => { const [ uri , options ] = fetchMock . _UNKNOWN_ ( ) ; const { method , body } = options ; expect ( body ) . toBeUndefined ( ) ; expect ( method ) . toBe ( 's' ) ; expect ( uri ) . toBe ( 's' , ) ; } ) , error => done . fail ( error ) , } ) ; } ) ; it ( 's' , done => { const variables = { params : 's' } ; const link = _UNKNOWN_ ( { uri : 's' , } ) ; execute ( link , { query : _UNKNOWN_ , variables , context : { fetchOptions : { method : 's' } , } , } ) . subscribe ( _UNKNOWN_ ( done , result => { const [ uri , options ] = fetchMock . _UNKNOWN_ ( ) ; const { method , body } = options ; expect ( body ) . toBeUndefined ( ) ; expect ( method ) . toBe ( 's' ) ; expect ( uri ) . toBe ( 's' , ) ; } ) , ) ; } ) ; it ( 's' , done => { const variables = { params : 's' } ; const link = _UNKNOWN_ ( { uri : 's' , _UNKNOWN_ : true , } ) ; execute ( link , { query : _UNKNOWN_ , variables , } ) . subscribe ( _UNKNOWN_ ( done , result => { const [ uri , options ] = fetchMock . _UNKNOWN_ ( ) ; const { method , body } = options ; expect ( body ) . toBeUndefined ( ) ; expect ( method ) . toBe ( 's' ) ; expect ( uri ) . toBe ( 's' , ) ; } ) , ) ; } ) ; it ( 's' , done => { const variables = { params : 's' } ; const link = _UNKNOWN_ ( { uri : 's' , _UNKNOWN_ : true , } ) ; execute ( link , { query : _UNKNOWN_ , variables , } ) . subscribe ( _UNKNOWN_ ( done , result => { const [ uri , options ] = fetchMock . _UNKNOWN_ ( ) ; const { method , body } = options ; expect ( body ) . toBeDefined ( ) ; expect ( method ) . toBe ( 's' ) ; expect ( uri ) . toBe ( 's' ) ; } ) , ) ; } ) ; } ) ; it ( "s" , done => { const link = _UNKNOWN_ ( { uri : 's' , _UNKNOWN_ : true , } ) ; let b ; const a = { b } ; b = { a } ; a . b = b ; const variables = { a , b , } ; execute ( link , { query : _UNKNOWN_ , variables } ) . subscribe ( result => { done . fail ( 's' ) ; } , _UNKNOWN_ ( done , e => { expect ( e . message ) . toMatch ( "s" ) ; expect ( e . parseError . message ) . toMatch ( "s" , ) ; } ) , ) ; } ) ; it ( "s" , done => { const link = _UNKNOWN_ ( { uri : 's' , _UNKNOWN_ : true , _UNKNOWN_ : true , } ) ; let b ; const a = { b } ; b = { a } ; a . b = b ; const extensions = { a , b , } ; execute ( link , { query : _UNKNOWN_ , extensions } ) . subscribe ( result => { done . fail ( 's' ) ; } , _UNKNOWN_ ( done , e => { expect ( e . message ) . toMatch ( "s" ) ; expect ( e . parseError . message ) . toMatch ( "s" , ) ; } ) , ) ; } ) ; _UNKNOWN_ ( 's' , _UNKNOWN_ ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O $void$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $void$ O O $any$ O $any$ O O O O O O $any[]$ O O O O O $any$ O O $any[]$ O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O O O O $Promise<unknown>$ O $any$ O O $PromiseConstructor$ O O $void$ O $void$ O O $number$ O O O O $void$ O $any$ O O O O O $complex$ O O $complex$ O O $string$ O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $Promise<unknown>$ O $complex$ O O O $any$ O $any$ O O O $Promise<unknown>$ O $complex$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O $HttpLink$ O O $any$ O O $string$ O O O O O O $any$ O $any$ O $HttpLink$ O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O O $any$ O O O $any$ O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O O $string$ O O O O $boolean$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O $complex$ O O O $any$ O O $void$ O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O O O $complex$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O O $string$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O O $any$ O O $void$ O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O O O $complex$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O $complex$ O O $complex$ O O $string$ O O O O O O O O O $any$ O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $any$ O O O $any$ O O O $complex$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $true$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O O O $any$ O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $any$ O O O $any$ O O O $complex$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $true$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O O O $any$ O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O $string$ O O O $true$ O O O O O O O $any$ O O $complex$ O O $any$ O O $any$ O O $complex$ O O $complex$ O $any$ O $any$ O O $complex$ O O $complex$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O $string$ O O O $true$ O O O $boolean$ O O O O O O O $any$ O O $complex$ O O $any$ O O $any$ O O $complex$ O O $complex$ O $any$ O $any$ O O $complex$ O O $complex$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $void$ O O O $any$ O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { Operation } from 's' ; import { print } from 's' ; declare var _UNKNOWN_ ; export type _UNKNOWN_ = Error & { response : Response ; result : Record < string , any > ; statusCode : number ; } ; export type _UNKNOWN_ = Error & { response : Response ; statusCode : number ; _UNKNOWN_ : string ; } ; export type _UNKNOWN_ = Error & { parseError : Error ; } ; export interface _UNKNOWN_ { _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; } export interface _UNKNOWN_ { http ? : _UNKNOWN_ ; options ? : any ; headers ? : any ; credentials ? : any ; } export interface _UNKNOWN_ { ( operation ) : string ; } export interface Body { query ? : string ; operationName ? : string ; variables ? : Record < string , any > ; extensions ? : Record < string , any > ; } export interface _UNKNOWN_ { uri ? : string | _UNKNOWN_ ; _UNKNOWN_ ? : boolean ; fetch ? : _UNKNOWN_ [ 's' ] ; headers ? : any ; credentials ? : string ; fetchOptions ? : any ; } const _UNKNOWN_ = { _UNKNOWN_ : true , _UNKNOWN_ : false , } ; const _UNKNOWN_ = { accept : 's' , 's' : 's' , } ; const defaultOptions = { method : 's' , } ; export const _UNKNOWN_ = { http : _UNKNOWN_ , headers : _UNKNOWN_ , options : defaultOptions , } ; export const _UNKNOWN_ = ( response , result , message ) => { const error = new Error ( message ) as _UNKNOWN_ ; error . response = response ; error . statusCode = response . status ; error . result = result ; throw error ; } ; export const _UNKNOWN_ = operations => ( response ) => { return ( response . text ( ) . then ( _UNKNOWN_ => { try { return JSON . parse ( _UNKNOWN_ ) ; } catch ( err ) { const parseError = err as _UNKNOWN_ ; parseError . response = response ; parseError . statusCode = response . status ; parseError . _UNKNOWN_ = _UNKNOWN_ ; return Promise . reject ( parseError ) ; } } ) . then ( ( result ) => { if ( response . status >= 0 ) { _UNKNOWN_ ( response , result , `template` , ) ; } if ( ! Array . isArray ( result ) && ! result . hasOwnProperty ( 's' ) && ! result . hasOwnProperty ( 's' ) ) { _UNKNOWN_ ( response , result , `template` , ) ; } return result ; } ) ) ; } ; export const _UNKNOWN_ = ( fetcher : _UNKNOWN_ [ 's' ] ) => { if ( ! fetcher && typeof fetch === 's' ) { let library = 's' ; if ( typeof window === 's' ) library = 's' ; throw new Error ( `template` ) ; } } ; export const _UNKNOWN_ = ( ) => { if ( typeof _UNKNOWN_ === 's' ) return { controller : false , signal : false } ; const controller = new _UNKNOWN_ ( ) ; const signal = controller . signal ; return { controller , signal } ; } ; export const _UNKNOWN_ = ( operation , _UNKNOWN_ , ... configs < _UNKNOWN_ > ) => { let options : _UNKNOWN_ & Record < string , any > = { ... _UNKNOWN_ . options , headers : _UNKNOWN_ . headers , credentials : _UNKNOWN_ . credentials , } ; let http = _UNKNOWN_ . http ; configs . forEach ( config => { options = { ... options , ... config . options , headers : { ... options . headers , ... config . headers , } , } ; if ( config . credentials ) options . credentials = config . credentials ; http = { ... http , ... config . http , } ; } ) ; const { operationName , extensions , variables , query } = operation ; const body = { operationName , variables } ; if ( http . _UNKNOWN_ ) ( body as any ) . extensions = extensions ; if ( http . _UNKNOWN_ ) ( body as any ) . query = print ( query ) ; return { options , body , } ; } ; export const _UNKNOWN_ = ( p , label ) => { let _UNKNOWN_ ; try { _UNKNOWN_ = JSON . stringify ( p ) ; } catch ( e ) { const parseError = new Error ( `template` , ) as _UNKNOWN_ ; parseError . parseError = e ; throw parseError ; } return _UNKNOWN_ ; } ; export const _UNKNOWN_ = ( operation , _UNKNOWN_ ? : string | ( ( Operation ) => string ) , ) => { const context = operation . getContext ( ) ; const _UNKNOWN_ = context . uri ; if ( _UNKNOWN_ ) { return _UNKNOWN_ ; } else if ( typeof _UNKNOWN_ === 's' ) { return _UNKNOWN_ ( operation ) ; } else { return ( _UNKNOWN_ as string ) || 's' ; } } ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O $any$ O $ErrorConstructor$ O O $Response$ O $complex$ O $complex$ O $any$ O O O O O O $number$ O O O O O O O $any$ O $ErrorConstructor$ O O $Response$ O $complex$ O $number$ O O O $string$ O O O O O O O $any$ O $ErrorConstructor$ O O $Error$ O $ErrorConstructor$ O O O O O $any$ O $boolean$ O O O O $boolean$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O O $any$ O O $Operation$ O O O O O O O $any$ O $string$ O O O O $string$ O O O O $complex$ O O $any$ O O O O O O $complex$ O O $any$ O O O O O O O O O $any$ O $complex$ O O O O $any$ O $boolean$ O O O O $any$ O O $any$ O O O O $any$ O O O O $string$ O O O O $any$ O O O O O O $any$ O O $true$ O O O $false$ O O O O O O $complex$ O O $string$ O O O O O O O O O O $complex$ O O $string$ O O O O O O O $complex$ O O $any$ O $any$ O $complex$ O $complex$ O $complex$ O $complex$ O O O O O $never$ O O $any$ O $any$ O $any$ O O O O $any$ O O $ErrorConstructor$ O $any$ O O $any$ O $any$ O $Response$ O $any$ O $any$ O $number$ O $any$ O $any$ O $any$ O $complex$ O $any$ O O $any$ O O O O O $Promise<any>$ O $any$ O O $Response$ O O O O O $Response$ O $Promise<string>$ O O O O O $string$ O O O O O $JSON$ O $any$ O $string$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $Response$ O $Response$ O $any$ O $number$ O $Response$ O $number$ O $any$ O $string$ O $string$ O O $PromiseConstructor$ O $Promise<T>$ O $any$ O O O O O O O O O $any$ O O O O O $Response$ O $number$ O O O O $never$ O $Response$ O $any$ O O O O O O O O O $ArrayConstructor$ O $complex$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $never$ O $Response$ O $any$ O O O O O O O $any$ O O O O O O O O O $void$ O O $any$ O $any$ O O O O O O O O O $any$ O O $Promise<Response>$ O O O O O $string$ O O O O O O $complex$ O O O $string$ O O O O O $ErrorConstructor$ O O O O O O O O O $complex$ O O O O O O O O $any$ O O O O O $boolean$ O O O $boolean$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $complex$ O O $Operation$ O $any$ O O $Array$ O $any$ O O O O O $complex$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $void$ O $any$ O O $complex$ O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O O O O $any$ O $boolean$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $boolean$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $complex$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O $any$ O $JSON$ O $complex$ O $any$ O O O O O $any$ O O O $any$ O O $ErrorConstructor$ O O O O O $any$ O $any$ O $Error$ O $any$ O O $any$ O O O $any$ O O O O O $any$ O O $any$ O $string)$ O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O $string)$ O O O O O $string$ O $any$ O O O O O O O $string$ O O O O O O O O O O
<s> import { _UNKNOWN_ , Observable , ApolloLink , execute } from 's' ; import gql from 's' ; import * as fetchMock from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; const query = `template` ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { beforeEach ( ( ) => { fetchMock . restore ( ) ; } ) ; const operations = [ _UNKNOWN_ ( { } , { query } ) ] ; it ( 's' , done => { const status = 0 ; fetchMock . mock ( 's' , status ) ; fetch ( 's' ) . then ( _UNKNOWN_ ( operations ) ) . then ( done . fail ) . catch ( e => { expect ( e . statusCode ) . toBe ( status ) ; expect ( e ) . _UNKNOWN_ ( 's' ) ; expect ( e ) . _UNKNOWN_ ( 's' ) ; done ( ) ; } ) . catch ( done . fail ) ; } ) ; it ( 's' , done => { const status = 0 ; const body = { data : 's' } ; fetchMock . mock ( 's' , { body , status , } ) ; fetch ( 's' ) . then ( _UNKNOWN_ ( operations ) ) . then ( done . fail ) . catch ( e => { expect ( e . statusCode ) . toBe ( status ) ; expect ( e ) . _UNKNOWN_ ( 's' ) ; expect ( e ) . _UNKNOWN_ ( 's' ) ; done ( ) ; } ) . catch ( done . fail ) ; } ) ; it ( 's' , done => { const data = { hello : 's' } ; fetchMock . mock ( 's' , data ) ; fetch ( 's' ) . then ( _UNKNOWN_ ( operations ) ) . then ( done . fail ) . catch ( e => { expect ( e . statusCode ) . toBe ( 0 ) ; expect ( e ) . _UNKNOWN_ ( 's' ) ; expect ( e . result ) . toEqual ( data ) ; done ( ) ; } ) . catch ( done . fail ) ; } ) ; it ( 's' , done => { const errors = [ 's' , 's' + new Error ( 's' ) ] ; const data = { data : { hello : 's' } , errors } ; fetchMock . mock ( 's' , { body : data , } ) ; fetch ( 's' ) . then ( _UNKNOWN_ ( operations ) ) . then ( ( { data , errors : e } ) => { expect ( data ) . toEqual ( { hello : 's' } ) ; expect ( e . length ) . toEqual ( errors . length ) ; expect ( e ) . toEqual ( errors ) ; done ( ) ; } ) . catch ( done . fail ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const { options , body } = _UNKNOWN_ ( _UNKNOWN_ ( { } , { query } ) , { http : { _UNKNOWN_ : false } } , ) ; expect ( body ) . not . _UNKNOWN_ ( 's' ) ; } ) ; it ( 's' , ( ) => { const extensions = { _UNKNOWN_ : 's' } ; const { options , body } = _UNKNOWN_ ( _UNKNOWN_ ( { } , { query , extensions } ) , { http : { _UNKNOWN_ : true } } , ) ; expect ( body ) . _UNKNOWN_ ( 's' ) ; expect ( ( body as any ) . extensions ) . toEqual ( extensions ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = { accept : 's' , 's' : 's' , } ; const defaultOptions = { method : 's' , } ; const extensions = { _UNKNOWN_ : 's' } ; const { options , body } = _UNKNOWN_ ( _UNKNOWN_ ( { } , { query , extensions } ) , _UNKNOWN_ , ) ; expect ( body ) . _UNKNOWN_ ( 's' ) ; expect ( body ) . not . _UNKNOWN_ ( 's' ) ; expect ( options . headers ) . toEqual ( _UNKNOWN_ ) ; expect ( options . method ) . toEqual ( defaultOptions . method ) ; } ) ; it ( 's' , ( ) => { const headers = { accept : 's' , 's' : 's' , } ; const credentials = { 's' : 's' , } ; const opts = { opt : 's' , } ; const config = { headers , credentials , options : opts } ; const extensions = { _UNKNOWN_ : 's' } ; const { options , body } = _UNKNOWN_ ( _UNKNOWN_ ( { } , { query , extensions } ) , _UNKNOWN_ , config , ) ; expect ( body ) . _UNKNOWN_ ( 's' ) ; expect ( body ) . not . _UNKNOWN_ ( 's' ) ; expect ( options . headers ) . toEqual ( headers ) ; expect ( options . credentials ) . toEqual ( credentials ) ; expect ( options . opt ) . toEqual ( 's' ) ; expect ( options . method ) . toEqual ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const uri = 's' ; const operation = _UNKNOWN_ ( { uri } , { query } ) ; expect ( _UNKNOWN_ ( operation ) ) . toEqual ( uri ) ; } ) ; it ( 's' , ( ) => { const uri = 's' ; const operation = _UNKNOWN_ ( { } , { query } ) ; expect ( _UNKNOWN_ ( operation ) ) . toEqual ( uri ) ; } ) ; it ( 's' , ( ) => { const uri = 's' ; const operation = _UNKNOWN_ ( { } , { query } ) ; expect ( _UNKNOWN_ ( operation , ( ) => uri ) ) . toEqual ( uri ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const b = { } ; const a = { b } ; ( b as any ) . a = a ; expect ( ( ) => _UNKNOWN_ ( b , 's' ) ) . toThrow ( "s" ) ; } ) ; it ( 's' , ( ) => { const body = { no : 's' } ; expect ( _UNKNOWN_ ( body , 's' ) ) . toEqual ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { let _UNKNOWN_ ; beforeEach ( ( ) => { _UNKNOWN_ = window . fetch ; delete window . fetch ; } ) ; afterEach ( ( ) => { window . fetch = _UNKNOWN_ ; } ) ; it ( 's' , ( ) => { expect ( ( ) => _UNKNOWN_ ( undefined ) ) . toThrow ( "s" , ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => _UNKNOWN_ ( ( ) => { } ) ) . not . toThrow ( ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $Promise<any>$ O $void$ O $complex$ O $any$ O $any$ O $complex$ O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any[]$ O O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O O O $Promise<Response>$ O O O O O O $Promise<any>$ O $any[]$ O O O O O $any$ O $any$ O O $Promise<any>$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O $Promise<any>$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O O O O O $complex$ O O $string$ O O O O $any$ O $any$ O O O O $complex$ O $number$ O O O O $Promise<Response>$ O O O O O O $Promise<any>$ O $any[]$ O O O O O $any$ O $any$ O O $Promise<any>$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O $Promise<any>$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O $complex$ O O $string$ O O O O $any$ O $any$ O O O $complex$ O O $Promise<Response>$ O O O O O O $Promise<any>$ O $any[]$ O O O O O $any$ O $any$ O O $Promise<any>$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O O O O O $Promise<any>$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O $string[]$ O O O O O O O $ErrorConstructor$ O O O O O O $complex$ O O $complex$ O O $string$ O O O O $string[]$ O O $any$ O $any$ O O O O $complex$ O $complex$ O O O O $Promise<Response>$ O O O O O O $Promise<any>$ O $any[]$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O $string$ O O O O O $any$ O $any$ O $any$ O O $any$ O $string[]$ O $number$ O O $any$ O $any$ O O $any$ O $string[]$ O O $any$ O O O O O O $complex$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $complex$ O $any$ O O $complex$ O $any$ O O O O O $any$ O O O O $complex$ O O $false$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O O $string$ O O O O O O $complex$ O $any$ O O $complex$ O $any$ O O O O O $any$ O $complex$ O O O O $complex$ O O $true$ O O O O O O O $any$ O $any$ O O $any$ O O O O $any$ O O $any$ O O O O $any$ O O $any$ O $complex$ O O O O O $any$ O O O O O O O O $complex$ O O $string$ O O O O O O O O O O $complex$ O O $string$ O O O O O O $complex$ O O $string$ O O O O O O $complex$ O $any$ O O $complex$ O $any$ O O O O O $any$ O $complex$ O O O $complex$ O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $complex$ O $any$ O O $any$ O $complex$ O O $any$ O $complex$ O $any$ O O $any$ O $complex$ O $string$ O O O O O $any$ O O O O O O O O $complex$ O O $string$ O O O O O O O O O O $complex$ O O O O O O O O O $complex$ O O $string$ O O O O O O $complex$ O O $complex$ O $complex$ O $complex$ O $complex$ O O O $complex$ O O $string$ O O O O O O $complex$ O $any$ O O $complex$ O $any$ O O O O O $any$ O $complex$ O O O $complex$ O $complex$ O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $complex$ O $any$ O O $any$ O $complex$ O O $any$ O $complex$ O $any$ O O $any$ O $complex$ O O $any$ O $complex$ O $any$ O O $any$ O O O O $any$ O $complex$ O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $any$ O $any$ O O $string$ O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O ${}$ O O O O O $complex$ O O ${}$ O O O ${}$ O O O O $any$ O $complex$ O $any$ O O O O $any$ O ${}$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O O $string$ O O O O $any$ O $any$ O $complex$ O O O O O $any$ O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $complex$ O $Promise<...>)$ O O $complex$ O $Promise<...>)$ O O O O $any$ O O O O O $complex$ O $Promise<...>)$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O $void$ O $undefined$ O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O $void$ O O O O O O O O O $any$ O $any$ O O O O O O O O O O O O O
<s> import { ApolloLink , Operation , _UNKNOWN_ , FetchResult , Observable , } from 's' ; export namespace _UNKNOWN_ { export interface _UNKNOWN_ { ( operation ) : number | null ; } } export class _UNKNOWN_ extends ApolloLink { private _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; private timer ; private subscription : _UNKNOWN_ . Subscription ; constructor ( _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ) { super ( ) ; this . _UNKNOWN_ = _UNKNOWN_ ; } public request ( operation , forward , ) < FetchResult > { return new Observable ( observer => { const subscriber = { next => { observer . next ( data ) ; } , error => observer . error ( error ) , } ; const poll = ( ) => { this . subscription . unsubscribe ( ) ; this . subscription = forward ( operation ) . subscribe ( subscriber ) ; } ; const interval = this . _UNKNOWN_ ( operation ) ; if ( interval !== null ) { this . timer = setInterval ( poll , interval ) ; } this . subscription = forward ( operation ) . subscribe ( subscriber ) ; return ( ) => { if ( this . timer ) { clearInterval ( this . timer ) ; } this . subscription . unsubscribe ( ) ; } ; } ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O $Operation$ O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $Observable$ O $Operation$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O $complex$ O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O O O O $number$ O O O $any$ O $any$ O O O O $number$ O O O O O O $any$ O $number$ O $void$ O $number$ O O O O O $any$ O $any$ O $any$ O O $any$ O $complex$ O O O O O O O O O O O $any$ O O $void$ O O O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O
<s> import { execute , Observable } from 's' ; import gql from 's' ; import { _UNKNOWN_ } from 's' ; const query = `template` ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( ( ) => new _UNKNOWN_ ( ( ) => null ) ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => new _UNKNOWN_ ( ( ) => 0 ) ) . not . toThrow ( ) ; } ) ; it ( 's' , done => { let count = 0 ; let subscription ; const spy = jest . fn ( ) ; const _UNKNOWN_ = ( ) => { const calls = spy . mock . calls ; calls . map ( ( call , i ) => expect ( call [ 0 ] . data . count ) . toEqual ( i ) ) ; expect ( calls . length ) . toEqual ( 0 ) ; done ( ) ; } ; const poll = new _UNKNOWN_ ( ( ) => 0 ) . concat ( ( ) => { if ( count >= 0 ) { subscription . unsubscribe ( ) ; _UNKNOWN_ ( ) ; } return Observable . of ( { data : { count : count ++ , } , } ) ; } ) ; subscription = execute ( poll , { query } ) . subscribe ( { next : spy , error => { throw error ; } , complete : ( ) => { throw new Error ( ) ; } , } ) ; } ) ; it ( 's' , done => { let count = 0 ; let subscription ; const error = new Error ( 's' ) ; const spy = jest . fn ( ) ; const _UNKNOWN_ = _UNKNOWN_ => { expect ( error ) . toEqual ( _UNKNOWN_ ) ; const calls = spy . mock . calls ; calls . map ( ( call , i ) => expect ( call [ 0 ] . data . count ) . toEqual ( i ) ) ; expect ( calls . length ) . toEqual ( 0 ) ; done ( ) ; } ; const poll = new _UNKNOWN_ ( ( ) => 0 ) . concat ( ( ) => { if ( count >= 0 ) { return new Observable ( observer => { throw error ; } ) ; } return Observable . of ( { data : { count : count ++ , } , } ) ; } ) ; subscription = execute ( poll , { query } ) . subscribe ( { next : spy , error => _UNKNOWN_ ( err ) , complete : ( ) => { throw new Error ( ) ; } , } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $number$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $number$ O O O O $any$ O $any$ O O O $void$ O O O O O $any$ O $any$ O O $complex$ O O $number$ O $number$ O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $never$ O O O O O O O $ErrorConstructor$ O O O O O O O O O O O $any$ O O O $any$ O O O $number$ O O O O $any$ O O $Error$ O O $ErrorConstructor$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O $any$ O $Error$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $number$ O O O O O O $any$ O $any$ O O O $Error$ O O O O O O $any$ O $any$ O O $complex$ O O $number$ O $number$ O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $void$ O $any$ O O $never$ O O O O O O O $ErrorConstructor$ O O O O O O O O O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { Operation } from 's' ; export interface _UNKNOWN_ { ( count , operation , error ) : number ; } export interface _UNKNOWN_ { initial ? : number ; max ? : number ; _UNKNOWN_ ? : boolean ; } export function _UNKNOWN_ ( { initial = 0 , max = Infinity , _UNKNOWN_ = true , } = { } ) { let _UNKNOWN_ ; if ( _UNKNOWN_ ) { _UNKNOWN_ = initial ; } else { _UNKNOWN_ = initial / 0 ; } return function _UNKNOWN_ ( count ) { let delay = Math . min ( max , _UNKNOWN_ * 0 ** count ) ; if ( _UNKNOWN_ ) { delay = Math . random ( ) * delay ; } return delay ; } ; } </s>	O O O $any$ O O O O O O $any$ O O $number$ O $Operation$ O $any$ O O O O O O O $any$ O $number$ O O O O $number$ O O O O $boolean$ O O O O O O O $any$ O O $number$ O O O $number$ O $number$ O $boolean$ O O O $any$ O O O O O O $any$ O O O $boolean$ O O $any$ O $number$ O O O O $any$ O $number$ O O O O O O $number$ O $number$ O O O $number$ O $Math$ O $number$ O $number$ O $any$ O O O $number$ O O O O $boolean$ O O $number$ O $Math$ O $number$ O O O $number$ O O O $number$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { interface _UNKNOWN_ { ( count ) : number ; } function _UNKNOWN_ ( _UNKNOWN_ , count ) { const results = [ ] ; for ( let i = 0 ; i <= count ; i ++ ) { results . push ( _UNKNOWN_ ( i ) ) ; } return results ; } describe ( 's' , ( ) => { it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( { _UNKNOWN_ : false , initial : 0 , max : 0 , } ) as _UNKNOWN_ ; expect ( _UNKNOWN_ ( _UNKNOWN_ , 0 ) ) . toEqual ( [ 0 , 0 , 0 , 0 , 0 , 0 , ] ) ; } ) ; } ) ; describe ( 's' , ( ) => { let _UNKNOWN_ , _UNKNOWN_ ; beforeEach ( ( ) => { _UNKNOWN_ = jest . fn ( ) ; _UNKNOWN_ = Math . random ; Math . random = _UNKNOWN_ ; } ) ; afterEach ( ( ) => { Math . random = _UNKNOWN_ ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( { _UNKNOWN_ : true , initial : 0 , max : 0 , } ) as _UNKNOWN_ ; _UNKNOWN_ . mockReturnValue ( 0 ) ; expect ( _UNKNOWN_ ( _UNKNOWN_ , 0 ) ) . toEqual ( [ 0 , 0 , 0 , 0 , 0 ] ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( { _UNKNOWN_ : true , initial : 0 , max : 0 , } ) as _UNKNOWN_ ; _UNKNOWN_ . mockReturnValue ( 0 ) ; expect ( _UNKNOWN_ ( _UNKNOWN_ , 0 ) ) . toEqual ( [ 0 , 0 , 0 , 0 , 0 ] ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( { _UNKNOWN_ : true , initial : 0 , max : 0 , } ) as _UNKNOWN_ ; _UNKNOWN_ . mockReturnValue ( 0 ) ; expect ( _UNKNOWN_ ( _UNKNOWN_ , 0 ) ) . toEqual ( [ 0 , 0 , 0 , 0 , 0 ] ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O $any$ O O O O O O O O $any$ O O $number$ O O O O O O $any[]$ O $any$ O $number$ O O O $any[]$ O O O O O O O $number$ O O O $number$ O $number$ O $number$ O O O $any[]$ O $number$ O $any$ O $number$ O O O O O $any[]$ O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O $false$ O O O $number$ O O O $number$ O O O O O O $any$ O $any$ O $any[]$ O $any$ O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $Math$ O $number$ O $Math$ O $number$ O $any$ O O O O $any$ O O O O O $Math$ O $number$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O O $true$ O O O $number$ O O O $number$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any[]$ O $any$ O O O O O $any$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O $true$ O O O $number$ O O O $number$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any[]$ O $any$ O O O O O $any$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O $true$ O O O $number$ O O O $number$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any[]$ O $any$ O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O
<s> import { Operation } from 's' ; export interface _UNKNOWN_ { ( count , operation , error ) : boolean | Promise < boolean > ; } export interface _UNKNOWN_ { max ? : number ; _UNKNOWN_ ? : ( error , operation ) => boolean | Promise < boolean > ; } export function _UNKNOWN_ ( { max = 0 , _UNKNOWN_ , } = { } ) { return function _UNKNOWN_ ( count , operation , error ) { if ( count >= max ) return false ; return _UNKNOWN_ ? _UNKNOWN_ ( error , operation ) : ! ! error ; } ; } </s>	O O O $any$ O O O O O O $any$ O O $number$ O $Operation$ O $any$ O O O O $PromiseConstructor$ O O O O O O O $any$ O $number$ O O O O $complex$ O O O $any$ O $Operation$ O O O O $PromiseConstructor$ O O O O O O O $any$ O O $number$ O O O $complex$ O $any$ O O O O O O O $complex$ O $number$ O $any$ O $any$ O O O O $number$ O $number$ O O O O O $complex$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { Operation } from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( { max : 0 } ) ; expect ( _UNKNOWN_ ( 0 , null , { } ) ) . toEqual ( true ) ; expect ( _UNKNOWN_ ( 0 , null , { } ) ) . toEqual ( false ) ; expect ( _UNKNOWN_ ( 0 , null , { } ) ) . toEqual ( false ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( ) ; expect ( _UNKNOWN_ ( 0 , null , undefined ) ) . toEqual ( false ) ; expect ( _UNKNOWN_ ( 0 , null , { } ) ) . toEqual ( true ) ; } ) ; it ( 's' , ( ) => { const stub = jest . fn ( ( ) => true ) ; const _UNKNOWN_ = _UNKNOWN_ ( { max : 0 , _UNKNOWN_ : stub } ) ; expect ( _UNKNOWN_ ( 0 , null , null ) ) . toEqual ( true ) ; expect ( _UNKNOWN_ ( 0 , null , null ) ) . toEqual ( false ) ; } ) ; it ( 's' , ( ) => { const stub = jest . fn ( ( ) => true ) ; const _UNKNOWN_ = _UNKNOWN_ ( { max : 0 , _UNKNOWN_ : stub } ) ; const operation = { operationName : 's' } as Operation ; const error = { message : 's' } ; _UNKNOWN_ ( 0 , operation , error ) ; expect ( stub ) . toHaveBeenCalledWith ( error , operation ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O $number$ O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $undefined$ O O O $any$ O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O $number$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O $number$ O O O $any$ O $any$ O O O O $any$ O O $string$ O O O O $any$ O O $complex$ O O $string$ O O O O $any$ O O O $any$ O $complex$ O O $any$ O $any$ O O $any$ O $complex$ O $any$ O O O O O O O O O
<s> import { ApolloLink , Observable , Operation , _UNKNOWN_ , FetchResult , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } from 's' ; export namespace _UNKNOWN_ { export interface Options { delay ? : _UNKNOWN_ | _UNKNOWN_ ; attempts ? : _UNKNOWN_ | _UNKNOWN_ ; } } class _UNKNOWN_ < _UNKNOWN_ = any > { private retryCount : number = 0 ; private values : any [ ] = [ ] ; private error : any ; private complete = false ; private _UNKNOWN_ = false ; private observers : _UNKNOWN_ . Observer < _UNKNOWN_ > [ ] = [ ] ; private _UNKNOWN_ : _UNKNOWN_ . Subscription = null ; private timerId : number ; constructor ( private operation , private nextLink , private _UNKNOWN_ , private _UNKNOWN_ , ) { } subscribe ( observer : _UNKNOWN_ . Observer < _UNKNOWN_ > ) { if ( this . _UNKNOWN_ ) { throw new Error ( `template` , ) ; } this . observers . push ( observer ) ; for ( const value of this . values ) { observer . next ( value ) ; } if ( this . complete ) { observer . complete ( ) ; } else if ( this . error ) { observer . error ( this . error ) ; } } unsubscribe ( observer : _UNKNOWN_ . Observer < _UNKNOWN_ > ) { const index = this . observers . indexOf ( observer ) ; if ( index < 0 ) { throw new Error ( `template` , ) ; } this . observers [ index ] = null ; if ( this . observers . every ( o => o === null ) ) { this . cancel ( ) ; } } start ( ) { if ( this . _UNKNOWN_ ) return ; this . try ( ) ; } cancel ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; } clearTimeout ( this . timerId ) ; this . timerId = null ; this . _UNKNOWN_ = null ; this . _UNKNOWN_ = true ; } private try ( ) { this . _UNKNOWN_ = this . nextLink ( this . operation ) . subscribe ( { next : this . onNext , error : this . onError , complete : this . _UNKNOWN_ , } ) ; } private onNext = ( value ) => { this . values . push ( value ) ; for ( const observer of this . observers ) { observer . next ( value ) ; } } ; private _UNKNOWN_ = ( ) => { this . complete = true ; for ( const observer of this . observers ) { observer . complete ( ) ; } } ; private onError = async error => { this . retryCount += 0 ; const _UNKNOWN_ = await this . _UNKNOWN_ ( this . retryCount , this . operation , error ) if ( _UNKNOWN_ ) { this . _UNKNOWN_ ( this . _UNKNOWN_ ( this . retryCount , this . operation , error ) , ) ; return ; } this . error = error ; for ( const observer of this . observers ) { observer . error ( error ) ; } } ; private _UNKNOWN_ ( delay ) { if ( this . timerId ) { throw new Error ( `template` ) ; } this . timerId = setTimeout ( ( ) => { this . timerId = null ; this . try ( ) ; } , delay ) ; } } export class _UNKNOWN_ extends ApolloLink { private _UNKNOWN_ : _UNKNOWN_ ; private _UNKNOWN_ : _UNKNOWN_ ; constructor ( { delay , attempts } : _UNKNOWN_ . Options = { } ) { super ( ) ; this . _UNKNOWN_ = typeof delay === 's' ? delay : _UNKNOWN_ ( delay ) ; this . _UNKNOWN_ = typeof attempts === 's' ? attempts : _UNKNOWN_ ( attempts ) ; } public request ( operation , nextLink , ) < FetchResult > { const _UNKNOWN_ = new _UNKNOWN_ ( operation , nextLink , this . _UNKNOWN_ , this . _UNKNOWN_ , ) ; _UNKNOWN_ . start ( ) ; return new Observable ( observer => { _UNKNOWN_ . subscribe ( observer ) ; return ( ) => { _UNKNOWN_ . unsubscribe ( observer ) ; } ; } ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $complex$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $number$ O O O O O O $any[]$ O O O O O O O O O $any$ O O O O $boolean$ O O O O $boolean$ O O O O $any[]$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $number$ O O O O O O $Operation$ O O $any$ O O $any$ O O $any$ O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O $ErrorConstructor$ O O O O O O O O $any[]$ O $number$ O $any$ O O O O O $any$ O O O $any[]$ O O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O $any$ O $any$ O O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O O $number$ O O O $any[]$ O $number$ O $any$ O O O O $number$ O O O O O O $ErrorConstructor$ O O O O O O O O $any[]$ O $number$ O O O O O O O O $any[]$ O $boolean$ O $any$ O $any$ O O O O O O O $void$ O O O O O $void$ O O O O O O O $any$ O O O O O $void$ O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O $void$ O O O $number$ O O O O $number$ O O O O O $any$ O O O O O $boolean$ O O O O O $void$ O O O O O $any$ O O O $any$ O O O $any$ O O $any$ O O $void$ O O O $void$ O $Promise<void>$ O O O $Promise<void>$ O $void$ O O O $void$ O O O O O O $void$ O O $any$ O O O O O $any[]$ O $number$ O $any$ O O O O O $any$ O O O $any[]$ O O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O O O $boolean$ O O O O O O $any$ O O O $any[]$ O O $any$ O $any$ O O O O O O O $Promise<void>$ O O $any$ O O O O $number$ O O O O $boolean$ O O O O $any$ O O O $number$ O O O $any$ O $any$ O O O $boolean$ O O O O $void$ O O O $any$ O O O $number$ O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O O O $any[]$ O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O O O O $number$ O O O O $ErrorConstructor$ O O O O O O O $number$ O $number$ O O O O O O O $number$ O O O O O $void$ O O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $complex$ O $complex$ O O $any$ O $any$ O O O O O O O O O O O $any$ O O $complex$ O O O $any$ O $any$ O $any$ O O O O $any$ O O $complex$ O O O $any$ O $any$ O $any$ O O O O $Observable$ O $Operation$ O $any$ O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O $void$ O O O O O $any$ O $any$ O O $any$ O $void$ O $any$ O O O O O O O $any$ O $void$ O $any$ O O O O O O O O O O
<s> import gql from 's' ; import { execute , ApolloLink , Observable , FetchResult , _UNKNOWN_ , } from 's' ; import waitFor from 's' ; import { _UNKNOWN_ } from 's' ; const query = `template` ; const _UNKNOWN_ = new Error ( 's' ) ; describe ( 's' , ( ) => { it ( 's' , async ( ) => { const max = 0 ; const retry = new _UNKNOWN_ ( { delay : { initial : 0 } , attempts : { max } } ) ; const stub = jest . fn ( ( ) => _UNKNOWN_ ( _UNKNOWN_ ) ) ; const link = ApolloLink . from ( [ retry , stub ] ) ; const [ { error } ] = await waitFor ( execute ( link , { query } ) ) ; expect ( error ) . toEqual ( _UNKNOWN_ ) ; expect ( stub ) . toHaveBeenCalledTimes ( max ) ; } ) ; it ( 's' , async ( ) => { const retry = new _UNKNOWN_ ( ) ; const data = { data : { hello : 's' } } ; const stub = jest . fn ( ( ) => Observable . of ( data ) ) ; const link = ApolloLink . from ( [ retry , stub ] ) ; const [ { values } ] = await waitFor ( execute ( link , { query } ) ) ; expect ( values ) . toEqual ( [ data ] ) ; expect ( stub ) . toHaveBeenCalledTimes ( 0 ) ; } ) ; it ( 's' , async ( ) => { const retry = new _UNKNOWN_ ( { delay : { initial : 0 } , attempts : { max : 0 } , } ) ; const data = { data : { hello : 's' } } ; const stub = jest . fn ( ) ; stub . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ ) ) ; stub . _UNKNOWN_ ( Observable . of ( data ) ) ; const link = ApolloLink . from ( [ retry , stub ] ) ; const [ { values } ] = await waitFor ( execute ( link , { query } ) ) ; expect ( values ) . toEqual ( [ data ] ) ; expect ( stub ) . toHaveBeenCalledTimes ( 0 ) ; } ) ; it ( 's' , async ( ) => { const retry = new _UNKNOWN_ ( { delay : { initial : 0 } , attempts : { max : 0 } , } ) ; const data = { data : { hello : 's' } } ; const _UNKNOWN_ = jest . fn ( ) ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; let _UNKNOWN_ ; const _UNKNOWN_ = new Promise ( resolve => { _UNKNOWN_ = { subscribe ( observer ) { resolve ( ) ; Promise . resolve ( ) . then ( ( ) => { observer . next ( data ) ; observer . complete ( ) ; } ) ; return { unsubscribe : _UNKNOWN_ } ; } , } ; } ) ; const stub = jest . fn ( ) ; stub . _UNKNOWN_ ( _UNKNOWN_ ) ; stub . _UNKNOWN_ ( _UNKNOWN_ ) ; const link = ApolloLink . from ( [ retry , stub ] ) ; const subscription = execute ( link , { query } ) . subscribe ( { } ) ; await _UNKNOWN_ ; subscription . unsubscribe ( ) ; expect ( _UNKNOWN_ ) . toHaveBeenCalledTimes ( 0 ) ; } ) ; it ( 's' , async ( ) => { const retry = new _UNKNOWN_ ( { delay : { initial : 0 } , attempts : { max : 0 } , } ) ; const data = { data : { hello : 's' } } ; const stub = jest . fn ( ) ; stub . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ ) ) ; stub . _UNKNOWN_ ( _UNKNOWN_ ( _UNKNOWN_ ) ) ; stub . _UNKNOWN_ ( Observable . of ( data ) ) ; const link = ApolloLink . from ( [ retry , stub ] ) ; const observable = execute ( link , { query } ) ; const [ 0 , 0 ] = await waitFor ( observable , observable ) ; expect ( 0 . values ) . toEqual ( [ data ] ) ; expect ( 0 . values ) . toEqual ( [ data ] ) ; expect ( stub ) . toHaveBeenCalledTimes ( 0 ) ; } ) ; it ( 's' , async ( ) => { const retry = new _UNKNOWN_ ( { delay : { initial : 0 } , attempts : { max : 0 } , } ) ; const data = { data : { hello : 's' } } ; const stub = jest . fn ( ( ) => _UNKNOWN_ ( _UNKNOWN_ ) ) ; const link = ApolloLink . from ( [ retry , stub ] ) ; const [ 0 , 0 ] = await waitFor ( execute ( link , { query } ) , execute ( link , { query } ) , ) ; expect ( 0 . error ) . toEqual ( _UNKNOWN_ ) ; expect ( 0 . error ) . toEqual ( _UNKNOWN_ ) ; expect ( stub ) . toHaveBeenCalledTimes ( 0 ) ; } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ( ) => 0 ) ; const retry = new _UNKNOWN_ ( { delay : _UNKNOWN_ , attempts : { max : 0 } } ) ; const _UNKNOWN_ = jest . fn ( ( ) => _UNKNOWN_ ( _UNKNOWN_ ) ) ; const link = ApolloLink . from ( [ retry , _UNKNOWN_ ] ) ; const [ { error } ] = await waitFor ( execute ( link , { query } ) ) ; expect ( error ) . toEqual ( _UNKNOWN_ ) ; const operation = _UNKNOWN_ . mock . calls [ 0 ] [ 0 ] ; expect ( _UNKNOWN_ . mock . calls ) . toEqual ( [ [ 0 , operation , _UNKNOWN_ ] , [ 0 , operation , _UNKNOWN_ ] , ] ) ; } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ) ; _UNKNOWN_ . _UNKNOWN_ ( true ) ; _UNKNOWN_ . _UNKNOWN_ ( true ) ; _UNKNOWN_ . _UNKNOWN_ ( false ) ; const retry = new _UNKNOWN_ ( { delay : { initial : 0 } , attempts : _UNKNOWN_ , } ) ; const _UNKNOWN_ = jest . fn ( ( ) => _UNKNOWN_ ( _UNKNOWN_ ) ) ; const link = ApolloLink . from ( [ retry , _UNKNOWN_ ] ) ; const [ { error } ] = await waitFor ( execute ( link , { query } ) ) ; expect ( error ) . toEqual ( _UNKNOWN_ ) ; const operation = _UNKNOWN_ . mock . calls [ 0 ] [ 0 ] ; expect ( _UNKNOWN_ . mock . calls ) . toEqual ( [ [ 0 , operation , _UNKNOWN_ ] , [ 0 , operation , _UNKNOWN_ ] , [ 0 , operation , _UNKNOWN_ ] , ] ) ; } ) ; it ( 's' , async ( ) => { const _UNKNOWN_ = jest . fn ( ) ; _UNKNOWN_ . _UNKNOWN_ ( true ) ; _UNKNOWN_ . _UNKNOWN_ ( Promise . resolve ( true ) ) ; _UNKNOWN_ . _UNKNOWN_ ( Promise . resolve ( false ) ) ; const retry = new _UNKNOWN_ ( { delay : { initial : 0 } , attempts : _UNKNOWN_ , } ) ; const _UNKNOWN_ = jest . fn ( ( ) => new Observable ( o => o . error ( _UNKNOWN_ ) ) ) ; const link = ApolloLink . from ( [ retry , _UNKNOWN_ ] ) ; const [ { error } ] = await waitFor ( execute ( link , { query } ) ) ; expect ( error ) . toEqual ( _UNKNOWN_ ) ; const operation = _UNKNOWN_ . mock . calls [ 0 ] [ 0 ] ; expect ( _UNKNOWN_ . mock . calls ) . toEqual ( [ [ 0 , operation , _UNKNOWN_ ] , [ 0 , operation , _UNKNOWN_ ] , [ 0 , operation , _UNKNOWN_ ] , ] ) ; } ) ; </s>	O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $Error$ O O $ErrorConstructor$ O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O $any$ O O $any$ O O $complex$ O O $number$ O O O O $complex$ O O $number$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $Error$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $Error$ O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O O O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $complex$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O $complex$ O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O $complex$ O O $number$ O O O O $complex$ O O $number$ O O O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $Error$ O O O $any$ O $any$ O $any$ O $any$ O $complex$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O $complex$ O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O $complex$ O O $number$ O O O O $complex$ O O $number$ O O O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $Error$ O O O $any$ O O $Promise<unknown>$ O O $PromiseConstructor$ O $void$ O O $any$ O O $complex$ O $any$ O O $void$ O O O $PromiseConstructor$ O $complex$ O O O O O O O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $Promise<unknown>$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O $complex$ O O $number$ O O O O $complex$ O O $number$ O O O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $Error$ O O O $any$ O $any$ O $any$ O $Error$ O O O $any$ O $any$ O $any$ O $any$ O $complex$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $complex$ O O O $any$ O $any$ O $any$ O O $any$ O O $complex$ O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O $complex$ O O $number$ O O O O $complex$ O O $number$ O O O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $Error$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $Error$ O O $any$ O $any$ O $any$ O O $any$ O $Error$ O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O $any$ O $complex$ O O $number$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $Error$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $Error$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $Error$ O O O O O $any$ O $Error$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O $any$ O O $complex$ O O $number$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $Error$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $Error$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $Error$ O O O O O $any$ O $Error$ O O O O O $any$ O $Error$ O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O O $any$ O O $any$ O O $complex$ O O $number$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $Error$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $Error$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $Error$ O O O O O $any$ O $Error$ O O O O O $any$ O $Error$ O O O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { ApolloLink , Operation , FetchResult , Observable } from 's' ; import { execute , GraphQLSchema } from 's' ; export namespace _UNKNOWN_ { export interface Options { schema : GraphQLSchema ; rootValue ? : any ; context ? : any ; } } export class _UNKNOWN_ extends ApolloLink { public schema : GraphQLSchema ; public rootValue : any ; public context : any ; constructor ( { schema , rootValue , context } : _UNKNOWN_ . Options ) { super ( ) ; this . schema = schema ; this . rootValue = rootValue ; this . context = context ; } public request ( operation ) : Observable < FetchResult > | null { return new Observable < FetchResult > ( observer => { Promise . resolve ( execute ( this . schema , operation . query , this . rootValue , this . context , operation . variables , operation . operationName , ) , ) . then ( data => { if ( ! observer . closed ) { observer . next ( data ) ; observer . complete ( ) ; } } ) . catch ( error => { if ( ! observer . closed ) { observer . error ( error ) ; } } ) ; } ) ; } } export default _UNKNOWN_ ; </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $Operation$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O O $PromiseConstructor$ O $complex$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O $complex$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O $any$ O O
<s> import { Observable , ApolloLink , execute } from 's' ; import { print , graphql } from 's' ; import { makeExecutableSchema } from 's' ; import gql from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const typeDefs = `template` ; const schema = makeExecutableSchema ( { typeDefs } ) ; describe ( 's' , ( ) => { const data = { data : { hello : 's' } } ; const 0 = { data : { hello : 's' } } ; const mockError = { throws : new TypeError ( 's' ) } ; let subscriber ; beforeEach ( ( ) => { const next = jest . fn ( ) ; const error = jest . fn ( ) ; const complete = jest . fn ( ) ; subscriber = { next , error , complete , } ; } ) ; it ( 's' , ( ) => { const link = new _UNKNOWN_ ( { schema } ) ; const _UNKNOWN_ = console . warn ; console . warn = warning => expect ( warning [ 's' ] ) . toBeDefined ( ) ; expect ( link . concat ( ( operation , forward ) => forward ( operation ) ) ) . toEqual ( link , ) ; console . warn = _UNKNOWN_ ; } ) ; it ( 's' , ( ) => { expect ( ( ) => new _UNKNOWN_ ( ) ) . toThrow ( ) ; } ) ; it ( 's' , ( ) => { let rootValue = { } ; let context = { } ; let link = new _UNKNOWN_ ( { schema , rootValue , context } ) ; expect ( link . rootValue ) . toEqual ( rootValue ) ; expect ( link . context ) . toEqual ( context ) ; expect ( link . schema ) . toEqual ( schema ) ; } ) ; it ( 's' , done => { const next = jest . fn ( ) ; const link = new _UNKNOWN_ ( { schema } ) ; const observable = execute ( link , { query : _UNKNOWN_ , } ) ; observable . subscribe ( { next , error => expect ( false ) , complete : ( ) => { expect ( next ) . toHaveBeenCalledTimes ( 0 ) ; done ( ) ; } , } ) ; } ) ; it ( 's' , done => { const _UNKNOWN_ = 's' ; const _UNKNOWN_ = makeExecutableSchema ( { typeDefs } ) ; const link = new _UNKNOWN_ ( { schema : _UNKNOWN_ } ) ; const observable = execute ( link , { query : _UNKNOWN_ , } ) ; observable . subscribe ( result => expect ( false ) , error => { expect ( error ) . toEqual ( mockError . throws ) ; done ( ) ; } , ( ) => { expect ( false ) ; done ( ) ; } , ) ; } ) ; it ( 's' , done => { const next = jest . fn ( ) ; const link = new _UNKNOWN_ ( { schema } ) ; const introspectionQuery = `template` ; const observable = execute ( link , { query : introspectionQuery , } ) ; observable . subscribe ( next , error => expect ( false ) , ( ) => { expect ( next ) . toHaveBeenCalledTimes ( 0 ) ; done ( ) ; } , ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O $any$ O $any$ O O $string$ O O O $any$ O O O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O $complex$ O O $complex$ O O $string$ O O O O O O $complex$ O O $any$ O O $TypeErrorConstructor$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O O O O $void$ O $Console$ O $void$ O $Console$ O $void$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O $Console$ O $void$ O $void$ O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O O O O O ${}$ O O O O O ${}$ O O O O O $any$ O O $any$ O O $any$ O ${}$ O ${}$ O O O $any$ O $any$ O $any$ O O $any$ O ${}$ O O $any$ O $any$ O $any$ O O $any$ O ${}$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O $string$ O O O O $any$ O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O $any$ O $complex$ O $any$ O O $any$ O O O O O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { ApolloLink , Operation , FetchResult , Observable } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export namespace _UNKNOWN_ { export interface Configuration { uri : string ; options ? : _UNKNOWN_ ; _UNKNOWN_ ? : any ; } } export import _UNKNOWN_ = _UNKNOWN_ . Configuration ; export class _UNKNOWN_ extends ApolloLink { private _UNKNOWN_ : _UNKNOWN_ ; constructor ( _UNKNOWN_ : _UNKNOWN_ . Configuration | _UNKNOWN_ , ) { super ( ) ; if ( _UNKNOWN_ instanceof _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ ; } else { this . _UNKNOWN_ = new _UNKNOWN_ ( _UNKNOWN_ . uri , _UNKNOWN_ . options , _UNKNOWN_ . _UNKNOWN_ , ) ; } } public request ( operation ) : Observable < FetchResult > | null { return this . _UNKNOWN_ . request ( operation ) as Observable < FetchResult > ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $string$ O O O $any$ O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $Operation$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { Observable , execute } from 's' ; import { ExecutionResult } from 's' ; import { _UNKNOWN_ } from 's' ; const query = `template` ; const mutation = `template` ; const subscription = `template` ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const client = { } ; client . _UNKNOWN_ = _UNKNOWN_ . prototype ; expect ( ( ) => new _UNKNOWN_ ( client ) ) . not . toThrow ( ) ; } ) ; it ( 's' , done => { const result = { data : { data : 's' } } ; const client = { } ; const observable = Observable . of ( result ) ; client . _UNKNOWN_ = _UNKNOWN_ . prototype ; client . request = jest . fn ( ) ; client . request . _UNKNOWN_ ( observable ) ; const link = new _UNKNOWN_ ( client ) ; const obs = execute ( link , { query } ) ; expect ( obs ) . toEqual ( observable ) ; obs . subscribe ( data => { expect ( data ) . toEqual ( result ) ; expect ( client . request ) . toHaveBeenCalledTimes ( 0 ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const result = { data : { data : 's' } } ; const client = { } ; const observable = Observable . of ( result ) ; client . _UNKNOWN_ = _UNKNOWN_ . prototype ; client . request = jest . fn ( ) ; client . request . _UNKNOWN_ ( observable ) ; const link = new _UNKNOWN_ ( client ) ; const obs = execute ( link , { query : mutation } ) ; expect ( obs ) . toEqual ( observable ) ; obs . subscribe ( data => { expect ( data ) . toEqual ( result ) ; expect ( client . request ) . toHaveBeenCalledTimes ( 0 ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const result = { data : { data : 's' } } ; const client = { } ; const observable = Observable . of ( result ) ; client . _UNKNOWN_ = _UNKNOWN_ . prototype ; client . request = jest . fn ( ) ; client . request . _UNKNOWN_ ( observable ) ; const link = new _UNKNOWN_ ( client ) ; const obs = execute ( link , { query : mutation } ) ; expect ( obs ) . toEqual ( observable ) ; obs . subscribe ( data => { expect ( data ) . toEqual ( result ) ; expect ( client . request ) . toHaveBeenCalledTimes ( 0 ) ; done ( ) ; } ) ; } ) ; it ( 's' , done => { const results = [ { data : { data : 's' } } , { data : { data : 's' } } , ] ; const client = { } ; client . _UNKNOWN_ = _UNKNOWN_ . prototype ; client . request = jest . fn ( ( ) => { const copy = [ ... results ] ; return new Observable < ExecutionResult > ( observer => { observer . next ( copy [ 0 ] ) ; observer . next ( copy [ 0 ] ) ; } ) ; } ) ; const link = new _UNKNOWN_ ( client ) ; execute ( link , { query : subscription } ) . subscribe ( data => { expect ( client . request ) . toHaveBeenCalledTimes ( 0 ) ; expect ( data ) . toEqual ( results . shift ( ) ) ; if ( results . length === 0 ) { done ( ) ; } } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $complex$ O O $complex$ O O $string$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $complex$ O O O $complex$ O O $string$ O O O O O O $complex$ O O $string$ O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $complex$ O O O $complex$ O O O O $any$ O $any$ O O $any$ O O $any$ O $any$ O $complex$ O O O O O $any$ O $any$ O $complex$ O O O O O O O O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $complex$ O $complex$ O O O O O O $complex$ O $number$ O O O O $any$ O O O O O O O O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> export namespace _UNKNOWN_ { export interface _UNKNOWN_ < T > { closed : boolean ; next ( value : T ) : void ; error ( errorValue ) : void ; complete ( ) : void ; } export interface Subscription { closed : boolean ; unsubscribe ( ) : void ; } export interface Observer < T > { start ? ( subscription ) : any ; next ? ( value : T ) : void ; error ? ( errorValue ) : void ; complete ? ( ) : void ; } export type Subscriber < T > = ( observer < T > , ) => void | ( ( ) => void ) | Subscription ; export interface _UNKNOWN_ < T > { subscribe ? : Subscriber < T > ; } } </s>	O O O $any$ O O O $any$ O $any$ O O $boolean$ O O O $void$ O $T$ O $any$ O O O O $void$ O $any$ O O O O $void$ O O O O O O O O $any$ O $boolean$ O O O $void$ O O O O O O O O $any$ O $any$ O O $any$ O O $Subscription$ O O O O $void$ O O $T$ O $any$ O O O O $void$ O O $any$ O O O O $void$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O O O $any$ O O O $any$ O $any$ O O $Subscriber<T>$ O O $any$ O $any$ O O O O O
<s> declare function require ( name ) ; namespace Observable { } import { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } ; export type Observer < T > = _UNKNOWN_ . Observer < T > ; export type Subscriber < T > = _UNKNOWN_ . Subscriber < T > ; export type _UNKNOWN_ < T > = _UNKNOWN_ . _UNKNOWN_ < T > ; export const Observable : { new < T > ( subscriber < T > ) : Observable < T > ; from < R > ( observable : Observable < R > | _UNKNOWN_ . _UNKNOWN_ < R > | _UNKNOWN_ < R > , ) : Observable < R > ; of < R > ( ... args < R > ) : Observable < R > ; } = require ( 's' ) ; export interface Observable < T > { subscribe ( observerOrNext : ( ( value : T ) => void ) | _UNKNOWN_ . Observer < T > , error ? : ( error ) => void , complete ? : ( ) => void , ) : _UNKNOWN_ . Subscription ; forEach ( fn : ( value : T ) => void ) : Promise < void > ; map < R > ( fn : ( value : T ) => R ) : Observable < R > ; filter ( fn : ( value : T ) => boolean ) : Observable < T > ; reduce < R = T > ( fn : ( previousValue : R | T , currentValue : T ) => R | T , initialValue ? : R | T , ) : Observable < R | T > ; flatMap < R > ( fn : ( value : T ) => _UNKNOWN_ . _UNKNOWN_ < R > ) : Observable < R > ; from < R > ( observable : Observable < R > | _UNKNOWN_ . _UNKNOWN_ < R > | _UNKNOWN_ < R > , ) : Observable < R > ; of < R > ( ... args < R > ) : Observable < R > ; } </s>	O O O $any$ O $string$ O O O $complex$ O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $complex$ O O O O $any$ O O $Subscriber$ O $any$ O O O $complex$ O $any$ O O $Observable<R>$ O $any$ O O $complex$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $complex$ O $any$ O O $Observable<R>$ O $any$ O O O $Array$ O $any$ O O O $complex$ O $any$ O O O O $any$ O O O O O O $complex$ O $any$ O O $Subscription$ O $complex$ O O O $T$ O $any$ O O O O O $any$ O $any$ O $any$ O O $void$ O O O $any$ O O O O $void$ O O O O O O O O O $any$ O $any$ O $Promise<void>$ O $void$ O O $T$ O $any$ O O O O O $PromiseConstructor$ O O O O $Observable<R>$ O $any$ O O $R$ O O $T$ O $any$ O O $any$ O O $complex$ O $any$ O O $Observable<T>$ O $boolean$ O O $T$ O $any$ O O O O O $complex$ O $any$ O O $complex$ O $any$ O $any$ O O $complex$ O O $complex$ O $any$ O $any$ O $T$ O $any$ O O $any$ O $any$ O $complex$ O O $any$ O $any$ O O O $complex$ O $any$ O $any$ O O $Observable<R>$ O $any$ O O $any$ O O $T$ O $any$ O O $any$ O $any$ O $any$ O O O $complex$ O $any$ O O $Observable<R>$ O $any$ O O $complex$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $complex$ O $any$ O O $Observable<R>$ O $any$ O O O $Array$ O $any$ O O O $complex$ O $any$ O O O O
<s> import { Observable } from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const list < number > = [ ] ; return Observable . from ( [ 0 , 0 , 0 , 0 ] ) . filter ( x => x > 0 ) . forEach ( x => list . push ( x ) ) . then ( ( ) => expect ( list ) . toEqual ( [ 0 , 0 ] ) ) ; } ) ; it ( 's' , ( ) => { const list < number > = [ ] ; return expect ( ( ) => Observable . from ( [ 0 , 0 , 0 , 0 ] ) . filter ( < any > 0 ) . forEach ( x => list . push ( x ) ) . then , ) . toThrow ( ) ; } ) ; it ( 's' , done => { const error = new Error ( 's' ) ; return expect ( ( ) => Observable . from ( [ 0 , 0 , 0 , 0 ] ) . filter ( ( ) => { throw error ; } ) . subscribe ( { error => { expect ( err ) . toEqual ( error ) ; done ( ) ; } , } ) , ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const list < number > = [ ] ; const obs = Observable . from ( [ 0 , 0 , 0 , 0 ] ) ; obs . subscribe ( { } ) . unsubscribe ( ) ; return expect ( ( ) => obs . filter ( x => x > 0 ) . forEach ( x => list . push ( x ) ) . then , ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const list < number > = [ ] ; const obs = new Observable < number > ( observer => { observer . next ( 0 ) ; observer . next ( 0 ) ; observer . complete ( ) ; observer . next ( 0 ) ; } ) ; return expect ( ( ) => obs . filter ( x => x > 0 ) . forEach ( x => list . push ( x ) ) . then , ) . not . toThrow ( ) ; } ) ; } ) ; </s>	O O O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $Array$ O O O O O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<number>$ O $number$ O $number$ O O O O $Promise<void>$ O $number$ O $number[]$ O $number$ O $number$ O O O O O O O O $any$ O $number[]$ O O $any$ O O O O O O O O O O O O $any$ O O O O O O O O $Array$ O O O O O O O O $any$ O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<number>$ O O O O O O O $Promise<void>$ O $number$ O $number[]$ O $number$ O $number$ O O O O O O O $any$ O O O O O O $any$ O O O $any$ O O O $Error$ O O $ErrorConstructor$ O O O O O $any$ O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<number>$ O O O O O O $Error$ O O O O $Subscription$ O O $any$ O O $any$ O $any$ O O $any$ O $Error$ O O $any$ O O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $Array$ O O O O O O O O $Observable<number>$ O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<number>$ O $Subscription$ O O O O O $void$ O O O O $any$ O O O O $Observable<number>$ O $Observable<number>$ O $number$ O $number$ O O O O $Promise<void>$ O $number$ O $number[]$ O $number$ O $number$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $Array$ O O O O O O O O $Observable<number>$ O O $complex$ O O O O $any$ O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O $any$ O $void$ O O O O O O O O $any$ O O O O $Observable<number>$ O $Observable<number>$ O $number$ O $number$ O O O O $Promise<void>$ O $number$ O $number[]$ O $number$ O $number$ O O O O O O O $any$ O $any$ O O O O O O O O O O
<s> import { Observable } from 's' ; describe . skip ( 's' , ( ) => { it ( 's' , done => { let list < number > = [ ] ; try { Observable . from ( [ 0 , 0 , 0 ] ) . flatMap ( x => { return Observable . from ( [ x * 0 , x * 0 , x * 0 ] ) ; } ) . forEach ( x => { list . push ( x ) ; } ) . then ( ( ) => { expect ( list ) . toEqual ( [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ) ; done ( ) ; } ) ; } catch ( e ) { done . fail ( e ) ; } } ) ; it ( 's' , ( ) => { return Observable . from ( [ 0 , 0 , 0 ] ) . flatMap ( ( ) => { return < any > 0 ; } ) . forEach ( ( ) => null ) . then ( ( ) => expect ( false ) , ( ) => expect ( true ) ) ; } ) ; it ( 's' , done => { try { expect ( ( ) => Observable . from ( [ 0 , 0 , 0 , 0 ] ) . flatMap ( < any > 0 ) . forEach ( x => void 0 ) . then ( ( ) => done . fail ( ) ) , ) . toThrow ( ) ; done ( ) ; } catch ( e ) { done . fail ( e ) ; } } ) ; it ( 's' , done => { const error = new Error ( 's' ) ; try { return expect ( ( ) => Observable . from ( [ 0 , 0 , 0 , 0 ] ) . flatMap ( ( ) => { throw error ; } ) . subscribe ( { error => { expect ( err ) . toEqual ( error ) ; done ( ) ; } , } ) , ) . toThrow ( ) ; } catch ( e ) { done . fail ( e ) ; } } ) ; it ( 's' , done => { Observable . from ( Observable . of ( 0 ) ) . flatMap ( x => { return new Observable ( observer => done ) ; } ) . subscribe ( { } ) . unsubscribe ( ) ; } ) ; it ( 's' , ( ) => { const list < number > = [ ] ; const obs = Observable . from ( [ 0 , 0 , 0 , 0 ] ) ; obs . subscribe ( { } ) . unsubscribe ( ) ; return expect ( ( ) => obs . flatMap ( x => { return Observable . from ( [ x * 0 , x * 0 , x * 0 ] ) ; } ) . forEach ( x => { list . push ( x ) ; } ) . then , ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const list < number > = [ ] ; const obs = new Observable < number > ( observer => { observer . next ( 0 ) ; observer . next ( 0 ) ; observer . complete ( ) ; observer . next ( 0 ) ; } ) ; obs . subscribe ( { } ) . unsubscribe ( ) ; return expect ( ( ) => obs . flatMap ( x => { return Observable . from ( [ x * 0 , x * 0 , x * 0 ] ) ; } ) . forEach ( x => { list . push ( x ) ; } ) . then , ) . not . toThrow ( ) ; } ) ; } ) ; </s>	O O O $complex$ O O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O O $Array$ O O O O O O O O O $complex$ O $Observable<R>$ O O O O O O O O O O $Observable<R>$ O $number$ O O O $complex$ O $Observable<R>$ O O $number$ O O O $number$ O O O $number$ O O O O O O O O $Promise<void>$ O $number$ O O $number[]$ O $number$ O $number$ O O O O O O O O O O O $any$ O $number[]$ O O $any$ O O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $complex$ O $Observable<R>$ O O O O O O O O O O $Observable<R>$ O O O O O O O O O O O O O O $Promise<void>$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O O $any$ O O O O $any$ O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<R>$ O O O O O O O $Promise<void>$ O $unknown$ O O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $Error$ O O $ErrorConstructor$ O O O O O O O $any$ O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<R>$ O O O O O O $Error$ O O O O $Subscription$ O O $any$ O O $any$ O $any$ O O $any$ O $Error$ O O $any$ O O O O O O O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O $complex$ O $Observable<R>$ O $complex$ O $Observable<R>$ O O O O O $Observable<R>$ O $number$ O O O O $complex$ O $any$ O $any$ O O O O O $Subscription$ O O O O O $void$ O O O O O O $any$ O O O O O O O O $Array$ O O O O O O O O $Observable<number>$ O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<number>$ O $Subscription$ O O O O O $void$ O O O O $any$ O O O O $Observable<number>$ O $Observable<R>$ O $number$ O O O $complex$ O $Observable<R>$ O O $number$ O O O $number$ O O O $number$ O O O O O O O O $Promise<void>$ O $number$ O O $number[]$ O $number$ O $number$ O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $Array$ O O O O O O O O $Observable<number>$ O O $complex$ O O O O $any$ O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O $any$ O $void$ O O O O O O O $Observable<number>$ O $Subscription$ O O O O O $void$ O O O O $any$ O O O O $Observable<number>$ O $Observable<R>$ O $number$ O O O $complex$ O $Observable<R>$ O O $number$ O O O $number$ O O O $number$ O O O O O O O O $Promise<void>$ O $number$ O O $number[]$ O $number$ O $number$ O O O O O O O O O $any$ O $any$ O O O O O O O O O O
<s> import { Observable } from 's' ; describe ( 's' , ( ) => { it . skip ( 's' , done => { try { Observable . from ( [ 0 , 0 , 0 , 0 ] ) . forEach ( < any > 0 ) ; } catch ( e ) { try { expect ( e . message ) . toMatch ( "s" ) ; done ( ) ; } catch ( e ) { done . fail ( e ) ; } } } ) ; it ( 's' , ( ) => { const error = new Error ( 's' ) ; return new Observable < number > ( observer => { observer . complete ( ) ; throw error ; } ) . forEach ( x => x ) . catch ( err => expect ( err ) . toEqual ( error ) ) ; } ) ; } ) ; </s>	O O O $complex$ O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Promise<void>$ O O O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Error$ O O $ErrorConstructor$ O O O O O O $complex$ O O O O $any$ O O $any$ O $void$ O O O O $Error$ O O O O $Promise<void>$ O $number$ O $number$ O O $complex$ O $any$ O $any$ O $any$ O O $any$ O $Error$ O O O O O O O O O O
<s> import { Observable } from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let list < number > = [ ] ; return Observable . from ( [ 0 , 0 , 0 ] ) . map ( x => x * 0 ) . forEach ( x => list . push ( x ) ) . then ( ( ) => expect ( list ) . toEqual ( [ 0 , 0 , 0 ] ) ) ; } ) ; it ( 's' , done => { try { Observable . from ( [ 0 , 0 , 0 , 0 ] ) . map ( < any > 0 ) . forEach ( x => void 0 ) . then ( ( ) => done . fail ( ) ) ; } catch ( e ) { expect ( e . message ) . toMatch ( "s" ) ; done ( ) ; } } ) ; it ( 's' , done => { const error = new Error ( 's' ) ; try { Observable . from ( [ 0 , 0 , 0 , 0 ] ) . map ( num => { expect ( num ) . toEqual ( 0 ) ; debugger ; throw error ; } ) . subscribe ( { error => { expect ( err ) . toEqual ( error ) ; done ( ) ; } , } ) ; } catch ( e ) { done . fail ( e ) ; } } ) ; it ( 's' , ( ) => { const obs = Observable . from ( [ 0 , 0 , 0 , 0 ] ) ; obs . subscribe ( { } ) . unsubscribe ( ) ; return expect ( ( ) => obs . map ( x => x * 0 ) . forEach ( x => void 0 ) . then , ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const obs = new Observable < number > ( observer => { observer . next ( 0 ) ; observer . next ( 0 ) ; observer . complete ( ) ; observer . next ( 0 ) ; } ) ; return expect ( ( ) => obs . map ( x => x * 0 ) . forEach ( x => void 0 ) . then , ) . not . toThrow ( ) ; } ) ; } ) ; </s>	O O O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $Array$ O O O O O O O O $complex$ O $Observable<R>$ O O O O O O O O O O $Observable<R>$ O $number$ O $number$ O O O O $Promise<void>$ O $number$ O $number[]$ O $number$ O $number$ O O O O O O O O $any$ O $number[]$ O O $any$ O O O O O O O O O O O O O O $any$ O O O $any$ O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<R>$ O O O O O O O $Promise<void>$ O $unknown$ O O O O O O O O O O $any$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O $Error$ O O $ErrorConstructor$ O O O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<R>$ O $number$ O O $any$ O $number$ O O $any$ O O O O O O O $Error$ O O O O $Subscription$ O O $any$ O O $any$ O $any$ O O $any$ O $Error$ O O $any$ O O O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $Observable<number>$ O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<number>$ O $Subscription$ O O O O O $void$ O O O O $any$ O O O O $Observable<number>$ O $Observable<R>$ O $number$ O $number$ O O O O $Promise<void>$ O $number$ O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $Observable<number>$ O O $complex$ O O O O $any$ O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O $any$ O $void$ O O O O O O O O $any$ O O O O $Observable<number>$ O $Observable<R>$ O $number$ O $number$ O O O O $Promise<void>$ O $number$ O O O O O O O O O $any$ O $any$ O O O O O O O O O O
<s> import { Observable } from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let list < number > = [ ] ; return Observable . of ( 0 , 0 , 0 ) . map ( x => x * 0 ) . forEach ( x => list . push ( x ) ) . then ( ( ) => expect ( list ) . toEqual ( [ 0 , 0 , 0 ] ) ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const sub = Observable . of ( 0 ) . subscribe ( { } ) ; sub . unsubscribe ( ) ; sub . unsubscribe ( ) ; } ) ; it ( 's' , ( ) => { let sub = Observable . of ( 0 , 0 ) . subscribe ( { } ) ; sub = Observable . of ( 0 , 0 ) . subscribe ( { next : sub . unsubscribe , } ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const spy = jest . fn ( ) ; const list < number > = [ ] ; return new Observable < number > ( observer => { observer . next ( 0 ) ; observer . next ( 0 ) ; observer . next ( 0 ) ; observer . complete ( ) ; observer . next ( 0 ) ; observer . complete ( ) ; spy ( ) ; } ) . map ( x => x * 0 ) . forEach ( x => list . push ( x ) ) . then ( ( ) => expect ( list ) . toEqual ( [ 0 , 0 , 0 ] ) ) . then ( ( ) => expect ( spy ) . toBeCalled ( ) ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => new Observable < number > ( < any > 0 ) ) . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const error = new Error ( 's' ) ; return new Promise ( ( resolve , reject ) => new Observable < number > ( observer => { observer . complete ( ) ; return ; } ) . subscribe ( { complete : ( ) => { reject ( error ) ; } , } ) , ) . catch ( err => expect ( err ) . toEqual ( error ) ) ; } ) ; it ( 's' , ( ) => { new Observable < number > ( observer => { observer . next ( 0 ) ; observer . next ( 0 ) ; observer . next ( 0 ) ; observer . complete ( ) ; } ) . subscribe ( { } ) ; } ) ; it ( 's' , ( ) => { let num = 0 ; return new Promise ( ( resolve , reject ) => { new Observable < number > ( observer => { observer . next ( 0 ) ; observer . next ( 0 ) ; observer . next ( 0 ) ; observer . complete ( ) ; } ) . subscribe ( val => expect ( ++ num ) . toBe ( val ) , reject , resolve ) ; } ) ; } ) ; } ) ; </s>	O O O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $Array$ O O O O O O O O $complex$ O $Observable<R>$ O O O O O O O O $Observable<R>$ O $number$ O $number$ O O O O $Promise<void>$ O $number$ O $number[]$ O $number$ O $number$ O O O O O O O O $any$ O $number[]$ O O $any$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $Subscription$ O $complex$ O $Observable<R>$ O O O O $Subscription$ O O O O O $Subscription$ O $void$ O O O $Subscription$ O $void$ O O O O O O $any$ O O O O O O O O $Subscription$ O $complex$ O $Observable<R>$ O O O O O O $Subscription$ O O O O O $Subscription$ O $complex$ O $Observable<R>$ O O O O O O $Subscription$ O O $void$ O $Subscription$ O $void$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $Array$ O O O O O O O O O $complex$ O O O O $any$ O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O $any$ O $void$ O O O O $any$ O $void$ O O O $any$ O O O O O O $Observable<R>$ O $number$ O $number$ O O O O $Promise<void>$ O $number$ O $number[]$ O $number$ O $number$ O O O O O O O O $any$ O $number[]$ O O $any$ O O O O O O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $complex$ O O O O O O O O O O O $any$ O O O O O O $any$ O O O O O O O O $Error$ O O $ErrorConstructor$ O O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $complex$ O O O O $any$ O O $any$ O $void$ O O O O O O O O $Subscription$ O O $void$ O O O O O $void$ O $Error$ O O O O O O O O O $Promise<unknown>$ O $any$ O $any$ O $any$ O O $any$ O $Error$ O O O O O O $any$ O O O O O O O O $complex$ O O O O $any$ O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O O O O $Subscription$ O O O O O O O O $any$ O O O O O O O O $number$ O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O $complex$ O O O O $any$ O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O O O O $Subscription$ O $number$ O $any$ O O $number$ O O $any$ O $number$ O O $void$ O $void$ O O O O O O O O O O O O
<s> import { Observable } from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { return Observable . from ( [ 0 , 0 , 0 , 0 , 0 , 0 ] ) . reduce ( ( a , b ) => { return a + b ; } ) . forEach ( x => { expect ( x ) . toBe ( 0 ) ; } ) ; } ) ; it ( 's' , ( ) => { return Observable . from ( [ 0 ] ) . reduce ( ( a , b ) => { return a + b ; } ) . forEach ( x => { expect ( x ) . toBe ( 0 ) ; } ) ; } ) ; it ( 's' , ( ) => { return Observable . from ( [ ] ) . reduce ( ( a , b ) => { return a + b ; } ) . forEach ( ( ) => null ) . then ( ( ) => expect ( false ) , ( ) => expect ( true ) ) ; } ) ; it ( 's' , ( ) => { return Observable . from ( [ 0 , 0 , 0 , 0 , 0 , 0 ] ) . reduce ( ( a , b ) => { return a + b ; } , 0 ) . forEach ( x => { expect ( x ) . toBe ( 0 ) ; } ) ; } ) ; it ( 's' , ( ) => { return Observable . from ( [ ] ) . reduce ( ( a , b ) => { return a + b ; } , 0 ) . forEach ( x => { expect ( x ) . toBe ( 0 ) ; } ) ; } ) ; it ( 's' , done => { try { Observable . from ( [ 0 , 0 , 0 , 0 ] ) . reduce ( < any > 0 ) . forEach ( x => void 0 ) . then ( ( ) => done . fail ( ) ) ; } catch ( e ) { expect ( e . message ) . toMatch ( "s" ) ; done ( ) ; } } ) ; it ( 's' , done => { const error = new Error ( 's' ) ; return expect ( ( ) => Observable . from ( [ 0 , 0 , 0 , 0 ] ) . reduce ( ( ) => { throw error ; } ) . subscribe ( { error => { expect ( err ) . toEqual ( error ) ; done ( ) ; } , } ) , ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const obs = Observable . from ( [ 0 , 0 , 0 , 0 ] ) ; obs . subscribe ( { } ) . unsubscribe ( ) ; return expect ( ( ) => obs . reduce ( ( a , b ) => { return a + b ; } , 0 ) . forEach ( x => { expect ( x ) . toBe ( 0 ) ; } ) . then , ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const obs = new Observable < number > ( observer => { observer . next ( 0 ) ; observer . next ( 0 ) ; observer . complete ( ) ; observer . next ( 0 ) ; } ) ; return expect ( ( ) => obs . reduce ( ( a , b ) => { return a + b ; } , 0 ) . forEach ( x => { expect ( x ) . toBe ( 0 ) ; } ) . then , ) . not . toThrow ( ) ; } ) ; } ) ; </s>	O O O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O O O O O $complex$ O O $number$ O $number$ O O O O $number$ O $number$ O O O O $Promise<void>$ O $number$ O O $any$ O $number$ O O $any$ O O O O O O O O O O $any$ O O O O O O O O $complex$ O $Observable<R>$ O O O O O O $complex$ O O $number$ O $number$ O O O O $number$ O $number$ O O O O $Promise<void>$ O $number$ O O $any$ O $number$ O O $any$ O O O O O O O O O O $any$ O O O O O O O O $complex$ O $Observable<R>$ O O O O O $Observable<any>$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O $Promise<void>$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O O O O O $complex$ O O $number$ O $number$ O O O O $number$ O $number$ O O O O O O $Promise<void>$ O $number$ O O $any$ O $number$ O O $any$ O O O O O O O O O O $any$ O O O O O O O O $complex$ O $Observable<R>$ O O O O O $Observable<any>$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $Promise<void>$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O O O O O $any$ O O O $any$ O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O $complex$ O O O O O O O $Promise<void>$ O $number$ O O O O O O O O O O $any$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O $Error$ O O $ErrorConstructor$ O O O O O $any$ O O O O $complex$ O $Observable<R>$ O O O O O O O O O O O O $complex$ O O O O O O $Error$ O O O O $Subscription$ O O $any$ O O $any$ O $any$ O O $any$ O $Error$ O O $any$ O O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $Observable<number>$ O $complex$ O $Observable<R>$ O O O O O O O O O O O O $Observable<number>$ O $Subscription$ O O O O O $void$ O O O O $any$ O O O O $Observable<number>$ O $complex$ O O $number$ O $number$ O O O O $number$ O $number$ O O O O O O $Promise<void>$ O $number$ O O $any$ O $number$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $Observable<number>$ O O $complex$ O O O O $any$ O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O $any$ O $void$ O O O O O O O O $any$ O O O O $Observable<number>$ O $complex$ O O $number$ O $number$ O O O O $number$ O $number$ O O O O O O $Promise<void>$ O $number$ O O $any$ O $number$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O O O O O O O O O
<s> import { Observable } from 's' ; export * from 's' ; export default Observable ; </s>	O O O $complex$ O O O O O O O O O O O $complex$ O O
<s> import { browser , by , element } from 's' ; export class AppPage { navigateTo ( ) { return browser . get ( 's' ) ; } getParagraphText ( ) { return element ( by . css ( 's' ) ) . getText ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O
<s> import { AppPage } from 's' ; describe ( 's' , ( ) => { let page ; beforeEach ( ( ) => { page = new AppPage ( ) ; } ) ; it ( 's' , ( ) => { page . navigateTo ( ) ; expect ( page . getParagraphText ( ) ) . toEqual ( 's' ) ; } ) ; } ) ; </s>	O O O $any$ O O O O $any$ O O O O O O O O $AppPage$ O $any$ O O O O O $AppPage$ O O $any$ O O O O O O $any$ O O O O O O O $AppPage$ O $any$ O O O $any$ O $AppPage$ O $any$ O O O O $any$ O O O O O O O O O O O
<s> const _UNKNOWN_ = [ 's' , 's' , 's' ] ; function _UNKNOWN_ ( ) : typeof requestAnimationFrame { let lastTime = 0 ; return function ( callback ) : number { const currTime = new Date ( ) . getTime ( ) ; const timeToCall = Math . max ( 0 , 0 - ( currTime - lastTime ) ) ; const id = window . setTimeout ( ( ) => { callback ( currTime + timeToCall ) ; } , timeToCall ) ; lastTime = currTime + timeToCall ; return id ; } ; } function _UNKNOWN_ ( ) : typeof requestAnimationFrame { if ( typeof window === 's' ) { return ( ) => null ; } if ( window . requestAnimationFrame ) { return window . requestAnimationFrame . bind ( window ) ; } const prefix = _UNKNOWN_ . filter ( key => `template` in window ) [ 0 ] ; return prefix ? window [ `template` ] : _UNKNOWN_ ( ) ; } export const _UNKNOWN_ = _UNKNOWN_ ( ) ; </s>	O O $string[]$ O O O O O O O O O O $number$ O O O O $number$ O O $number$ O O O O O O $any$ O O O O O $number$ O O $DateConstructor$ O O O $number$ O O O O $number$ O $Math$ O $number$ O O O O O O $number$ O $number$ O O O O $number$ O $complex$ O $number)$ O O O O O $any$ O $number$ O $number$ O O O O $number$ O O $number$ O $number$ O $number$ O O $number$ O O O O O $number$ O O O O $number$ O O O O $complex$ O O O O O O O O O O O O O $complex$ O $number)$ O O O $complex$ O $number)$ O $any$ O $complex$ O O O O $string$ O $string[]$ O $complex$ O $string$ O O O $complex$ O O O O O O $string$ O $complex$ O O O O $number$ O O O O O O $number$ O $number$ O O O O
<s> import { DOCUMENT } from 's' ; import { Inject , Injectable , Optional , Provider , SkipSelf } from 's' ; import { _UNKNOWN_ } from 's' ; export type _UNKNOWN_ = ( t , b , c , d ) => number ; function _UNKNOWN_ ( t , b , c , d ) { const cc = c - b ; let _UNKNOWN_ = t / ( d / 0 ) ; if ( _UNKNOWN_ < 0 ) { return cc / 0 * _UNKNOWN_ * _UNKNOWN_ * _UNKNOWN_ + b ; } else { return cc / 0 * ( ( _UNKNOWN_ -= 0 ) * _UNKNOWN_ * _UNKNOWN_ + 0 ) + b ; } } @ Injectable ( ) export class _UNKNOWN_ { private doc : Document ; constructor ( @ Inject ( DOCUMENT ) doc ) { this . doc = doc ; } _UNKNOWN_ ( el : Element | Window , _UNKNOWN_ = 0 ) { if ( el === window ) { this . doc . body . scrollTop = _UNKNOWN_ ; this . doc . documentElement . scrollTop = _UNKNOWN_ ; } else { ( el as Element ) . scrollTop = _UNKNOWN_ ; } } _UNKNOWN_ ( el ) : { top : number , left : number } { const ret = { top : 0 , left : 0 } ; if ( ! el || ! el . _UNKNOWN_ ( ) . length ) return ret ; const rect = el . getBoundingClientRect ( ) ; if ( rect . width || rect . height ) { const doc = el . ownerDocument . documentElement ; ret . top = rect . top - doc . _UNKNOWN_ ; ret . left = rect . left - doc . _UNKNOWN_ ; } else { ret . top = rect . top ; ret . left = rect . left ; } return ret ; } _UNKNOWN_ ( el ? : Element | Window , top = true ) { const target = el ? el : window ; const prop = top ? 's' : 's' ; const method = top ? 's' : 's' ; const _UNKNOWN_ = target === window ; let ret = _UNKNOWN_ ? target [ prop ] : target [ method ] ; if ( _UNKNOWN_ && typeof ret !== 's' ) { ret = this . doc . documentElement [ method ] ; } return ret ; } scrollTo ( containerEl : Element | Window , _UNKNOWN_ = 0 , easing ? , callback ? : ( ) => void ) { const target = containerEl ? containerEl : window ; const scrollTop = this . _UNKNOWN_ ( target ) ; const startTime = Date . now ( ) ; const _UNKNOWN_ = ( ) => { const timestamp = Date . now ( ) ; const time = timestamp - startTime ; this . _UNKNOWN_ ( target , ( easing || _UNKNOWN_ ) ( time , scrollTop , _UNKNOWN_ , 0 ) ) ; if ( time < 0 ) { _UNKNOWN_ ( _UNKNOWN_ ) ; } else { if ( callback ) callback ( ) ; } } ; _UNKNOWN_ ( _UNKNOWN_ ) ; } } export function _UNKNOWN_ ( doc , scrollService ) { return scrollService || new _UNKNOWN_ ( doc ) ; } export const _UNKNOWN_ = { provide : _UNKNOWN_ , useFactory : _UNKNOWN_ , deps : [ DOCUMENT , [ new Optional ( ) , new SkipSelf ( ) , _UNKNOWN_ ] ] } ; </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $number$ O O O O O O $any$ O O $number$ O $number$ O $number$ O $number$ O O O O O $number$ O $number$ O $number$ O $number$ O $number$ O O O $number$ O $number$ O $number$ O O $number$ O $number$ O O $number$ O O O O O O $number$ O O O O O $number$ O O O $number$ O $number$ O $number$ O $number$ O O O O O $number$ O O O O O $number$ O O O O $number$ O $number$ O O O O $number$ O O O O $any$ O O O O $any$ O O $Document$ O $complex$ O O O O $any$ O $any$ O $any$ O O O O $Document$ O $any$ O O $void$ O $complex$ O $complex$ O $complex$ O $number$ O O O O O O $complex$ O $complex$ O O O O $Document$ O $HTMLElement$ O $number$ O $number$ O O O $Document$ O $HTMLElement$ O $number$ O $number$ O O O O O $complex$ O $complex$ O O $number$ O $number$ O O O $complex$ O $Element$ O O O $number$ O O O $number$ O O O O O $complex$ O O $number$ O O O $number$ O O O O O O O $Element$ O O $Element$ O $any$ O O O $number$ O O $complex$ O O $DOMRect$ O $Element$ O $DOMRect$ O O O O O $DOMRect$ O $number$ O $DOMRect$ O $number$ O O O $HTMLElement$ O $Element$ O $Document$ O $HTMLElement$ O $complex$ O $number$ O $DOMRect$ O $number$ O $HTMLElement$ O $number$ O $complex$ O $number$ O $DOMRect$ O $number$ O $HTMLElement$ O $number$ O O O O $complex$ O $number$ O $DOMRect$ O $number$ O $complex$ O $number$ O $DOMRect$ O $number$ O O O $complex$ O O $number$ O $complex$ O O $complex$ O $complex$ O $boolean$ O O O O O $complex$ O $complex$ O $complex$ O $complex$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O O O $boolean$ O $complex$ O $complex$ O O $any$ O $boolean$ O $complex$ O O O O $complex$ O O O O O O $boolean$ O O $any$ O O O O $any$ O O O $Document$ O $HTMLElement$ O O O O O O $any$ O O $void$ O $complex$ O $complex$ O $complex$ O $number$ O O O $any$ $any$ O $void$ O O O O O O O O O $complex$ O $complex$ O $complex$ O $complex$ O O $number$ O O O $number$ O $complex$ O O O $number$ O $DateConstructor$ O $number$ O O O O $void$ O O O O O O $number$ O $DateConstructor$ O $number$ O O O O $number$ O $number$ O $number$ O O O $void$ O $complex$ O O $any$ O $number$ O O $number$ O $number$ O $number$ O O O O O O O $number$ O O O O $number$ O $void$ O O O O O O O $void$ O $void$ O O O O O O $number$ O $void$ O O O O O O $any$ O $Document$ O $any$ O O O $any$ O O $any$ O $Document$ O O O O O $Provider$ O O $any$ O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O O O
<s> import { AfterViewInit , Component , ElementRef , EventEmitter , Input , OnChanges , OnDestroy , OnInit , Output , SimpleChange , SimpleChanges , ViewChild , ViewEncapsulation , } from 's' ; import { Subscription } from 's' ; import { fromEvent } from 's' ; import { distinctUntilChanged } from 's' ; import { throttleTime } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnChanges , OnInit , OnDestroy , AfterViewInit { private _UNKNOWN_ = false ; private _UNKNOWN_ : number = null ; private _UNKNOWN_ : Subscription = null ; private _UNKNOWN_ : Subscription = null ; @ ViewChild ( 's' ) private wrap : ElementRef ; private fixed = false ; private _UNKNOWN_ : { top : number , left : number } ; @ Input ( ) _UNKNOWN_ : Element ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ = 0 ; @ Output ( ) _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter ( ) ; constructor ( private _UNKNOWN_ , private _el ) { } ngOnChanges ( changes : { [ P in keyof this ] ? : SimpleChange } & SimpleChanges ) { if ( changes . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } ngOnInit ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } ngAfterViewInit ( ) { this . _UNKNOWN_ = null ; this . fixed = false ; } private _UNKNOWN_ ( ) : this { const _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ( this . _el . nativeElement ) ; this . _UNKNOWN_ = { top : _UNKNOWN_ . top + this . _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ ) , left : _UNKNOWN_ . left + this . _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ , false ) } ; return this ; } private process ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } const _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ ) ; const _UNKNOWN_ = this . _UNKNOWN_ ? this . _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ ) . top : 0 ; const _UNKNOWN_ = this . _UNKNOWN_ . top - _UNKNOWN_ - _UNKNOWN_ - this . _UNKNOWN_ <= 0 ; if ( this . fixed === _UNKNOWN_ ) { return ; } const _UNKNOWN_ = this . wrap . nativeElement ; _UNKNOWN_ . classList [ _UNKNOWN_ ? 's' : 's' ] ( 's' ) ; if ( _UNKNOWN_ ) { _UNKNOWN_ . style . cssText = `template` ; } else { _UNKNOWN_ . style . cssText = `template` ; } this . fixed = _UNKNOWN_ ; this . _UNKNOWN_ . emit ( _UNKNOWN_ ) ; } private _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { clearTimeout ( this . _UNKNOWN_ ) ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } private _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) . process ( ) ; this . _UNKNOWN_ = window . setInterval ( ( ) => { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ = false ; this . process ( ) ; } } , 0 ) ; this . _UNKNOWN_ = fromEvent ( this . _UNKNOWN_ || window , 's' ) . subscribe ( ( ) => this . _UNKNOWN_ = true ) ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ = fromEvent ( window , 's' ) . pipe ( throttleTime ( 0 ) , distinctUntilChanged ( ) ) . subscribe ( e => { this . _UNKNOWN_ = null ; this . fixed = false ; } ) ; } } ngOnDestroy ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O $number$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O O $complex$ O O $number$ O O O $number$ O O O O O $any$ O O $Element$ O $complex$ O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O $ElementRef$ O O O $void$ O $any$ O O O $any$ O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O O $void$ O O O O O $void$ O O O O O O O O $Element$ O O O O $void$ O O O O O $void$ O O O O O $complex$ O O O O O $boolean$ O O O O O $this$ O O O O O O $complex$ O O O $any$ O $complex$ O O O $any$ O $any$ O O O O $complex$ O O $number$ O $complex$ O $number$ O O O $any$ O $number$ O O O $Element$ O O $number$ O $complex$ O $number$ O O O $any$ O $number$ O O O $Element$ O O O O O O O O O O $void$ O O O O O O O O $complex$ O O O O $this$ O O O O O $number$ O O O $any$ O $number$ O O O $Element$ O O O $number$ O O O $Element$ O O O $any$ O $complex$ O O O $Element$ O O $number$ O O O O $boolean$ O O O $complex$ O $number$ O $number$ O $number$ O O O $number$ O O O O O O O $boolean$ O $boolean$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O O O O O O O O O $boolean$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $boolean$ O $boolean$ O O O $any$ O $any$ O $boolean$ O O O O $void$ O O O O O O O $number$ O O $void$ O O O $number$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $void$ O O O O O $void$ O O O O O $this$ O O O $void$ O O O O O $number$ O $complex$ O $number)$ O O O O O O O O O $boolean$ O O O O $boolean$ O O O O O $void$ O O O O O O O O O O O $any$ O $any$ O O O $Element$ O $complex$ O O O O $any$ O O O O O O $boolean$ O O O O O O O O $Element$ O O O O $any$ O $any$ O $complex$ O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $complex$ O O O O O $boolean$ O O O O O O O O $void$ O O O O O $void$ O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] , imports : [ CommonModule ] , providers : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { animate , state , style , transition , trigger , AnimationTriggerMetadata , } from 's' ; export const _UNKNOWN_ = trigger ( 's' , [ state ( 's' , style ( { opacity : 0 } ) ) , state ( 's' , style ( { opacity : 0 } ) ) , state ( 's' , style ( { opacity : 0 } ) ) , transition ( 's' , animate ( 's' ) ) , transition ( 's' , animate ( 's' ) ) , ] ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $AnimationTriggerMetadata$ O $any$ O O O O $any$ O O O $any$ O O $number$ O O O O O O $any$ O O O $any$ O O $number$ O O O O O O $any$ O O O $any$ O O $number$ O O O O O O $any$ O O O $any$ O O O O O $any$ O O O $any$ O O O O O O O O O
<s> export function _UNKNOWN_ ( value : boolean | string ) { return value === 's' || ( value && value !== 's' ) ; } </s>	O O O $boolean$ O $complex$ O O O O O O O $complex$ O O O O $complex$ O $complex$ O O O O O O
<s> import { Component , EventEmitter , Input , OnChanges , OnInit , Output , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnChanges { private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; _UNKNOWN_ = true ; _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; @ Output ( ) _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter ( ) ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } _UNKNOWN_ = { [ `template` ] : true , [ `template` ] : true , [ `template` ] : ! this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : ! ! this . _UNKNOWN_ } ; _UNKNOWN_ ( ) { this . _UNKNOWN_ = false ; this . _UNKNOWN_ . emit ( true ) ; } ngOnChanges ( ) { this . _UNKNOWN_ = { [ `template` ] : true , [ `template` ] : true , [ `template` ] : ! this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : ! ! this . _UNKNOWN_ } ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O $complex$ O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O O O O $string$ O O $void$ O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O $complex$ O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O O O O $string$ O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { DOCUMENT } from 's' ; import { Component , ElementRef , EventEmitter , Inject , Input , OnDestroy , OnInit , Output , 0 , ViewChild , ViewEncapsulation , } from 's' ; import { Subscription } from 's' ; import { fromEvent } from 's' ; import { distinctUntilChanged } from 's' ; import { throttleTime } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; interface _UNKNOWN_ { comp : _UNKNOWN_ ; top : number ; } @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnDestroy , OnInit { private links : _UNKNOWN_ [ ] = [ ] ; private _UNKNOWN_ : Subscription = null ; private target : Element = null ; private _UNKNOWN_ = false ; private doc : Document ; @ ViewChild ( 's' ) private container : ElementRef ; @ ViewChild ( 's' ) private _UNKNOWN_ : ElementRef ; _top = 0 ; _visible = false ; @ Input ( ) set _UNKNOWN_ ( el ) { this . target = el ; this . _UNKNOWN_ ( ) ; } @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ = 0 ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; constructor ( private _UNKNOWN_ , private _renderer , @ Inject ( DOCUMENT ) doc ) { this . doc = doc ; } ngOnInit ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } private getTarget ( ) : Element | Window { return this . target || window ; } private _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return ; } const sections : _UNKNOWN_ [ ] = [ ] ; this . links . forEach ( comp => { comp . active = false ; const target = this . doc . querySelector ( comp . _UNKNOWN_ ) ; const top = this . _UNKNOWN_ . _UNKNOWN_ ( target ) . top ; if ( target && top < this . _UNKNOWN_ + this . _UNKNOWN_ ) { sections . push ( { top , comp } ) ; } } ) ; this . _visible = ! ! sections . length ; if ( ! this . _visible ) { return ; } const _UNKNOWN_ = sections . reduce ( ( prev , curr ) => curr . top > prev . top ? curr : prev ) ; _UNKNOWN_ . comp . active = true ; const _UNKNOWN_ = ( _UNKNOWN_ . comp . el . nativeElement as HTMLDivElement ) . querySelector ( 's' ) as HTMLElement ; this . _UNKNOWN_ . nativeElement . style . top = `template` ; this . _UNKNOWN_ . emit ( _UNKNOWN_ . comp ) ; } private _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } private _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; setTimeout ( ( ) => { this . _UNKNOWN_ ( ) ; } , 0 ) ; this . _UNKNOWN_ = fromEvent ( this . getTarget ( ) , 's' ) . pipe ( throttleTime ( 0 ) , distinctUntilChanged ( ) ) . subscribe ( e => { this . _UNKNOWN_ ( ) ; } ) ; } add ( _UNKNOWN_ ) { this . links . push ( _UNKNOWN_ ) ; } scrollTo ( _UNKNOWN_ ) { const el = this . doc . querySelector ( _UNKNOWN_ . _UNKNOWN_ ) ; if ( ! el ) { return ; } this . _UNKNOWN_ = true ; const _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ( this . getTarget ( ) ) ; const _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ( el ) . top ; const _UNKNOWN_ = _UNKNOWN_ + _UNKNOWN_ - this . _UNKNOWN_ ; this . _UNKNOWN_ . scrollTo ( this . getTarget ( ) , _UNKNOWN_ , null , ( ) => { this . _UNKNOWN_ = false ; this . _UNKNOWN_ ( ) ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $number$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O $Element$ O $complex$ O O O O $boolean$ O O O O $Document$ O $complex$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $number$ O O O $boolean$ O O O O $any$ O O O $Element$ O $Element$ O O O O $Element$ O $Element$ O O O $void$ O O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O O $any$ O O $Renderer2$ O O $any$ O $any$ O $any$ O O O O $Document$ O $any$ O O $void$ O O O O O O O O $any$ O O O O $void$ O O O O O O $complex$ O O O $complex$ O $complex$ O O O O $Element$ O $complex$ O O O $void$ O O O O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O O O O $any$ O $void$ O $any$ O O $any$ O $boolean$ O O O O $Element$ O O O $Document$ O O O $any$ O $string$ O O O $number$ O O O $any$ O $complex$ O $Element$ O O $number$ O O O $Element$ O $number$ O O O $number$ O O O $number$ O O $any$ O $number$ O O $number$ O $any$ O O O O O O O O O $boolean$ O O O $any$ O $number$ O O O O O O $boolean$ O O O O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O O $any$ O $number$ O $any$ O $number$ O $any$ O $any$ O O $any$ O $any$ O $boolean$ O O O O $HTMLElement$ O O $any$ O $any$ O $any$ O $any$ O $complex$ O O O O O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $void$ O O O O O $void$ O O O $number$ O O O O O O O $void$ O O O O O O O O O O $any$ O $any$ O O O $complex$ O O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $void$ O O O O O O O $void$ O $any$ O O O O $any$ O $number$ O $any$ O O O $void$ O $any$ O O O $Element$ O O O $Document$ O O O $any$ O $string$ O O O O O $Element$ O O O O O O O $boolean$ O O O O $number$ O O O $any$ O $number$ O O O $complex$ O O O O O $number$ O O O $any$ O $complex$ O $Element$ O O $number$ O O $number$ O $number$ O $number$ O O O $number$ O O O $any$ O $void$ O O O $complex$ O O O $number$ O O O O O O O O O $boolean$ O O O O O $void$ O O O O O O O $void$ O O O O O $void$ O O O O O O
<s> import { Component , ContentChild , ElementRef , HostBinding , HostListener , Input , TemplateRef , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ { @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ HostBinding ( 's' ) active : boolean = false ; @ HostListener ( 's' ) _UNKNOWN_ ( ) { this . _UNKNOWN_ . scrollTo ( this ) ; } constructor ( public el , private _UNKNOWN_ ) { this . _UNKNOWN_ . add ( this ) ; } _UNKNOWN_ ( e ) { e . preventDefault ( ) ; e . stopPropagation ( ) ; this . _UNKNOWN_ . scrollTo ( this ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O O O O O O O O $any$ O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $boolean$ O O O O O O $any$ O O O $void$ O O O O O $any$ O $void$ O O O O O O O O $ElementRef$ O O $any$ O O O O $any$ O $void$ O O O O O $void$ O $Event$ O O $Event$ O $void$ O O O $Event$ O $void$ O O O O O $any$ O $void$ O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule ] , providers : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { Component , ElementRef , Input , OnChanges , 0 , SimpleChanges , ViewChild , ViewEncapsulation , } from 's' ; export type _UNKNOWN_ = 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnChanges { private _el : HTMLElement ; private _UNKNOWN_ = 's' ; private _classList : string [ ] = [ ] ; private _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } ; _UNKNOWN_ : boolean = false ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; _UNKNOWN_ : { } ; _UNKNOWN_ : boolean = true ; _UNKNOWN_ : boolean = false ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; _UNKNOWN_ ( ) : this { this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . removeClass ( this . _el , _UNKNOWN_ ) ; } ) ; this . _classList = [ this . _UNKNOWN_ [ this . _UNKNOWN_ ] && `template` , this . _UNKNOWN_ && `template` , this . _UNKNOWN_ && `template` , this . _UNKNOWN_ && `template` ] . filter ( ( item ) => { return ! ! item ; } ) ; this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . addClass ( this . _el , _UNKNOWN_ ) ; } ) ; return this ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = false ; this . _UNKNOWN_ = false ; this . _UNKNOWN_ = false ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ = true ; } else if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ = true ; } this . _UNKNOWN_ ( ) . _UNKNOWN_ ( ) ; } private _UNKNOWN_ ( ) { if ( ! this . _UNKNOWN_ ) return ; const el = this . _UNKNOWN_ && this . _UNKNOWN_ . nativeElement ; if ( ! el ) return ; const _UNKNOWN_ = el . offsetWidth ; const _UNKNOWN_ = this . _el . getBoundingClientRect ( ) . width ; const scale = _UNKNOWN_ - 0 < _UNKNOWN_ ? ( _UNKNOWN_ - 0 ) / _UNKNOWN_ : 0 ; if ( scale === 0 ) { this . _UNKNOWN_ = { } ; } else { this . _UNKNOWN_ = { transform : `template` , position : 's' , display : 's' , left : `template` } ; } } private _UNKNOWN_ ( ) : this { setTimeout ( ( ) => { this . _UNKNOWN_ ( ) ; } ) ; return this ; } constructor ( private _elementRef , private _renderer ) { this . _el = _elementRef . nativeElement ; this . _renderer . addClass ( this . _el , this . _UNKNOWN_ ) ; } ngOnChanges ( changes ) { this . _UNKNOWN_ = ! this . _UNKNOWN_ && ! ! this . _UNKNOWN_ ; this . _UNKNOWN_ = ! this . _UNKNOWN_ && ! ! this . _UNKNOWN_ ; this . _UNKNOWN_ ( ) . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O O $HTMLElement$ O $complex$ O O $string$ O O O O $string[]$ O O O O O O O O O $complex$ O O $string$ O O O $string$ O O O O $boolean$ O O O O O O $any$ O O O $any$ O $any$ O ${}$ O O O O $boolean$ O O O O O $boolean$ O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O $this$ O O O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O $string[]$ O O O O $complex$ O O O $any$ O O O O O O $any$ O O O O O $string$ O O O O O $string$ O O O O $complex$ O O $string$ O O O O O O $string$ O O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O O O $void$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $boolean$ O O O O O O O $string$ O O O O $boolean$ O O O O O O O O O $string$ O O O O $boolean$ O O O O O O $this$ O O O $this$ O O O O O $void$ O O O O O O O O $boolean$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O $number$ O O O $HTMLElement$ O $DOMRect$ O O O $number$ O O $number$ O $number$ O O O $any$ O O $number$ O O O O $any$ O O O O O $number$ O O O O O O ${}$ O O O O O O O O O ${}$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O $this$ O O O O O $number$ O O O O O O O $void$ O O O O O O O O O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O $any$ O $any$ O O O $any$ O $any$ O O O $HTMLElement$ O O O $string$ O O O $void$ O $SimpleChanges$ O O O O $boolean$ O O O O $string$ O O O O O $string$ O O O $boolean$ O O O O $string$ O O O O O $string$ O O O $this$ O O O $this$ O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { Component , ContentChild , EventEmitter , Input , OnDestroy , OnInit , Output , 0 , TemplateRef , ViewEncapsulation , } from 's' ; import { animate , style , transition , trigger , } from 's' ; import { Subscription } from 's' ; import { fromEvent } from 's' ; import { distinctUntilChanged } from 's' ; import { throttleTime } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ trigger ( 's' , [ transition ( 's' , [ style ( { opacity : 0 } ) , animate ( 0 , style ( { opacity : 0 } ) ) ] ) , transition ( 's' , [ style ( { opacity : 0 } ) , animate ( 0 , style ( { opacity : 0 } ) ) ] ) ] ) ] , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnInit , OnDestroy { private _UNKNOWN_ : Subscription = null ; private target : HTMLElement = null ; _UNKNOWN_ : boolean = false ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ Input ( ) _UNKNOWN_ : number = 0 ; @ Input ( ) set _UNKNOWN_ ( el ) { this . target = el ; this . _UNKNOWN_ ( ) ; } @ Output ( ) _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter ( ) ; constructor ( private _UNKNOWN_ , private _renderer ) { } ngOnInit ( ) { if ( ! this . _UNKNOWN_ ) this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . scrollTo ( this . getTarget ( ) , 0 ) ; this . _UNKNOWN_ . emit ( true ) ; } private getTarget ( ) : HTMLElement | Window { return this . target || window ; } private _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ( this . getTarget ( ) ) > this . _UNKNOWN_ ; } private _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) this . _UNKNOWN_ . unsubscribe ( ) ; } private _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = fromEvent ( this . getTarget ( ) , 's' ) . pipe ( throttleTime ( 0 ) , distinctUntilChanged ( ) ) . subscribe ( e => { this . _UNKNOWN_ ( ) ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O O O $any$ O O O O $any$ O O $number$ O O O O O $any$ O O O $any$ O O $number$ O O O O O O O O $any$ O O O O $any$ O O $number$ O O O O O $any$ O O O $any$ O O $number$ O O O O O O O O O O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $HTMLElement$ O $complex$ O O O $boolean$ O O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O $number$ O O O O O O $any$ O O O $HTMLElement$ O $HTMLElement$ O O O O $HTMLElement$ O $HTMLElement$ O O O $void$ O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O $Renderer2$ O O O $void$ O O O O O O O O $any$ O O O $void$ O O O O $void$ O O O O O $any$ O $void$ O O O $complex$ O O O O O O O O $any$ O $any$ O O O O O O $complex$ O O O $complex$ O $complex$ O O O O $HTMLElement$ O $complex$ O O O $void$ O O O O O $boolean$ O O O $any$ O $number$ O O O $complex$ O O O O O O $number$ O O O $void$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $any$ O $any$ O O O $complex$ O O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $void$ O O O O O O O $void$ O O O O O $void$ O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] , imports : [ CommonModule ] , providers : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { Component , ContentChild , HostBinding , Input , OnInit , TemplateRef , ViewEncapsulation , } from 's' ; import { animate , style , transition , trigger , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ trigger ( 's' , [ transition ( 's' , [ style ( { opacity : 0 } ) , animate ( 's' ) ] ) , transition ( 's' , [ style ( { opacity : 0 } ) , animate ( 's' ) ] ) ] ) ] , template : `template` , styleUrls : [ 's' , 's' ] , host : { 's' : 's' } } ) export class _UNKNOWN_ implements OnInit { private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; count : number ; _UNKNOWN_ ; _UNKNOWN_ = [ ] ; _UNKNOWN_ = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ; @ ContentChild ( 's' ) content : TemplateRef < void > ; @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ! this . content ; } @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ ; @ Input ( ) @ HostBinding ( 's' ) _UNKNOWN_ : string ; @ Input ( ) set _UNKNOWN_ ( value ) { if ( value < 0 ) { this . count = 0 ; } else { this . count = value ; } this . _UNKNOWN_ = this . count . toString ( ) . split ( 's' ) ; } get _UNKNOWN_ ( ) : number { return this . count ; } ngOnInit ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ . toString ( ) . split ( 's' ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O O O $any$ O O O O $any$ O O $number$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $number$ O O O O O $any$ O O O O O O O O O $string$ O O O $string[]$ O O O O O O O $complex$ O O O O O O O O O O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O $number$ O O O $any$ O $any[]$ O O O O $number[]$ O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O $boolean$ O O O O O O O O O $any$ O O O $any$ O O $number$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $string$ O O O O $any$ O O $any$ O O $any$ O O O $any$ O O O $string$ O O O O $any$ O O O $number$ O $number$ O O O O $number$ O O O O O O $number$ O O O O O O O O $number$ O $number$ O O O O $any[]$ O O O $number$ O $string$ O O O $complex$ O O O O O O $number$ O O O O O O O O $number$ O O $void$ O O O O O $any$ O O O $number$ O $string$ O O O $complex$ O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { Component , HostBinding , Input , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] , host : { 's' : 's' } } ) export class _UNKNOWN_ { @ Input ( ) _UNKNOWN_ = 's' ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O $complex$ O O O O O O O O O O $any$ O O $any$ O O $string$ O O O O O
<s> import { Component , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { constructor ( public _UNKNOWN_ ) { } } </s>	O O O $any$ O O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O O $any$ O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O $any$ O O O
<s> import { AfterContentInit , Component , ElementRef , Input , ViewChild , ViewEncapsulation } from 's' ; export type _UNKNOWN_ = 's' | 's' | 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ ] } ) export class _UNKNOWN_ implements AfterContentInit { _size : _UNKNOWN_ ; _UNKNOWN_ = 's' ; _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } ; _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ `template` ] : this . _UNKNOWN_ [ this . _UNKNOWN_ ] } ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ Input ( ) get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _size ; } set _UNKNOWN_ ( value ) { this . _size = value ; this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ `template` ] : this . _UNKNOWN_ [ this . _UNKNOWN_ ] } ; } ngAfterContentInit ( ) { Array . from ( this . _UNKNOWN_ . nativeElement . childNodes ) . forEach ( ( node ) => { if ( node . nodeType === 0 ) { this . _UNKNOWN_ . nativeElement . removeChild ( node ) ; } } ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O O O O $string$ O O O O O O O O O O $complex$ O O O $any$ O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $complex$ O O O O O $string$ O O O O O O O O O O $complex$ O O O $any$ O O O O $void$ O O O $ArrayConstructor$ O $complex$ O O O $any$ O $any$ O $any$ O O $void$ O O $HTMLElement$ O O O O O $HTMLElement$ O $number$ O O O O O O $any$ O $any$ O $any$ O $HTMLElement$ O O O O O O O O O
<s> import { AfterContentInit , Component , ElementRef , HostListener , Input , 0 , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; export type _UNKNOWN_ = 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | null ; export type _UNKNOWN_ = 's' | 's' | 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements AfterContentInit { private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; _el : HTMLElement ; nativeElement : HTMLElement ; _UNKNOWN_ : HTMLElement ; _type : _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ ; _size : _UNKNOWN_ ; _classList : string [ ] = [ ] ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _type ; } set _UNKNOWN_ ( value ) { this . _type = value ; this . _UNKNOWN_ ( ) ; } @ Input ( ) get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _UNKNOWN_ ; } set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _size = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _size ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ HostListener ( 's' ) _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; this . _UNKNOWN_ ( ) ; setTimeout ( ( ) => { this . _UNKNOWN_ = false ; this . _UNKNOWN_ ( ) ; } , 0 ) ; } _UNKNOWN_ ( value ) { const _UNKNOWN_ = this . _UNKNOWN_ ; if ( _UNKNOWN_ ) { this . _renderer . setStyle ( _UNKNOWN_ , 's' , value ? 's' : 's' ) ; } } _UNKNOWN_ ( ) { this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . removeClass ( this . _el , _UNKNOWN_ ) ; } ) ; this . _classList = [ this . _UNKNOWN_ && `template` , this . _UNKNOWN_ && `template` , this . _UNKNOWN_ [ this . _UNKNOWN_ ] && `template` , this . _UNKNOWN_ && `template` , this . _UNKNOWN_ && `template` , this . _UNKNOWN_ && `template` , this . _UNKNOWN_ && `template` , ] . filter ( ( item ) => { return ! ! item ; } ) ; this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . addClass ( this . _el , _UNKNOWN_ ) ; } ) ; } constructor ( private _elementRef , private _renderer ) { this . _el = this . _elementRef . nativeElement ; this . nativeElement = this . _elementRef . nativeElement ; this . _renderer . addClass ( this . _el , this . _UNKNOWN_ ) ; } ngAfterContentInit ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ ; if ( this . _UNKNOWN_ && this . _el . children . length === 0 && ( this . _UNKNOWN_ . _UNKNOWN_ ( this . _el . children [ 0 ] ) ) ) { this . _UNKNOWN_ = true ; this . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } get _UNKNOWN_ ( ) : HTMLElement { return this . _el . querySelector ( 's' ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O $HTMLElement$ O $complex$ O $HTMLElement$ O $complex$ O $HTMLElement$ O $complex$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $void$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O $any$ O O O O O O O O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $void$ O O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $void$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O $number$ O O O O O O O $boolean$ O O O O O $void$ O O O O O O O O O $void$ O $boolean$ O O O $HTMLElement$ O O O $HTMLElement$ O O O $HTMLElement$ O O O O $any$ O $any$ O $HTMLElement$ O O O $boolean$ O O O O O O O O $void$ O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O $string[]$ O O O O $any$ O O O O O O O O O O O $complex$ O O O $any$ O O O O O O $boolean$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $boolean$ O O O O O $complex$ O O $string$ O O O O O O $string$ O O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O O $HTMLElement$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $HTMLElement$ O O O $string$ O O O $void$ O O O O O $HTMLElement$ O O O $HTMLElement$ O O O O O $HTMLElement$ O O O $HTMLElement$ O $HTMLCollection$ O $number$ O O O O O O $HTMLElement$ O $boolean$ O O O $HTMLElement$ O $HTMLCollection$ O O O O O O O O O $boolean$ O O O O O $void$ O O O O O O $void$ O O O $boolean$ O O O O $HTMLElement$ O O O $complex$ O O O O $HTMLElement$ O O O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { Inject , Injectable , InjectionToken , Optional , Provider , SkipSelf } from 's' ; @ Injectable ( ) export class LoggerService { constructor ( @ Inject ( _UNKNOWN_ ) private _UNKNOWN_ ) { } log ( ... args : any [ ] ) { if ( this . _UNKNOWN_ ) { console . log . apply ( console , arguments ) ; } } warn ( ... args : any [ ] ) { if ( this . _UNKNOWN_ ) { console . warn . apply ( console , arguments ) ; } } error ( ... args : any [ ] ) { if ( this . _UNKNOWN_ ) { console . error . apply ( console , arguments ) ; } } info ( ... args : any [ ] ) { if ( this . _UNKNOWN_ ) { console . log . apply ( console , arguments ) ; } } debug ( ... args : any [ ] ) { if ( this . _UNKNOWN_ ) { const _UNKNOWN_ = Array . prototype . slice . call ( arguments ) ; console . log . apply ( console , [ 's' ] . concat ( _UNKNOWN_ ) ) ; } } } export const _UNKNOWN_ = new InjectionToken < boolean > ( 's' ) ; export function _UNKNOWN_ ( exist , _UNKNOWN_ ) { return exist || new LoggerService ( _UNKNOWN_ ) ; } export const _UNKNOWN_ = { provide : LoggerService , useFactory : _UNKNOWN_ , deps : [ [ new Optional ( ) , new SkipSelf ( ) , LoggerService ] , _UNKNOWN_ ] } ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O O $boolean$ O O O $void$ O O $any[]$ O O O O O O O O O O $boolean$ O O $Console$ O $void$ O $any$ O $Console$ O $IArguments$ O O O O $void$ O O $any[]$ O O O O O O O O O O $boolean$ O O $Console$ O $void$ O $any$ O $Console$ O $IArguments$ O O O O $void$ O O $any[]$ O O O O O O O O O O $boolean$ O O $Console$ O $void$ O $any$ O $Console$ O $IArguments$ O O O O $void$ O O $any[]$ O O O O O O O O O O $boolean$ O O $Console$ O $void$ O $any$ O $Console$ O $IArguments$ O O O O $void$ O O $any[]$ O O O O O O O O O O $boolean$ O O O $any$ O $ArrayConstructor$ O $any[]$ O $any[]$ O $any$ O $IArguments$ O O $Console$ O $void$ O $any$ O $Console$ O O O O O $complex$ O $any$ O O O O O O O O $any$ O O $any$ O O O O O O O O O $LoggerService$ O $LoggerService$ O $boolean$ O O O $LoggerService$ O O $any$ O $boolean$ O O O O O $Provider$ O O $any$ O $any$ O $LoggerService$ O $LoggerService$ O $any[]$ O O O O $any$ O O O O $any$ O O O $any$ O O $any$ O O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ NgModule ( { providers : [ { provide : _UNKNOWN_ , useValue : false } , _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $any[]$ O O O $any$ O $any$ O $boolean$ O O O O $any$ O O O O O O O $any$ O O O
<s> export { _UNKNOWN_ } from 's' ; export { LoggerService , _UNKNOWN_ } from 's' ; </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O
<s> export class _UNKNOWN_ { locale : string ; _UNKNOWN_ : { itemsPerPage : string ; _UNKNOWN_ : string ; page : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; nextPage : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; totalItems : string ; } ; _UNKNOWN_ : { clear : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; nextYear : string ; _UNKNOWN_ : string ; nextMonth : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; today : string ; ok : string ; } ; Modal : { _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; } ; Table : { _UNKNOWN_ : string ; } ; Select : { _UNKNOWN_ : string ; } ; Transfer : { _UNKNOWN_ : string , _UNKNOWN_ : string , _UNKNOWN_ : string , _UNKNOWN_ : string , _UNKNOWN_ : string , } ; _UNKNOWN_ : { _UNKNOWN_ : string , _UNKNOWN_ : string , _UNKNOWN_ : string , _UNKNOWN_ : string , } ; } </s>	O O O $any$ O $string$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = { locale : 's' , _UNKNOWN_ : { itemsPerPage : 's' , _UNKNOWN_ : 's' , page : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , nextPage : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , totalItems : 's' , } , _UNKNOWN_ : { clear : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , nextYear : 's' , _UNKNOWN_ : 's' , nextMonth : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , today : 's' , ok : 's' , } , Modal : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , Table : { _UNKNOWN_ : 's' , } , Select : { _UNKNOWN_ : 's' , } , Transfer : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } } ; </s>	O O O $any$ O O O O O O $any$ O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = { locale : 's' , _UNKNOWN_ : { itemsPerPage : 's' , _UNKNOWN_ : 's' , page : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , nextPage : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , totalItems : 's' , } , _UNKNOWN_ : { clear : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , nextYear : 's' , _UNKNOWN_ : 's' , nextMonth : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , today : 's' , ok : 's' , } , Modal : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , Table : { _UNKNOWN_ : 's' , } , Select : { _UNKNOWN_ : 's' , } , Transfer : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } } ; </s>	O O O $any$ O O O O O O $any$ O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = { locale : 's' , _UNKNOWN_ : { itemsPerPage : 's' , _UNKNOWN_ : 's' , page : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , nextPage : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , totalItems : 's' , } , _UNKNOWN_ : { clear : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , nextYear : 's' , _UNKNOWN_ : 's' , nextMonth : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , today : 's' , ok : 's' , } , Modal : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , Table : { _UNKNOWN_ : 's' , } , Select : { _UNKNOWN_ : 's' , } , Transfer : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : `template` , _UNKNOWN_ : 's' , _UNKNOWN_ : `template` , } } ; </s>	O O O $any$ O O O O O O $any$ O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = { locale : 's' , _UNKNOWN_ : { itemsPerPage : 's' , _UNKNOWN_ : 's' , page : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , nextPage : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , totalItems : 's' , } , _UNKNOWN_ : { clear : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , nextYear : 's' , _UNKNOWN_ : 's' , nextMonth : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , today : 's' , ok : 's' , } , Modal : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , Table : { _UNKNOWN_ : 's' , } , Select : { _UNKNOWN_ : 's' , } , Transfer : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } } ; </s>	O O O $any$ O O O O O O $any$ O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = { locale : 's' , _UNKNOWN_ : { itemsPerPage : 's' , _UNKNOWN_ : 's' , page : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , nextPage : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , totalItems : 's' , } , _UNKNOWN_ : { clear : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , nextYear : 's' , _UNKNOWN_ : 's' , nextMonth : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , today : 's' , ok : 's' , } , Modal : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , Table : { _UNKNOWN_ : 's' , } , Select : { _UNKNOWN_ : 's' , } , Transfer : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } , _UNKNOWN_ : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , } } ; </s>	O O O $any$ O O O O O O $any$ O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import { InjectionToken } from 's' ; import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = new InjectionToken < _UNKNOWN_ > ( 's' ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O O O
<s> import { Inject , Injectable , Optional , Provider , SkipSelf } from 's' ; import * as moment from 's' ; import { LoggerService } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ { private _UNKNOWN_ : _UNKNOWN_ ; constructor ( @ Inject ( _UNKNOWN_ ) locale , private _logger ) { this . setLocale ( locale ) ; } translate ( path , data ? ) { this . _logger . debug ( `template` ) ; let content = this . _UNKNOWN_ ( this . _UNKNOWN_ , path ) as string ; if ( typeof content === 's' ) { if ( data ) { Object . keys ( data ) . forEach ( ( key ) => content = content . replace ( new RegExp ( `template` , 's' ) , data [ key ] ) ) ; } return content ; } return path ; } setLocale ( locale ) { moment . locale ( locale . locale ) ; this . _UNKNOWN_ = locale ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } private _UNKNOWN_ ( obj , path ) : string | object { let res = obj ; const paths = path . split ( 's' ) ; const depth = paths . length ; let index = 0 ; while ( res && index < depth ) { res = res [ paths [ index ++ ] ] ; } return index === depth ? res : null ; } } export function _UNKNOWN_ ( exist , locale , logger ) { return exist || new _UNKNOWN_ ( locale , logger ) ; } export const _UNKNOWN_ = { provide : _UNKNOWN_ , useFactory : _UNKNOWN_ , deps : [ [ new Optional ( ) , new SkipSelf ( ) , _UNKNOWN_ ] , _UNKNOWN_ , LoggerService ] , } ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $LoggerService$ O O O O $void$ O $any$ O O O $string$ O $string$ O $any$ $any$ O O O O $LoggerService$ O $void$ O O O O O $string$ O O O $complex$ O O O $any$ O $string$ O O O O O O O $string$ O O O O O O $any$ O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O O $string$ O O $string$ O $string$ O $complex$ O O $RegExpConstructor$ O O O O O O $any$ O $string$ O O O O O O $string$ O O O $string$ O O $void$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O O O $complex$ O $object$ O $string$ O O O O O O O $object$ O $object$ O O $string[]$ O $string$ O $complex$ O O O O O $number$ O $string[]$ O $number$ O O $number$ O O O O O $object$ O $number$ O $number$ O O $object$ O $object$ O $string[]$ O $number$ O O O O O O $number$ O $number$ O $object$ O O O O O O O $any$ O $any$ O $any$ O $LoggerService$ O O O $any$ O O $any$ O $any$ O $LoggerService$ O O O O O $Provider$ O O $any$ O $any$ O $any$ O $any$ O $any[]$ O O O O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O
<s> import { Pipe , PipeTransform } from 's' ; import { _UNKNOWN_ } from 's' ; @ Pipe ( { name : 's' } ) export class _UNKNOWN_ implements PipeTransform { constructor ( private _UNKNOWN_ ) { } transform ( path , keyValue ? ) { return this . _UNKNOWN_ . translate ( path , keyValue ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O O O O $any$ O O O $string$ O $string$ O $object$ $object$ O O O O O $any$ O $string$ O $string$ O $object$ O O O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] , providers : [ { provide : _UNKNOWN_ , useValue : _UNKNOWN_ } , _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O
<s> export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export * from 's' ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O
<s> import { forwardRef , AfterContentInit , Component , ElementRef , HostBinding , Input , OnInit , 0 , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit , AfterContentInit , ControlValueAccessor { _el : HTMLElement ; _value : string ; _size : string ; _UNKNOWN_ = 's' ; onChange : ( _ ) => void = ( ) => null ; onTouched : ( ) => void = ( ) => null ; radios : Array < _UNKNOWN_ | _UNKNOWN_ > = [ ] ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _size = value ; } get _UNKNOWN_ ( ) : string { return this . _size ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _size === 's' ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _size === 's' ; } _UNKNOWN_ ( radio : _UNKNOWN_ | _UNKNOWN_ ) { this . radios . push ( radio ) ; radio . _UNKNOWN_ = radio . _UNKNOWN_ === this . _value ; } _UNKNOWN_ ( ) { this . radios . forEach ( ( item ) => { item . _UNKNOWN_ = item . _UNKNOWN_ === this . _value ; } ) ; } _UNKNOWN_ ( radio : _UNKNOWN_ | _UNKNOWN_ ) { this . updateValue ( radio . _UNKNOWN_ ) ; } updateValue ( value ) { if ( this . _value === value ) { return ; } this . _value = value ; this . onChange ( value ) ; this . _UNKNOWN_ ( ) ; } constructor ( private _elementRef , private _render ) { this . _el = this . _elementRef . nativeElement ; } ngAfterContentInit ( ) { Array . from ( this . _el . childNodes ) . forEach ( node => { if ( node . nodeType === 0 ) { this . _el . removeChild ( node ) ; } } ) ; } writeValue ( value ) { this . _value = value ; this . _UNKNOWN_ ( ) ; } registerOnChange ( fn : ( _ ) => void ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => void ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . radios . forEach ( ( radio ) => { radio . _UNKNOWN_ = isDisabled ; } ) ; } ngOnInit ( ) { this . _render . addClass ( this . _el , `template` ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $HTMLElement$ O $complex$ O $string$ O O O $string$ O O O $string$ O O O $void$ O O $string$ O O O O O O O O O $void$ O O O O O O O O O O O $complex$ O $ArrayConstructor$ O $any$ O $any$ O O O O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $string$ O O O O O O O O $string$ O O O $any$ O O O O $boolean$ O O O O O O O O $string$ O O O O O $any$ O O O O $boolean$ O O O O O O O O $string$ O O O O $void$ O $complex$ O $any$ O $any$ O O O O $complex$ O $number$ O $complex$ O O $complex$ O $boolean$ O $complex$ O $string$ O O O $string$ O O $void$ O O O O O $complex$ O $void$ O O $complex$ O O O $complex$ O $boolean$ O $complex$ O $string$ O O O $string$ O O O O O $void$ O $complex$ O $any$ O $any$ O O O O $void$ O $complex$ O $string$ O O O $void$ O $string$ O O O O O O $string$ O $string$ O O O O O O O $string$ O $string$ O O O $void$ O $string$ O O O O $void$ O O O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O $ArrayConstructor$ O $complex$ O O O $HTMLElement$ O $NodeListOf<ChildNode>$ O O $void$ O $ChildNode$ O O O O $ChildNode$ O $number$ O O O O O O $HTMLElement$ O $T$ O $ChildNode$ O O O O O O O $void$ O $string$ O O O O $string$ O $string$ O O O $void$ O O O O $void$ O $void$ O O $string$ O O O O O O O $void$ O $void$ O O $void$ O $void$ O O O O O O O O O $void$ O $void$ O O $void$ O $boolean$ O O O O $complex$ O $void$ O O $complex$ O O O $complex$ O $boolean$ O $boolean$ O O O O O $void$ O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O
<s> import { forwardRef , Component , ElementRef , HostBinding , HostListener , Input , OnInit , Optional , 0 , ViewEncapsulation } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] } ) export class _UNKNOWN_ implements OnInit , ControlValueAccessor { private _UNKNOWN_ = false ; _checked = false ; _disabled = false ; _el : HTMLElement ; _UNKNOWN_ ; _value : string ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ = `template` ; onChange : ( _ ) => void = ( ) => null ; onTouched : ( ) => void = ( ) => null ; @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _checked = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _checked ; } @ Input ( ) get _UNKNOWN_ ( ) : string { return this . _value ; } set _UNKNOWN_ ( value ) { if ( this . _value === value ) { return ; } this . _value = value ; } @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ HostListener ( 's' , [ 's' ] ) onClick ( e ) { e . preventDefault ( ) ; if ( ! this . _disabled ) { if ( this . _UNKNOWN_ ) { this . _checked = true ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . _UNKNOWN_ ( this ) ; } else { this . updateValue ( ! this . _checked ) ; } } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = false ; this . _UNKNOWN_ ( ) ; if ( this . _UNKNOWN_ ) this . _UNKNOWN_ . onTouched ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ `template` ] : this . _checked , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : this . _disabled } ; } constructor ( private _elementRef , public _renderer , @ Optional ( ) public _UNKNOWN_ ) { this . _el = this . _elementRef . nativeElement ; } ngOnInit ( ) { if ( this . _UNKNOWN_ ) this . _UNKNOWN_ . _UNKNOWN_ ( this ) ; this . _renderer . addClass ( this . _el , `template` ) ; this . _UNKNOWN_ ( ) ; } updateValue ( value ) { if ( value === this . _checked ) { return ; } this . onChange ( value ) ; this . _UNKNOWN_ = false ; this . _checked = value ; this . _UNKNOWN_ ( ) ; } writeValue ( value ) { this . _checked = value ; this . _UNKNOWN_ ( ) ; } registerOnChange ( fn : ( _ ) => { } ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => { } ) { this . onTouched = fn ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $HTMLElement$ O $complex$ O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $void$ O O $boolean$ O O O O O O O O O $void$ O O O O O O O O O O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $string$ O O O O O O O O $string$ O O O $string$ O $string$ O O O O O O $string$ O $string$ O O O O O O O $string$ O $string$ O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O O O O $boolean$ O O O O O O $any$ O O O O $boolean$ O O O O O $void$ O O O O O $any$ O $void$ O O O O O O O O O $void$ O O O O $boolean$ O O O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O O O O O $any$ O O O $any$ O $void$ O O O O $void$ O O O O O $any$ O O O O O $string$ O O O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O $ElementRef$ O O $Renderer2$ O O $any$ O O O $any$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O O O O $any$ O O O $any$ O $void$ O O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O $void$ O O O O $void$ O $boolean$ O O O O $boolean$ O O O $boolean$ O O O O O O O $void$ O $boolean$ O O O O $boolean$ O O O O O $boolean$ O $boolean$ O O O $void$ O O O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $void$ O O O O $void$ O ${}$ O O $boolean$ O O O O O O O O $void$ O ${}$ O O $void$ O ${}$ O O O O O O O O O O $void$ O ${}$ O O O O
<s> import { Component , HostBinding , Input , OnInit , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ extends _UNKNOWN_ implements OnInit { _checked = false ; _disabled = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ = `template` ; @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _checked = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _checked ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O $string$ O O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { animate , state , style , transition , trigger , AnimationTriggerMetadata , } from 's' ; export const _UNKNOWN_ = trigger ( 's' , [ state ( 's' , style ( { opacity : 0 , transform : 's' , transformOrigin : 's' } ) ) , transition ( 's' , [ style ( { opacity : 0 , transform : 's' , transformOrigin : 's' } ) , animate ( 's' ) ] ) , state ( 's' , style ( { opacity : 0 , transform : 's' , transformOrigin : 's' } ) ) , transition ( 's' , [ style ( { opacity : 0 , transform : 's' , transformOrigin : 's' } ) , animate ( 's' ) ] ) , transition ( 's' , [ animate ( 's' , style ( { opacity : 0 } ) ) ] ) ] ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $AnimationTriggerMetadata$ O $any$ O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O $string$ O O O O O $any$ O O O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O $string$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O O $number$ O O O O O O O O O O O
<s> import { animate , state , style , transition , trigger , AnimationTriggerMetadata , } from 's' ; export const _UNKNOWN_ = trigger ( 's' , [ state ( 's' , style ( { opacity : 0 , transform : 's' } ) ) , transition ( 's' , [ style ( { opacity : 0 , transform : 's' } ) , animate ( 's' ) ] ) , state ( 's' , style ( { opacity : 0 , transform : 's' } ) ) , transition ( 's' , [ style ( { opacity : 0 , transform : 's' } ) , animate ( 's' ) ] ) ] ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $AnimationTriggerMetadata$ O $any$ O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O O O $any$ O O O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O O O $any$ O O O O O O O O O
<s> import { Pipe , PipeTransform } from 's' ; import { _UNKNOWN_ } from 's' ; @ Pipe ( { name : 's' } ) export class _UNKNOWN_ implements PipeTransform { transform ( options : _UNKNOWN_ [ ] , value ) { if ( value . searchText ) { let _options = options . filter ( option => option . _UNKNOWN_ && ( option . _UNKNOWN_ . toLowerCase ( ) . indexOf ( value . searchText . toLowerCase ( ) ) !== - 0 ) ) ; if ( value . tags ) { _options = options . filter ( option => option . _UNKNOWN_ && ( option . _UNKNOWN_ . toLowerCase ( ) === value . searchText . toLowerCase ( ) ) ) ; } if ( _options . length ) { return _options ; } else { return [ { _UNKNOWN_ : value . value , _value : value . value , _UNKNOWN_ : value . disabled , _disabled : value . disabled , _UNKNOWN_ : value . _UNKNOWN_ , _label : value . _UNKNOWN_ , } as any as _UNKNOWN_ ] ; } } else { return options ; } } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $complex$ O $any$ O $any$ O $string$ O O $any$ O $string$ O $string$ O O O $number$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O $any$ O $any$ O $string$ O O $any$ O $string$ O $string$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $number$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O
<s> import { DOWN_ARROW , ENTER , TAB } from 's' ; import { CdkConnectedOverlay , _UNKNOWN_ } from 's' ; import { forwardRef , AfterContentChecked , AfterContentInit , Component , ElementRef , EventEmitter , HostListener , Input , OnInit , Output , 0 , ViewChild , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , animations : [ _UNKNOWN_ , _UNKNOWN_ ] , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnInit , AfterContentInit , AfterContentChecked , ControlValueAccessor { private _UNKNOWN_ = false ; private _disabled = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; _el : HTMLElement ; _isOpen = false ; _UNKNOWN_ = 's' ; _classList : string [ ] = [ ] ; _UNKNOWN_ ; _UNKNOWN_ = `template` ; _UNKNOWN_ ; _UNKNOWN_ = `template` ; _size : string ; _value : string [ ] | string ; _UNKNOWN_ = 's' ; _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 0 ; _UNKNOWN_ : _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ ; _UNKNOWN_ : Set < _UNKNOWN_ > = new Set ( ) ; _options : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ ; _UNKNOWN_ = false ; _UNKNOWN_ : 's' | 's' | 's' = 's' ; _UNKNOWN_ = false ; _mode ; onChange : ( value : string | string [ ] ) => void = ( ) => null ; onTouched : ( ) => void = ( ) => null ; @ ViewChild ( 's' ) _UNKNOWN_ ; @ ViewChild ( 's' ) trigger : ElementRef ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ Output ( ) _UNKNOWN_ : EventEmitter < string > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter ( ) ; @ Input ( ) _UNKNOWN_ = true ; @ Input ( ) _UNKNOWN_ = Infinity ; @ ViewChild ( CdkConnectedOverlay ) _UNKNOWN_ : CdkConnectedOverlay ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _mode = value ; if ( this . _mode === 's' ) { this . _UNKNOWN_ = true ; } else if ( this . _mode === 's' ) { this . _UNKNOWN_ = true ; } else if ( this . _mode === 's' ) { this . _UNKNOWN_ = true ; } } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ = true ; } } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _size = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } [ value ] ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : string { return this . _size ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { const _UNKNOWN_ = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = _UNKNOWN_ ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) set _UNKNOWN_ ( value ) { const isOpen = _UNKNOWN_ ( value ) ; if ( this . _isOpen === isOpen ) { return ; } if ( isOpen ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } this . _isOpen = isOpen ; this . _UNKNOWN_ . emit ( this . _isOpen ) ; this . _UNKNOWN_ ( ) ; if ( this . _isOpen ) { setTimeout ( ( ) => { this . _UNKNOWN_ ( ) ; } ) ; } } get _UNKNOWN_ ( ) : boolean { return this . _isOpen ; } addOption = ( option ) => { this . _options . push ( option ) ; if ( ! this . _UNKNOWN_ ) { if ( option . _UNKNOWN_ ) { this . _UNKNOWN_ ( this . _value ) ; } else { this . _UNKNOWN_ ( this . _value ) ; } } } _UNKNOWN_ ( option ) { this . _options . splice ( this . _options . indexOf ( option ) , 0 ) ; if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ ( this . _value ) ; } } _UNKNOWN_ ( position ) { this . _UNKNOWN_ = position . _UNKNOWN_ . originY ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = false ; } _UNKNOWN_ ( $event ? ) { if ( $event ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; } this . _UNKNOWN_ = null ; this . _UNKNOWN_ = null ; this . onChange ( null ) ; } _UNKNOWN_ ( option , $event ? ) { if ( ! option ) { return ; } this . _UNKNOWN_ ( option , true , $event ) ; this . _UNKNOWN_ ( ) ; if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = false ; } } _UNKNOWN_ ( option , _UNKNOWN_ = false , $event ? ) { if ( $event ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; } this . _UNKNOWN_ = option ; if ( option && ! option . _UNKNOWN_ ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = option ; this . _value = option . _UNKNOWN_ ; if ( _UNKNOWN_ ) { this . onChange ( option . _UNKNOWN_ ) ; } } else { if ( _UNKNOWN_ ) { this . _UNKNOWN_ ( this . _UNKNOWN_ , option ) ? this . _UNKNOWN_ ( option ) : this . _UNKNOWN_ ( option ) ; } } } } _UNKNOWN_ ( element , text ) { if ( text ) { setTimeout ( _ => { this . _renderer . setStyle ( element , 's' , `template` ) ; } ) ; } else { this . _renderer . _UNKNOWN_ ( element , 's' ) ; } } _UNKNOWN_ ( set < _UNKNOWN_ > , option ) { return ( ( Array . from ( set ) as _UNKNOWN_ [ ] ) . find ( ( data ) => data . _UNKNOWN_ === option . _UNKNOWN_ ) ) ; } _UNKNOWN_ = ( option , $event ? , _UNKNOWN_ = true ) => { this . _UNKNOWN_ = option ; this . _UNKNOWN_ . delete ( option ) ; if ( _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } if ( this . _UNKNOWN_ && ( this . _options . indexOf ( option ) !== - 0 ) && ( this . _UNKNOWN_ . indexOf ( option ) !== - 0 ) ) { this . _UNKNOWN_ ( option ) ; this . _UNKNOWN_ . splice ( this . _UNKNOWN_ . indexOf ( option ) , 0 ) ; } if ( $event ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; } } _UNKNOWN_ ( option , $event ? ) { if ( this . _UNKNOWN_ && ( this . _options . indexOf ( option ) === - 0 ) && ( this . _UNKNOWN_ . indexOf ( option ) === - 0 ) ) { this . addOption ( option ) ; this . _UNKNOWN_ . push ( option ) ; } this . _UNKNOWN_ = option ; if ( this . _UNKNOWN_ . size < this . _UNKNOWN_ ) { this . _UNKNOWN_ . add ( option ) ; } this . _UNKNOWN_ ( ) ; if ( $event ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; } } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return ; } const _UNKNOWN_ = Array . from ( this . _UNKNOWN_ ) ; this . _value = _UNKNOWN_ . map ( item => item . _UNKNOWN_ ) ; this . onChange ( this . _value ) ; } _UNKNOWN_ ( _UNKNOWN_ : string | string [ ] , _UNKNOWN_ = false ) { if ( _UNKNOWN_ == null ) { return ; } if ( this . _UNKNOWN_ ) { const selectedOptions = this . _options . filter ( ( item ) => { return ( item != null ) && ( _UNKNOWN_ . indexOf ( item . _UNKNOWN_ ) !== - 0 ) ; } ) ; if ( ( this . _UNKNOWN_ || this . _UNKNOWN_ ) && ( ! _UNKNOWN_ ) ) { const _UNKNOWN_ = Array . from ( this . _UNKNOWN_ ) ; selectedOptions . forEach ( option => { const _UNKNOWN_ = _UNKNOWN_ . some ( item => item . _value === option . _value ) ; if ( ! _UNKNOWN_ ) { this . _UNKNOWN_ . add ( option ) ; } } ) ; } else { this . _UNKNOWN_ = new Set ( ) ; selectedOptions . forEach ( option => { this . _UNKNOWN_ . add ( option ) ; } ) ; } } else { const selectedOption = this . _options . filter ( ( item ) => { return ( item != null ) && ( item . _UNKNOWN_ === _UNKNOWN_ ) ; } ) ; this . _UNKNOWN_ ( selectedOption [ 0 ] ) ; } } _UNKNOWN_ ( value : string | string [ ] ) { setTimeout ( _ => { this . _UNKNOWN_ ( value ) ; } ) ; } get _UNKNOWN_ ( ) : string | string [ ] { return this . _value ; } set _UNKNOWN_ ( value : string | string [ ] ) { this . _UNKNOWN_ ( value ) ; } _UNKNOWN_ ( _UNKNOWN_ = true ) { this . _UNKNOWN_ . forEach ( item => { this . _UNKNOWN_ ( item , null , _UNKNOWN_ ) ; } ) ; } _UNKNOWN_ ( event ) { if ( ! this . _UNKNOWN_ && this . _isOpen ) { event . preventDefault ( ) ; event . stopPropagation ( ) ; this . _UNKNOWN_ ( false ) ; this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } } _UNKNOWN_ ( event ) { if ( ( ! this . _UNKNOWN_ ) && ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ ) ) { event . preventDefault ( ) ; const _UNKNOWN_ = Array . from ( this . _UNKNOWN_ ) . pop ( ) ; this . _UNKNOWN_ ( _UNKNOWN_ ) ; } } _UNKNOWN_ ( $event ) { if ( this . _isOpen ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; this . _UNKNOWN_ = this . _UNKNOWN_ ( this . _UNKNOWN_ , this . _UNKNOWN_ . filter ( w => ! w . _UNKNOWN_ ) ) ; this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( $event ) { if ( this . _isOpen ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; this . _UNKNOWN_ = this . _UNKNOWN_ ( this . _UNKNOWN_ , this . _UNKNOWN_ . filter ( w => ! w . _UNKNOWN_ ) ) ; this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( option , options : _UNKNOWN_ [ ] ) { return options [ options . indexOf ( option ) - 0 ] || options [ options . length - 0 ] ; } _UNKNOWN_ ( option , options : _UNKNOWN_ [ ] ) { return options [ options . indexOf ( option ) + 0 ] || options [ 0 ] ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = 's' ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( _UNKNOWN_ = true ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ = new _UNKNOWN_ ( ) . transform ( this . _options , { 's' : this . _UNKNOWN_ , 's' : this . _UNKNOWN_ , 's' : this . _UNKNOWN_ ? this . _UNKNOWN_ : this . _UNKNOWN_ , 's' : ! this . _UNKNOWN_ , 's' : this . _UNKNOWN_ ? this . _UNKNOWN_ : 's' } ) ; } else { this . _UNKNOWN_ = this . _options ; } if ( _UNKNOWN_ && ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ [ 0 ] ; } } _UNKNOWN_ ( _UNKNOWN_ ) { this . _UNKNOWN_ . emit ( _UNKNOWN_ ) ; } @ HostListener ( 's' , [ 's' ] ) onClick ( e ) { e . preventDefault ( ) ; if ( ! this . _disabled ) { this . _UNKNOWN_ = ! this . _UNKNOWN_ ; if ( this . _UNKNOWN_ ) { setTimeout ( _ => { this . _UNKNOWN_ . nativeElement . focus ( ) ; } ) ; } } } @ HostListener ( 's' , [ 's' ] ) onKeyDown ( e ) { const keyCode = e . keyCode ; if ( keyCode === TAB && this . _UNKNOWN_ ) { this . _UNKNOWN_ = false ; return ; } if ( ( keyCode !== DOWN_ARROW && keyCode !== ENTER ) || this . _UNKNOWN_ ) { return ; } e . preventDefault ( ) ; if ( ! this . _disabled ) { this . _UNKNOWN_ = true ; if ( this . _UNKNOWN_ ) { setTimeout ( _ => { this . _UNKNOWN_ . nativeElement . focus ( ) ; } ) ; } } } _UNKNOWN_ ( ) { if ( ! this . _UNKNOWN_ ) { return ; } this . onTouched ( ) ; if ( this . _UNKNOWN_ ) { this . _renderer . _UNKNOWN_ ( this . _UNKNOWN_ . nativeElement , 's' ) ; } this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = false ; } _UNKNOWN_ ( ) { this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . removeClass ( this . _el , _UNKNOWN_ ) ; } ) ; this . _classList = [ this . _UNKNOWN_ , ( this . _mode === 's' ) && `template` , ( ! this . _disabled ) && `template` , ( this . _disabled ) && `template` , this . _isOpen && `template` , this . _UNKNOWN_ && `template` , this . _size && `template` ] . filter ( ( item ) => { return ! ! item ; } ) ; this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . addClass ( this . _el , _UNKNOWN_ ) ; } ) ; this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ `template` ] : ! this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ } ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ 's' ] : this . _mode === 's' , [ `template` ] : ! this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ === 's' , [ `template` ] : this . _UNKNOWN_ === 's' } ; } _UNKNOWN_ ( ) { setTimeout ( _ => { if ( this . _UNKNOWN_ && this . _UNKNOWN_ . _UNKNOWN_ ) { const index = this . _UNKNOWN_ . findIndex ( option => option . _UNKNOWN_ === this . _UNKNOWN_ . _UNKNOWN_ ) ; try { const _UNKNOWN_ = this . _UNKNOWN_ . nativeElement . children [ index ] as _UNKNOWN_ ; ( _UNKNOWN_ as any ) . scrollIntoViewIfNeeded ( false ) ; } catch ( e ) { } } } ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ ( this . _value ) ; } else { if ( this . _value ) { this . _UNKNOWN_ ( this . _value ) ; } } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ ( ) . width ; if ( this . _UNKNOWN_ && this . _UNKNOWN_ . overlayRef ) { this . _UNKNOWN_ . overlayRef . updateSize ( { width : this . _UNKNOWN_ } ) ; } } _UNKNOWN_ ( ) { return this . trigger . nativeElement . getBoundingClientRect ( ) ; } writeValue ( value : string | string [ ] ) { this . _UNKNOWN_ ( value , false ) ; } registerOnChange ( fn : ( value : string | string [ ] ) => void ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => void ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } _UNKNOWN_ ( ul ) { if ( ul && ( ul . scrollHeight - ul . scrollTop === ul . clientHeight ) ) { this . _UNKNOWN_ . emit ( true ) ; } } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ && ( this . _UNKNOWN_ . nativeElement . scrollHeight === this . _UNKNOWN_ . nativeElement . clientHeight ) ) { this . _UNKNOWN_ . emit ( true ) ; } } constructor ( private _elementRef , private _renderer , private _UNKNOWN_ ) { this . _el = this . _elementRef . nativeElement ; } ngAfterContentInit ( ) { if ( this . _value != null ) { this . _UNKNOWN_ ( ) ; } } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ !== this . _options ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = this . _options ; } else { this . _UNKNOWN_ ( false ) ; } } private _UNKNOWN_ ( value : string [ ] | string , _UNKNOWN_ = true ) { if ( this . _value === value ) { return ; } if ( ( value == null ) && this . _UNKNOWN_ ) { this . _value = [ ] ; } else { this . _value = value ; } if ( ! this . _UNKNOWN_ ) { if ( value == null ) { this . _UNKNOWN_ = null ; } else { this . _UNKNOWN_ ( value ) ; } } else { if ( value ) { if ( value . length === 0 ) { this . _UNKNOWN_ ( _UNKNOWN_ ) ; } else { this . _UNKNOWN_ ( value , true ) ; } } else if ( value == null ) { this . _UNKNOWN_ ( _UNKNOWN_ ) ; } } } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $any[]$ O O $any$ O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $HTMLElement$ O $complex$ O $boolean$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $string$ O O O $any$ O $string$ O O O $string$ O O O $complex$ O O O O O O O $string$ O O O $string$ O O O $any$ O $string$ O O O O $string$ O O O $number$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $SetConstructor$ O $any$ O O O $SetConstructor$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $boolean$ O O O O O O O O O O O O O $boolean$ O O O $any$ O $void$ O O $complex$ O O O O O O O O O O O O O O O $void$ O O O O O O O O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $boolean$ O O O O $any$ O O $number$ O $number$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $string$ O $string$ O O O O $any$ O $string$ O O O O O $any$ O O O O O O $boolean$ O O O O O O O O O $any$ O O O O O O $boolean$ O O O O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O O O $boolean$ O O O O $boolean$ O O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O O $string$ O O O $string$ O O O O $string$ O O O O $void$ O O O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O $boolean$ O O O O O O $boolean$ O $boolean$ O O O O O O O $boolean$ O O O O $void$ O O O O O $void$ O O O O O O $boolean$ O $boolean$ O O O $any$ O $any$ O O O $boolean$ O O O O $void$ O O O O O O O $boolean$ O O $number$ O O O O O O O $void$ O O O O O O O O O $boolean$ O O O O O O O O $boolean$ O O $void$ O O $any$ O O O O O $any$ O $number$ O $any$ O O O O O O O $boolean$ O O O O $any$ O $any$ O O O O $void$ O O O $complex$ O O O O O O O $void$ O O O $complex$ O O O O O $void$ O $any$ O O O O $any$ O $complex$ O O O $any$ O $number$ O $any$ O O O O O O O O O O $boolean$ O O O O $void$ O O O $complex$ O O O O $void$ O $any$ O O O O O O $any$ O $any$ O $any$ O O $void$ O O O O O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O $void$ O $MouseEvent$ $MouseEvent$ O O O O $MouseEvent$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O O $any$ O O O O O $complex$ O O O O O $void$ O O O O O $void$ O $any$ O $MouseEvent$ $MouseEvent$ O O O O O $any$ O O O O O O O $void$ O $any$ O O O $MouseEvent$ O O O O $void$ O O O O O O O O $boolean$ O O O O $boolean$ O O O O O $void$ O $any$ O $boolean$ O O O $MouseEvent$ $MouseEvent$ O O O O $MouseEvent$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O O $any$ O $any$ O O O $any$ O O $any$ O $boolean$ O O O O O O O $boolean$ O O O O $any$ O $any$ O O O $complex$ O $any$ O $string$ O O O $boolean$ O O O O $void$ O $any$ O $string$ O O O O O O O O $boolean$ O O O O $any$ O O O $any$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O O O O O O $void$ O $HTMLInputElement$ O $string$ O O O O $string$ O O $number$ O $any$ O O O O $any$ O $any$ O $HTMLInputElement$ O O O O O O O O O O O O O O $any$ O $any$ O $HTMLInputElement$ O O O O O O $any$ O $Set$ O $any$ O O $any$ O O O O O $ArrayConstructor$ O $complex$ O $any$ O O $any$ O O O O $complex$ O O $any$ O O $any$ O $string$ O $any$ O $string$ O O O O $void$ O O $any$ O $any$ O O $boolean$ O O O O O O O $any$ O $any$ O O O $any$ O $boolean$ O $any$ O O O O $boolean$ O O O O $void$ O O O O O O O O $boolean$ O O O O $any$ O $number$ O $any$ O O O O O O O O O $any$ O $number$ O $any$ O O O O O O O O O $void$ O $any$ O O O O $any$ O $complex$ O O O $any$ O $number$ O $any$ O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O $void$ O $any$ O $MouseEvent$ $MouseEvent$ O O O O O O $boolean$ O O O O $any$ O $number$ O $any$ O O O O O O O O O $any$ O $number$ O $any$ O O O O O O O O O $void$ O $any$ O O O O $any$ O $number$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $number$ O O O $number$ O O O O $any$ O $any$ O $any$ O O O O O $void$ O O O O O $MouseEvent$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $void$ O O O O O O O $boolean$ O O O O O O $any$ O $ArrayConstructor$ O $complex$ O O O $any$ O O O O $complex$ O $any$ O $U[]$ O $any$ O $any$ O $string$ O O O O $void$ O O O $string[]$ O O O $void$ O $complex$ O O O O O O O $boolean$ O O O O O O $complex$ O O O O O O O O O O O $boolean$ O O O $any$ O O O $any$ O $complex$ O O $any$ O O O O O $any$ O O O O O $complex$ O $number)$ O $any$ O $string$ O O O O O O O O O O O O O O $boolean$ O O O $boolean$ O O O O $boolean$ O O O O $any$ O $ArrayConstructor$ O $complex$ O O O $any$ O O $any$ O $void$ O $any$ O O O $boolean$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $string$ O O O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O $SetConstructor$ O O O $any$ O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O $any$ O $complex$ O O $any$ O O O O O $any$ O O O O O $any$ O $string$ O $complex$ O O O O O O O $void$ O $any$ O O O O O O O $void$ O $complex$ O O O O O O O O $number$ O $any$ O O O O $void$ O $complex$ O O O O O O O $complex$ O O O O O O O O O O O O $complex$ O O O $complex$ O $complex$ O O O O O O O O O O $void$ O $complex$ O O O $void$ O $boolean$ O O O O O O $any$ O O O $any$ O O O O $void$ O $any$ O O O $boolean$ O O O O O O $void$ O $KeyboardEvent$ O O O O O O O $boolean$ O O O $boolean$ O O $KeyboardEvent$ O $void$ O O O $KeyboardEvent$ O $void$ O O O O O $void$ O O O O O O $void$ O O O $any$ O O O O $void$ O $KeyboardEvent$ O O O O O O O O $string$ O O O O O O $boolean$ O O O O O $boolean$ O O O $KeyboardEvent$ O $void$ O O O O $any$ O $ArrayConstructor$ O $complex$ O O O $any$ O O $any$ O O O O O $void$ O $any$ O O O O $void$ O $MouseEvent$ O O O O O O $boolean$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $complex$ O $any$ O O $any$ O $boolean$ O O O O O $void$ O O O O O $void$ O $MouseEvent$ O O O O O O $boolean$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $complex$ O $any$ O O $any$ O $boolean$ O O O O O $void$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $number$ O $any$ O O O O O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $number$ O $any$ O O O O O $any$ O O O O O $void$ O O O O O $string$ O O O O O $void$ O O O O $void$ O $boolean$ O O O O O O O O $boolean$ O O O O $any$ O O $any$ O O O $any$ O O O $any$ O O O O O O $string$ O O O O O $boolean$ O O O O O $boolean$ O O O $string$ O O O $string$ O O O O O O $boolean$ O O O O O $boolean$ O O O $string$ O O O O O O O O O O $any$ O O O $any$ O O O O $boolean$ O O O O $any$ O O O O $any$ O O O $any$ O O O O O O $void$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O O $boolean$ O O $number$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $void$ O $KeyboardEvent$ O O O $number$ O $KeyboardEvent$ O $number$ O O O $number$ O $any$ O O O $boolean$ O O O O $boolean$ O O O O O O O O O $number$ O $any$ O $number$ O $any$ O O O O $boolean$ O O O O O $KeyboardEvent$ O $void$ O O O O O O O O $boolean$ O O O O $boolean$ O O O O O O O $boolean$ O O $number$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O O $boolean$ O O O O O O O $void$ O O O O O O O $boolean$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $void$ O O O O O $boolean$ O O O O $void$ O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O $string[]$ O O O O $string$ O O O O $any$ O O O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O $boolean$ O O O O O $boolean$ O O O O O $string$ O O O O $complex$ O O $string$ O O O O O O $string$ O O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O $void$ O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O $number$ O $any$ O O O O O O $any$ O O O $any$ O $string$ O O O $number$ O O O $any$ O $number$ O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O $HTMLLIElement$ O O O $any$ O $any$ O $any$ O $number$ O O $complex$ O O $HTMLLIElement$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $void$ O O O O O $void$ O O O O O O O O $boolean$ O O O O $void$ O O O $complex$ O O O O O O O O O $complex$ O O O O $void$ O O O $complex$ O O O O O $void$ O O O O O $number$ O O O $ClientRect$ O O O $number$ O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $number$ O O O $number$ O O O O O $ClientRect$ O O O O O O $any$ O $any$ O $any$ O O O O $void$ O $complex$ O O O O O O O O O O $void$ O $complex$ O O O O O $void$ O $void$ O O $complex$ O O O O O O O O O O O O O $void$ O $void$ O O $void$ O $void$ O O O O O O O O O $void$ O $void$ O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O $void$ O $any$ O O O O $any$ O O $any$ O $number$ O $any$ O $number$ O $any$ O $number$ O O O O O $any$ O $any$ O O O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O $ElementRef$ O O $Renderer2$ O O $any$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O O O O $complex$ O O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O O O $any$ O O O $any$ O O O O $void$ O O O O O $any$ O O O $any$ O O O O O O $void$ O O O O O O O $void$ O $complex$ O O O O O O O $boolean$ O O O O O O O O $complex$ O $complex$ O O O O O O O O $complex$ O O O O O O $boolean$ O O O O $complex$ O O O O O O O O O $complex$ O $complex$ O O O O O O O $boolean$ O O O O $complex$ O O O O O O $any$ O O O O O O O O $void$ O $complex$ O O O O O O O O $complex$ O O O O $complex$ O $number$ O O O O O O $void$ O $boolean$ O O O O O O O $void$ O $complex$ O O O O O O O O O $complex$ O O O O O O $void$ O $boolean$ O O O O O O O
<s> import { Component , ContentChild , Input , OnDestroy , OnInit , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ ] } ) export class _UNKNOWN_ implements OnDestroy , OnInit { private _disabled = false ; _value : string ; _label : string ; @ ContentChild ( 's' ) _UNKNOWN_ ; @ Input ( ) set _UNKNOWN_ ( value ) { if ( this . _value === value ) { return ; } this . _value = value ; } get _UNKNOWN_ ( ) : string { return this . _value ; } @ Input ( ) set _UNKNOWN_ ( value ) { if ( this . _label === value ) { return ; } this . _label = value ; } get _UNKNOWN_ ( ) : string { return this . _label ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } constructor ( private _UNKNOWN_ ) { } ngOnInit ( ) { this . _UNKNOWN_ . addOption ( this ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . _UNKNOWN_ ( this ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O $string$ O O O $string$ O O O O $any$ O O O $any$ O O $any$ O O O $string$ O $string$ O O O O O O $string$ O $string$ O O O O O O O $string$ O $string$ O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $string$ O $string$ O O O O O O $string$ O $string$ O O O O O O O $string$ O $string$ O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O O $any$ O O O $void$ O O O O O $any$ O $void$ O O O O O $void$ O O O O O $any$ O $void$ O O O O O O O
<s> import { OverlayModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule , OverlayModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , ContentChild , ElementRef , EventEmitter , HostBinding , Input , OnInit , Output , TemplateRef , ViewEncapsulation , } from 's' ; import * as moment from 's' ; import { Moment } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { index : number ; name : string ; year : number ; isCurrentMonth : boolean ; _UNKNOWN_ : boolean ; disabled : boolean ; } export type _UNKNOWN_ = _UNKNOWN_ [ ] ; export interface _UNKNOWN_ { number : number ; _UNKNOWN_ : boolean ; isNextMonth : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ ? : boolean ; title : string ; date : Moment ; disabled : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ : boolean ; } export interface _UNKNOWN_ { days : _UNKNOWN_ [ ] ; } export enum _UNKNOWN_ { Start = 0 , End = 0 } @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnInit { private _UNKNOWN_ = true ; private _UNKNOWN_ = false ; private _UNKNOWN_ = true ; private _UNKNOWN_ = true ; private _UNKNOWN_ = false ; _el : HTMLElement ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : string [ ] = [ ] ; _UNKNOWN_ : string [ ] = [ ] ; _UNKNOWN_ : number [ ] = [ ] ; _UNKNOWN_ : ( value ) => boolean ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = moment ( new Date ( ) ) . month ( ) ; _UNKNOWN_ = moment ( new Date ( ) ) . year ( ) ; _value : Date = new Date ( ) ; _UNKNOWN_ : Date [ ] = [ null , null ] ; _UNKNOWN_ : Date ; _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ( ) . locale ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; @ Input ( ) _UNKNOWN_ = true ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value : ( value ) => boolean ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : ( value ) => boolean { return this . _UNKNOWN_ ; } @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { if ( this . _value === value ) { return ; } this . _value = value || new Date ( ) ; this . _UNKNOWN_ = moment ( this . _value ) . month ( ) ; this . _UNKNOWN_ = moment ( this . _value ) . year ( ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : Date { return this . _value || new Date ( ) ; } @ Input ( ) get _UNKNOWN_ ( ) : Date [ ] { return this . _UNKNOWN_ ; } set _UNKNOWN_ ( value : Date [ ] ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } @ Input ( ) get _UNKNOWN_ ( ) : Date { return this . _UNKNOWN_ ; } set _UNKNOWN_ ( value ) { if ( this . _UNKNOWN_ === value ) { return ; } this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : number { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : number { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; moment . locale ( this . _UNKNOWN_ ) ; } get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } _UNKNOWN_ ( date ) { if ( this . _UNKNOWN_ ) { return date . hour ( 0 ) . minute ( 0 ) . second ( 0 ) . _UNKNOWN_ ( 0 ) ; } else { return date ; } } _UNKNOWN_ ( $event , day ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; if ( day . disabled ) { return ; } this . _UNKNOWN_ . emit ( day ) ; } _UNKNOWN_ ( $event , month ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; if ( month . disabled ) { return ; } this . _UNKNOWN_ . emit ( month ) ; } _UNKNOWN_ ( $event , day ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; if ( day . disabled || day . date . _UNKNOWN_ ( this . _UNKNOWN_ ) ) { return ; } this . _UNKNOWN_ . emit ( day ) ; } _UNKNOWN_ ( date , month ) { if ( this . _UNKNOWN_ ) { return ( date . _UNKNOWN_ ( this . _UNKNOWN_ [ _UNKNOWN_ . Start ] , 's' ) || date . _UNKNOWN_ ( this . _UNKNOWN_ [ _UNKNOWN_ . End ] , 's' ) || date . _UNKNOWN_ ( this . _UNKNOWN_ , 's' ) ) && date . month ( ) === month . month ( ) ; } else { return date . _UNKNOWN_ ( this . _UNKNOWN_ , 's' ) ; } } _UNKNOWN_ ( date , month ) { let _UNKNOWN_ ; if ( this . _UNKNOWN_ && date . month ( ) === month . month ( ) ) { if ( this . _UNKNOWN_ . every ( e => moment ( e ) . isValid ( ) ) ) { return date . isBetween . apply ( date , this . _UNKNOWN_ ) ; } _UNKNOWN_ = this . _UNKNOWN_ . find ( e => moment ( e ) . isValid ( ) ) ; if ( _UNKNOWN_ && this . _UNKNOWN_ ) { const start = moment . min ( moment ( _UNKNOWN_ ) , moment ( this . _UNKNOWN_ ) ) . _UNKNOWN_ ( ) ; const end = moment . max ( moment ( _UNKNOWN_ ) , moment ( this . _UNKNOWN_ ) ) . _UNKNOWN_ ( ) ; return date . isBetween ( start , end ) ; } return false ; } else { return false ; } } _UNKNOWN_ ( d ) : _UNKNOWN_ [ ] { const weeks : _UNKNOWN_ [ ] = [ ] ; const _UNKNOWN_ = this . _UNKNOWN_ ( d ) ; const start = _UNKNOWN_ . clone ( ) . date ( 0 ) . day ( 0 ) ; const month = _UNKNOWN_ . clone ( ) ; let done = false ; const date = start . clone ( ) ; let _UNKNOWN_ = date . month ( ) ; let count = 0 ; while ( ! done ) { weeks . push ( { days : this . _UNKNOWN_ ( date . clone ( ) , month ) } ) ; date . add ( 0 , 's' ) ; done = count ++ > 0 ; _UNKNOWN_ = date . month ( ) ; } return weeks ; } _UNKNOWN_ ( _UNKNOWN_ , month ) : _UNKNOWN_ [ ] { let date = _UNKNOWN_ ; const days : _UNKNOWN_ [ ] = [ ] ; for ( let i = 0 ; i < 0 ; i ++ ) { days . push ( { number : date . date ( ) , _UNKNOWN_ : date . month ( ) < month . month ( ) , isNextMonth : date . month ( ) > month . month ( ) , _UNKNOWN_ : date . _UNKNOWN_ ( new Date ( ) , 's' ) , _UNKNOWN_ : this . _UNKNOWN_ ( date , month ) , _UNKNOWN_ : this . _UNKNOWN_ ( date , month ) , title : date . format ( 's' ) , date , disabled : this . _UNKNOWN_ && this . _UNKNOWN_ ( date . _UNKNOWN_ ( ) ) , _UNKNOWN_ : this . _UNKNOWN_ && this . _UNKNOWN_ ( date . _UNKNOWN_ ( ) ) && ( date . day ( ) === 0 || ( date . day ( ) !== 0 && this . _UNKNOWN_ && ! this . _UNKNOWN_ ( date . clone ( ) . subtract ( 0 , 's' ) . _UNKNOWN_ ( ) ) ) ) , _UNKNOWN_ : this . _UNKNOWN_ && this . _UNKNOWN_ ( date . _UNKNOWN_ ( ) ) && ( date . day ( ) === 0 || ( date . day ( ) !== 0 && this . _UNKNOWN_ && ! this . _UNKNOWN_ ( date . clone ( ) . add ( 0 , 's' ) . _UNKNOWN_ ( ) ) ) ) } ) ; date = date . clone ( ) ; date . add ( 0 , 's' ) ; } return days ; } _UNKNOWN_ ( date ) : _UNKNOWN_ [ ] [ ] { const _UNKNOWN_ : _UNKNOWN_ [ ] [ ] = [ ] ; let months : _UNKNOWN_ [ ] = [ ] ; for ( let i = 0 ; i < 0 ; i ++ ) { months . push ( { index : i , name : this . _UNKNOWN_ [ i ] , year : date . year ( ) , isCurrentMonth : moment ( new Date ( ) ) . month ( ) === i && date . _UNKNOWN_ ( new Date ( ) , 's' ) , _UNKNOWN_ : this . _UNKNOWN_ === i , disabled : this . _UNKNOWN_ && this . _UNKNOWN_ ( date . month ( i ) . _UNKNOWN_ ( ) ) } ) ; if ( ( i + 0 ) % 0 === 0 ) { _UNKNOWN_ . push ( months ) ; months = [ ] ; } } return _UNKNOWN_ ; } _UNKNOWN_ ( ) { moment . locale ( this . _UNKNOWN_ ) ; if ( this . _UNKNOWN_ !== 's' ) { try { this . _UNKNOWN_ = moment . duration ( 0 , 's' ) . _UNKNOWN_ ( ) . split ( 's' ) [ 0 ] [ 0 ] . toUpperCase ( ) + moment . duration ( 0 , 's' ) . _UNKNOWN_ ( ) . split ( 's' ) [ 0 ] . slice ( 0 , moment . duration ( 0 , 's' ) . _UNKNOWN_ ( ) . split ( 's' ) [ 0 ] . length ) ; this . _UNKNOWN_ = moment . duration ( 0 , 's' ) . _UNKNOWN_ ( ) . split ( 's' ) [ 0 ] [ 0 ] . toUpperCase ( ) + moment . duration ( 0 , 's' ) . _UNKNOWN_ ( ) . split ( 's' ) [ 0 ] . slice ( 0 , moment . duration ( 0 , 's' ) . _UNKNOWN_ ( ) . split ( 's' ) [ 0 ] . length ) ; } catch ( e ) { } } if ( this . _UNKNOWN_ === 's' ) { try { const _UNKNOWN_ = moment . duration ( 0 , 's' ) . _UNKNOWN_ ( ) . split ( 's' ) [ 0 ] ; const _UNKNOWN_ = moment . duration ( 0 , 's' ) . _UNKNOWN_ ( ) . split ( 's' ) [ 0 ] ; this . _UNKNOWN_ = _UNKNOWN_ . charAt ( 0 ) . toUpperCase ( ) + _UNKNOWN_ . slice ( 0 ) ; this . _UNKNOWN_ = _UNKNOWN_ . charAt ( 0 ) . toUpperCase ( ) + _UNKNOWN_ . slice ( 0 ) ; } catch ( e ) { } } this . _UNKNOWN_ = this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ = moment . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = moment . _UNKNOWN_ ( ) ; const date = moment ( this . _UNKNOWN_ ) . year ( this . _UNKNOWN_ ) . month ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ = this . _UNKNOWN_ ( date ) ; this . _UNKNOWN_ = this . _UNKNOWN_ ( date ) ; } _UNKNOWN_ ( year ) : number [ ] { const _UNKNOWN_ : number [ ] = [ ] ; for ( const i of Array . from ( Array ( 0 ) . keys ( ) ) ) { _UNKNOWN_ . push ( i - 0 + year ) ; } return _UNKNOWN_ ; } constructor ( private _elementRef , private _UNKNOWN_ ) { this . _el = this . _elementRef . nativeElement ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O $number$ O O O $string$ O O O $number$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O $any$ O O O O O $any$ O $number$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O $string$ O O O $any$ O $any$ O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $HTMLElement$ O $complex$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $string[]$ O O O O O O O O $string[]$ O O O O O O O O $number[]$ O O O O O O O O $boolean$ O O $Date$ O O O O $string$ O O O $string$ O O O $any$ O $any$ O O $DateConstructor$ O O O O $any$ O O O $any$ O $any$ O O $DateConstructor$ O O O O $any$ O O O $Date$ O $DateConstructor$ O O $DateConstructor$ O O O $Date[]$ O $DateConstructor$ O O O O O O O O O $Date$ O $DateConstructor$ O $string$ O O O $any$ O $any$ O O O $string$ O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $boolean$ O O O O $any$ O O $string$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O $Date$ O O O O O O O $boolean$ O $boolean$ O O O $void$ O O O O O $boolean$ O O O O $Date$ O O O O O O O $boolean$ O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $Date$ O $Date$ O O O O O O $Date$ O $Date$ O O O O O O O $Date$ O $Date$ O O $DateConstructor$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $void$ O O O O O $Date$ O O O $DateConstructor$ O O O O $Date$ O O $DateConstructor$ O O O O O $any$ O O O $Date[]$ O O O $DateConstructor$ O O O O O O $Date[]$ O O O $Date[]$ O $Date[]$ O $DateConstructor$ O O O O O O $Date[]$ O $Date[]$ O O O $void$ O O O O O $any$ O O O $Date$ O O O $DateConstructor$ O O O O $Date$ O O O $Date$ O $Date$ O O O O O O $Date$ O $Date$ O O O O O O O $Date$ O $Date$ O O O $void$ O O O O O $any$ O O O $number$ O $number$ O O O O $any$ O $number$ O O O $void$ O O O O O $number$ O O O O O O O O $any$ O O O $any$ O O O $number$ O $number$ O O O O $any$ O $number$ O O O $void$ O O O O O $number$ O O O O O O O O $any$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O $any$ O $any$ O O O $string$ O O O O $string$ O O O O O O O O $string$ O O $Moment$ O $Moment$ O O O O O O $boolean$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O O $void$ O $MouseEvent$ O $any$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $any$ O $boolean$ O O O O O O O $any$ O $any$ O $any$ O O O $void$ O $MouseEvent$ O $any$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $any$ O $boolean$ O O O O O O O $any$ O $any$ O $any$ O O O $void$ O $MouseEvent$ O $any$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $any$ O $boolean$ O $any$ O $any$ O $any$ O O O $Date$ O O O O O O O O $any$ O $any$ O $any$ O O O $boolean$ O $Moment$ O $Moment$ O O O O O O $boolean$ O O O O $any$ O $any$ O O O $Date[]$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $Date[]$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $Date$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $Date$ O O O O O O $boolean$ O $Moment$ O $Moment$ O O O $Date$ O O O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $Date[]$ O $boolean$ O $Date$ O $any$ O $Date$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $Date[]$ O O O $Date$ O O O $Date[]$ O $complex$ O $Date$ O $any$ O $Date$ O O $any$ O O O O O O $Date$ O O O $Date$ O O O $any$ O $any$ O $any$ O $any$ O $Date$ O O $any$ O O O $Date$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $Date$ O O $any$ O O O $Date$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O $any$ O $Moment$ O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $number$ O O O O O O $boolean$ O O $any$ O $number$ O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O O O O $boolean$ O $number$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $Moment$ O $Moment$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O $number$ O O O $number$ O O O $number$ O O O $any$ O $number$ O O $any$ O $any$ O $any$ O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $DateConstructor$ O O O O O O $boolean$ O O O $boolean$ O $any$ O $any$ O O $boolean$ O O O $boolean$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $boolean$ O O O $boolean$ O O O $boolean$ O $any$ O $any$ O O O O $boolean$ O O O $boolean$ O O O $boolean$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $boolean$ O O O O $boolean$ O $any$ O $any$ O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O $boolean$ O O O $boolean$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $boolean$ O O O O $boolean$ O $any$ O $any$ O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O O $any$ O $Moment$ O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O O O O O O $number$ O O O $number$ O O O $number$ O O O $any$ O $number$ O O $number$ O $number$ O $string$ O O O $string[]$ O $number$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $DateConstructor$ O O O O $any$ O O O $number$ O $any$ O $any$ O O $DateConstructor$ O O O O O O $boolean$ O O O $any$ O $number$ O $boolean$ O O O $boolean$ O O O $boolean$ O $any$ O $any$ O $number$ O O $any$ O O O O O O O O O $number$ O O O O O O O O O $any$ O $number$ O $any$ O O $any$ O O O O O O O $any$ O O $void$ O O O $any$ O $any$ O O O $string$ O O O O O O $string$ O O O O O O O O $string$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O $string$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O O O O O $string$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O $string$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $number[]$ O O O $number[]$ O O O $any$ O O O O $string[]$ O $any$ O $any$ O O O O O $string[]$ O $any$ O $any$ O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O $number[]$ O $number$ O O O O O O O $number[]$ O O O O O O O O O O O $number$ O $ArrayConstructor$ O $complex$ O $ArrayConstructor$ O O O O $IterableIterator<number>$ O O O O O $number[]$ O $number$ O $number$ O O O $number$ O O O O $number[]$ O O O O O $ElementRef$ O O $any$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O O $void$ O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { Directive , HostBinding } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Component , ContentChild , HostBinding , Input , TemplateRef , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] , host : { 's' : 's' } } ) export class _UNKNOWN_ { private _UNKNOWN_ = true ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ ContentChild ( 's' ) title : TemplateRef < void > ; @ ContentChild ( 's' ) extra : TemplateRef < void > ; @ ContentChild ( 's' ) body : TemplateRef < void > ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O $complex$ O O O O O O O O O O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O $any$ O O O
<s> import { Directive , ElementRef , HostBinding , } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { width = 0 ; isActive = false ; left : number = null ; top : number = null ; _UNKNOWN_ = false ; nativeElement : HTMLElement ; @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . isActive === true ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : number { return this . width ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : number { return this . left ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : number { return this . top ; } @ HostBinding ( 's' ) get setPosition ( ) : string { if ( this . _UNKNOWN_ ) { return 's' ; } } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : number { if ( this . _UNKNOWN_ ) { return this . isActive ? 0 : 0 ; } } constructor ( private _el ) { this . nativeElement = this . _el . nativeElement ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O $number$ O O O $boolean$ O O O $number$ O O O O O $number$ O O O O O $boolean$ O O O $HTMLElement$ O $complex$ O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O O $any$ O O O O $number$ O O O O O O O O $number$ O O O $any$ O O O O $number$ O O O O O O O O $number$ O O O $any$ O O O O $number$ O O O O O O O O $number$ O O O $any$ O O O O $string$ O O O O O O O O O $boolean$ O O O O O O O O $any$ O O O O $number$ O O O O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O O O O $ElementRef$ O O O O $HTMLElement$ O O O $any$ O $any$ O O O O
<s> import { AfterViewInit , Component , ContentChildren , ElementRef , EventEmitter , HostBinding , HostListener , Input , OnDestroy , Output , QueryList , 0 , ViewChild , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] , host : { 's' : 's' } } ) export class _UNKNOWN_ implements AfterViewInit , OnDestroy { private _UNKNOWN_ = false ; private _UNKNOWN_ = true ; private _vertical = false ; private _UNKNOWN_ = true ; activeIndex = 0 ; transform = 's' ; interval ; _UNKNOWN_ : QueryList < _UNKNOWN_ > ; _UNKNOWN_ = 0 ; _UNKNOWN_ = false ; @ ContentChildren ( _UNKNOWN_ ) set _UNKNOWN_ ( value < _UNKNOWN_ > ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ HostBinding ( 's' ) _UNKNOWN_ = true ; @ Input ( ) _UNKNOWN_ = 's' ; @ Output ( ) _UNKNOWN_ : EventEmitter < number > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < { form : number ; to : number } > = new EventEmitter ( ) ; @ Input ( ) get _UNKNOWN_ ( ) : number { return this . _UNKNOWN_ ; } set _UNKNOWN_ ( speed ) { this . _UNKNOWN_ = Math . max ( speed , 0 ) ; } @ HostListener ( 's' ) _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; if ( this . _UNKNOWN_ && this . _UNKNOWN_ ) { this . clearInterval ( ) ; } } @ HostListener ( 's' ) _UNKNOWN_ ( ) { this . _UNKNOWN_ = false ; if ( ! this . interval && this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } get _UNKNOWN_ ( ) : number { return this . activeIndex < this . _UNKNOWN_ . length - 0 ? ( this . activeIndex + 0 ) : 0 ; } get _UNKNOWN_ ( ) : number { return this . activeIndex > 0 ? ( this . activeIndex - 0 ) : ( this . _UNKNOWN_ . length - 0 ) ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _vertical = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _vertical ; } constructor ( public hostElement , private _renderer ) { } setActive ( content , i ) { if ( ( this . _UNKNOWN_ && ! this . _UNKNOWN_ ) || ( this . _UNKNOWN_ && this . _UNKNOWN_ && ! this . _UNKNOWN_ ) ) { this . _UNKNOWN_ ( ) ; } const _UNKNOWN_ = this . _UNKNOWN_ . toArray ( ) . findIndex ( slide => slide . isActive ) ; this . _UNKNOWN_ . emit ( { form : _UNKNOWN_ , to : i } ) ; this . activeIndex = i ; if ( this . _UNKNOWN_ !== 's' ) { if ( ! this . _UNKNOWN_ ) { this . transform = `template` ; } else { this . transform = `template` ; } } this . _UNKNOWN_ . forEach ( slide => slide . isActive = false ) ; content . isActive = true ; this . _UNKNOWN_ . emit ( i ) ; } ngAfterViewInit ( ) { this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { setTimeout ( _ => { if ( this . _UNKNOWN_ . first ) { this . _UNKNOWN_ . first . isActive = true ; } this . _UNKNOWN_ . forEach ( ( content , i ) => { content . width = this . hostElement . nativeElement . offsetWidth ; if ( this . _UNKNOWN_ === 's' ) { content . _UNKNOWN_ = true ; if ( ! this . _UNKNOWN_ ) { content . left = - i * content . width ; } else { content . top = - i * this . hostElement . nativeElement . offsetHeight ; } } } ) ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } if ( this . _UNKNOWN_ ) { this . _renderer . _UNKNOWN_ ( this . _UNKNOWN_ . nativeElement , 's' ) ; if ( this . _UNKNOWN_ . first ) { this . _renderer . setStyle ( this . _UNKNOWN_ . nativeElement , 's' , `template` ) ; } this . _renderer . _UNKNOWN_ ( this . _UNKNOWN_ . nativeElement , 's' ) ; this . _renderer . setStyle ( this . _UNKNOWN_ . nativeElement , 's' , `template` ) ; } else { this . _renderer . _UNKNOWN_ ( this . _UNKNOWN_ . nativeElement , 's' ) ; this . _renderer . setStyle ( this . _UNKNOWN_ . nativeElement , 's' , `template` ) ; } } ) ; } _UNKNOWN_ ( ) { this . clearInterval ( ) ; this . interval = setInterval ( _ => { this . setActive ( this . _UNKNOWN_ . toArray ( ) [ this . _UNKNOWN_ ] , this . _UNKNOWN_ ) ; } , this . _UNKNOWN_ ) ; } clearInterval ( ) { if ( this . interval ) { clearInterval ( this . interval ) ; this . interval = null ; } } _UNKNOWN_ ( ) { this . setActive ( this . _UNKNOWN_ . toArray ( ) [ this . _UNKNOWN_ ] , this . _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { this . setActive ( this . _UNKNOWN_ . toArray ( ) [ this . _UNKNOWN_ ] , this . _UNKNOWN_ ) ; } _UNKNOWN_ ( index ) { if ( index >= 0 && index <= this . _UNKNOWN_ . length - 0 ) { this . setActive ( this . _UNKNOWN_ . toArray ( ) [ index ] , index ) ; } } ngOnDestroy ( ) { this . clearInterval ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O $complex$ O O O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $number$ O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O $number$ O O O $boolean$ O O O O $any$ O $any$ O O $any$ O $QueryList$ O $any$ O O O O O $any$ O $any$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O $string$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O $number$ O O O $number$ O O O O O O $any$ O O O O $any$ O O O $number$ O O O O O O O O $number$ O O O $number$ O $number$ O O O O $number$ O $Math$ O $number$ O $number$ O O O O O O $any$ O O O $void$ O O O O O $boolean$ O O O O O O O $boolean$ O O O $boolean$ O O O O $void$ O O O O O O $any$ O O O $void$ O O O O O $boolean$ O O O O O O O O $any$ O O O $boolean$ O O O O $void$ O O O O O O $number$ O O O O O O O O $number$ O O O $any$ O $any$ O O O O O O $number$ O O O O O O O O $number$ O O O O O O O O $number$ O O O O O O $number$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O O $ElementRef$ O O $Renderer2$ O O O $void$ O $any$ O $number$ O O O O O O O $boolean$ O O O O $boolean$ O O O O O $boolean$ O O O $boolean$ O O O O $boolean$ O O O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $number$ O $number$ O O O O O $number$ O $number$ O O O O O $string$ O O O O O O O O O $boolean$ O O O O $string$ O O O O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $boolean$ O O O O O $any$ O $any$ O $number$ O O O $void$ O O O O O $void$ O O O O $void$ O O O $number$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $string$ O O O O $any$ O $any$ O O O O O O O O $boolean$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O $boolean$ O O O O $void$ O O O O O O O O $boolean$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O $void$ O O O O O $any$ O $number$ O $any$ O O O O $void$ O O O $any$ O $any$ O O O O O $number$ O O O O $number$ O O O O O O $number$ O O O $void$ O O O O O O O $any$ O O $void$ O O O $any$ O O O O $any$ O O O O O $void$ O O O O O $void$ O O O $any$ O $any$ O O O O O $number$ O O O O $number$ O O O $void$ O O O O O $void$ O O O $any$ O $any$ O O O O O $number$ O O O O $number$ O O O $void$ O $number$ O O O O $number$ O O O $number$ O O O $any$ O $any$ O O O O O O $void$ O O O $any$ O $any$ O O O $number$ O O $number$ O O O O $void$ O O O O O $void$ O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { AfterContentInit , Component , ElementRef , HostBinding , Input , 0 , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements AfterContentInit { private _UNKNOWN_ = false ; _el : HTMLElement ; _UNKNOWN_ = 's' ; @ HostBinding ( `template` ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ === 's' ; } @ HostBinding ( `template` ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ === 's' ; } @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) @ HostBinding ( `template` ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } constructor ( private _elementRef , private _render ) { this . _el = this . _elementRef . nativeElement ; this . _render . addClass ( this . _el , `template` ) ; } ngAfterContentInit ( ) { Array . from ( this . _el . childNodes ) . forEach ( ( node ) => { if ( node . nodeType === 0 ) { this . _el . removeChild ( node ) ; } } ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O $boolean$ O O O $HTMLElement$ O $complex$ O $string$ O O O O $any$ O O O O $boolean$ O O O O O O O O $string$ O O O O O $any$ O O O O $boolean$ O O O O O O O O $string$ O O O O O $any$ O O $string$ O O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $HTMLElement$ O O O O O $void$ O O O $ArrayConstructor$ O $complex$ O O O $HTMLElement$ O $NodeListOf<ChildNode>$ O O $void$ O O $HTMLElement$ O O O O O $HTMLElement$ O $number$ O O O O O O $HTMLElement$ O $T$ O $HTMLElement$ O O O O O O O O O
<s> const _UNKNOWN_ = `template` ; const _UNKNOWN_ = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , ] ; const _UNKNOWN_ = { } ; let _UNKNOWN_ ; function _UNKNOWN_ ( node , _UNKNOWN_ = false ) : { _UNKNOWN_ : string , _UNKNOWN_ : number , _UNKNOWN_ : number , _UNKNOWN_ : string } { const _UNKNOWN_ = ( node . getAttribute ( 's' ) || node . getAttribute ( 's' ) || node . getAttribute ( 's' ) ) ; if ( _UNKNOWN_ && _UNKNOWN_ [ _UNKNOWN_ ] ) { return _UNKNOWN_ [ _UNKNOWN_ ] ; } const style = window . getComputedStyle ( node ) ; const _UNKNOWN_ = ( style . getPropertyValue ( 's' ) || style . getPropertyValue ( 's' ) || style . getPropertyValue ( 's' ) ) ; const _UNKNOWN_ = ( parseFloat ( style . getPropertyValue ( 's' ) ) + parseFloat ( style . getPropertyValue ( 's' ) ) ) ; const _UNKNOWN_ = ( parseFloat ( style . getPropertyValue ( 's' ) ) + parseFloat ( style . getPropertyValue ( 's' ) ) ) ; const _UNKNOWN_ = _UNKNOWN_ . map ( name => `template` ) . join ( 's' ) ; const _UNKNOWN_ = { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } ; if ( _UNKNOWN_ && _UNKNOWN_ ) { _UNKNOWN_ [ _UNKNOWN_ ] = _UNKNOWN_ ; } return _UNKNOWN_ ; } export default function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ = false , minRows : number | null = null , maxRows : number | null = null , ) : { height : number , minHeight : number , maxHeight : number , overflowY : string } { if ( ! _UNKNOWN_ ) { _UNKNOWN_ = document . createElement ( 's' ) ; document . body . appendChild ( _UNKNOWN_ ) ; } if ( _UNKNOWN_ . getAttribute ( 's' ) ) { _UNKNOWN_ . setAttribute ( 's' , _UNKNOWN_ . getAttribute ( 's' ) ) ; } else { _UNKNOWN_ . removeAttribute ( 's' ) ; } const { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , } = _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; _UNKNOWN_ . setAttribute ( 's' , `template` ) ; _UNKNOWN_ . value = _UNKNOWN_ . value || _UNKNOWN_ . placeholder || 's' ; let minHeight = - Infinity ; let maxHeight = Infinity ; let height = _UNKNOWN_ . scrollHeight ; let overflowY ; if ( _UNKNOWN_ === 's' ) { height = height + _UNKNOWN_ ; } else if ( _UNKNOWN_ === 's' ) { height = height - _UNKNOWN_ ; } if ( minRows !== null || maxRows !== null ) { _UNKNOWN_ . value = 's' ; const _UNKNOWN_ = _UNKNOWN_ . scrollHeight - _UNKNOWN_ ; if ( minRows !== null ) { minHeight = _UNKNOWN_ * minRows ; if ( _UNKNOWN_ === 's' ) { minHeight = minHeight + _UNKNOWN_ + _UNKNOWN_ ; } height = Math . max ( minHeight , height ) ; } if ( maxRows !== null ) { maxHeight = _UNKNOWN_ * maxRows ; if ( _UNKNOWN_ === 's' ) { maxHeight = maxHeight + _UNKNOWN_ + _UNKNOWN_ ; } overflowY = height > maxHeight ? 's' : 's' ; height = Math . min ( maxHeight , height ) ; } } if ( ! maxRows ) { overflowY = 's' ; } return { height , minHeight , maxHeight , overflowY } ; } </s>	O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O ${}$ O O O O O $HTMLTextAreaElement$ O O $complex$ O $Element$ O $boolean$ O O O O O $string$ O O O $number$ O O O $number$ O O O $string$ O O O O O $string$ O O $Element$ O $string$ O O O O $Element$ O $string$ O O O O $Element$ O $string$ O O O O O O O $boolean$ O ${}$ O $string$ O O O O ${}$ O $string$ O O O O $CSSStyleDeclaration$ O $complex$ O $CSSStyleDeclaration)$ O $Element$ O O O $string$ O O $CSSStyleDeclaration$ O $string$ O O O O $CSSStyleDeclaration$ O $string$ O O O O $CSSStyleDeclaration$ O $string$ O O O O O O $number$ O O $number$ O $CSSStyleDeclaration$ O $string$ O O O O O $number$ O $CSSStyleDeclaration$ O $string$ O O O O O O O $number$ O O $number$ O $CSSStyleDeclaration$ O $string$ O O O O O $number$ O $CSSStyleDeclaration$ O $string$ O O O O O O O $string$ O $string[]$ O $U[]$ O $string$ O O O O $string$ O O O O O $complex$ O O $string$ O $number$ O $number$ O $string$ O O O O O $boolean$ O $string$ O O ${}$ O $string$ O O $complex$ O O O $complex$ O O O O O $complex$ O $HTMLTextAreaElement$ O $boolean$ O O O $number$ O O O O O O O $number$ O O O O O O O O O O $number$ O O O $number$ O O O $number$ O O O $string$ O O O O O O O $HTMLTextAreaElement$ O O $HTMLTextAreaElement$ O $Document$ O O O O O O $Document$ O $HTMLElement$ O $T$ O $HTMLTextAreaElement$ O O O O O $HTMLTextAreaElement$ O $string$ O O O O O $HTMLTextAreaElement$ O $void$ O O O $HTMLTextAreaElement$ O $string$ O O O O O O O O $HTMLTextAreaElement$ O $void$ O O O O O O O $number$ O $number$ O $string$ O $string$ O O O $complex$ O $HTMLTextAreaElement$ O $boolean$ O O $HTMLTextAreaElement$ O $void$ O O O O O O $HTMLTextAreaElement$ O $string$ O $HTMLTextAreaElement$ O $string$ O $HTMLTextAreaElement$ O $string$ O O O O $number$ O O $number$ O O $number$ O $number$ O O $number$ O $HTMLTextAreaElement$ O $number$ O O $string$ O O O $string$ O O O O $number$ O $number$ O $number$ O O O O O $string$ O O O O $number$ O $number$ O $number$ O O O O $number$ O O O $number$ O O O O $HTMLTextAreaElement$ O $string$ O O O O $number$ O $HTMLTextAreaElement$ O $number$ O $number$ O O O $number$ O O O O $number$ O $number$ O $number$ O O O $string$ O O O O $number$ O $number$ O $number$ O $number$ O O $number$ O $Math$ O $number$ O $number$ O $number$ O O O O O $number$ O O O O $number$ O $number$ O $number$ O O O $string$ O O O O $number$ O $number$ O $number$ O $number$ O O $string$ O $number$ O $number$ O O O O O $number$ O $Math$ O $number$ O $number$ O $number$ O O O O O O O $number$ O O $string$ O O O O O O $number$ O $number$ O $number$ O $string$ O O O O
<s> import { forwardRef , AfterContentInit , AfterViewInit , Component , ContentChild , ElementRef , EventEmitter , HostListener , Input , Output , 0 , TemplateRef , ViewChild , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import _UNKNOWN_ from 's' ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { minRows ? : number ; maxRows ? : number ; } @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements AfterContentInit , ControlValueAccessor , AfterViewInit { private _disabled = false ; private _UNKNOWN_ = false ; _el : HTMLElement ; _value : string ; _size = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = false ; _UNKNOWN_ ; _UNKNOWN_ : boolean | _UNKNOWN_ = false ; onChange : ( value ) => void = ( ) => null ; onTouched : ( ) => void = ( ) => null ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _size = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } [ value ] ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : string { return this . _size ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value : string | boolean | _UNKNOWN_ ) { if ( typeof value === 's' ) { this . _UNKNOWN_ = true ; } else { this . _UNKNOWN_ = value ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ = 0 ; } } get _UNKNOWN_ ( ) : string | boolean | _UNKNOWN_ { return this . _UNKNOWN_ ; } @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < string > = new EventEmitter ( ) ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( e ) { this . _UNKNOWN_ = true ; } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( e ) { this . _UNKNOWN_ = false ; this . onChange ( this . _value ) ; } get _UNKNOWN_ ( ) : string { return this . _value ; } set _UNKNOWN_ ( value ) { if ( ( this . _value === value ) || ( ( this . _value == null ) && ( value == null ) ) ) { return ; } this . _value = value ; if ( ! this . _UNKNOWN_ ) { this . onChange ( value ) ; } } _UNKNOWN_ ( $event ) { this . _UNKNOWN_ . emit ( $event ) ; this . onTouched ( ) ; } _UNKNOWN_ ( $event ) { this . _UNKNOWN_ . emit ( $event ) ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ === 's' ) { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ . emit ( this . _value ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ `template` ] : true , [ `template` ] : this . _disabled } ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ . nativeElement ; _UNKNOWN_ . style . height = 's' ; const maxRows = this . _UNKNOWN_ ? ( this . _UNKNOWN_ as _UNKNOWN_ ) . maxRows || null : null ; const minRows = this . _UNKNOWN_ ? ( this . _UNKNOWN_ as _UNKNOWN_ ) . minRows || null : null ; const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ , false , minRows , maxRows ) ; _UNKNOWN_ . style . height = `template` ; _UNKNOWN_ . style . overflowY = _UNKNOWN_ . overflowY ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ === 's' && this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } constructor ( private _elementRef , private _renderer ) { this . _el = this . _elementRef . nativeElement ; } ngAfterContentInit ( ) { if ( this . _UNKNOWN_ === 's' || this . _UNKNOWN_ || this . _UNKNOWN_ ) { this . _renderer . setAttribute ( this . _el , 's' , `template` ) ; } else { this . _renderer . setAttribute ( this . _el , 's' , `template` ) ; } if ( ( this . _UNKNOWN_ || this . _UNKNOWN_ ) ) { this . _renderer . setAttribute ( this . _el , 's' , `template` ) ; } } ngAfterViewInit ( ) { if ( this . _UNKNOWN_ === 's' && this . _UNKNOWN_ ) { setTimeout ( ( ) => this . _UNKNOWN_ ( ) , 0 ) ; } } writeValue ( value ) { this . _value = value ; } registerOnChange ( fn : ( _ ) => void ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => void ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $complex$ O O O O O $boolean$ O O O O O O $any$ O $number$ O O O O $number$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O $HTMLElement$ O $complex$ O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O $any$ O $complex$ O O O $any$ O O O $void$ O O $string$ O O O O O O O O O $void$ O O O O O O O O O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O O $string$ O $string$ O O O O $string$ O O $string$ O O O $string$ O O O O $string$ O O O O $void$ O O O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $complex$ O $complex$ O O O O O $any$ O O O O O $complex$ O O O O O O $complex$ O O O O O O O O $complex$ O $complex$ O O O O O O $complex$ O O O O $number$ O O O O O O $complex$ O O O O O O O $any$ O O O O $complex$ O O O $any$ O O $any$ O $any$ O $complex$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $complex$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O O O O $void$ O $any$ O O O O $boolean$ O O O O O $any$ O O O O O O O $void$ O $any$ O O O O $boolean$ O O O O O $void$ O O O $string$ O O O O $string$ O O O O O O O O $string$ O O O $string$ O $string$ O O O O O O O $string$ O $string$ O O O O O O $string$ O O O O O $string$ O O O O O O O O O O O $string$ O $string$ O O O O O O $boolean$ O O O O $void$ O $string$ O O O O $void$ O $FocusEvent$ O O O O $any$ O $any$ O $FocusEvent$ O O O O $void$ O O O O $void$ O $FocusEvent$ O O O O $any$ O $any$ O $FocusEvent$ O O O $void$ O O O O O O O $string$ O O O O O O $void$ O O O O O $void$ O O O O O $any$ O $any$ O O O $string$ O O O $void$ O O O O O $any$ O O O O O O O O O O O O O O $boolean$ O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $number$ O O O $complex$ O O O O $complex$ O $any$ O O $number$ O O O O O O $number$ O O O $complex$ O O O O $complex$ O $any$ O O $number$ O O O O O O $complex$ O $complex$ O $any$ O O O $number$ O $number$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $complex$ O $string$ O O $void$ O O O O O O O $string$ O O O O O $complex$ O O O O $void$ O O O O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O O O O $string$ O O O O O $any$ O O O $any$ O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O O $void$ O O O O O O O $string$ O O O O O $complex$ O O $number$ O O O O O O $void$ O O O O O O O O $void$ O $string$ O O O O $string$ O $string$ O O $void$ O $void$ O O $string$ O O O O O O O $void$ O $void$ O O $void$ O $void$ O O O O O O O O O $void$ O $void$ O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O O
<s> import { Component , ElementRef , HostBinding , Input , 0 , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] , host : { 's' : 's' } } ) export class _UNKNOWN_ { private _disabled = false ; private _UNKNOWN_ = false ; size = 's' ; nativeElement : HTMLElement ; _UNKNOWN_ : boolean | _UNKNOWN_ = false ; @ Input ( ) get _UNKNOWN_ ( ) : string { return this . size ; } set _UNKNOWN_ ( value ) { this . size = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } [ value ] ; } @ Input ( ) @ HostBinding ( `template` ) set _UNKNOWN_ ( value ) { const disabled = _UNKNOWN_ ( value ) ; if ( disabled ) { this . _render . setAttribute ( this . nativeElement , 's' , 's' ) ; } else { this . _render . removeAttribute ( this . nativeElement , 's' ) ; } this . _disabled = disabled ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) set _UNKNOWN_ ( value ) { const readonly = _UNKNOWN_ ( value ) ; if ( readonly ) { this . _render . setAttribute ( this . nativeElement , 's' , 's' ) ; } else { this . _render . removeAttribute ( this . nativeElement , 's' ) ; } this . _UNKNOWN_ = readonly ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value : string | boolean | _UNKNOWN_ ) { if ( typeof value === 's' ) { this . _UNKNOWN_ = true ; } else { this . _UNKNOWN_ = value ; } if ( this . _UNKNOWN_ ) { this . _render . setAttribute ( this . nativeElement , 's' , 's' ) ; } else { this . _render . removeAttribute ( this . nativeElement , 's' ) ; } } get _UNKNOWN_ ( ) : string | boolean | _UNKNOWN_ { return this . _UNKNOWN_ ; } @ HostBinding ( `template` ) get _UNKNOWN_ ( ) : boolean { return this . size === 's' ; } @ HostBinding ( `template` ) get _UNKNOWN_ ( ) : boolean { return this . size === 's' ; } constructor ( private _elementRef , private _render ) { this . nativeElement = this . _elementRef . nativeElement ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O $complex$ O O O O O O O O O O $any$ O O $boolean$ O O O O $boolean$ O O O $string$ O O O $HTMLElement$ O $complex$ O $complex$ O O O $any$ O O O O $any$ O O O $string$ O O O O O O O O $string$ O O O $string$ O $string$ O O O O $string$ O O $string$ O O O $string$ O O O O $string$ O O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O $boolean$ O $boolean$ O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O $boolean$ O $boolean$ O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $complex$ O $complex$ O O O O O $any$ O O O O O $complex$ O O O O O O $complex$ O O O O O O O O $complex$ O $complex$ O O O O O O $complex$ O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O $complex$ O O O O O O O $any$ O O O O $complex$ O O O $any$ O O O O $boolean$ O O O O O O O O $string$ O O O O O $any$ O O O O $boolean$ O O O O O O O O $string$ O O O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule , FormsModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O O O O $any$ O O O
<s> import { BACKSPACE , DOWN_ARROW , ENTER , ESCAPE , LEFT_ARROW , RIGHT_ARROW , UP_ARROW , } from 's' ; import { _UNKNOWN_ , ConnectionPositionPair } from 's' ; import { forwardRef , AfterViewInit , ChangeDetectorRef , Component , ElementRef , EventEmitter , HostBinding , HostListener , Input , OnChanges , OnDestroy , OnInit , Output , 0 , SimpleChanges , TemplateRef , ViewChild , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; const _UNKNOWN_ = 0 ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const noop = ( ) => null ; function toArray < T > ( value : T | T [ ] ) : T [ ] { let ret : T [ ] ; if ( value == null ) { ret = [ ] ; } else if ( ! Array . isArray ( value ) ) { ret = [ value ] ; } else { ret = value ; } return ret ; } function _UNKNOWN_ < T > ( 0 : T [ ] , 0 : T [ ] ) { if ( ! 0 || ! 0 || 0 . length !== 0 . length ) { return false ; } const len = 0 . length ; for ( let i = 0 ; i < len ; i ++ ) { if ( 0 [ i ] !== 0 [ i ] ) { return false ; } } return true ; } const _UNKNOWN_ = label => label . join ( 's' ) ; export type _UNKNOWN_ = 's' | 's' ; export type _UNKNOWN_ = 's' | 's' ; export interface _UNKNOWN_ { value ? : string ; label ? : string ; title ? : string ; disabled ? : boolean ; loading ? : boolean ; _UNKNOWN_ ? : boolean ; parent ? : _UNKNOWN_ ; children ? : _UNKNOWN_ [ ] ; [ key ] : any ; } export interface _UNKNOWN_ { labels ? : string [ ] ; selectedOptions ? : _UNKNOWN_ [ ] ; } @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnInit , OnDestroy , OnChanges , AfterViewInit , ControlValueAccessor { private _UNKNOWN_ = true ; private _disabled = false ; private _UNKNOWN_ = true ; private _UNKNOWN_ = true ; private _UNKNOWN_ = true ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; _el : HTMLElement ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ : string | TemplateRef < void > ; _UNKNOWN_ = false ; _UNKNOWN_ : _UNKNOWN_ = { } ; _UNKNOWN_ = 's' ; get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } set _UNKNOWN_ ( inputValue ) { this . _UNKNOWN_ = inputValue ; if ( inputValue . length ) { this . _UNKNOWN_ ( `template` ) ; } else { this . _UNKNOWN_ ( `template` ) ; } } _UNKNOWN_ : any [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] [ ] = [ ] ; private _UNKNOWN_ : ( ) => void ; private _UNKNOWN_ : ( ) => void ; private _UNKNOWN_ : any ; onChange : any = Function . prototype ; onTouched : any = Function . prototype ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) _UNKNOWN_ : 's' | 's' | 's' = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ [ ] ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : _UNKNOWN_ = 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : ( option , level ) => boolean ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ | _UNKNOWN_ [ ] = [ 's' ] ; @ Input ( ) _UNKNOWN_ : ( label : string [ ] , selectedOptions : _UNKNOWN_ [ ] ) => string | TemplateRef < any > ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; @ ViewChild ( 's' ) menu : ElementRef ; @ HostBinding ( 's' ) tabIndex = 's' ; @ Output ( ) _UNKNOWN_ = new EventEmitter < boolean > ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter < any [ ] > ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter < _UNKNOWN_ [ ] > ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter < { option : _UNKNOWN_ , index : number } > ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter < { option : _UNKNOWN_ , index : number , resolve ( children : _UNKNOWN_ [ ] ) : void , reject ( ) : void } > ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter < any > ( ) ; _UNKNOWN_ ( position ) { const _position = position . _UNKNOWN_ . originY === 's' ? 's' : 's' ; if ( this . _UNKNOWN_ !== _position ) { this . _UNKNOWN_ = _position ; this . _UNKNOWN_ . detectChanges ( ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; this . _UNKNOWN_ ( `template` ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = false ; this . _UNKNOWN_ ( `template` ) ; } get _UNKNOWN_ ( ) : any { return { [ `template` ] : true } ; } get _UNKNOWN_ ( ) : any { return { [ `template` ] : true , [ `template` ] : this . _UNKNOWN_ } ; } get _UNKNOWN_ ( ) : any { return { [ `template` ] : true } ; } get _UNKNOWN_ ( ) : any { return { [ `template` ] : 0 , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ === 's' , [ `template` ] : this . _UNKNOWN_ === 's' , } ; } get _UNKNOWN_ ( ) : any { return { [ `template` ] : true , [ `template` ] : ! this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ } ; } get _UNKNOWN_ ( ) : any { return { [ `template` ] : true , [ `template` ] : this . _UNKNOWN_ } ; } _UNKNOWN_ ( option , index ) { return { [ `template` ] : true , [ `template` ] : ! option . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ ( option , index ) , [ `template` ] : option . disabled , [ `template` ] : option . loading } ; } _UNKNOWN_ ( ) : string | TemplateRef < void > { return this . _UNKNOWN_ ? 's' : this . _UNKNOWN_ ; } _UNKNOWN_ ( event ) { event . stopPropagation ( ) ; } _UNKNOWN_ ( event ) { if ( ! this . _UNKNOWN_ ) { return ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } else { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( event ) { if ( ! this . _UNKNOWN_ ) { return ; } this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( event ) { } _UNKNOWN_ ( inputValue , _UNKNOWN_ = true ) { if ( inputValue !== this . _UNKNOWN_ ) { this . _UNKNOWN_ = inputValue ; } } _UNKNOWN_ ( ) { return this . _UNKNOWN_ . length > 0 ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ . length > 0 ; } get _UNKNOWN_ ( ) : boolean { const isSelected = this . _UNKNOWN_ ( ) ; const _UNKNOWN_ = this . _UNKNOWN_ ( ) ; return this . _UNKNOWN_ && ! this . _UNKNOWN_ && ( isSelected || _UNKNOWN_ ) ; } _UNKNOWN_ ( event ) { if ( event ) { event . preventDefault ( ) ; event . stopPropagation ( ) ; } this . _UNKNOWN_ = 's' ; this . _UNKNOWN_ = false ; this . _UNKNOWN_ = [ ] ; this . _UNKNOWN_ = [ ] ; this . _UNKNOWN_ ( 's' , false ) ; this . _UNKNOWN_ ( false ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : ( label : string [ ] , selectedOptions : _UNKNOWN_ [ ] ) => string | TemplateRef < any > { return this . _UNKNOWN_ || _UNKNOWN_ ; } _UNKNOWN_ ( ) { const selectedOptions = this . _UNKNOWN_ ; const labels : string [ ] = selectedOptions . map ( o => o [ this . _UNKNOWN_ || 's' ] ) ; this . _UNKNOWN_ = this . _UNKNOWN_ . call ( this , labels , selectedOptions ) ; this . _UNKNOWN_ = ! ( typeof this . _UNKNOWN_ === 's' ) ; this . _UNKNOWN_ = { labels , selectedOptions } ; } _UNKNOWN_ ( option , index ) { if ( typeof this . _UNKNOWN_ === 's' ) { return this . _UNKNOWN_ ( option , index ) === true ; } return false ; } @ HostListener ( 's' , [ 's' ] ) onKeyDown ( event ) { const keyCode = event . keyCode ; if ( keyCode !== DOWN_ARROW && keyCode !== UP_ARROW && keyCode !== LEFT_ARROW && keyCode !== RIGHT_ARROW && keyCode !== ENTER && keyCode !== BACKSPACE && keyCode !== _UNKNOWN_ ) { return ; } if ( ! this . _UNKNOWN_ ( ) && keyCode !== BACKSPACE && keyCode !== _UNKNOWN_ ) { this . _UNKNOWN_ ( true ) ; return ; } if ( keyCode === _UNKNOWN_ ) { this . _UNKNOWN_ ( false ) ; return ; } if ( this . _UNKNOWN_ ( ) ) { event . preventDefault ( ) ; if ( keyCode === DOWN_ARROW ) { this . _UNKNOWN_ ( ) ; } if ( keyCode === UP_ARROW ) { this . _UNKNOWN_ ( ) ; } if ( keyCode === LEFT_ARROW ) { this . _UNKNOWN_ ( ) ; } if ( keyCode === RIGHT_ARROW ) { this . _UNKNOWN_ ( ) ; } } } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( event ) { if ( this . _UNKNOWN_ ) { return ; } this . onTouched ( ) ; if ( this . _UNKNOWN_ ( ) ) { this . _UNKNOWN_ ( ! this . _UNKNOWN_ , 0 ) ; } } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( event ) { if ( this . _UNKNOWN_ ) { return ; } if ( this . _UNKNOWN_ ( ) ) { this . _UNKNOWN_ ( true , this . _UNKNOWN_ ) ; } } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( event ) { if ( this . _UNKNOWN_ ) { return ; } if ( ! this . _UNKNOWN_ ( ) ) { return ; } if ( this . _UNKNOWN_ ( ) ) { const _UNKNOWN_ = this . _el ; const _UNKNOWN_ = this . menu && this . menu . nativeElement as HTMLElement ; if ( _UNKNOWN_ . contains ( event . target as Node ) || ( _UNKNOWN_ && _UNKNOWN_ . contains ( event . target as Node ) ) ) { return ; } this . _UNKNOWN_ ( false , this . _UNKNOWN_ ) ; } } _UNKNOWN_ ( ) { if ( typeof this . _UNKNOWN_ === 's' ) { return this . _UNKNOWN_ === 's' ; } return this . _UNKNOWN_ . indexOf ( 's' ) !== - 0 ; } _UNKNOWN_ ( ) { if ( typeof this . _UNKNOWN_ === 's' ) { return this . _UNKNOWN_ === 's' ; } return this . _UNKNOWN_ . indexOf ( 's' ) !== - 0 ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( false ) ; } _UNKNOWN_ ( visible , delay ) { this . _UNKNOWN_ ( ) ; if ( delay ) { this . _UNKNOWN_ = setTimeout ( ( ) => { this . _UNKNOWN_ ( visible ) ; this . _UNKNOWN_ ( ) ; } , delay ) ; } else { this . _UNKNOWN_ ( visible ) ; } } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } _UNKNOWN_ ( _UNKNOWN_ ) { if ( this . _UNKNOWN_ ) { return ; } if ( this . _UNKNOWN_ !== _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ ; if ( _UNKNOWN_ ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _render . listen ( 's' , 's' , this . _UNKNOWN_ . bind ( this ) ) ; } if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _render . listen ( 's' , 's' , this . _UNKNOWN_ . bind ( this ) ) ; } } if ( ! _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } if ( _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ . emit ( _UNKNOWN_ ) ; } } _UNKNOWN_ ( ) { if ( ! this . _UNKNOWN_ . length ) { new Promise ( ( resolve , reject ) => { this . _UNKNOWN_ . emit ( { option : null , index : - 0 , resolve , reject } ) ; } ) . then ( ( children : _UNKNOWN_ [ ] ) => { this . _UNKNOWN_ ( children , 0 ) ; } , ( reason ) => { } ) ; } } _UNKNOWN_ ( event ) { const target = event . target as Node ; const _UNKNOWN_ = this . menu && this . menu . nativeElement as HTMLElement ; if ( ! this . _el . contains ( target ) && ! _UNKNOWN_ . contains ( target ) ) { this . _UNKNOWN_ ( false ) ; } } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = null ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = null ; } } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { clearTimeout ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ = null ; } } _UNKNOWN_ ( option ) { return option [ this . _UNKNOWN_ || 's' ] ; } _UNKNOWN_ ( option ) { return option [ this . _UNKNOWN_ || 's' ] ; } _UNKNOWN_ ( option , index ) { const _UNKNOWN_ = this . _UNKNOWN_ [ index ] ; if ( _UNKNOWN_ === option ) { return true ; } if ( _UNKNOWN_ && this . _UNKNOWN_ ( _UNKNOWN_ ) === this . _UNKNOWN_ ( option ) ) { return true ; } return false ; } _UNKNOWN_ ( option , index ) { if ( ! option || option . disabled ) { return ; } this . _UNKNOWN_ [ index ] = option ; for ( let i = index - 0 ; i >= 0 ; i -- ) { if ( ! this . _UNKNOWN_ [ i ] ) { this . _UNKNOWN_ [ i ] = this . _UNKNOWN_ [ i + 0 ] . parent ; } } if ( index < this . _UNKNOWN_ . length - 0 ) { this . _UNKNOWN_ = this . _UNKNOWN_ . slice ( 0 , index + 0 ) ; } this . _UNKNOWN_ ( option , index ) ; } _UNKNOWN_ ( option , index ) { this . _UNKNOWN_ . emit ( { option , index } ) ; if ( option . children && option . children . length ) { option . _UNKNOWN_ = false ; option . children . forEach ( child => child . parent = option ) ; this . _UNKNOWN_ ( option . children , index + 0 ) ; } else if ( ! option . _UNKNOWN_ ) { new Promise ( ( resolve , reject ) => { this . _UNKNOWN_ . emit ( { option , index , resolve , reject } ) ; } ) . then ( ( children : _UNKNOWN_ [ ] ) => { children . forEach ( child => child . parent = option ) ; this . _UNKNOWN_ ( children , index + 0 ) ; if ( this . _UNKNOWN_ ) { option . children = children ; } } , ( reason ) => { option . _UNKNOWN_ = true ; } ) ; } else { if ( index < this . _UNKNOWN_ . length - 0 ) { this . _UNKNOWN_ = this . _UNKNOWN_ . slice ( 0 , index + 0 ) ; } } if ( option . _UNKNOWN_ || this . _UNKNOWN_ || this . _UNKNOWN_ ( option , index ) ) { this . _UNKNOWN_ = this . _UNKNOWN_ ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } if ( option . _UNKNOWN_ ) { this . _UNKNOWN_ ( false , this . _UNKNOWN_ ) ; } } _UNKNOWN_ ( options : _UNKNOWN_ [ ] , index ) { if ( ! _UNKNOWN_ ( this . _UNKNOWN_ [ index ] , options ) ) { this . _UNKNOWN_ [ index ] = options ; if ( index < this . _UNKNOWN_ . length - 0 ) { this . _UNKNOWN_ = this . _UNKNOWN_ . slice ( 0 , index + 0 ) ; } } } _UNKNOWN_ ( option , index , event ) { event . preventDefault ( ) ; this . _el . focus ( ) ; if ( option && option . disabled ) { return ; } this . _UNKNOWN_ ( option , index ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { const columnIndex = Math . max ( this . _UNKNOWN_ . length - 0 , 0 ) ; const _UNKNOWN_ = this . _UNKNOWN_ [ columnIndex ] ; const options = this . _UNKNOWN_ [ columnIndex ] ; if ( ! options || ! options . length ) { return ; } const length = options . length ; let _UNKNOWN_ = - 0 ; if ( ! _UNKNOWN_ ) { _UNKNOWN_ = _UNKNOWN_ ? length : - 0 ; } else { _UNKNOWN_ = options . indexOf ( _UNKNOWN_ ) ; } while ( true ) { _UNKNOWN_ = _UNKNOWN_ ? _UNKNOWN_ - 0 : _UNKNOWN_ + 0 ; if ( _UNKNOWN_ < 0 || _UNKNOWN_ >= length ) { break ; } const _UNKNOWN_ = options [ _UNKNOWN_ ] ; if ( ! _UNKNOWN_ || _UNKNOWN_ . disabled ) { continue ; } this . _UNKNOWN_ ( _UNKNOWN_ , columnIndex ) ; break ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( true ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( false ) ; } _UNKNOWN_ ( ) { const options = this . _UNKNOWN_ ; if ( options . length ) { options . pop ( ) ; const len = options . length ; if ( len ) { this . _UNKNOWN_ ( options [ len - 0 ] , len - 0 ) ; } else { this . _UNKNOWN_ . emit ( ) ; } } } _UNKNOWN_ ( ) { const columns = this . _UNKNOWN_ ; const length = this . _UNKNOWN_ . length ; if ( length === 0 ) { return ; } const _UNKNOWN_ = length ; const options = columns . length > _UNKNOWN_ ? columns [ _UNKNOWN_ ] : null ; if ( options ) { const len = options . length ; for ( let i = 0 ; i < len ; i ++ ) { const _UNKNOWN_ = options [ i ] ; if ( _UNKNOWN_ && ! _UNKNOWN_ . disabled ) { this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; return ; } } } } _UNKNOWN_ ( option , index , event ) { event . preventDefault ( ) ; if ( this . _UNKNOWN_ === 's' && ! option . _UNKNOWN_ ) { this . _UNKNOWN_ ( option , index , true ) ; } } _UNKNOWN_ ( option , index , event ) { event . preventDefault ( ) ; if ( this . _UNKNOWN_ === 's' && ! option . _UNKNOWN_ ) { this . _UNKNOWN_ ( option , index , false ) ; } } _UNKNOWN_ ( option , index , _UNKNOWN_ ) { if ( this . _UNKNOWN_ ) { clearTimeout ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ = null ; } if ( _UNKNOWN_ ) { this . _UNKNOWN_ = setTimeout ( ( ) => { this . _UNKNOWN_ ( option , index ) ; this . _UNKNOWN_ = null ; } , 0 ) ; } } _UNKNOWN_ ( ) : any [ ] { const values : any [ ] = [ ] ; this . _UNKNOWN_ . forEach ( option => { values . push ( this . _UNKNOWN_ ( option ) ) ; } ) ; return values ; } _UNKNOWN_ ( ) { const value = this . _UNKNOWN_ ( ) ; if ( ! _UNKNOWN_ ( this . _UNKNOWN_ , value ) ) { this . _UNKNOWN_ = value ; this . onChange ( value ) ; if ( value . length === 0 ) { this . _UNKNOWN_ . emit ( ) ; } this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ . emit ( value ) ; } } constructor ( private _elementRef , private _render , private _UNKNOWN_ ) { this . _el = this . _elementRef . nativeElement ; } _UNKNOWN_ ( _UNKNOWN_ ) { this . _render . addClass ( this . _el , _UNKNOWN_ ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { this . _render . removeClass ( this . _el , _UNKNOWN_ ) ; } writeValue ( value ) { const array : any [ ] = [ ] ; toArray ( value ) . forEach ( ( v , index ) => { if ( typeof v !== 's' ) { const obj = { } ; obj [ this . _UNKNOWN_ ] = v ; obj [ this . _UNKNOWN_ ] = v ; array [ index ] = obj ; } else { array [ index ] = v ; } } ) ; this . _UNKNOWN_ = array ; this . _UNKNOWN_ = array ; this . _UNKNOWN_ ( ) ; } registerOnChange ( fn : ( _ ) => { } ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => { } ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { if ( isDisabled ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( `template` ) ; } else { this . _UNKNOWN_ ( `template` ) ; } this . _UNKNOWN_ = isDisabled ; } ngOnInit ( ) { if ( this . _UNKNOWN_ && this . _UNKNOWN_ . length ) { this . _UNKNOWN_ . push ( this . _UNKNOWN_ ) ; } } ngOnDestroy ( ) { if ( this . _UNKNOWN_ ) { clearTimeout ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ = null ; } } ngOnChanges ( changes ) { const _UNKNOWN_ = changes . _UNKNOWN_ ; if ( _UNKNOWN_ ) { if ( _UNKNOWN_ . currentValue ) { this . _UNKNOWN_ ( `template` ) ; } else { this . _UNKNOWN_ ( `template` ) ; } } const _UNKNOWN_ = changes . _UNKNOWN_ ; if ( _UNKNOWN_ && ! _UNKNOWN_ . _UNKNOWN_ ( ) ) { this . _UNKNOWN_ . splice ( 0 ) ; const _UNKNOWN_ : _UNKNOWN_ [ ] = _UNKNOWN_ . currentValue ; if ( _UNKNOWN_ && _UNKNOWN_ . length ) { this . _UNKNOWN_ . push ( _UNKNOWN_ ) ; this . _UNKNOWN_ ( null ) ; } } } ngAfterViewInit ( ) { this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ ( `template` ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O $any$ O O O O O O $boolean$ O O O O O $any$ O O O O O O O $T[]$ O $any$ O O $complex$ O $any$ O $any$ O O O O $any$ O O O O $T[]$ O $any$ O O O O O $complex$ O O O O $T[]$ O O O O O O O O O $ArrayConstructor$ O $complex$ O $complex$ O O O $T[]$ O O $T$ O O O O O $T[]$ O $T[]$ O O O $T[]$ O O O $boolean$ O $any$ O O $T[]$ O $any$ O O O $T[]$ O $any$ O O O O O O O $T[]$ O O $T[]$ O $T[]$ O $number$ O $T[]$ O $number$ O O O O O O O $number$ O $T[]$ O $number$ O O O O $number$ O O O $number$ O $number$ O $number$ O O O O O $T[]$ O $number$ O O $T[]$ O $number$ O O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $any$ O O $any$ O $any$ O O $any$ O O O O $string$ O O O O O O O $any$ O $string[]$ O O O O O O $any$ O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $HTMLElement$ O $complex$ O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O $any$ O O O $any$ O O O O $boolean$ O O O $any$ O $any$ O O O O $string$ O O O O $string$ O O O O O O O O $string$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $string$ O $number$ O O O O $void$ O O O O O O O O O $void$ O O O O O O $any[]$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $void$ O O O O O O O $any$ O O O $any$ O O O $FunctionConstructor$ O $Function$ O $any$ O O O $FunctionConstructor$ O $Function$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $any$ O O O O O O O O O O $any$ O O $string$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $string$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $any$ O $any$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $boolean$ O O $any$ O $number$ O O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O O $any$ O O $string[]$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $string$ O O O O $any$ O O $any$ O O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O O O O O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $number$ O O O O O O O O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $number$ O O O $void$ O $any$ O $any$ O O O O O O $void$ O O O O O O O O O O $any$ O O $any$ O O $any$ O O O O O O $void$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $string$ O O O O O O $string$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O O O O $any$ O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O $boolean$ O O O O $any$ O O O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O $string$ O O O O $any$ O O O O O O O O O O O O O O O O O O O $string$ O O O $any$ O $any$ O $number$ O O O O O O O O O O O O O O O $any$ O $boolean$ O O O O O O O $boolean$ O $any$ O $number$ O O O O O O $any$ O $boolean$ O O O O O $any$ O $boolean$ O O O $any$ O O O O O $any$ O O O O O O O $boolean$ O O O O O $any$ O O $void$ O $Event$ O O $Event$ O $void$ O O O O $void$ O $Event$ O O O O O O O $boolean$ O O O O O O O O O $boolean$ O O O O $void$ O O O O O O O O $void$ O O O O O $void$ O $Event$ O O O O O O O $boolean$ O O O O O O O $void$ O O O O $void$ O $KeyboardEvent$ O O O $void$ O $any$ O $boolean$ O O O O O O $any$ O O O $string$ O O O O $string$ O $any$ O O O $boolean$ O O O O O O $string$ O $number$ O O O O $boolean$ O O O O O O $any$ O $number$ O O O O O $boolean$ O O O O O O $boolean$ O O O $boolean$ O O O O $boolean$ O O O $boolean$ O O O O O O $boolean$ O O O O $boolean$ O O $boolean$ O $boolean$ O O O $void$ O $Event$ O O O O $Event$ O O $Event$ O $void$ O O O $Event$ O $void$ O O O O O O $any$ O O O O O $boolean$ O O O O O $any$ O O O O O O $any$ O O O O O O $void$ O O O O O O O O $void$ O O O O O O $void$ O O O O O $any$ O O O O $string[]$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $void$ O O O O $any$ O O O $any$ O O $string[]$ O O O O O $any$ O $U[]$ O $any$ O $any$ O O O $string$ O O O O O O O $any$ O O O $any$ O $any$ O O O $string[]$ O $any$ O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O $string[]$ O $any$ O O O $boolean$ O $any$ O $number$ O O O O O O O $boolean$ O O O O O O O $boolean$ O $any$ O $number$ O O O O O O O O O O $any$ O O O O O O O $void$ O $KeyboardEvent$ O O O $number$ O $KeyboardEvent$ O $number$ O O O $number$ O $any$ O $number$ O $any$ O $number$ O $any$ O $number$ O $any$ O $number$ O $any$ O $number$ O $any$ O $number$ O O O O O O O O O O O O $boolean$ O O O $number$ O $any$ O $number$ O O O O O O $void$ O O O O O O O O O $number$ O O O O O O $void$ O O O O O O O O O O O $boolean$ O O O O $KeyboardEvent$ O $void$ O O O O O $number$ O $any$ O O O O $void$ O O O O O O $number$ O $any$ O O O O $void$ O O O O O O $number$ O $any$ O O O O $void$ O O O O O O $number$ O $any$ O O O O $void$ O O O O O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O O O O O $boolean$ O O O O O O O $any$ O O O O O O O $boolean$ O O O O O O $void$ O O O O $boolean$ O O O O O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O O O O O $boolean$ O O O O O O O O O $boolean$ O O O O O O $void$ O O O O O $number$ O O O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O O O O O O O $boolean$ O O O O O $HTMLElement$ O O O $HTMLElement$ O O $HTMLElement$ O O O $any$ O O O $any$ O $any$ O $complex$ O O O $HTMLElement$ O $boolean$ O $MouseEvent$ O $EventTarget$ O O O O O $HTMLElement$ O $HTMLElement$ O $boolean$ O $MouseEvent$ O $EventTarget$ O O O O O O O O O O O $void$ O O O O O $number$ O O O O $boolean$ O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $number$ O O O O O O O O $boolean$ O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $number$ O O O O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O $boolean$ O $number$ O O O O $void$ O O O O O $number$ O O O O $any$ O $number$ O O O O O O O $void$ O $boolean$ O O O O $void$ O O O O O $number$ O O O O O O O $void$ O $boolean$ O O O O $boolean$ O O O O O O $boolean$ O O $void$ O $boolean$ O O O O O O $boolean$ O O O O O O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $boolean$ O O O O O O O $void$ O O O O $void$ O O O $any$ O $any$ O O O O O O O $void$ O $any$ O O O O O O O O O O O $void$ O O O O $void$ O O O $any$ O $any$ O O O O O O O $void$ O $any$ O O O O O O O O O O $boolean$ O O O O $void$ O O O O O O $boolean$ O O O O $void$ O O O O O O $any$ O $any$ O $boolean$ O O O O $void$ O O O O O O O O $any$ O $number$ O O O $PromiseConstructor$ O O $void$ O $void$ O O O O O $any$ O $any$ O O $null$ O O O $number$ O O O O $void$ O $void$ O O O O O O O O O $any$ O $any$ O O O O O O O $void$ O $any$ O O O O O O O $any$ O O O O O O O O $void$ O $MouseEvent$ O O O $Node$ O $MouseEvent$ O $EventTarget$ O O O O $HTMLElement$ O O O $any$ O O O $any$ O $any$ O $complex$ O O O O O O $HTMLElement$ O $boolean$ O $Node$ O O O $HTMLElement$ O $boolean$ O $Node$ O O O O O $void$ O O O O O O $void$ O O O O O O O $void$ O O O O $void$ O O O O O $void$ O O O O O O O O $void$ O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O O O $any$ O O $void$ O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $string$ O O O O O $any$ O $any$ O O O $any$ O O O $string$ O O O O O $boolean$ O $any$ O $number$ O O O $any$ O O O $any$ O $number$ O O O O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O O $void$ O $any$ O $number$ O O O O O $any$ O $any$ O $boolean$ O O O O O O O $any$ O $number$ O O $any$ O O O O $number$ O $number$ O O O $number$ O O O $number$ O O O O O O O O $any$ O $number$ O O O O O $any$ O $number$ O O O O $any$ O $number$ O O O O $any$ O O O O O $number$ O O O $any$ O $number$ O O O O O O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O O $void$ O $any$ O $number$ O O O $void$ O $any$ O $number$ O O O O $any$ O $any$ O O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $number$ O O $any$ O $boolean$ O O O $any$ O $any$ O $void$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O $number$ O O O O O O O O O $any$ O $boolean$ O O O $PromiseConstructor$ O O $void$ O $void$ O O O O O $any$ O $any$ O O $any$ O $number$ O $void$ O $void$ O O O O O O O O O $any$ O $any$ O O O O O $any$ O $void$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $number$ O O O O O O O O $boolean$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $boolean$ O O O O O O O O O O O $number$ O O O $any$ O $number$ O O O O O O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $boolean$ O $any$ O $number$ O O O O O $any$ O O O $any$ O O O $void$ O O O O O $void$ O O O O O O $any$ O $boolean$ O O O O $void$ O O O O O $number$ O O O O $void$ O $any$ O $any$ O O O $number$ O O O O O O O O O $any$ O $number$ O O $any$ O O O O O $any$ O $number$ O O $any$ O O O $number$ O O O $any$ O $number$ O O O O O O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O O $void$ O $any$ O $number$ O $Event$ O O $Event$ O $void$ O O O O O $HTMLElement$ O $void$ O O O O O $any$ O $any$ O $boolean$ O O O O O O O $void$ O $any$ O $number$ O O O $void$ O $boolean$ O O O $number$ O $Math$ O $number$ O O O $any$ O $number$ O O O O O O O $any$ O O O $any$ O $number$ O O O $any$ O O O $any$ O $number$ O O O O O $any$ O O $any$ O $number$ O O O O O O $number$ O $any$ O $number$ O O $number$ O O O O O O O $any$ O O $number$ O $boolean$ O $number$ O O O O O O O $number$ O $any$ O $number$ O $any$ O O O O O O O O $number$ O $boolean$ O $number$ O O O $number$ O O O O O $number$ O O O $number$ O $number$ O O O O O O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $boolean$ O O O O O O O $void$ O $any$ O $number$ O O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O $any$ O O O $any$ O O O $any$ O $number$ O O $any$ O $any$ O O O O $number$ O $any$ O $number$ O O O $number$ O O O O $void$ O $any$ O $number$ O O O O $number$ O O O O O O O O O $any$ O $any$ O O O O O O $void$ O O O O $any$ O O O $any$ O O $number$ O O O $any$ O $number$ O O O $number$ O O O O O O O O $number$ O $number$ O O $any$ O $any$ O $number$ O $number$ O $any$ O $number$ O O O O O O $any$ O O O $number$ O $any$ O $number$ O O O O $number$ O O O $number$ O $number$ O $number$ O O O O $any$ O $any$ O $number$ O O O O $any$ O O $any$ O $boolean$ O O O O $void$ O $any$ O $number$ O O O O O O O O $void$ O $any$ O $number$ O $Event$ O O $Event$ O $void$ O O O O O O O $any$ O O O O $any$ O $boolean$ O O O O $void$ O $any$ O $number$ O O O O O O $void$ O $any$ O $number$ O $Event$ O O $Event$ O $void$ O O O O O O O $any$ O O O O $any$ O $boolean$ O O O O $void$ O $any$ O $number$ O O O O O O $void$ O $any$ O $number$ O $boolean$ O O O O O O $any$ O O $void$ O O O $any$ O O O O $any$ O O O O O O $boolean$ O O O O $any$ O $number$ O O O O O O O $void$ O $any$ O $number$ O O O O $any$ O O O O O O O O O O $any[]$ O O O O O O O O $any[]$ O O O O O O O O O O $any$ O $void$ O $any$ O O $any[]$ O $number$ O O O $any$ O $any$ O O O O O O O $any[]$ O O $void$ O O O O $any[]$ O O O $any[]$ O O O O O O O O O O $any[]$ O $any[]$ O O O O O $any[]$ O $any[]$ O O O $any$ O $any[]$ O O O O $any[]$ O $number$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any[]$ O O O O O O O $ElementRef$ O O $Renderer2$ O O $ChangeDetectorRef$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O $void$ O $any$ O O O $any[]$ O O O O O O O O $T[]$ O $any$ O O $void$ O O $any$ O $number$ O O O O O O $any$ O O O O O ${}$ O O O O ${}$ O O O $string$ O O $any$ O ${}$ O O O $string$ O O $any$ O $any[]$ O $number$ O O ${}$ O O O O $any[]$ O $number$ O O $any$ O O O O O O O $any$ O $any[]$ O O O $any$ O $any[]$ O O O $void$ O O O O $void$ O ${}$ O O $any$ O O O O O O O O $any$ O ${}$ O O $void$ O ${}$ O O O O O O O O O O $any$ O ${}$ O O $void$ O $boolean$ O O O O $boolean$ O O O O $void$ O O O O O $void$ O O O O O O O O O $void$ O O O O O O O $boolean$ O $boolean$ O O $void$ O O O O O O O $any$ O O O $any$ O $number$ O O O O $any$ O $number$ O O O $any$ O O O O $void$ O O O O O O O $any$ O O $void$ O O O $any$ O O O O $any$ O O O O O $void$ O $SimpleChanges$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O O $void$ O O O O O O O O O $void$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O O O O $any$ O $complex$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $number$ O O O O $any$ O $number$ O $any$ O O O O $void$ O O O O O O O $void$ O O O O O $void$ O O O $string$ O O O O $void$ O O O O O O O
<s> import { OverlayModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule , OverlayModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { forwardRef , AfterContentInit , Component , ElementRef , Input , OnInit , Renderer , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements ControlValueAccessor { private _disabled = false ; _el : HTMLElement ; _options : any [ ] ; _UNKNOWN_ = 's' ; onChange : any = Function . prototype ; onTouched : any = Function . prototype ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } _UNKNOWN_ ( ) { this . onChange ( this . _options ) ; } constructor ( private _elementRef , private _render ) { this . _el = this . _elementRef . nativeElement ; this . _render . setElementClass ( this . _el , `template` , true ) ; } writeValue ( value ) { this . _options = value ; } registerOnChange ( fn : ( _ ) => { } ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => { } ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O $any$ O $any$ O O $boolean$ O O O $HTMLElement$ O $complex$ O $any[]$ O O O O O $string$ O O O $any$ O O O $FunctionConstructor$ O $Function$ O $any$ O O O $FunctionConstructor$ O $Function$ O O $any$ O O $string$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O $void$ O O O O O $any$ O O O $any[]$ O O O O O O $ElementRef$ O O $Renderer$ O O O O $HTMLElement$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O $void$ O $any$ O O O O $any[]$ O $any$ O O $void$ O ${}$ O O $any$ O O O O O O O O $any$ O ${}$ O O $void$ O ${}$ O O O O O O O O O O $any$ O ${}$ O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O O
<s> import { forwardRef , Component , ElementRef , HostListener , Input , OnChanges , OnInit , 0 , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit , ControlValueAccessor , OnChanges { private _disabled = false ; private _indeterminate = false ; _el : HTMLElement ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ = `template` ; _checked = false ; _UNKNOWN_ = false ; onChange : any = Function . prototype ; onTouched : any = Function . prototype ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _indeterminate = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _indeterminate ; } _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ `template` ] : this . _checked && ( ! this . _UNKNOWN_ ) , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ , } ; @ Input ( ) get _UNKNOWN_ ( ) : boolean { return this . _checked ; } @ HostListener ( 's' , [ 's' ] ) onClick ( e ) { e . preventDefault ( ) ; if ( ! this . _UNKNOWN_ ) { this . updateValue ( ! this . _checked ) ; } } updateValue ( value ) { if ( value === this . _checked ) { return ; } this . onChange ( value ) ; this . _checked = value ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = false ; } constructor ( private _elementRef , private _render ) { this . _el = this . _elementRef . nativeElement ; } writeValue ( value ) { this . _checked = value ; this . _UNKNOWN_ ( ) ; } registerOnChange ( fn : ( _ ) => { } ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => { } ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ `template` ] : this . _checked && ( ! this . _UNKNOWN_ ) , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ , } ; } ngOnInit ( ) { this . _render . addClass ( this . _el , `template` ) ; this . _UNKNOWN_ ( ) ; } ngOnChanges ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O $HTMLElement$ O $complex$ O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O $any$ O O O $FunctionConstructor$ O $Function$ O $any$ O O O $FunctionConstructor$ O $Function$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O $complex$ O O O O O $string$ O O O O O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O $any$ O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O O O O $boolean$ O O O O $void$ O O O O $boolean$ O O O O $void$ O $boolean$ O O O O $boolean$ O O O $boolean$ O O O O O O O $any$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $void$ O O O O $void$ O O O O O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O $any$ O O O O $boolean$ O $any$ O O O $void$ O O O O $void$ O ${}$ O O $any$ O O O O O O O O $any$ O ${}$ O O $void$ O ${}$ O O O O O O O O O O $any$ O ${}$ O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O $void$ O O O O O $complex$ O O O O O $string$ O O O O O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O $void$ O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O $void$ O O O O $void$ O O O O O $void$ O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , Input , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ { private _UNKNOWN_ = false ; private _UNKNOWN_ = true ; panels : _UNKNOWN_ [ ] = [ ] ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } _UNKNOWN_ ( collapse ) { if ( this . _UNKNOWN_ ) { this . panels . map ( ( item , index ) => { const _UNKNOWN_ = this . panels . indexOf ( collapse ) ; if ( index !== _UNKNOWN_ ) { item . _UNKNOWN_ = false ; } } ) ; } } _UNKNOWN_ ( collapse ) { this . panels . push ( collapse ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O O $boolean$ O O O O $boolean$ O O O $any$ O $any$ O O O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O $void$ O $any$ O O O O O O $boolean$ O O O O $any$ O $U[]$ O O $any$ O $number$ O O O O $number$ O O O $any$ O $number$ O $any$ O O O O $number$ O $number$ O O $any$ O $boolean$ O O O O O O O O O $void$ O $any$ O O O O $any$ O $number$ O $any$ O O O O O
<s> import { animate , state , style , transition , trigger , } from 's' ; import { Component , ElementRef , Host , HostBinding , Input , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , animations : [ trigger ( 's' , [ state ( 's' , style ( { opacity : 's' , height : 0 } ) ) , state ( 's' , style ( { opacity : 's' , height : 's' } ) ) , transition ( 's' , animate ( 's' ) ) , transition ( 's' , animate ( 's' ) ) ] ) ] , host : { 's' : 's' } } ) export class _UNKNOWN_ { private _disabled = false ; _active = false ; _el ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) set _UNKNOWN_ ( value ) { const active = _UNKNOWN_ ( value ) ; if ( this . _active === active ) { return ; } if ( ! this . _UNKNOWN_ ) { this . _active = active ; } } get _UNKNOWN_ ( ) : boolean { return this . _active ; } _UNKNOWN_ ( $event ) { this . _UNKNOWN_ = ! this . _UNKNOWN_ ; this . _UNKNOWN_ . _UNKNOWN_ ( this ) ; } constructor ( @ Host ( ) private _UNKNOWN_ , private _elementRef ) { this . _el = this . _elementRef . nativeElement ; this . _UNKNOWN_ . _UNKNOWN_ ( this ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any[]$ O O $any$ O O O O $any$ O O O $any$ O O $string$ O O O $number$ O O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O $any$ O O O O O $any$ O O O $any$ O O O O O O O O $complex$ O O O O O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $any$ O O $any$ O O $string$ O O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O $boolean$ O O O O O O $boolean$ O $boolean$ O O O O O O O O O O $boolean$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O $void$ O $MouseEvent$ O O O O $boolean$ O O O O $boolean$ O O O $any$ O $void$ O O O O O O O O $any$ O O O $any$ O O $ElementRef$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $void$ O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = [ _UNKNOWN_ , _UNKNOWN_ ] ; @ NgModule ( { declarations : _UNKNOWN_ , exports : _UNKNOWN_ , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O $any$ O $any$ O O O $any$ O O $complex$ O $complex$ O $complex$ O $complex$ O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { Pipe , PipeTransform } from 's' ; import * as moment from 's' ; @ Pipe ( { name : 's' } ) export class _UNKNOWN_ implements PipeTransform { transform ( value : Date | number | string , _UNKNOWN_ ) { if ( moment ( value ) . isValid ( ) ) { return moment ( value ) . format ( _UNKNOWN_ ) ; } else { return 's' ; } } } </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O $string$ O $complex$ O $DateConstructor$ O O O O O $string$ O O O O $any$ O $complex$ O O $any$ O O O O O $any$ O $complex$ O O $any$ O $string$ O O O O O O O O O O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { forwardRef , ChangeDetectorRef , Component , Input , OnInit , ViewChild , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import * as moment from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { index : number ; name : string ; disabled : boolean ; } @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , animations : [ _UNKNOWN_ ] , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnInit , ControlValueAccessor { private _disabled = false ; private _UNKNOWN_ = false ; _UNKNOWN_ = new Date ( ) ; _el : HTMLElement ; _UNKNOWN_ = false ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _value = null ; _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . hours ( ) ; _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . minutes ( ) ; _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . seconds ( ) ; _UNKNOWN_ = 's' ; _UNKNOWN_ = this . _UNKNOWN_ . indexOf ( 's' ) > - 0 ; _UNKNOWN_ = this . _UNKNOWN_ . indexOf ( 's' ) > - 0 ; _UNKNOWN_ = this . _UNKNOWN_ . indexOf ( 's' ) > - 0 ; _width = `template` ; _UNKNOWN_ : ( ) => number [ ] ; onChange : ( value ) => void = ( ) => null ; onTouched : ( ) => void = ( ) => null ; @ ViewChild ( 's' ) _UNKNOWN_ ; @ ViewChild ( 's' ) _UNKNOWN_ ; @ ViewChild ( 's' ) _UNKNOWN_ ; @ ViewChild ( 's' ) _UNKNOWN_ ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; @ Input ( ) _UNKNOWN_ : 's' | 's' | 's' = 's' ; @ Input ( ) set _UNKNOWN_ ( fun : ( ) => number [ ] ) { this . _UNKNOWN_ = fun ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : ( ) => number [ ] { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : ( hour ) => number [ ] ; @ Input ( ) _UNKNOWN_ : ( hour , minute ) => number [ ] ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ = this . _UNKNOWN_ . indexOf ( 's' ) > - 0 ; this . _UNKNOWN_ = this . _UNKNOWN_ . indexOf ( 's' ) > - 0 ; this . _UNKNOWN_ = this . _UNKNOWN_ . indexOf ( 's' ) > - 0 ; this . _width = `template` ; } get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : Date { return this . _value || this . _UNKNOWN_ ; } set _UNKNOWN_ ( value ) { if ( this . _value === value ) { return ; } this . _value = value ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . hours ( ) ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . minutes ( ) ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . seconds ( ) ; } _UNKNOWN_ ( instance , index , duration = 0 , unit ) { const _UNKNOWN_ = this . _UNKNOWN_ ( index , unit ) ; const _UNKNOWN_ = ( instance . children [ 0 ] . children [ _UNKNOWN_ ] || instance . children [ 0 ] . children [ 0 ] ) as HTMLElement ; this . scrollTo ( instance , _UNKNOWN_ . offsetTop , duration ) ; } scrollTo ( element , to , duration ) { if ( duration <= 0 ) { element . scrollTop = to ; return ; } const difference = to - element . scrollTop ; const _UNKNOWN_ = difference / duration * 0 ; _UNKNOWN_ ( ( ) => { element . scrollTop = element . scrollTop + _UNKNOWN_ ; if ( element . scrollTop === to ) { return ; } this . scrollTo ( element , to , duration - 0 ) ; } ) ; } _UNKNOWN_ ( instance , index , disabled ) { if ( disabled ) { return ; } this . _UNKNOWN_ ( instance , index , 0 , 's' ) ; this . _UNKNOWN_ = index ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . hour ( index ) . _UNKNOWN_ ( ) ; this . onChange ( this . _value ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( instance , index , disabled ) { if ( disabled ) { return ; } this . _UNKNOWN_ ( instance , index , 0 , 's' ) ; this . _UNKNOWN_ = index ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . minute ( index ) . _UNKNOWN_ ( ) ; this . onChange ( this . _value ) ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( instance , index , disabled ) { if ( disabled ) { return ; } this . _UNKNOWN_ ( instance , index , 0 , 's' ) ; this . _UNKNOWN_ = index ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . second ( index ) . _UNKNOWN_ ( ) ; this . onChange ( this . _value ) ; } _UNKNOWN_ ( index , unit ) { if ( ! this . _UNKNOWN_ ) { return index ; } if ( unit === 's' ) { const _UNKNOWN_ = this . _UNKNOWN_ && this . _UNKNOWN_ ( ) ; return this . _UNKNOWN_ ( _UNKNOWN_ , index ) ; } else if ( unit === 's' ) { const _UNKNOWN_ = this . _UNKNOWN_ && this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; return this . _UNKNOWN_ ( _UNKNOWN_ , index ) ; } else if ( unit === 's' ) { const _UNKNOWN_ = this . _UNKNOWN_ && this . _UNKNOWN_ ( this . _UNKNOWN_ , this . _UNKNOWN_ ) ; return this . _UNKNOWN_ ( _UNKNOWN_ , index ) ; } } _UNKNOWN_ ( array : number [ ] , index ) { if ( array && array . length ) { return index - array . reduce ( ( pre , value ) => { return pre + ( value < index ? 0 : 0 ) ; } , 0 ) ; } else { return index ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . hours ( ) ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . minutes ( ) ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . seconds ( ) ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( this . _UNKNOWN_ . nativeElement , this . _UNKNOWN_ , 0 , 's' ) ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( this . _UNKNOWN_ . nativeElement , this . _UNKNOWN_ , 0 , 's' ) ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( this . _UNKNOWN_ . nativeElement , this . _UNKNOWN_ , 0 , 's' ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = [ ] ; for ( let i = 0 ; i <= 0 ; i ++ ) { this . _UNKNOWN_ . push ( { disabled : this . _UNKNOWN_ && ( this . _UNKNOWN_ ( ) . indexOf ( i ) !== - 0 ) , name : i . toString ( ) . length === 0 ? ( 's' + i ) : ( 's' + i ) , index : i } ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = [ ] ; for ( let i = 0 ; i <= 0 ; i ++ ) { this . _UNKNOWN_ . push ( { disabled : this . _UNKNOWN_ && ( this . _UNKNOWN_ ( this . _UNKNOWN_ ) . indexOf ( i ) !== - 0 ) , name : i . toString ( ) . length === 0 ? ( 's' + i ) : ( 's' + i ) , index : i } ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = [ ] ; for ( let i = 0 ; i <= 0 ; i ++ ) { this . _UNKNOWN_ . push ( { disabled : this . _UNKNOWN_ && ( this . _UNKNOWN_ ( this . _UNKNOWN_ , this . _UNKNOWN_ ) . indexOf ( i ) !== - 0 ) , name : i . toString ( ) . length === 0 ? ( 's' + i ) : ( 's' + i ) , index : i } ) ; } } writeValue ( value ) { this . _UNKNOWN_ = value ; } registerOnChange ( fn : ( _ ) => void ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => void ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } constructor ( public _UNKNOWN_ , private _UNKNOWN_ ) { } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $number$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O $number$ O O O $string$ O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $any[]$ O O $any$ O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O $Date$ O O $DateConstructor$ O O O $HTMLElement$ O $complex$ O $boolean$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O $Date$ O O $any$ O O O $any$ O $any$ O O O $Date$ O O $any$ O O O $any$ O $any$ O O O $Date$ O O $any$ O O O $string$ O O O $boolean$ O O O $string$ O $number$ O O O O O O O $boolean$ O O O $string$ O $number$ O O O O O O O $boolean$ O O O $string$ O $number$ O O O O O O O $string$ O O O $number[]$ O O O O O O O O $void$ O O $Date$ O O O O O O O O O $void$ O O O O O O O O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $string$ O O O $any$ O $string$ O O O O O $any$ O O $any$ O O O O O O O O O O $any$ O O O $number[]$ O $number[]$ O O O O O O O O O O O $number[]$ O $number[]$ O O O $void$ O O O O O $number[]$ O O O O O O O O O O O O O $number[]$ O O O $any$ O O $number[]$ O O $number$ O O O O O O O $any$ O O $number[]$ O O $number$ O $number$ O O O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $boolean$ O O O $string$ O $number$ O O O O O O O O O $boolean$ O O O $string$ O $number$ O O O O O O O O O $boolean$ O O O $string$ O $number$ O O O O O O O O O $string$ O O O O O $string$ O O O O O O O O $string$ O O O $Date$ O O O $DateConstructor$ O O O O $any$ O O O $Date$ O O O $Date$ O $Date$ O O O O O O $any$ O $Date$ O O O O O O O $any$ O $Date$ O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O $void$ O $HTMLElement$ O $number$ O $number$ O O O $string$ O O O $number$ O O O $number$ O $number$ O $string$ O O O $HTMLElement$ O O $HTMLElement$ O $HTMLCollection$ O O O O $HTMLCollection$ O $number$ O O $HTMLElement$ O $HTMLCollection$ O O O O $HTMLCollection$ O O O O O $complex$ O O O $void$ O $HTMLElement$ O $HTMLElement$ O $number$ O $number$ O O O $void$ O $HTMLElement$ O $number$ O $number$ O O O O $number$ O O O O $HTMLElement$ O $number$ O $number$ O O O O O $number$ O $number$ O $HTMLElement$ O $number$ O O $number$ O $number$ O $number$ O O O $number$ O O O O O $HTMLElement$ O $number$ O $HTMLElement$ O $number$ O $number$ O O O $HTMLElement$ O $number$ O $number$ O O O O O O O $void$ O $HTMLElement$ O $number$ O $number$ O O O O O O O O $void$ O $HTMLElement$ O $number$ O $boolean$ O O O O $boolean$ O O O O O O O $void$ O $HTMLElement$ O $number$ O O O O O O O O $any$ O $number$ O O O $Date$ O $any$ O O O $Date$ O O $any$ O $number$ O O $any$ O O O O O $void$ O O O $any$ O O O O $void$ O O O O O $void$ O O O O $void$ O $HTMLElement$ O $number$ O $boolean$ O O O O $boolean$ O O O O O O O $void$ O $HTMLElement$ O $number$ O O O O O O O O $any$ O $number$ O O O $Date$ O $any$ O O O $Date$ O O $any$ O $number$ O O $any$ O O O O O $void$ O O O $any$ O O O O $void$ O O O O $void$ O $HTMLElement$ O $number$ O $boolean$ O O O O $boolean$ O O O O O O O $void$ O $HTMLElement$ O $number$ O O O O O O O O $any$ O $number$ O O O $Date$ O $any$ O O O $Date$ O O $any$ O $number$ O O $any$ O O O O O $void$ O O O $any$ O O O $number$ O $number$ O $string$ O O O O O O O $boolean$ O O O $number$ O O O O $string$ O O O O O $number[]$ O O O $number[]$ O O O $number[]$ O O O O O O $number$ O $number[]$ O $number$ O O O O O O $string$ O O O O O $number[]$ O O O $number[]$ O O O $number[]$ O O O $any$ O O O O O $number$ O $number[]$ O $number$ O O O O O O $string$ O O O O O $number[]$ O O O $number[]$ O O O $number[]$ O O O $any$ O O O $any$ O O O O O $number$ O $number[]$ O $number$ O O O O $number$ O $number[]$ O O O O O $number$ O O O O $number[]$ O $number[]$ O $number$ O O O $number$ O $number[]$ O $complex$ O O $number$ O $number$ O O O O $number$ O O $number$ O $number$ O O O O O O O O O O O O O O O $number$ O O O $void$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O O O $boolean$ O O O O $void$ O O O $any$ O $any$ O O O $any$ O O O O O O O O O O O $boolean$ O O O O $void$ O O O $any$ O $any$ O O O $any$ O O O O O O O O O O O $boolean$ O O O O $void$ O O O $any$ O $any$ O O O $any$ O O O O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $any$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any$ O $number$ O O $boolean$ O O O $number[]$ O O O O $number[]$ O O O $number$ O $number$ O O O O O O $string$ O $number$ O $string$ O O O $number$ O O O O O O $number$ O O O O O $number$ O O $number$ O $number$ O O O O O $void$ O O O O O $any$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any$ O $number$ O O $boolean$ O O O $number[]$ O O O O $number[]$ O O O $any$ O O $number$ O $number$ O O O O O O $string$ O $number$ O $string$ O O O $number$ O O O O O O $number$ O O O O O $number$ O O $number$ O $number$ O O O O O $void$ O O O O O $any$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any$ O $number$ O O $boolean$ O O O $number[]$ O O O O $number[]$ O O O $any$ O O O $any$ O O $number$ O $number$ O O O O O O $string$ O $number$ O $string$ O O O $number$ O O O O O O $number$ O O O O O $number$ O O $number$ O $number$ O O O O O $void$ O $Date$ O O O O $Date$ O $Date$ O O $void$ O $void$ O O $Date$ O O O O O O O $void$ O $void$ O O $void$ O $void$ O O O O O O O O O $void$ O $void$ O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O O O $ChangeDetectorRef$ O O $any$ O O O $void$ O O O O O $void$ O O O O O O
<s> import { ConnectionPositionPair } from 's' ; export const _UNKNOWN_ : { [ key ] : ConnectionPositionPair } = { 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , 's' : { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , } as { } as { [ key ] : ConnectionPositionPair } ; export const 0 = _UNKNOWN_ ( [ _UNKNOWN_ . top , _UNKNOWN_ . right , _UNKNOWN_ . bottom , _UNKNOWN_ . left ] ) ; export const _UNKNOWN_ = _UNKNOWN_ ( [ _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ . topLeft ] ) ; export const _UNKNOWN_ = [ { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } , { originX : 's' , originY : 's' , overlayX : 's' , overlayY : 's' , } ] as ConnectionPositionPair [ ] ; function _UNKNOWN_ < T , S > ( array : T [ ] , _UNKNOWN_ : ( item : T , index , arr : T [ ] ) => S ) : S [ ] { let index = - 0 ; const length = array == null ? 0 : array . length ; const result = Array ( length ) ; while ( ++ index < length ) { result [ index ] = _UNKNOWN_ ( array [ index ] , index , array ) ; } return result ; } function _UNKNOWN_ < T > ( object : { [ key ] : T } | T [ ] , props : string [ ] ) : T [ ] { return _UNKNOWN_ ( props , ( key ) => { return object [ key ] ; } ) ; } function _UNKNOWN_ < T > ( object : { [ key ] : T } | T [ ] ) : T [ ] { return object == null ? [ ] : _UNKNOWN_ ( object , Object . keys ( object ) ) ; } </s>	O O O $any$ O O O O O O $complex$ O O O $string$ O O $any$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O O O O $string$ O O $any$ O O O O $any[]$ O $T[]$ O O $complex$ O $any$ O $complex$ O $any$ O $complex$ O $any$ O $complex$ O $any$ O O O O O $any[]$ O $T[]$ O O $complex$ O $any$ O $complex$ O $any$ O O O O O $any[]$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $T[]$ O $any$ O O O $S$ O O $T$ O $any$ O $number$ O $T[]$ O $any$ O O O O $any$ O O $any$ O O O O $number$ O O O O O $number$ O $T[]$ O O O O O $T[]$ O $number$ O O $any[]$ O $ArrayConstructor$ O $number$ O O O O O $number$ O $number$ O O $any[]$ O $number$ O O $S$ O $T[]$ O $number$ O O $number$ O $T[]$ O O O O $any[]$ O O O $T[]$ O $any$ O O $complex$ O O O $string$ O O $any$ O O $any$ O O O $string[]$ O O O O O O $any$ O O O O $any$ O $string[]$ O O $string$ O O O O $complex$ O $string$ O O O O O O O $T[]$ O $any$ O O $complex$ O O O $string$ O O $any$ O O $any$ O O O O $any$ O O O O $complex$ O O O O O O $T[]$ O $complex$ O $ObjectConstructor$ O $complex$ O $complex$ O O O O O
<s> import { _UNKNOWN_ , ConnectionPositionPair } from 's' ; import { forwardRef , Component , Input , ViewChild , ViewEncapsulation , } from 's' ; import { NG_VALUE_ACCESSOR } from 's' ; import * as moment from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ extends _UNKNOWN_ { private _UNKNOWN_ = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ : ConnectionPositionPair [ ] = [ ... _UNKNOWN_ ] ; @ ViewChild ( 's' ) trigger ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } _UNKNOWN_ ( position ) { const _position = position . _UNKNOWN_ . originY === 's' ? 's' : 's' ; if ( this . _UNKNOWN_ !== _position ) { this . _UNKNOWN_ = _position ; this . _UNKNOWN_ . detectChanges ( ) ; } } _UNKNOWN_ ( box ) { const _UNKNOWN_ = moment ( box . value , this . _UNKNOWN_ ) ; if ( Date . parse ( _UNKNOWN_ . _UNKNOWN_ ( ) . toString ( ) ) ) { this . _UNKNOWN_ = new Date ( ( moment ( this . _value ) . hour ( _UNKNOWN_ . hour ( ) ) . minute ( _UNKNOWN_ . minute ( ) ) . second ( _UNKNOWN_ . second ( ) ) ) . _UNKNOWN_ ( ) . getTime ( ) ) ; this . onChange ( this . _value ) ; } } _UNKNOWN_ ( ) { const _start = this . _UNKNOWN_ . indexOf ( 's' ) ; const _end = _start + 0 ; this . _UNKNOWN_ . nativeElement . _UNKNOWN_ ( _start , _end ) ; } _UNKNOWN_ ( ) { const _start = this . _UNKNOWN_ . indexOf ( 's' ) ; const _end = _start + 0 ; this . _UNKNOWN_ . nativeElement . _UNKNOWN_ ( _start , _end ) ; } _UNKNOWN_ ( ) { const _start = this . _UNKNOWN_ . indexOf ( 's' ) ; const _end = _start + 0 ; this . _UNKNOWN_ . nativeElement . _UNKNOWN_ ( _start , _end ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = null ; this . _UNKNOWN_ = null ; this . _UNKNOWN_ = null ; this . onChange ( this . _value ) ; this . _UNKNOWN_ = null ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; setTimeout ( _ => { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . nativeElement . _UNKNOWN_ ( 0 , 0 ) ; } ) ; } _UNKNOWN_ ( ) { if ( ! this . _UNKNOWN_ ) { return ; } this . _UNKNOWN_ = false ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any[]$ O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O O O $any$ O $any$ O O $boolean$ O O O $string$ O O O $any[]$ O $any$ O O O O O $any[]$ O O O $any$ O O O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O $void$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $string$ O O O O O O $string$ O O O O O $any$ O $any$ O O O O O $void$ O $HTMLInputElement$ O O O $any$ O $any$ O $HTMLInputElement$ O $string$ O O O $string$ O O O O $DateConstructor$ O $number$ O $any$ O $any$ O O O $any$ O O O O O O O $Date$ O O $DateConstructor$ O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O O O $void$ O O O $any$ O O O O $void$ O O O O $number$ O O O $string$ O $number$ O O O O O $number$ O $number$ O O O O O $any$ O $any$ O $any$ O $number$ O $number$ O O O $void$ O O O O $number$ O O O $string$ O $number$ O O O O O $number$ O $number$ O O O O O $any$ O $any$ O $any$ O $number$ O $number$ O O O $void$ O O O O $number$ O O O $string$ O $number$ O O O O O $number$ O $number$ O O O O O $any$ O $any$ O $any$ O $number$ O $number$ O O O $void$ O O O O O $Date$ O O O O O $any$ O O O O O $any$ O O O O O $void$ O O O $any$ O O O O $any$ O O O O $void$ O O O O O $boolean$ O O O $number$ O $any$ O O O O $void$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O O
<s> import { OverlayModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , _UNKNOWN_ , OverlayModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O $any$ O O O
<s> import { _UNKNOWN_ , ConnectionPositionPair } from 's' ; import { forwardRef , ChangeDetectorRef , Component , ElementRef , Input , OnInit , ViewChild , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import * as moment from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' , 's' ] , host : { 's' : 's' } } ) export class _UNKNOWN_ implements ControlValueAccessor , OnInit { private _UNKNOWN_ = true ; private _disabled = false ; private _UNKNOWN_ : Partial < _UNKNOWN_ > = null ; _el : HTMLElement ; _UNKNOWN_ = false ; _mode = 's' ; _UNKNOWN_ = 's' ; _value : Date = null ; _UNKNOWN_ ; _UNKNOWN_ = new Date ( ) ; _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . month ( ) ; _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . year ( ) ; _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . date ( ) ; _UNKNOWN_ = moment ( new Date ( ) ) . month ( ) ; _UNKNOWN_ = moment ( new Date ( ) ) . year ( ) ; _UNKNOWN_ = Math . floor ( this . _UNKNOWN_ / 0 ) * 0 ; _UNKNOWN_ : string [ ] [ ] = [ ] ; _UNKNOWN_ : ConnectionPositionPair [ ] = [ ... _UNKNOWN_ ] ; onChange : ( value ) => void = ( ) => null ; onTouched : ( ) => void = ( ) => null ; @ Input ( ) _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : 's' | 's' = 's' ; @ ViewChild ( 's' ) trigger ; @ ViewChild ( _UNKNOWN_ ) _UNKNOWN_ : _UNKNOWN_ ; @ Input ( ) set _UNKNOWN_ ( value < _UNKNOWN_ > ) { if ( typeof value === 's' || typeof value === 's' ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ? { } : null ; } else { this . _UNKNOWN_ = value ; } } get _UNKNOWN_ ( ) : Partial < _UNKNOWN_ > { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) set _UNKNOWN_ ( value : ( ) => boolean ) { this . _UNKNOWN_ = value ; } get _UNKNOWN_ ( ) : ( ) => boolean { if ( this . _mode === 's' && this . _UNKNOWN_ === 's' ) { return ; } return this . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : boolean { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ( new Date ( ) ) ; } else { return false ; } } _UNKNOWN_ ( position ) { const _position = position . _UNKNOWN_ . originY === 's' ? 's' : 's' ; if ( this . _UNKNOWN_ !== _position ) { this . _UNKNOWN_ = _position ; this . _UNKNOWN_ . detectChanges ( ) ; } } get _UNKNOWN_ ( ) : Date { return this . _value || new Date ( ) ; } set _UNKNOWN_ ( value ) { this . _UNKNOWN_ ( value ) ; } _UNKNOWN_ ( $event ) { this . _value = $event ; } _UNKNOWN_ ( box ) { if ( Date . parse ( box . value ) ) { this . _UNKNOWN_ = new Date ( box . value ) ; this . onChange ( this . _value ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ - 0 ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ + 0 ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ - 0 < 0 ) { this . _UNKNOWN_ = 0 ; this . _UNKNOWN_ ( ) ; } else { this . _UNKNOWN_ = this . _UNKNOWN_ - 0 ; } } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ + 0 > 0 ) { this . _UNKNOWN_ = 0 ; this . _UNKNOWN_ ( ) ; } else { this . _UNKNOWN_ = this . _UNKNOWN_ + 0 ; } } _UNKNOWN_ ( year , $event ) { $event . stopPropagation ( ) ; this . _UNKNOWN_ = year ; this . _mode = this . _UNKNOWN_ === 's' ? 's' : 's' ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ - 0 ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ + 0 ; } _UNKNOWN_ ( e ) { e . preventDefault ( ) ; e . stopPropagation ( ) ; this . _UNKNOWN_ = null ; this . onChange ( this . _value ) ; } _UNKNOWN_ ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = new Date ( ) ; this . onChange ( this . _value ) ; this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( day ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = day . date . _UNKNOWN_ ( ) ; this . onChange ( this . _value ) ; } else { this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . year ( day . date . year ( ) ) . month ( day . date . month ( ) ) . date ( day . date . date ( ) ) . _UNKNOWN_ ( ) ; this . onChange ( this . _value ) ; } } _UNKNOWN_ ( month ) { if ( this . _UNKNOWN_ === 's' ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . year ( this . _UNKNOWN_ ) . month ( month . index ) . _UNKNOWN_ ( ) ; this . onChange ( this . _value ) ; } else { this . _UNKNOWN_ = month . index ; this . _mode = 's' ; } } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return ; } this . _mode = this . _UNKNOWN_ === 's' ? 's' : 's' ; this . _UNKNOWN_ = true ; } _UNKNOWN_ ( ) { if ( ! this . _UNKNOWN_ ) { return ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( this . _value ) ; this . onChange ( this . _value ) ; } this . _UNKNOWN_ = false ; } _UNKNOWN_ ( ) { this . _mode = 's' ; } _UNKNOWN_ ( $event ) { $event . stopPropagation ( ) ; this . _mode = 's' ; } _UNKNOWN_ ( $event ) { $event . stopPropagation ( ) ; this . _mode = 's' ; setTimeout ( _ => { this . _UNKNOWN_ . _UNKNOWN_ ( ) ; } ) ; } _UNKNOWN_ ( $event ) { $event . stopPropagation ( ) ; this . _mode = 's' ; } get _UNKNOWN_ ( ) : boolean { return this . _value && ! this . _UNKNOWN_ && this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { let _UNKNOWN_ = [ ] ; for ( let i = 0 ; i < 0 ; i ++ ) { if ( i === 0 || i === 0 || i === 0 || i === 0 ) { _UNKNOWN_ . push ( i ) ; this . _UNKNOWN_ . push ( _UNKNOWN_ ) ; _UNKNOWN_ = [ ] ; } else { _UNKNOWN_ . push ( i ) ; } } this . _UNKNOWN_ [ 0 ] . unshift ( 's' ) ; this . _UNKNOWN_ [ 0 ] . push ( 's' ) ; } constructor ( private _elementRef , private _UNKNOWN_ , private _UNKNOWN_ ) { this . _el = this . _elementRef . nativeElement ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } writeValue ( value ) { this . _UNKNOWN_ ( value ) ; } registerOnChange ( fn : ( _ ) => void ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => void ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } private _UNKNOWN_ ( value ) { if ( this . _value === value ) { return ; } if ( this . _UNKNOWN_ && this . _UNKNOWN_ ( value ) ) { return ; } this . _value = value ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . month ( ) ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . year ( ) ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . date ( ) ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . year ( ) ; this . _UNKNOWN_ = moment ( this . _UNKNOWN_ ) . month ( ) ; this . _UNKNOWN_ = Math . floor ( this . _UNKNOWN_ / 0 ) * 0 ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O $complex$ O O O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O O $HTMLElement$ O $complex$ O $boolean$ O O O $string$ O O O $string$ O O O $Date$ O $DateConstructor$ O O O $any$ O $Date$ O O $DateConstructor$ O O O $any$ O $any$ O O O $Date$ O O $any$ O O O $any$ O $any$ O O O $Date$ O O $any$ O O O $any$ O $any$ O O O $Date$ O O $any$ O O O $any$ O $any$ O O $DateConstructor$ O O O O $any$ O O O $any$ O $any$ O O $DateConstructor$ O O O O $any$ O O O $number$ O $Math$ O $number$ O O O $any$ O O O O O O $string[][]$ O O O O O O O O O O $any[]$ O $any$ O O O O O $any[]$ O O $void$ O O $Date$ O O O O O O O O O $void$ O O O O O O O O O O O O $any$ O O $string$ O O O $any$ O $string$ O O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O O O O O O O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $Partial$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O $any$ O $boolean$ O $never$ O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O O O O O O O O O O $string$ O O O O O O O O O O O O O O O O $any$ O O O $boolean$ O O O O O O O O O $any$ O O O O O $any$ O O $DateConstructor$ O O O O O O O O O O O O $void$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $string$ O O O O O O $string$ O O O O O $any$ O $any$ O O O O O O $Date$ O O O $DateConstructor$ O O O O $Date$ O O $DateConstructor$ O O O O O $Date$ O $Date$ O O O O $void$ O $Date$ O O O $void$ O $Date$ O O O O $Date$ O $Date$ O O $void$ O $HTMLInputElement$ O O O O $DateConstructor$ O $number$ O $HTMLInputElement$ O $string$ O O O O O $Date$ O O $DateConstructor$ O $HTMLInputElement$ O $string$ O O O O $void$ O O O $Date$ O O O O $void$ O O O O O $any$ O O O $any$ O O O O $void$ O O O O O $any$ O O O $any$ O O O O $void$ O O O O O O O $any$ O O O O O O O O $any$ O O O O O $void$ O O O O O O O O $any$ O O O $any$ O O O O O $void$ O O O O O O O $any$ O O O O O O O O $any$ O O O O O $void$ O O O O O O O O $any$ O O O $any$ O O O O O $void$ O $number$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O $any$ O $number$ O O O $string$ O O O O O O O O O O O O $void$ O O O O O $number$ O O O $number$ O O O O $void$ O O O O O $number$ O O O $number$ O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $Date$ O O O O O $void$ O O O $Date$ O O O $void$ O O O O O O O O $boolean$ O O O O $Date$ O O $DateConstructor$ O O O O O $void$ O O O $Date$ O O O O $void$ O O O O O $void$ O $any$ O O O O O O O $any$ O O O O $void$ O O O O O $Date$ O $any$ O $any$ O $any$ O O O O O $void$ O O O $Date$ O O O O O O O $Date$ O $any$ O O O $Date$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $void$ O O O $Date$ O O O O $void$ O $any$ O O O O O O O O O O O O O $void$ O O O O O $Date$ O $any$ O O O $Date$ O O $any$ O O O $any$ O O $any$ O $any$ O $number$ O O $any$ O O O O O $void$ O O O $Date$ O O O O O O O $any$ O $any$ O $number$ O O O $string$ O O O O O $void$ O O O O O O O $boolean$ O O O O O O O $string$ O O O O O O O O O O O O O $boolean$ O O O O $void$ O O O O O O O O $boolean$ O O O O O O O O O $any$ O O O O $void$ O O O $Date$ O O O O $void$ O O O $Date$ O O O O O $boolean$ O O O O $void$ O O O O O $string$ O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O $string$ O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O $string$ O O O $number$ O $any$ O O O O $any$ O $void$ O O O O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O $string$ O O O O O $boolean$ O O O O O O O O $Date$ O O O O $boolean$ O O O $boolean$ O O $void$ O O O O $any[]$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O $any[]$ O $number$ O O O O O O $string[][]$ O $number$ O $any[]$ O O $any[]$ O O O O O O O $any[]$ O $number$ O $number$ O O O O O O $string[][]$ O O O O $number$ O O O O O O $string[][]$ O O O O $number$ O O O O O O O O $ElementRef$ O O $ChangeDetectorRef$ O O $any$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O O $void$ O O O O $void$ O $Date$ O O O O $void$ O $Date$ O O O $void$ O $void$ O O $Date$ O O O O O O O $void$ O $void$ O O $void$ O $void$ O O O O O O O O O $void$ O $void$ O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $void$ O $Date$ O O O O O O $Date$ O $Date$ O O O O O O O O O $any$ O O O $any$ O $Date$ O O O O O O O O $Date$ O $Date$ O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $any$ O $any$ O O O $Date$ O O $any$ O O O O O $number$ O $Math$ O $number$ O O O $any$ O O O O O O O O O
<s> let _UNKNOWN_ ; const _UNKNOWN_ = { position : 's' , top : 's' , width : 's' , height : 's' , overflow : 's' , } ; export function _UNKNOWN_ ( ) { if ( typeof document === 's' || typeof window === 's' ) { return 0 ; } if ( _UNKNOWN_ ) { return _UNKNOWN_ ; } const _UNKNOWN_ = document . createElement ( 's' ) ; for ( const _UNKNOWN_ in _UNKNOWN_ ) { if ( _UNKNOWN_ . hasOwnProperty ( _UNKNOWN_ ) ) { _UNKNOWN_ . style [ _UNKNOWN_ ] = _UNKNOWN_ [ _UNKNOWN_ ] ; } } document . body . appendChild ( _UNKNOWN_ ) ; const width = _UNKNOWN_ . offsetWidth - _UNKNOWN_ . clientWidth ; document . body . removeChild ( _UNKNOWN_ ) ; _UNKNOWN_ = width ; return _UNKNOWN_ ; } </s>	O O $number$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O $number$ O O O O O O $Document$ O O O O $complex$ O O O O O O O O O O $number$ O O O $number$ O O O $HTMLDivElement$ O $Document$ O O O O O O O O O $string$ O $complex$ O O O O $complex$ O $boolean$ O $string$ O O O $HTMLDivElement$ O $CSSStyleDeclaration$ O $string$ O O $complex$ O $string$ O O O O $Document$ O $HTMLElement$ O $T$ O $HTMLDivElement$ O O O $number$ O $HTMLDivElement$ O $number$ O $HTMLDivElement$ O $number$ O $Document$ O $HTMLElement$ O $T$ O $HTMLDivElement$ O O $number$ O $number$ O O $number$ O O O
<s> import { CdkConnectedOverlay , _UNKNOWN_ , ConnectionPositionPair } from 's' ; import { forwardRef , ChangeDetectorRef , Component , ElementRef , Input , OnInit , QueryList , ViewChild , ViewChildren , ViewEncapsulation } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import * as moment from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements ControlValueAccessor , OnInit { private _disabled = false ; private _UNKNOWN_ : Partial < _UNKNOWN_ > = null ; private _UNKNOWN_ = moment ( ) ; private _el ; private _UNKNOWN_ : Date [ ] = this . _UNKNOWN_ ; private _value : Date [ ] = this . _UNKNOWN_ ; private get _UNKNOWN_ ( ) : Date [ ] { return [ null , null ] ; } private get start ( ) : moment . Moment { return moment ( this . _value [ _UNKNOWN_ . Start ] ) ; } private get end ( ) : moment . Moment { return moment ( this . _value [ _UNKNOWN_ . End ] ) ; } _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ : Date ; _UNKNOWN_ ; _UNKNOWN_ : ( value ) => boolean ; _UNKNOWN_ : Array < ( value ) => boolean > = [ null , null ] ; _mode = [ 's' , 's' ] ; _UNKNOWN_ : number [ ] = [ ] ; _UNKNOWN_ : number [ ] = [ ] ; _UNKNOWN_ : number [ ] = [ ] ; _UNKNOWN_ = [ this . _UNKNOWN_ . month ( ) , this . _UNKNOWN_ . clone ( ) . add ( 0 , 's' ) . month ( ) ] ; _UNKNOWN_ = [ this . _UNKNOWN_ . year ( ) , this . _UNKNOWN_ . year ( ) ] ; _UNKNOWN_ : string [ ] [ ] = [ ] ; _UNKNOWN_ = new Array ( 0 ) . fill ( Math . floor ( this . _UNKNOWN_ [ _UNKNOWN_ . Start ] / 0 ) * 0 ) ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 's' ; _UNKNOWN_ : ConnectionPositionPair [ ] = [ ... _UNKNOWN_ ] ; _UNKNOWN_ : number = 0 ; @ ViewChild ( CdkConnectedOverlay ) _UNKNOWN_ : CdkConnectedOverlay ; @ ViewChild ( 's' ) trigger ; onTouched : ( ) => void = ( ) => null ; onChange : ( value : Date [ ] ) => void = ( ) => null ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = true ; @ Input ( ) _UNKNOWN_ : string [ ] = [ this . _UNKNOWN_ . translate ( 's' ) , this . _UNKNOWN_ . translate ( 's' ) ] ; @ ViewChildren ( _UNKNOWN_ ) _UNKNOWN_ : QueryList < _UNKNOWN_ > ; get _UNKNOWN_ ( ) : boolean { return this . _isComplete ( ) && ! this . _UNKNOWN_ && this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value < _UNKNOWN_ > ) { if ( typeof value === 's' || typeof value === 's' ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ? { } : null ; } else { this . _UNKNOWN_ = value ; } } get _UNKNOWN_ ( ) : Partial < _UNKNOWN_ > { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } get _UNKNOWN_ ( ) : Date [ ] { return this . _value || this . _UNKNOWN_ ; } set _UNKNOWN_ ( value : Date [ ] ) { this . _UNKNOWN_ ( value ) ; } @ Input ( ) set _UNKNOWN_ ( value : ( value ) => boolean ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : ( value ) => boolean { return this . _UNKNOWN_ ; } constructor ( private _elementRef , private _UNKNOWN_ , private _UNKNOWN_ ) { this . _el = this . _elementRef . nativeElement ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ [ _UNKNOWN_ . Start ] = this . _mode [ _UNKNOWN_ . Start ] === 's' ? null : this . _UNKNOWN_ ; this . _UNKNOWN_ [ _UNKNOWN_ . End ] = this . _mode [ _UNKNOWN_ . End ] === 's' ? null : this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { let _UNKNOWN_ = [ ] ; for ( let i = 0 ; i < 0 ; i ++ ) { if ( i === 0 || i === 0 || i === 0 || i === 0 ) { _UNKNOWN_ . push ( i ) ; this . _UNKNOWN_ . push ( _UNKNOWN_ ) ; _UNKNOWN_ = [ ] ; } else { _UNKNOWN_ . push ( i ) ; } } this . _UNKNOWN_ [ 0 ] . unshift ( 's' ) ; this . _UNKNOWN_ [ 0 ] . push ( 's' ) ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return ; } this . _mode = [ 's' , 's' ] ; this . _UNKNOWN_ = true ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { if ( ! this . _UNKNOWN_ ) { return ; } if ( this . _isComplete ( ) ) { this . _onChange ( ) ; } else { this . _value = [ ... this . _UNKNOWN_ ] ; } this . _UNKNOWN_ = false ; } _UNKNOWN_ ( e ) { e . preventDefault ( ) ; e . stopPropagation ( ) ; this . _UNKNOWN_ = this . _UNKNOWN_ ; this . onChange ( this . _value ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . trigger . nativeElement . getBoundingClientRect ( ) . width ; } _UNKNOWN_ ( year , part , $event ) { $event . stopPropagation ( ) ; this . _UNKNOWN_ [ part ] = year ; this . _mode [ part ] = 's' ; } _UNKNOWN_ ( part ) { return moment ( this . _value [ part ] ) . isValid ( ) ; } _isComplete ( ) { return this . start . isValid ( ) && this . end . isValid ( ) ; } _UNKNOWN_ ( $event , part ) { this . _value [ part ] = $event ; } _UNKNOWN_ ( box , part ) { if ( Date . parse ( box . value ) ) { this . _value [ part ] = new Date ( box . value ) ; this . _onChange ( ) ; } } _UNKNOWN_ ( day ) { if ( ! this . _isComplete ( ) && this . _value . some ( e => moment ( e ) . isValid ( ) ) ) { this . _UNKNOWN_ = day . date . _UNKNOWN_ ( ) ; } else { this . _UNKNOWN_ = null ; } } _UNKNOWN_ ( day , part ) { const newDate = day . date . _UNKNOWN_ ( ) ; if ( this . _isComplete ( ) ) { this . _value = this . _UNKNOWN_ ; this . _value [ part ] = newDate ; this . _UNKNOWN_ ( ) ; return ; } if ( moment ( this . _value [ part ] ) . isValid ( ) ) { if ( part === _UNKNOWN_ . Start ) { this . _value [ _UNKNOWN_ . End ] = newDate ; } else { this . _value [ _UNKNOWN_ . Start ] = newDate ; } } else { this . _value [ part ] = newDate ; } if ( this . _isComplete ( ) ) { this . _UNKNOWN_ ( ) ; if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; return ; } this . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( month , part ) { this . _UNKNOWN_ [ part ] = month . index ; this . _mode [ part ] = 's' ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( $event ) { $event . stopPropagation ( ) ; this . _mode = [ 's' , 's' ] ; this . _UNKNOWN_ ( ) ; setTimeout ( _ => { this . _UNKNOWN_ . forEach ( e => e . _UNKNOWN_ ( ) ) ; } ) ; } _UNKNOWN_ ( $event ) { $event . stopPropagation ( ) ; this . _mode = [ 's' , 's' ] ; } _UNKNOWN_ ( part ) { if ( this . _mode [ part ] === 's' ) { return true ; } const _UNKNOWN_ = moment ( ) . month ( this . _UNKNOWN_ [ _UNKNOWN_ . Start ] ) . year ( this . _UNKNOWN_ [ _UNKNOWN_ . Start ] ) ; const _UNKNOWN_ = moment ( ) . month ( this . _UNKNOWN_ [ _UNKNOWN_ . End ] ) . year ( this . _UNKNOWN_ [ _UNKNOWN_ . End ] ) ; return ! _UNKNOWN_ . add ( 0 , 's' ) . _UNKNOWN_ ( _UNKNOWN_ , 's' ) ; } _UNKNOWN_ ( part ) { this . _UNKNOWN_ [ part ] = this . _UNKNOWN_ [ part ] - 0 ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( part ) { this . _UNKNOWN_ [ part ] = this . _UNKNOWN_ [ part ] + 0 ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( part ) { if ( this . _UNKNOWN_ [ part ] - 0 < 0 ) { this . _UNKNOWN_ [ part ] = 0 ; this . _UNKNOWN_ ( part ) ; } else { this . _UNKNOWN_ [ part ] = this . _UNKNOWN_ [ part ] - 0 ; } } _UNKNOWN_ ( part ) { if ( this . _UNKNOWN_ [ part ] + 0 > 0 ) { this . _UNKNOWN_ [ part ] = 0 ; this . _UNKNOWN_ ( part ) ; } else { this . _UNKNOWN_ [ part ] = this . _UNKNOWN_ [ part ] + 0 ; } } _UNKNOWN_ ( part ) { this . _UNKNOWN_ [ part ] = this . _UNKNOWN_ [ part ] - 0 ; } _UNKNOWN_ ( part ) { this . _UNKNOWN_ [ part ] = this . _UNKNOWN_ [ part ] + 0 ; } _UNKNOWN_ ( ) { if ( this . start . isValid ( ) && this . end . isValid ( ) && this . start . isAfter ( this . end ) ) { this . _value = this . _value . reverse ( ) ; } else { this . _value = this . _value . concat ( ) ; } } _UNKNOWN_ ( ) { if ( this . start . isValid ( ) ) { this . _UNKNOWN_ [ _UNKNOWN_ . Start ] = this . start . month ( ) ; this . _UNKNOWN_ [ _UNKNOWN_ . Start ] = this . start . year ( ) ; } else { this . _UNKNOWN_ [ _UNKNOWN_ . Start ] = this . _UNKNOWN_ . month ( ) ; this . _UNKNOWN_ [ _UNKNOWN_ . Start ] = this . _UNKNOWN_ . year ( ) ; } if ( this . end . isValid ( ) && ! this . start . _UNKNOWN_ ( this . end , 's' ) ) { this . _UNKNOWN_ [ _UNKNOWN_ . End ] = this . end . month ( ) ; this . _UNKNOWN_ [ _UNKNOWN_ . End ] = this . end . year ( ) ; } else { const _UNKNOWN_ = this . start . clone ( ) . add ( 0 , 's' ) ; const _UNKNOWN_ = this . _UNKNOWN_ . clone ( ) . add ( 0 , 's' ) ; this . _UNKNOWN_ [ _UNKNOWN_ . End ] = this . start . isValid ( ) ? _UNKNOWN_ . month ( ) : _UNKNOWN_ . month ( ) ; this . _UNKNOWN_ [ _UNKNOWN_ . End ] = this . start . isValid ( ) ? _UNKNOWN_ . year ( ) : _UNKNOWN_ . year ( ) ; } this . _UNKNOWN_ = this . _UNKNOWN_ . concat ( ) ; this . _UNKNOWN_ = this . _UNKNOWN_ . concat ( ) ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ [ _UNKNOWN_ . Start ] === this . _UNKNOWN_ [ _UNKNOWN_ . End ] && this . _UNKNOWN_ [ _UNKNOWN_ . Start ] === this . _UNKNOWN_ [ _UNKNOWN_ . End ] ) { this . _UNKNOWN_ ( _UNKNOWN_ . End ) ; } } reposition ( ) { if ( typeof window !== 's' && this . _UNKNOWN_ && this . _UNKNOWN_ && this . _UNKNOWN_ . overlayRef ) { const _UNKNOWN_ = this . _UNKNOWN_ . origin . elementRef . nativeElement ; const overlayElement = this . _UNKNOWN_ . overlayRef . overlayElement ; const originX = _UNKNOWN_ . getBoundingClientRect ( ) . left ; const _UNKNOWN_ = overlayElement . getBoundingClientRect ( ) . width ; const margin = window . innerWidth - originX - _UNKNOWN_ ; const offsetX = margin > 0 ? 0 : margin - ( _UNKNOWN_ ( ) || 0 ) ; this . _UNKNOWN_ = Number . isFinite ( offsetX ) ? offsetX : 0 ; this . _UNKNOWN_ . detectChanges ( ) ; } } _UNKNOWN_ ( ) { this . reposition ( ) ; } _UNKNOWN_ ( position ) { this . reposition ( ) ; const _position = position . _UNKNOWN_ . originY === 's' ? 's' : 's' ; if ( this . _UNKNOWN_ !== _position ) { this . _UNKNOWN_ = _position ; this . _UNKNOWN_ . detectChanges ( ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = [ this . start . year ( ) , this . end . year ( ) ] ; this . _UNKNOWN_ = [ this . start . month ( ) , this . end . month ( ) ] ; this . _UNKNOWN_ = [ this . start . date ( ) , this . end . date ( ) ] ; } _UNKNOWN_ ( ) { return this . _value . some ( ( value , index ) => { return this . _UNKNOWN_ [ index ] === null || ( moment . isDate ( this . _UNKNOWN_ [ index ] ) && moment . isDate ( value ) && this . _UNKNOWN_ [ index ] . getTime ( ) !== value . getTime ( ) ) ; } ) ; } writeValue ( value : Date [ ] ) { this . _UNKNOWN_ ( value ) ; } registerOnChange ( fn : ( _ : Date [ ] ) => { } ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => { } ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } private _UNKNOWN_ ( value : Date [ ] ) { if ( Array . isArray ( value ) && value . length === 0 ) { this . _value = [ value [ _UNKNOWN_ . Start ] , value [ _UNKNOWN_ . End ] ] ; } else { this . _value = this . _UNKNOWN_ ; } this . _UNKNOWN_ = [ ... this . _value ] ; } private _onChange ( ) { if ( this . _UNKNOWN_ ( _UNKNOWN_ . Start ) && this . _UNKNOWN_ ( _UNKNOWN_ . End ) && this . _UNKNOWN_ ( ) ) { this . onChange ( this . _value ) ; this . _UNKNOWN_ = [ ... this . _value ] ; } } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $number$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $Date[]$ O $DateConstructor$ O O O O O $Date[]$ O O $Date[]$ O $DateConstructor$ O O O O O $Date[]$ O O O $Date[]$ O O O $DateConstructor$ O O O O O O O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $Date[]$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $Date[]$ O $any$ O $any$ O O O O $any$ O $any$ O $Date$ O $DateConstructor$ O $any$ O $boolean$ O O $Date$ O O O O $any$ O $ArrayConstructor$ O O $Date$ O O O O O O O O O O O $string[]$ O O O O O O O $number[]$ O O O O O O O O $number[]$ O O O O O O O O $number[]$ O O O O O O O O $any[]$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O O O O $any[]$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $string[][]$ O O O O O O O O O O $any[]$ O O $ArrayConstructor$ O O O O $any[]$ O $Math$ O $number$ O O O $any[]$ O $any$ O $any$ O O O O O O O O $number$ O O O $string$ O O O $any[]$ O $any$ O O O O O $any[]$ O O $number$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $void$ O O O O O O O O O O O $void$ O O $Date[]$ O $DateConstructor$ O O O O O O O O O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $boolean$ O O O O $any$ O O $string[]$ O O O O O O O O $any$ O $string$ O O O O O O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $boolean$ O O O O O O O O $boolean$ O O O O O O $boolean$ O O O $boolean$ O O O $any$ O O O $any$ O $Partial$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O $any$ O $boolean$ O $never$ O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $Date[]$ O O O $DateConstructor$ O O O O O O $Date[]$ O O O $Date[]$ O O O $Date[]$ O $Date[]$ O $DateConstructor$ O O O O O O $void$ O $Date[]$ O O O O $any$ O O O $boolean$ O $boolean$ O O $Date$ O O O O O O O $boolean$ O $boolean$ O O O $void$ O O O O O $boolean$ O O O O $Date$ O O O O O O O $boolean$ O O O O O $ElementRef$ O O $ChangeDetectorRef$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O $void$ O O O O O $void$ O O O O $void$ O O O O O $any$ O $any$ O $any$ O O O O $string[]$ O $any$ O $any$ O O O O O O O O $boolean$ O O O $any$ O $any$ O $any$ O O O O $string[]$ O $any$ O $any$ O O O O O O O O $boolean$ O O $void$ O O O O $any[]$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O $any[]$ O $number$ O O O O O O $string[][]$ O $number$ O $any[]$ O O $any[]$ O O O O O O O $any[]$ O $number$ O $number$ O O O O O O $string[][]$ O O O O $number$ O O O O O O $string[][]$ O O O O $number$ O O O O O $void$ O O O O O O O $boolean$ O O O O O O O $string[]$ O O O O O O O O O $any$ O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O O O O $any$ O O O O O O O O O $boolean$ O O O O O O $void$ O O O O O O O O $Date[]$ O O O O O $Date[]$ O O O O O $any$ O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $Date[]$ O O O $Date[]$ O O O $void$ O O O $Date[]$ O O O $void$ O O O O O $number$ O O O $any$ O $any$ O $any$ O O O $any$ O O $void$ O $number$ O $any$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O $any[]$ O $any$ O O $number$ O O O $string[]$ O $any$ O O O O O $boolean$ O $any$ O O O $any$ O O O $Date[]$ O $any$ O O O $any$ O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $void$ O $Date$ O $any$ O O O O $Date[]$ O $any$ O O $Date$ O O $void$ O $HTMLInputElement$ O $any$ O O O O $DateConstructor$ O $number$ O $HTMLInputElement$ O $string$ O O O O O $Date[]$ O $any$ O O O $DateConstructor$ O $HTMLInputElement$ O $string$ O O O O $void$ O O O O O $void$ O $any$ O O O O O O O $boolean$ O O O O O $Date[]$ O $boolean$ O $Date$ O $any$ O $Date$ O O $any$ O O O O O O O $Date$ O $any$ O $any$ O $any$ O O O O O O O O $Date$ O O O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $Date[]$ O O O $Date[]$ O O O $Date[]$ O $any$ O O $any$ O O O $void$ O O O O O O O O $any$ O O O $Date[]$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $Date[]$ O $any$ O $any$ O O $any$ O O O O O O $Date[]$ O $any$ O $any$ O O $any$ O O O O O O O $Date[]$ O $any$ O O $any$ O O O O O O $boolean$ O O O O O O $void$ O O O O O O O O $any$ O O O O $void$ O O O O O O O O $void$ O O O O O O $void$ O O O O $void$ O $any$ O $any$ O O O O $any[]$ O $any$ O O $any$ O $number$ O O O $string[]$ O $any$ O O O O O O $void$ O O O O O $void$ O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O $string[]$ O O O O O O O O O $void$ O O O $number$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O $string[]$ O O O O O O O O $boolean$ O $any$ O O O O O O $string[]$ O $any$ O O O O O O O O O O $any$ O $any$ O O O $any$ O O O $any[]$ O $any$ O $any$ O O O $any$ O O O $any[]$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O O $any[]$ O $any$ O $any$ O O O $any$ O O O $any[]$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $void$ O $any$ O O O O $any[]$ O $any$ O O O O $any[]$ O $any$ O O O O O O $void$ O O O O $void$ O $any$ O O O O $any[]$ O $any$ O O O O $any[]$ O $any$ O O O O O O $void$ O O O O $void$ O $any$ O O O O O O $any[]$ O $any$ O O O O O O O O O $any[]$ O $any$ O O O O O O $void$ O $any$ O O O O O O O $any[]$ O $any$ O O O O $any[]$ O $any$ O O O O O O $void$ O $any$ O O O O O O $any[]$ O $any$ O O O O O O O O O $any[]$ O $any$ O O O O O O $void$ O $any$ O O O O O O O $any[]$ O $any$ O O O O $any[]$ O $any$ O O O O O O $void$ O $any$ O O O O $any[]$ O $any$ O O O O $any[]$ O $any$ O O O O O $void$ O $any$ O O O O $any[]$ O $any$ O O O O $any[]$ O $any$ O O O O O $void$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O O $Date[]$ O O O $Date[]$ O $Date[]$ O O O O O O O O $Date[]$ O O O $Date[]$ O $complex$ O O O O O $void$ O O O O O O O $any$ O $any$ O O O O O O $any[]$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any[]$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O $any[]$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any[]$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O O O O O $any[]$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any[]$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O O $any[]$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any[]$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any[]$ O O O $any[]$ O $complex$ O O O O O $any[]$ O O O $any[]$ O $complex$ O O O O $void$ O O O O O O O $any[]$ O $any$ O $any$ O O O O $any[]$ O $any$ O $any$ O O O O $any[]$ O $any$ O $any$ O O O O $any[]$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O O O O $void$ O O O O O O $complex$ O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $number$ O $complex$ O $number$ O $any$ O $any$ O O $number$ O $number$ O O O O O $number$ O O $number$ O O O O O O O O $number$ O $NumberConstructor$ O $boolean$ O $number$ O O $number$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O $void$ O O O O $void$ O $any$ O O O O $void$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $string$ O O O O O O $string$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O $number[]$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $number[]$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $number[]$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $boolean$ O O O O O O $Date[]$ O $boolean$ O O $Date$ O $number$ O O O O O O $Date[]$ O $number$ O O O O O $any$ O $any$ O O O $Date[]$ O $number$ O O O $any$ O $any$ O $Date$ O O O O $Date[]$ O $number$ O O $number$ O O O $Date$ O $number$ O O O O O O O O $void$ O $Date[]$ O $DateConstructor$ O O O O O O $void$ O $Date[]$ O O O $void$ O ${}$ O O $Date[]$ O $DateConstructor$ O O O O O O O O O O $void$ O ${}$ O O $void$ O ${}$ O O O O O O O O O O $void$ O ${}$ O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $void$ O $Date[]$ O $DateConstructor$ O O O O O O $ArrayConstructor$ O $complex$ O $Date[]$ O O $Date[]$ O $number$ O O O O O O $Date[]$ O O $Date[]$ O $any$ O $any$ O O $Date[]$ O $any$ O $any$ O O O O O O O O $Date[]$ O O O $Date[]$ O O O O $Date[]$ O O O O O $Date[]$ O O O O $void$ O O O O O O O $boolean$ O $any$ O $any$ O O O O $boolean$ O $any$ O $any$ O O O O $boolean$ O O O O O O $void$ O O O $Date[]$ O O O O $Date[]$ O O O O O $Date[]$ O O O O O O
<s> import { OverlayModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , FormsModule , OverlayModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , HostBinding } from 's' ; @ Component ( { selector : 's' , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Component , HostBinding , } from 's' ; @ Component ( { selector : 's' , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O O $any$ O O $string$ O O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { animate , state , style , transition , trigger } from 's' ; import { AfterViewInit , ChangeDetectorRef , Component , ContentChildren , EventEmitter , HostBinding , HostListener , Input , OnDestroy , OnInit , Output } from 's' ; import { Subject } from 's' ; import { debounceTime } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , animations : [ trigger ( 's' , [ state ( 's' , style ( { opacity : 0 } ) ) , transition ( 's' , [ style ( { height : 's' , overflow : 's' } ) , animate ( 0 , style ( { height : 0 } ) ) ] ) , transition ( 's' , [ style ( { height : 0 , overflow : 's' } ) , animate ( 0 , style ( { height : 's' } ) ) ] ) , transition ( 's' , [ animate ( 0 , style ( { opacity : 0 } ) ) ] ) , transition ( 's' , [ style ( { opacity : 's' } ) , animate ( 0 , style ( { opacity : 0 } ) ) ] ) ] ) ] , template : `template` , } ) export class _UNKNOWN_ implements OnInit , OnDestroy , AfterViewInit { private _UNKNOWN_ = false ; _UNKNOWN_ = false ; level = 0 ; _UNKNOWN_ = new Subject ( ) ; @ ContentChildren ( _UNKNOWN_ ) _UNKNOWN_ ; @ Output ( ) _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter ( ) ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : boolean { return ! ! this . _UNKNOWN_ . menuItems . find ( e => e . _UNKNOWN_ && e . _UNKNOWN_ === this ) ; } get _UNKNOWN_ ( ) : boolean { return ! ! this . _UNKNOWN_ . _results . find ( e => e !== this && e . _UNKNOWN_ ) ; } get _UNKNOWN_ ( ) : string { if ( this . _UNKNOWN_ && this . _UNKNOWN_ . _UNKNOWN_ === 's' ) { return 's' ; } else if ( this . _UNKNOWN_ && this . _UNKNOWN_ . _UNKNOWN_ !== 's' ) { return 's' ; } return null ; } _UNKNOWN_ ( ) { if ( ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) && ( ! this . _UNKNOWN_ ) ) { this . _UNKNOWN_ = ! this . _UNKNOWN_ ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ || ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) || ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) ) { this . _UNKNOWN_ . next ( false ) ; this . _UNKNOWN_ = false ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( e ) { if ( ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) || ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) || this . _UNKNOWN_ ) { this . _UNKNOWN_ . next ( true ) ; } } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( e ) { if ( ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) || ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) || this . _UNKNOWN_ ) { this . _UNKNOWN_ . next ( false ) ; } } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ && ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ && ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ! this . _UNKNOWN_ ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ || this . _UNKNOWN_ ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) ; } constructor ( public _UNKNOWN_ , public cd ) { this . _UNKNOWN_ . _UNKNOWN_ ( true ) ; this . _UNKNOWN_ . _UNKNOWN_ . push ( this ) ; } ngAfterViewInit ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ; if ( this . _UNKNOWN_ . length && ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) ) { this . _UNKNOWN_ . filter ( x => x !== this ) . forEach ( menu => { setTimeout ( _ => { menu . level = this . level + 0 ; } ) ; } ) ; } } ngOnInit ( ) { this . _UNKNOWN_ . pipe ( debounceTime ( 0 ) ) . subscribe ( ( data ) => { if ( this . _UNKNOWN_ !== data ) { this . _UNKNOWN_ = data ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any[]$ O O $any$ O O O O $any$ O O O $any$ O O $number$ O O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O O O $any$ O O $number$ O O O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O O O $any$ O O O $any$ O O $string$ O O O O O O O O $any$ O O O O $any$ O O O $any$ O O $number$ O O O O O O O O $any$ O O O O $any$ O O $string$ O O O O O $any$ O O O $any$ O O $number$ O O O O O O O O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O $number$ O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O O O O O O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O O O O O O $boolean$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $string$ O O O O O O O O O $boolean$ O O O $any$ O $any$ O O O O O O O O O O O O O $boolean$ O O O $any$ O $any$ O O O O O O O O O O O O $void$ O O O O O O O O $any$ O $any$ O O O O O O O O $boolean$ O O O O O $boolean$ O O O O $boolean$ O O O $any$ O $any$ O O O $boolean$ O O O O $void$ O O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O $any$ O O O $false$ O O O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O $boolean$ O O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $boolean$ O O O O O O O O O $boolean$ O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O O O O $any$ O O $ChangeDetectorRef$ O O O O $any$ O $void$ O O O O O O $any$ O $any$ O $number$ O O O O O $void$ O O O O O $boolean$ O O O $any$ O $boolean$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $number$ O $any$ O O $any$ O $any$ O O O $number$ O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $boolean$ O O O O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $any$ O $any$ O O O $boolean$ O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { AfterViewInit , Component , HostBinding , Input , OnChanges , SimpleChanges , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export type _UNKNOWN_ = 's' | 's' | 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnChanges , AfterViewInit { private _UNKNOWN_ = true ; private _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; menuItems : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ = false ; _UNKNOWN_ : _UNKNOWN_ ; _UNKNOWN_ = [ ] ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : 's' | 's' = 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; setTimeout ( ( ) => this . _UNKNOWN_ = 's' , 0 ) ; } else { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = this . _UNKNOWN_ ; } } @ HostBinding ( 's' ) @ HostBinding ( 's' ) @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ HostBinding ( 's' ) @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ! this . _UNKNOWN_ ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ && ( this . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ && ( this . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ === 's' ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && ( this . _UNKNOWN_ !== 's' ) && this . _UNKNOWN_ ; } ngOnChanges ( changes ) { for ( const propName in changes ) { if ( propName === 's' ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . forEach ( _UNKNOWN_ => { _UNKNOWN_ . _UNKNOWN_ = false ; _UNKNOWN_ . _UNKNOWN_ . emit ( false ) ; } ) ; } } } } ngAfterViewInit ( ) { this . _UNKNOWN_ = true ; this . _UNKNOWN_ = this . _UNKNOWN_ ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . menuItems . forEach ( menu => menu . _UNKNOWN_ = false ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = [ ] ; this . _UNKNOWN_ . forEach ( ( _UNKNOWN_ , index ) => { if ( _UNKNOWN_ . _UNKNOWN_ ) { this . _UNKNOWN_ . push ( index ) ; } _UNKNOWN_ . _UNKNOWN_ = false ; } ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . forEach ( i => this . _UNKNOWN_ [ i ] . _UNKNOWN_ = true ) ; this . _UNKNOWN_ = [ ] ; } _UNKNOWN_ ( value ) { setTimeout ( _ => { this . _UNKNOWN_ = value ; this . menuItems . forEach ( menu => menu . _UNKNOWN_ = value ) ; this . _UNKNOWN_ . forEach ( subMenu => subMenu . _UNKNOWN_ = value ) ; } ) ; } _UNKNOWN_ ( value ) { setTimeout ( _ => { this . _UNKNOWN_ = value ; } ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O $any$ O $any$ O $any[]$ O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O O O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O O O $boolean$ O O O O $void$ O O O O O O $boolean$ O O O O O O O O $boolean$ O O $void$ O O O O O O O $boolean$ O O O O $void$ O O O $number$ O O O O O O $any$ O O O O O O O O O O O $void$ O O O O O $any$ O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O O $any$ O O O O $boolean$ O O O O O O O O O $boolean$ O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O O O O O O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O O O O O O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O O O O O O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O O O O O O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O $any$ O O O O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O $any$ O O O O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O $any$ O O O O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O O $any$ O O O O O O $boolean$ O O $void$ O $SimpleChanges$ O O O O O $string$ O $any$ O O O O $string$ O O O O O O O O $boolean$ O O O O $any$ O $void$ O $any$ O O $any$ O $boolean$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O $void$ O O O O O $boolean$ O O O O O $any$ O O O $any$ O O O $void$ O O O O $void$ O O O O O $any$ O $void$ O $any$ O $any$ O $boolean$ O O O O O $void$ O O O O O $any[]$ O O O O O O $any$ O $void$ O O $any$ O $number$ O O O O O $any$ O $boolean$ O O O O $any[]$ O $number$ O $number$ O O O $any$ O $boolean$ O O O O O O O $void$ O O O O O $any[]$ O $void$ O $any$ O O O $any$ O $any$ O O $boolean$ O O O O O O $any[]$ O O O O O $void$ O $boolean$ O O $number$ O $any$ O O O O $boolean$ O $boolean$ O O O $any$ O $void$ O $any$ O $any$ O $boolean$ O $boolean$ O O O O $any$ O $void$ O $any$ O $any$ O $boolean$ O $boolean$ O O O O O O $void$ O $boolean$ O O $number$ O $any$ O O O O $boolean$ O $boolean$ O O O O O O O
<s> import { AfterViewInit , ChangeDetectorRef , Component , ElementRef , HostBinding , HostListener , Input , Optional , 0 , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = 0 ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements AfterViewInit { private _disabled = false ; private _selected = false ; level = 0 ; padding = null ; _UNKNOWN_ = false ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _selected = _UNKNOWN_ ( value ) ; if ( this . _selected ) { this . _renderer . addClass ( this . hostElement . nativeElement , this . _UNKNOWN_ ? 's' : 's' ) ; } else { this . _renderer . removeClass ( this . hostElement . nativeElement , this . _UNKNOWN_ ? 's' : 's' ) ; } } get _UNKNOWN_ ( ) : boolean { return this . _selected ; } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ . _UNKNOWN_ && ( ! this . _UNKNOWN_ ) ) { this . _UNKNOWN_ . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = true ; } } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ! this . _UNKNOWN_ ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ && this . _UNKNOWN_ ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ( ! this . _UNKNOWN_ ) && this . _UNKNOWN_ ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : number { if ( this . _UNKNOWN_ ) { if ( this . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ === 's' ) { return ( this . _UNKNOWN_ . level + 0 ) * _UNKNOWN_ ; } else { return this . padding ; } } else if ( this . _UNKNOWN_ . _UNKNOWN_ && ( this . _UNKNOWN_ . _UNKNOWN_ === 's' ) ) { return _UNKNOWN_ ; } else { return this . padding ; } } constructor ( private _renderer , public cd , private _UNKNOWN_ , @ Optional ( ) public _UNKNOWN_ , private hostElement ) { this . _UNKNOWN_ . menuItems . push ( this ) ; if ( this . hostElement . nativeElement . style [ 's' ] ) { this . padding = parseInt ( this . hostElement . nativeElement . style [ 's' ] , 0 ) ; } } ngAfterViewInit ( ) { setTimeout ( _ => { this . _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ; } ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O $number$ O O O $any$ O O O $boolean$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O O O $boolean$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $boolean$ O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $boolean$ O O O O O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O O O O O $void$ O O O O O O O $any$ O $boolean$ O O O O O $boolean$ O O O O O $any$ O $void$ O O O O O $boolean$ O O O O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O O $boolean$ O O O O O O O O O $boolean$ O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O O O $any$ O O O O $boolean$ O O O O O O O O O O $boolean$ O O O O $boolean$ O O O $any$ O O O O $number$ O O O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $number$ O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $boolean$ O O O O $any$ O $any$ O O O O O O O O O O O O O O $any$ O O O O O O $Renderer2$ O O $ChangeDetectorRef$ O O $any$ O O $any$ O O O $any$ O O $ElementRef$ O O O O $any$ O $any$ O $number$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $number$ O O O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O $number$ O $any$ O O O O $boolean$ O O O $any$ O $boolean$ O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Directive , ElementRef , HostBinding } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { constructor ( public elementRef ) { } } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O O $ElementRef$ O O O O O
<s> import { CdkConnectedOverlay , _UNKNOWN_ , ConnectionPositionPair } from 's' ; import { AfterViewInit , ChangeDetectionStrategy , ChangeDetectorRef , Component , ContentChild , EventEmitter , Input , OnDestroy , OnInit , Output , 0 , ViewChild , ViewEncapsulation } from 's' ; import { Observable } from 's' ; import { Subject } from 's' ; import { Subscription } from 's' ; import { fromEvent } from 's' ; import { debounceTime } from 's' ; import { mapTo } from 's' ; import { merge } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export type _UNKNOWN_ = 's' | 's' | 's' | 's' | 's' | 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , changeDetection : ChangeDetectionStrategy . OnPush , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnInit , OnDestroy , AfterViewInit { private _UNKNOWN_ = true ; private _visible = false ; _UNKNOWN_ = false ; _UNKNOWN_ = 0 ; _UNKNOWN_ : _UNKNOWN_ = 's' ; _UNKNOWN_ : 's' | 's' | 's' = 's' ; _UNKNOWN_ : ConnectionPositionPair [ ] = [ ... _UNKNOWN_ ] ; _subscription : Subscription ; @ ContentChild ( _UNKNOWN_ ) _UNKNOWN_ ; @ ContentChild ( _UNKNOWN_ ) _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : 's' | 's' = 's' ; @ Output ( ) _UNKNOWN_ = new Subject < boolean > ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter ( ) ; @ ViewChild ( CdkConnectedOverlay ) _UNKNOWN_ : CdkConnectedOverlay ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _visible = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _visible ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ = ( this . _UNKNOWN_ . indexOf ( 's' ) !== - 0 ) ? 's' : 's' ; this . _UNKNOWN_ . unshift ( _UNKNOWN_ [ this . _UNKNOWN_ ] as ConnectionPositionPair ) ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ === 's' ) { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( e ) { if ( this . _UNKNOWN_ === 's' ) { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( e ) { if ( this . _UNKNOWN_ === 's' ) { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ . next ( false ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . next ( true ) ; } _UNKNOWN_ ( position ) { this . _UNKNOWN_ = position . _UNKNOWN_ . originY ; } _UNKNOWN_ ( $event ) { $event . stopPropagation ( ) ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ . elementRef . nativeElement . getBoundingClientRect ( ) . width ; if ( this . _UNKNOWN_ && this . _UNKNOWN_ . overlayRef ) { this . _UNKNOWN_ . overlayRef . updateSize ( { minWidth : this . _UNKNOWN_ } ) ; } } _UNKNOWN_ = ( visible ) => { if ( visible ) { this . _UNKNOWN_ ( ) ; } if ( this . _UNKNOWN_ !== visible ) { this . _UNKNOWN_ = visible ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } this . _changeDetector . markForCheck ( ) ; } _UNKNOWN_ ( _UNKNOWN_ < boolean > ) { this . _subscription = _UNKNOWN_ . pipe ( debounceTime ( 0 ) ) . subscribe ( this . _UNKNOWN_ ) ; } ngOnInit ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . _UNKNOWN_ ( true ) ; } } ngOnDestroy ( ) { if ( this . _subscription ) { this . _subscription . unsubscribe ( ) ; } } ngAfterViewInit ( ) { let _UNKNOWN_ < boolean > ; if ( this . _UNKNOWN_ === 's' ) { const _UNKNOWN_ = fromEvent ( this . _UNKNOWN_ . elementRef . nativeElement , 's' ) . pipe ( mapTo ( true ) ) ; const _UNKNOWN_ = fromEvent ( this . _UNKNOWN_ . elementRef . nativeElement , 's' ) . pipe ( mapTo ( false ) ) ; _UNKNOWN_ = _UNKNOWN_ . pipe ( merge ( _UNKNOWN_ ) ) ; } if ( this . _UNKNOWN_ === 's' ) { _UNKNOWN_ = fromEvent ( this . _UNKNOWN_ . elementRef . nativeElement , 's' ) . pipe ( mapTo ( true ) ) ; this . _renderer . listen ( this . _UNKNOWN_ . elementRef . nativeElement , 's' , ( e ) => { e . preventDefault ( ) ; } ) ; } const _UNKNOWN_ = _UNKNOWN_ . pipe ( merge ( this . _UNKNOWN_ ) ) ; this . _UNKNOWN_ ( _UNKNOWN_ ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ === 's' ; } constructor ( private _renderer , protected _changeDetector ) { } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O $complex$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O $boolean$ O O O $number$ O O O $any$ O $any$ O O O O O O O O O O O O O $any[]$ O $any$ O O O O O $any[]$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O $number$ O O O O O O O O O O O O O O $any[]$ O $number$ O $complex$ O O O $any$ O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O $void$ O O O O O O O $any$ O O O O O O $void$ O O O O O $void$ O $MouseEvent$ O O O O O O $any$ O O O O O O $void$ O O O O O $void$ O $MouseEvent$ O O O O O O $any$ O O O O O O $void$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O $void$ O $any$ O O O O O O $any$ O $any$ O $any$ O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O O O $boolean$ O O O O $void$ O O O O O $void$ O O O O O $number$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $number$ O O O $number$ O O O O O $void$ O O $boolean$ O O O O O $boolean$ O O O O $void$ O O O O O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $any$ O $any$ O O O $boolean$ O O O O O $any$ O $any$ O O O O $void$ O $Observable$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $void$ O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O $void$ O O O O $Observable$ O O O O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O $void$ O $any$ O O O O $boolean$ O O O O O O O O $any$ O O O O O O O $Renderer2$ O O $ChangeDetectorRef$ O O O O O
<s> import { AfterViewInit , Component , EventEmitter , Input , OnDestroy , OnInit , Output , ViewChild , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ extends _UNKNOWN_ implements OnInit , OnDestroy , AfterViewInit { _disabled = false ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; @ ViewChild ( 's' ) content ; @ Output ( ) _UNKNOWN_ = new EventEmitter ( ) ; @ ViewChild ( _UNKNOWN_ ) _UNKNOWN_ ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } _UNKNOWN_ = ( visible ) => { if ( this . _UNKNOWN_ ) { return ; } if ( visible ) { this . _UNKNOWN_ ( ) ; } if ( this . _UNKNOWN_ !== visible ) { this . _UNKNOWN_ = visible ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } this . _changeDetector . markForCheck ( ) ; } ngAfterViewInit ( ) { this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O O $any$ O O $any$ O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O $void$ O O $boolean$ O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O $void$ O O O O O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $any$ O $any$ O O O $boolean$ O O O O O $any$ O $any$ O O O O $void$ O O O O O $void$ O O O $any$ O O O O O
<s> import { OverlayModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , OverlayModule , FormsModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , ContentChild , Input } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] , host : { 's' : 's' } } ) export class _UNKNOWN_ { private _UNKNOWN_ = false ; private _UNKNOWN_ : string | _UNKNOWN_ ; @ ContentChild ( _UNKNOWN_ ) ngControl : _UNKNOWN_ ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value : string | _UNKNOWN_ ) { this . _UNKNOWN_ = value ; } get _UNKNOWN_ ( ) : string | _UNKNOWN_ { return this . _UNKNOWN_ || this . ngControl ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ === 's' || this . _UNKNOWN_ && ( this . _UNKNOWN_ as _UNKNOWN_ ) . dirty && ( this . _UNKNOWN_ as _UNKNOWN_ ) . hasError && ( this . _UNKNOWN_ as _UNKNOWN_ ) . hasError ( 's' ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ === 's' || this . _UNKNOWN_ === 's' || this . _UNKNOWN_ && ( this . _UNKNOWN_ as _UNKNOWN_ ) . dirty && ( this . _UNKNOWN_ as _UNKNOWN_ ) . pending ; } get isError ( ) : boolean { return this . _UNKNOWN_ === 's' || this . _UNKNOWN_ && ( this . _UNKNOWN_ as _UNKNOWN_ ) . dirty && ( this . _UNKNOWN_ as _UNKNOWN_ ) . errors && ( this . _UNKNOWN_ as _UNKNOWN_ ) . hasError && ! ( this . _UNKNOWN_ as _UNKNOWN_ ) . hasError ( 's' ) ; } get isSuccess ( ) : boolean { return this . _UNKNOWN_ === 's' || this . _UNKNOWN_ && ( this . _UNKNOWN_ as _UNKNOWN_ ) . dirty && ( this . _UNKNOWN_ as _UNKNOWN_ ) . valid ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O $complex$ O O O O O O O O O O $any$ O O $boolean$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O O O $boolean$ O O O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O $boolean$ O O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O $boolean$ O O O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O O $boolean$ O O O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O $boolean$ O O O O O O O O $boolean$ O O O O
<s> import { Directive , HostBinding } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; _UNKNOWN_ ( ) { this . _UNKNOWN_ ++ ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ -- ; } @ HostBinding ( `template` ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ > 0 ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O $number$ O O O $void$ O O O O O $number$ O O O $void$ O O O O O $number$ O O O O $any$ O O O O $boolean$ O O O O O O O O $number$ O O O O O O
<s> import { Component , HostBinding , OnDestroy , OnInit , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styles : [ ] , host : { 's' : 's' } } ) export class _UNKNOWN_ implements OnDestroy , OnInit { constructor ( private _UNKNOWN_ ) { } ngOnDestroy ( ) { this . _UNKNOWN_ . _UNKNOWN_ ( ) ; } ngOnInit ( ) { this . _UNKNOWN_ . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $undefined[]$ O O O O $complex$ O O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O $void$ O O O O O $any$ O $void$ O O O O $void$ O O O O O $any$ O $void$ O O O O O O
<s> import { Directive , HostBinding } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Directive , HostBinding , Input } from 's' ; import { _UNKNOWN_ } from 's' ; @ Directive ( { selector : 's' } ) export class _UNKNOWN_ { private _required = true ; @ Input ( ) @ HostBinding ( `template` ) set _UNKNOWN_ ( value ) { this . _required = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _required ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O O O O $any$ O O $boolean$ O O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O
<s> import { Directive , HostBinding } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Directive , HostBinding } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Directive , HostBinding } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Component , ElementRef , Input , OnInit , 0 , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements OnInit { _classList : string [ ] = [ ] ; _el : HTMLElement ; _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . removeClass ( this . _el , _UNKNOWN_ ) ; } ) ; this . _classList = [ this . _UNKNOWN_ && `template` ] . filter ( ( item ) => { return ! ! item ; } ) ; this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . addClass ( this . _el , _UNKNOWN_ ) ; } ) ; } constructor ( private _elementRef , private _renderer ) { this . _el = this . _elementRef . nativeElement ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $string[]$ O O O O O O O O $HTMLElement$ O $complex$ O $string$ O O O O $any$ O O $string$ O O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $void$ O O O O $void$ O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O $string[]$ O O O O $string$ O O O O $complex$ O O $string$ O O O O O O $string$ O O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O O $void$ O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> export function _UNKNOWN_ ( value : undefined | null | string | number | boolean ) { return ( typeof ( value ) !== 's' ) && value !== null ; } </s>	O O O $boolean$ O $complex$ O O O O O O O O O O O O O O O O $complex$ O O O O O $complex$ O O O O O
<s> import { Component , ElementRef , Input , OnInit , 0 , ViewEncapsulation , } from 's' ; export type _UNKNOWN_ = 's' | 's' | 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | null ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit { _classList : string [ ] = [ ] ; _el : HTMLElement ; _UNKNOWN_ = 's' ; _UNKNOWN_ : number ; _type : _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ = 's' ; _UNKNOWN_ : _UNKNOWN_ = 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _type = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _type ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _UNKNOWN_ ; } @ Input ( ) get _UNKNOWN_ ( ) : number { return this . _UNKNOWN_ ; } set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . setStyle ( ) ; } setStyle ( ) { this . _renderer . setStyle ( this . _el , 's' , `template` ) ; this . _renderer . setStyle ( this . _el , 's' , `template` ) ; } _UNKNOWN_ ( ) { this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . removeClass ( this . _el , _UNKNOWN_ ) ; } ) ; this . _classList = [ ( ! this . _UNKNOWN_ ) && this . _UNKNOWN_ , this . _UNKNOWN_ && `template` , this . _UNKNOWN_ && this . _UNKNOWN_ && `template` , this . _UNKNOWN_ && this . _UNKNOWN_ && `template` ] . filter ( ( item ) => { return ! ! item ; } ) ; this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . addClass ( this . _el , _UNKNOWN_ ) ; } ) ; } constructor ( private _elementRef , private _renderer ) { this . _el = this . _elementRef . nativeElement ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O O O $any$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $string[]$ O O O O O O O O $HTMLElement$ O $complex$ O $string$ O O O $number$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O O O O O O O O O O $void$ O O O O O O O O O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $void$ O O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $void$ O O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O $number$ O O O O O O O O $number$ O O O $number$ O $number$ O O O O $number$ O $number$ O O O $void$ O O O O $void$ O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O $void$ O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O $string[]$ O O O O O O O O O O O $string$ O O O O O O O O O O O O O $any$ O O O O O O O O O $any$ O O O O $complex$ O O $string$ O O O O O O $string$ O O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O O $void$ O O O O O O
<s> import { Component , ElementRef , Host , HostBinding , Input , OnChanges , OnInit , Optional , 0 , SimpleChange , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export abstract class _UNKNOWN_ { span : number ; pull : number ; push : number ; offset : number ; order : number ; } @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit , OnChanges { _classList : string [ ] = [ ] ; _el : HTMLElement ; _UNKNOWN_ = 's' ; @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : number { return this . _UNKNOWN_ && this . _UNKNOWN_ . _UNKNOWN_ / 0 ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : number { return this . _UNKNOWN_ && this . _UNKNOWN_ . _UNKNOWN_ / 0 ; } @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) _UNKNOWN_ : number | _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : number | _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : number | _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : number | _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : number | _UNKNOWN_ ; _UNKNOWN_ ( ) { this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . removeClass ( this . _el , _UNKNOWN_ ) ; } ) ; this . _classList = [ _UNKNOWN_ ( this . _UNKNOWN_ ) && `template` , _UNKNOWN_ ( this . _UNKNOWN_ ) && `template` , _UNKNOWN_ ( this . _UNKNOWN_ ) && `template` , _UNKNOWN_ ( this . _UNKNOWN_ ) && `template` , _UNKNOWN_ ( this . _UNKNOWN_ ) && `template` , ... this . _UNKNOWN_ ( ) ] ; this . _classList = this . _classList . filter ( ( item ) => { return ! ! item ; } ) ; this . _classList . forEach ( _UNKNOWN_ => { this . _renderer . addClass ( this . _el , _UNKNOWN_ ) ; } ) ; } _UNKNOWN_ ( ) : string [ ] { const _UNKNOWN_ = [ 's' , 's' , 's' , 's' , 's' ] ; const _UNKNOWN_ : string [ ] = [ ] ; _UNKNOWN_ . forEach ( name => { const _UNKNOWN_ = name . replace ( 's' , 's' ) . toLowerCase ( ) ; if ( _UNKNOWN_ ( this [ name ] ) ) { if ( ( typeof ( this [ name ] ) === 's' ) || ( typeof ( this [ name ] ) === 's' ) ) { _UNKNOWN_ . push ( `template` ) ; } else { _UNKNOWN_ . push ( this [ name ] && _UNKNOWN_ ( this [ name ] . span ) && `template` ) ; _UNKNOWN_ . push ( this [ name ] && _UNKNOWN_ ( this [ name ] . pull ) && `template` ) ; _UNKNOWN_ . push ( this [ name ] && _UNKNOWN_ ( this [ name ] . push ) && `template` ) ; _UNKNOWN_ . push ( this [ name ] && _UNKNOWN_ ( this [ name ] . offset ) && `template` ) ; _UNKNOWN_ . push ( this [ name ] && _UNKNOWN_ ( this [ name ] . order ) && `template` ) ; } } } ) ; return _UNKNOWN_ ; } ngOnChanges ( changes : { [ propertyName ] : SimpleChange } ) { this . _UNKNOWN_ ( ) ; } constructor ( private _elementRef , @ Optional ( ) @ Host ( ) public _UNKNOWN_ , private _renderer ) { this . _el = this . _elementRef . nativeElement ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O O O $any$ O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $HTMLElement$ O $complex$ O $string$ O O O O $any$ O O O O $number$ O O O O O O O O $any$ O O O $any$ O $number$ O O O O O $any$ O O O O $number$ O O O O O O O O $any$ O O O $any$ O $number$ O O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $complex$ O O O $any$ O O $any$ O O $complex$ O O O $any$ O O $any$ O O $complex$ O O O $any$ O O $any$ O O $complex$ O O O $any$ O O $any$ O O $complex$ O O O $any$ O $void$ O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O O $string[]$ O O $boolean$ O O O $number$ O O O O $boolean$ O O O $number$ O O O O $boolean$ O O O $number$ O O O O $boolean$ O O O $number$ O O O O $boolean$ O O O $number$ O O O O O O O $string[]$ O O O O O O $string[]$ O O O $string[]$ O $complex$ O O $string$ O O O O O O $string$ O O O O O O $string[]$ O $void$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O $string$ O O O O O O $string[]$ O O O O O O O O $string[]$ O O O O O O O O O O O O O O $string[]$ O O O O O O O O $string[]$ O $void$ O $string$ O O O $string$ O $string$ O $complex$ O O O O O O $string$ O O O O O $boolean$ O O O $string$ O O O O O O O O O O O $string$ O O O O O O O O O O O $string$ O O O O O O O $string[]$ O $number$ O O O O O O O $string[]$ O $number$ O O O $string$ O O $boolean$ O O O $string$ O O $any$ O O O O O $string[]$ O $number$ O O O $string$ O O $boolean$ O O O $string$ O O $any$ O O O O O $string[]$ O $number$ O O O $string$ O O $boolean$ O O O $string$ O O $any$ O O O O O $string[]$ O $number$ O O O $string$ O O $boolean$ O O O $string$ O O $any$ O O O O O $string[]$ O $number$ O O O $string$ O O $boolean$ O O O $string$ O O $any$ O O O O O O O O O O O $string[]$ O O $void$ O $complex$ O O O $string$ O O $any$ O O O O O $void$ O O O O O O O $ElementRef$ O O $any$ O O O $any$ O O O $any$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O O $void$ O O O O O O
<s> import { Directive } from 's' ; import { _UNKNOWN_ } from 's' ; @ Directive ( { selector : 's' } ) export class _UNKNOWN_ extends _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { TAB } from 's' ; import { forwardRef , Component , ElementRef , EventEmitter , HostBinding , Input , Output , 0 , ViewChild , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements ControlValueAccessor { private _disabled = false ; _el : HTMLElement ; _value : number ; _size = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; _UNKNOWN_ ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; onChange : ( value ) => void = ( ) => null ; onTouched : ( ) => void = ( ) => null ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : number = - Infinity ; @ Input ( ) _UNKNOWN_ : number = Infinity ; @ Input ( ) _UNKNOWN_ = ( value ) => value ; @ Input ( ) _UNKNOWN_ = ( value ) => value ; @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _renderer . removeClass ( this . _el , `template` ) ; this . _size = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } [ value ] ; this . _renderer . addClass ( this . _el , `template` ) ; } get _UNKNOWN_ ( ) : string { return this . _size ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; const _UNKNOWN_ = value . toString ( ) ; if ( _UNKNOWN_ . indexOf ( 's' ) >= 0 ) { this . _UNKNOWN_ = parseInt ( _UNKNOWN_ . slice ( _UNKNOWN_ . indexOf ( 's' ) ) , 0 ) ; } if ( _UNKNOWN_ . indexOf ( 's' ) >= 0 ) { this . _UNKNOWN_ = _UNKNOWN_ . length - _UNKNOWN_ . indexOf ( 's' ) - 0 ; } this . _UNKNOWN_ = Math . pow ( 0 , this . _UNKNOWN_ ) ; } get _UNKNOWN_ ( ) : number { return this . _UNKNOWN_ ; } @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ | KeyboardEvent > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; _UNKNOWN_ ( $event ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; this . _UNKNOWN_ . nativeElement . focus ( ) ; if ( this . _UNKNOWN_ === undefined ) { this . _UNKNOWN_ = this . _UNKNOWN_ || 0 ; } if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ ( ( this . _UNKNOWN_ * this . _UNKNOWN_ + this . _UNKNOWN_ * this . _UNKNOWN_ ) / this . _UNKNOWN_ ) ; } } _UNKNOWN_ ( $event ) { $event . preventDefault ( ) ; $event . stopPropagation ( ) ; this . _UNKNOWN_ . nativeElement . focus ( ) ; if ( this . _UNKNOWN_ === undefined ) { this . _UNKNOWN_ = this . _UNKNOWN_ || 0 ; } if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ ( ( this . _UNKNOWN_ * this . _UNKNOWN_ - this . _UNKNOWN_ * this . _UNKNOWN_ ) / this . _UNKNOWN_ ) ; } } get _UNKNOWN_ ( ) : number { return this . _value ; } set _UNKNOWN_ ( value ) { this . _UNKNOWN_ ( value ) ; } _UNKNOWN_ ( $event ) { if ( this . _UNKNOWN_ && ! this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = false ; this . _UNKNOWN_ . emit ( $event ) ; } this . onTouched ( ) ; } _UNKNOWN_ ( $event ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = true ; this . _UNKNOWN_ . emit ( $event ) ; } } _UNKNOWN_ ( $event ) { if ( $event . keyCode === TAB && this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = false ; this . _UNKNOWN_ . emit ( $event ) ; } } _UNKNOWN_ ( value ? : number | string | undefined | null ) { return value === undefined || value === null || ( typeof value === 's' && this . _UNKNOWN_ . trim ( ) === 's' ) || ( typeof value === 's' && this . _UNKNOWN_ ( 's' ) === value ) ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ && this . _UNKNOWN_ ( this . _UNKNOWN_ ) ) { this . _UNKNOWN_ = undefined ; return ; } const _UNKNOWN_ = + this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; if ( this . _UNKNOWN_ ( _UNKNOWN_ ) ) { this . _UNKNOWN_ = _UNKNOWN_ ; } else { this . _UNKNOWN_ = this . _UNKNOWN_ ( this . _value ) ; this . _UNKNOWN_ . nativeElement . value = this . _UNKNOWN_ ( this . _value ) ; } } _UNKNOWN_ ( value ) { if ( this . _UNKNOWN_ && ( value === undefined ) ) { return value ; } else if ( value > this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } else if ( value < this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } else { return value ; } } _UNKNOWN_ ( value ) { return ! isNaN ( value ) && isFinite ( value ) ; } _UNKNOWN_ ( num ) { const input = num as number | string ; if ( isNaN ( num ) || input === 's' ) { return num ; } return Number ( Number ( num ) . toFixed ( this . _UNKNOWN_ ) ) ; } constructor ( private _elementRef , private _renderer ) { this . _el = this . _elementRef . nativeElement ; this . _renderer . addClass ( this . _el , `template` ) ; } writeValue ( value ) { this . _UNKNOWN_ ( value , false ) ; } registerOnChange ( fn : ( _ ) => void ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => void ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } private _UNKNOWN_ ( value , _UNKNOWN_ = true ) { const cacheValue = this . _value ; this . _value = this . _UNKNOWN_ ( value ) ; this . _UNKNOWN_ = this . _UNKNOWN_ ( this . _UNKNOWN_ ( this . _value ) ? this . _value : 's' ) ; this . _UNKNOWN_ . nativeElement . value = this . _UNKNOWN_ ; if ( _UNKNOWN_ && ( value !== cacheValue ) ) { this . onChange ( this . _value ) ; } this . _UNKNOWN_ = ( this . _UNKNOWN_ !== undefined ) && ! ( ( this . _UNKNOWN_ + this . _UNKNOWN_ ) <= this . _UNKNOWN_ ) ; this . _UNKNOWN_ = ( this . _UNKNOWN_ !== undefined ) && ! ( ( this . _UNKNOWN_ - this . _UNKNOWN_ ) >= this . _UNKNOWN_ ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O $any$ O $any$ O O $boolean$ O O O $HTMLElement$ O $complex$ O $number$ O O O $string$ O O O $string$ O O O $number$ O O O $number$ O O O $number$ O O O $any$ O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $void$ O O $number$ O O O O O O O O O $void$ O O O O O O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O O $string$ O O O O $any$ O O $number$ O O O O $number$ O O $any$ O O $number$ O O O $number$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $string$ O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O $string$ O O $string$ O O O $string$ O O O O $string$ O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $number$ O $number$ O O O O $number$ O $number$ O O $string$ O $number$ O $string$ O O O O O $string$ O $number$ O O O O O O O O O $number$ O $number$ O $string$ O $string$ O $string$ O $number$ O O O O O O O O O O O $string$ O $number$ O O O O O O O O O $number$ O $string$ O $number$ O $string$ O $number$ O O O O O O O O O $number$ O $Math$ O $number$ O O O O O $number$ O O O O $number$ O O O O O O O O $number$ O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $complex$ O O O $any$ O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $any$ O $any$ O $any$ O O O O O O O $number$ O $undefined$ O O O O $number$ O O O $number$ O O O O O O O O O $boolean$ O O O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O $number$ O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O $MouseEvent$ O $void$ O O O O O $any$ O $any$ O $any$ O O O O O O O $number$ O $undefined$ O O O O $number$ O O O $number$ O O O O O O O O O $boolean$ O O O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O $number$ O O O O O $number$ O O O O O O O O $number$ O O O $number$ O $number$ O O O O $void$ O $number$ O O O $void$ O $FocusEvent$ O O O O O O $boolean$ O O O O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O $any$ O $any$ O $FocusEvent$ O O O O O $void$ O O O O $void$ O $FocusEvent$ O O O O O O O $boolean$ O O O O $boolean$ O O O O O $any$ O $any$ O $FocusEvent$ O O O O $void$ O $KeyboardEvent$ O O O O $KeyboardEvent$ O $number$ O $any$ O O O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O $any$ O $any$ O $KeyboardEvent$ O O O O $boolean$ O $complex$ O O O O O O O O O O O O $complex$ O $undefined$ O $complex$ O O O O O $complex$ O O O O O $any$ O $any$ O O O O O O O O $complex$ O O O O O $any$ O O O O $string$ O O O $void$ O O O O O O O $boolean$ O O O $boolean$ O O O $any$ O O O O O $number$ O $undefined$ O O O O O $number$ O O O O $any$ O O O $any$ O O O O O O $boolean$ O $number$ O O O O O $number$ O $number$ O O O O O O $any$ O O O $any$ O O O $number$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O $number$ O O O O $number$ O $number$ O O O O O O $boolean$ O O $number$ O $undefined$ O O O O $number$ O O O O O $number$ O O O $number$ O O O O O $number$ O O O O O $number$ O O O $number$ O O O O O $number$ O O O O O $number$ O O O $boolean$ O $number$ O O O O $boolean$ O $number$ O O $boolean$ O $number$ O O O $number$ O $number$ O O O $complex$ O $number$ O O O O O O O $boolean$ O $number$ O O $complex$ O O O O O $number$ O O O $NumberConstructor$ O $NumberConstructor$ O $number$ O O $string$ O O O $number$ O O O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $HTMLElement$ O O O O O $void$ O $number$ O O O O $void$ O $number$ O O O O O $void$ O $void$ O O $number$ O O O O O O O $void$ O $void$ O O $void$ O $void$ O O O O O O O O O $void$ O $void$ O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $void$ O $number$ O $boolean$ O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O $number$ O O O O $any$ O O O $any$ O O O $boolean$ O O O $number$ O O O O $number$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $boolean$ O O $number$ O $number$ O O O O O $void$ O O O $number$ O O O O O $boolean$ O O O O $number$ O $undefined$ O O O O O O O $number$ O O O $number$ O O O O $number$ O O O O $boolean$ O O O O $number$ O $undefined$ O O O O O O O $number$ O O O $number$ O O O O $number$ O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule ] , declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { Component , HostBinding , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Component , HostBinding , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Component , HostBinding } from 's' ; @ Component ( { selector : 's' , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Component , HostBinding , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] , host : { 's' : 's' } } ) export class _UNKNOWN_ { @ HostBinding ( 's' ) _UNKNOWN_ = false ; } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O $complex$ O O O O O O O O O O $any$ O O $any$ O O O $boolean$ O O O O O
<s> import { Component , EventEmitter , Host , HostBinding , HostListener , Input , Optional , Output , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export type _UNKNOWN_ = 's' | 's' | 's' | 's' | 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ { private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = true ; _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , md : 's' , sm : 's' , xs : 's' , } ; _UNKNOWN_ = false ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Output ( ) _UNKNOWN_ = new EventEmitter ( ) ; @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ && ( this . _UNKNOWN_ === 0 ) ; } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : string { if ( this . _UNKNOWN_ ) { return `template` ; } else { return `template` ; } } @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : number | string { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } else { return this . _UNKNOWN_ ; } } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( e ) { if ( this . _UNKNOWN_ ) { const _UNKNOWN_ = window . matchMedia ( `template` ) . matches ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ . emit ( _UNKNOWN_ ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = ! this . _UNKNOWN_ ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } constructor ( @ Optional ( ) @ Host ( ) private _UNKNOWN_ ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . _UNKNOWN_ = true ; } if ( typeof window !== 's' ) { const _UNKNOWN_ = ( mediaQuery ) : MediaQueryList => { return { media : mediaQuery , matches : false , addListener ( ) { } , removeListener ( ) { } , } ; } ; window . matchMedia = window . matchMedia || _UNKNOWN_ ; } } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ && this . _UNKNOWN_ && ( this . _UNKNOWN_ === 0 ) && ( ( this . _UNKNOWN_ && this . _UNKNOWN_ ) || ( ! this . _UNKNOWN_ ) ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ && this . _UNKNOWN_ && ( this . _UNKNOWN_ !== 0 ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O O O O O O O O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $boolean$ O O O O $any$ O O $string$ O O O O $any$ O O $number$ O O O O $any$ O O $any$ O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $any$ O O $any$ O O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O $number$ O O O O O O $any$ O O O O $string$ O O O O O O O O O $boolean$ O O O O O O O O O O O O O O $any$ O O O O $complex$ O O O O O O O O O O O $boolean$ O O O O O $number$ O O O O O O O $string$ O O O O $any$ O O O O O O O $void$ O $UIEvent$ O O O O O O $any$ O O O $boolean$ O $complex$ O $any$ O O O O $boolean$ O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O O O $any$ O $any$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O O $any$ O $any$ O O O $boolean$ O O O O O O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O O O O $any$ O $boolean$ O O O O O O O $complex$ O O O O O $MediaQueryList$ O O $string$ O O $complex$ O O O O $string$ O $string$ O $false$ O O O $void$ O O O O O $void$ O O O O O O O O O $complex$ O $any$ O $complex$ O $any$ O $MediaQueryList$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O O O O $number$ O O O O O O O O $any$ O O O $boolean$ O O O O O O $any$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O O O O $number$ O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { InjectionToken } from 's' ; export interface _UNKNOWN_ { _UNKNOWN_ ? : number ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : number ; [ index ] : any ; } export const _UNKNOWN_ = new InjectionToken < _UNKNOWN_ > ( 's' ) ; export const _UNKNOWN_ = new InjectionToken < _UNKNOWN_ > ( 's' ) ; export const _UNKNOWN_ = { provide : _UNKNOWN_ , useValue : { _UNKNOWN_ : 0 , _UNKNOWN_ : true , _UNKNOWN_ : true , _UNKNOWN_ : 0 , } } ; </s>	O O O $any$ O O O O O O $any$ O $number$ O O O O $boolean$ O O O O $boolean$ O O O O $number$ O O O O O $string$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O O $complex$ O O $any$ O $any$ O $complex$ O O $number$ O O O $boolean$ O O O $boolean$ O O O $number$ O O O O O O O
<s> export interface _UNKNOWN_ { _UNKNOWN_ ? : number ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; } export interface _UNKNOWN_ { html ? : string ; type ? : 's' | 's' | 's' | 's' | 's' | string ; content ? : string ; } export interface _UNKNOWN_ extends _UNKNOWN_ { messageId : string ; state ? : 's' | 's' ; options ? : _UNKNOWN_ ; createdAt : Date ; } </s>	O O O $any$ O $number$ O O O O $boolean$ O O O O $boolean$ O O O O O O O $any$ O $string$ O O O O $string$ O O O O O O O O O O O O O O $string$ O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O $any$ O O $any$ O $Date$ O $DateConstructor$ O O O
<s> import { Component , Inject , OnInit , Optional , ViewEncapsulation } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { messages : _UNKNOWN_ [ ] = [ ] ; config : _UNKNOWN_ ; constructor ( @ Optional ( ) @ Inject ( _UNKNOWN_ ) defaultConfig , @ Optional ( ) @ Inject ( _UNKNOWN_ ) config ) { this . config = { ... defaultConfig , ... config } ; } _UNKNOWN_ ( message ) { if ( this . messages . length >= this . config . _UNKNOWN_ ) { this . messages . splice ( 0 , 0 ) ; } message . options = this . _UNKNOWN_ ( message . options ) ; this . messages . push ( message ) ; } _UNKNOWN_ ( messageId ) { this . messages . some ( ( message , index ) => { if ( message . messageId === messageId ) { this . messages . splice ( index , 0 ) ; return true ; } } ) ; } _UNKNOWN_ ( ) { this . messages = [ ] ; } protected _UNKNOWN_ ( options ) { const defaultOptions = { _UNKNOWN_ : this . config . _UNKNOWN_ , _UNKNOWN_ : this . config . _UNKNOWN_ , _UNKNOWN_ : this . config . _UNKNOWN_ } ; return { ... defaultOptions , ... options } ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O $any$ O O O $void$ O $any$ O O O O O O $any$ O $number$ O O O $any$ O $number$ O O O O $any$ O $complex$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $number$ O $any$ O O O $void$ O $string$ O O O O $any$ O $boolean$ O O $any$ O $number$ O O O O O $any$ O $string$ O $string$ O O O O $any$ O $complex$ O $number$ O O O O O O O O O O O O $void$ O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O $number$ O O O $any$ O $number$ O $boolean$ O O O $any$ O $boolean$ O $boolean$ O O O $any$ O $boolean$ O O O O O $any$ O O $any$ O O O O O
<s> import { animate , state , style , transition , trigger , } from 's' ; import { Component , Input , OnDestroy , OnInit , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ trigger ( 's' , [ state ( 's' , style ( { opacity : 0 , transform : 's' } ) ) , transition ( 's' , [ style ( { opacity : 0 , transform : 's' } ) , animate ( 's' ) ] ) , state ( 's' , style ( { opacity : 0 , transform : 's' } ) ) , transition ( 's' , [ style ( { opacity : 0 , transform : 's' } ) , animate ( 's' ) ] ) , ] ) ] , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit , OnDestroy { @ Input ( ) _UNKNOWN_ : _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : number ; protected _options : _UNKNOWN_ ; private _UNKNOWN_ : boolean ; private _UNKNOWN_ : number = null ; private _UNKNOWN_ : number ; private _UNKNOWN_ : number ; constructor ( private _UNKNOWN_ ) { } ngOnInit ( ) { this . _options = this . _UNKNOWN_ . options ; if ( this . _options . _UNKNOWN_ ) { this . _UNKNOWN_ . state = 's' ; } this . _UNKNOWN_ = this . _options . _UNKNOWN_ > 0 ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } } ngOnDestroy ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ && this . _options . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ && this . _options . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } protected _UNKNOWN_ ( ) { if ( this . _options . _UNKNOWN_ ) { this . _UNKNOWN_ . state = 's' ; setTimeout ( ( ) => this . _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ . messageId ) , 0 ) ; } else { this . _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ . messageId ) ; } } private _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _options . _UNKNOWN_ ; this . _UNKNOWN_ = Date . now ( ) ; } private _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ -= Date . now ( ) - this . _UNKNOWN_ ; } } private _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ > 0 ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = window . setTimeout ( ( ) => this . _UNKNOWN_ ( ) , this . _UNKNOWN_ ) ; this . _UNKNOWN_ = Date . now ( ) ; } else { this . _UNKNOWN_ ( ) ; } } private _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ !== null ) { window . clearTimeout ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ = null ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O O O $any$ O O O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O O O $any$ O O O O O O O O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O O $number$ O O O O $any$ O $any$ O O $boolean$ O O O O $number$ O O O O O O $number$ O O O O $number$ O O O O O O $any$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $boolean$ O O O O $any$ O O O O O O O O $boolean$ O O O $any$ O $number$ O O O O O O O $boolean$ O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O O O $boolean$ O O O O $void$ O O O O O $void$ O O O O O O O $boolean$ O O O $any$ O $boolean$ O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O O O $boolean$ O O O $any$ O $boolean$ O O O O $void$ O O O O O O $void$ O O O O O O O $any$ O $boolean$ O O O O $any$ O O O O O $number$ O O O O O O $any$ O $void$ O O O $any$ O $string$ O O O O O O O O O O $any$ O $void$ O O O $any$ O $string$ O O O O O $void$ O O O O O $number$ O O O $any$ O $number$ O O O $number$ O $DateConstructor$ O $number$ O O O O O $void$ O O O O O O O $boolean$ O O O O $number$ O $DateConstructor$ O $number$ O O O O O $number$ O O O O $void$ O O O O O O O $number$ O O O O O O $void$ O O O O O $number$ O $complex$ O $number)$ O O O O O O $void$ O O O O O $number$ O O O O $number$ O $DateConstructor$ O $number$ O O O O O O O O $void$ O O O O O O $void$ O O O O O O O $number$ O O O O $complex$ O $void)$ O O O $number$ O O O O $number$ O O O O O O O
<s> import { OverlayModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const providers = [ _UNKNOWN_ ] ; @ NgModule ( { imports : [ CommonModule , OverlayModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , providers , entryComponents : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $complex$ O O O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { EventEmitter } from 's' ; export interface Position { x : number ; y : number ; } export class _UNKNOWN_ { counter = 0 ; _UNKNOWN_ : Position = { x : 0 , y : 0 } ; _UNKNOWN_ : EventEmitter < string > = new EventEmitter ( ) ; _UNKNOWN_ ( ) { return ++ this . counter ; } _UNKNOWN_ ( status ) { document . body . style . overflow = status ? 's' : 's' ; } _UNKNOWN_ ( ) { document . addEventListener ( 's' , ( e ) => { this . _UNKNOWN_ = { x : e . clientX , y : e . clientY } ; this . _UNKNOWN_ . emit ( 's' ) ; } ) ; } constructor ( ) { this . _UNKNOWN_ ( ) ; } } export default new _UNKNOWN_ ( ) ; </s>	O O O $any$ O O O O O O $any$ O $number$ O O O $number$ O O O O O O $any$ O $number$ O O O $Position$ O $any$ O O $number$ O O O $number$ O O O O $any$ O $any$ O O O O O $any$ O O O $number$ O O O O O O O $number$ O O $void$ O $boolean$ O O $Document$ O $HTMLElement$ O $CSSStyleDeclaration$ O $string$ O $boolean$ O O O O O O $void$ O O O $Document$ O O O O O O $MouseEvent$ O O O O O $Position$ O O $number$ O $MouseEvent$ O $number$ O $number$ O $MouseEvent$ O $number$ O O O O $any$ O $any$ O O O O O O O O O O O O O O $void$ O O O O O O O O $any$ O O O O
<s> import { Injectable } from 's' ; import { Subject } from 's' ; const enum _UNKNOWN_ { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , onDestroy } @ Injectable ( ) export class _UNKNOWN_ extends Subject < any > { modalId : string ; _UNKNOWN_ = { } ; destroy ( type = 's' ) { if ( ! this . isStopped && ! this . closed ) { this . next ( type ) ; } } on ( eventType , cb : ( ) => void ) { if ( this . _UNKNOWN_ [ eventType ] ) { this . _UNKNOWN_ [ eventType ] . push ( cb ) ; } else { this . _UNKNOWN_ [ eventType ] = [ cb ] ; } } constructor ( ) { super ( ) ; this . subscribe ( ( value ) => { const _UNKNOWN_ < ( ) => void > = this . _UNKNOWN_ [ value ] || [ ] ; _UNKNOWN_ . forEach ( cb => { if ( cb ) { cb ( ) ; } } ) ; } ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O $string$ O O O ${}$ O O O O $void$ O $any$ O O O O O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $void$ O $string$ O $void$ O O O O O O O O O O O ${}$ O $string$ O O O O O ${}$ O $string$ O O $any$ O $void$ O O O O O O O ${}$ O $string$ O O O $void$ O O O O O O O O O O O O O O $any$ O O $string$ O O O O $Array$ O O O O O O O O O ${}$ O $string$ O O O O O $void)[]$ O $void$ O $void$ O O O O $void$ O O $void$ O O O O O O O O O O O O O
<s> import { Component , ElementRef , HostListener , Input , OnDestroy , OnInit , TemplateRef , ViewChild , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import _UNKNOWN_ from 's' ; import { _UNKNOWN_ } from 's' ; interface Position { x : number ; y : number ; } @ Component ( { selector : 's' , _UNKNOWN_ : [ _UNKNOWN_ ] , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit , OnDestroy { private _UNKNOWN_ = true ; _UNKNOWN_ = false ; _visible = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ ; _UNKNOWN_ ; _UNKNOWN_ ; _width = 's' ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 's' ; _title = 's' ; _UNKNOWN_ : TemplateRef < void > ; _content = 's' ; _UNKNOWN_ : TemplateRef < void > ; _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; @ ViewChild ( 's' ) private contentEl : ElementRef ; @ Input ( ) set _UNKNOWN_ ( value ) { const visible = _UNKNOWN_ ( value ) ; if ( this . _visible === visible ) { return ; } if ( visible ) { this . _UNKNOWN_ ( 's' ) ; this . subject . next ( 's' ) ; setTimeout ( ( ) => { this . _UNKNOWN_ ( { x : _UNKNOWN_ . _UNKNOWN_ . x || 0 , y : _UNKNOWN_ . _UNKNOWN_ . y || 0 } ) ; } , 0 ) ; } else { this . _UNKNOWN_ ( 's' ) ; this . subject . next ( 's' ) ; } this . _visible = visible ; _UNKNOWN_ . _UNKNOWN_ ( visible ) ; } get _UNKNOWN_ ( ) : boolean { return this . _visible ; } @ Input ( ) set _UNKNOWN_ ( value : number | string ) { this . _width = typeof value === 's' ? value + 's' : value ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ Input ( ) set _UNKNOWN_ ( value : string | TemplateRef < void > ) { if ( value instanceof TemplateRef ) { this . _UNKNOWN_ = value ; } else { this . _title = value ; } } @ Input ( ) set _UNKNOWN_ ( value : string | TemplateRef < void > ) { if ( value instanceof TemplateRef ) { this . _UNKNOWN_ = value ; } else { this . _content = value ; } } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ Input ( ) set _UNKNOWN_ ( value ) { if ( value ) { this . _UNKNOWN_ = `template` ; } } @ Input ( ) set _UNKNOWN_ ( value ) { if ( value ) { this . _UNKNOWN_ = `template` ; } } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( e ) { if ( this . _UNKNOWN_ ) { this . subject . next ( 's' ) ; } } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( e ) { this . subject . next ( 's' ) ; } _UNKNOWN_ ( origin ? : { x : number , y : number } ) { const el = this . contentEl . nativeElement ; const transformOrigin = origin ? `template` : 's' ; this . _UNKNOWN_ = { 's' : this . _width , 's' : transformOrigin } ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ `template` ] : true , [ `template` ] : ! this . _visible && ! this . _UNKNOWN_ , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' } ; this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ this . _UNKNOWN_ ] : true , [ this . _UNKNOWN_ ] : true , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' } ; } _UNKNOWN_ ( status ) { this . _UNKNOWN_ = status ; this . _UNKNOWN_ ( ) ; setTimeout ( _ => { this . _UNKNOWN_ = 's' ; this . _UNKNOWN_ ( ) ; this . subject . next ( status === 's' ? 's' : 's' ) ; if ( status === 's' ) { this . contentEl . nativeElement . parentNode . focus ( ) ; } } , 0 ) ; } _UNKNOWN_ ( e ) { if ( this . _UNKNOWN_ && ( e . target as HTMLElement ) . getAttribute ( 's' ) === 's' ) { this . subject . next ( 's' ) ; } } constructor ( public subject , private _UNKNOWN_ ) { } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } ngOnDestroy ( ) { if ( this . _visible ) { _UNKNOWN_ . _UNKNOWN_ ( false ) ; } this . subject . next ( 's' ) ; this . subject . unsubscribe ( ) ; this . subject = null ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $boolean$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $number$ O O O $number$ O O O O O $any$ O O $string$ O O O $complex$ O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $number$ O O O $string$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $string$ O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O $any$ O O O O $any$ O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O $boolean$ O O O O O O $boolean$ O $boolean$ O O O O O O O $boolean$ O O O O $void$ O O O O O O $any$ O $any$ O O O O $number$ O O O O O O O $void$ O O $number$ O $any$ O $Position$ O $number$ O O O $number$ O $any$ O $Position$ O $number$ O O O O O O O O O O O O O O O $void$ O O O O O O $any$ O $any$ O O O O O O O $boolean$ O $boolean$ O $any$ O $void$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $complex$ O $complex$ O O O O O O O O $string$ O O $complex$ O O O $number$ O O O $string$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $any$ O O O $number$ O $number$ O O O O $number$ O $number$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $string$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $string$ O $any$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O O O O $string$ O O O O O O $any$ O O O $string$ O $string$ O O O O $string$ O O O O $string$ O O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $any$ O O O O O O O $void$ O $KeyboardEvent$ O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $void$ O $KeyboardEvent$ O O O O $any$ O $any$ O O O O O $void$ O $complex$ O O O $number$ O O O $number$ O O O O O O $any$ O O O $any$ O $any$ O O $string$ O $complex$ O O O O O O O $any$ O O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O O O O O O O O O O O O O O O $boolean$ O O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O O O O $any$ O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O O O $void$ O $string$ O O O O $string$ O $string$ O O O $void$ O O O $number$ O $any$ O O O O $string$ O O O O O $void$ O O O O O $any$ O $any$ O $string$ O O O O O O O O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O $MouseEvent$ O O O O O O $boolean$ O O $MouseEvent$ O $EventTarget$ O $complex$ O O $string$ O O O O O O O O O $any$ O $any$ O O O O O O O O O $any$ O O $any$ O O O $void$ O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O O O $boolean$ O O $any$ O $void$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O
<s> import { AfterViewInit , Component , ComponentFactory , ComponentRef , ElementRef , EventEmitter , HostListener , Inject , Input , OnDestroy , OnInit , Output , TemplateRef , ViewChild , ViewContainerRef , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import _UNKNOWN_ from 's' ; import { _UNKNOWN_ } from 's' ; interface Position { x : number ; y : number ; } @ Component ( { selector : 's' , _UNKNOWN_ : [ _UNKNOWN_ ] , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit , OnDestroy , AfterViewInit { private _UNKNOWN_ = false ; private _UNKNOWN_ = true ; _UNKNOWN_ = false ; _UNKNOWN_ = true ; _visible = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ ; _UNKNOWN_ ; _UNKNOWN_ ; _width = 's' ; _UNKNOWN_ = 0 ; _title = 's' ; _UNKNOWN_ : TemplateRef < void > ; _content = 's' ; _UNKNOWN_ : TemplateRef < void > ; _UNKNOWN_ : TemplateRef < void > ; _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; _UNKNOWN_ : object = { } ; _UNKNOWN_ = `template` ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ : ComponentFactory < void > ; _UNKNOWN_ : object = { } ; modalId = `template` ; @ ViewChild ( 's' ) contentEl : ElementRef ; @ ViewChild ( 's' , { read : ViewContainerRef } ) _UNKNOWN_ : ViewContainerRef ; @ Input ( ) set _UNKNOWN_ ( value ) { const visible = _UNKNOWN_ ( value ) ; if ( this . _visible === visible ) { return ; } if ( visible ) { this . _UNKNOWN_ ( 's' ) ; this . subject . next ( 's' ) ; setTimeout ( ( ) => { this . _UNKNOWN_ ( { x : _UNKNOWN_ . _UNKNOWN_ . x || 0 , y : _UNKNOWN_ . _UNKNOWN_ . y || 0 } ) ; } ) ; } else { this . _UNKNOWN_ ( 's' ) ; this . subject . next ( 's' ) ; } this . _visible = visible ; this . _UNKNOWN_ . emit ( this . _visible ) ; _UNKNOWN_ . _UNKNOWN_ ( visible ) ; } get _UNKNOWN_ ( ) : boolean { return this . _visible ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ Input ( ) set _UNKNOWN_ ( value : string | number ) { this . _width = typeof value === 's' ? value + 's' : value ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ Input ( ) set _UNKNOWN_ ( value : string | TemplateRef < void > ) { if ( value instanceof TemplateRef ) { this . _UNKNOWN_ = value ; } else { this . _title = value ; } } @ Input ( ) set _UNKNOWN_ ( value : string | TemplateRef < void > | ComponentFactory < void > ) { if ( value instanceof ComponentFactory ) { if ( this . _UNKNOWN_ ) { const compRef < void > = this . _UNKNOWN_ . createComponent ( value , null , this . _UNKNOWN_ . injector ) ; Object . assign ( compRef . instance , this . _UNKNOWN_ ) ; } else { this . _UNKNOWN_ = value ; } } else if ( value instanceof TemplateRef ) { this . _UNKNOWN_ = value ; } else { this . _content = value ; } } @ Input ( ) set _UNKNOWN_ ( value : TemplateRef < void > | boolean ) { if ( value instanceof TemplateRef ) { this . _UNKNOWN_ = value ; } else { this . _UNKNOWN_ = ! _UNKNOWN_ ( value ) ; } } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ Input ( ) set _UNKNOWN_ ( value ) { if ( value ) { this . _UNKNOWN_ = `template` ; } } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ Output ( ) _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < MouseEvent > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < MouseEvent | KeyboardEvent > = new EventEmitter ( ) ; @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( e ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( e ) ; } } _UNKNOWN_ ( origin ? : { x : number , y : number } ) { const el = this . contentEl . nativeElement ; const transformOrigin = origin ? `template` : 's' ; this . _UNKNOWN_ = { ... { 's' : this . _width , 's' : transformOrigin } , ... this . _UNKNOWN_ } ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ `template` ] : true , [ `template` ] : ! this . _visible && ! this . _UNKNOWN_ , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' } ; this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' , 's' : this . _UNKNOWN_ === 's' } ; } _UNKNOWN_ ( status ) { this . _UNKNOWN_ = status ; this . _UNKNOWN_ ( ) ; setTimeout ( _ => { this . _UNKNOWN_ = 's' ; this . _UNKNOWN_ ( ) ; this . subject . next ( status === 's' ? 's' : 's' ) ; if ( status === 's' ) { this . contentEl . nativeElement . parentNode . focus ( ) ; } } , 0 ) ; } _UNKNOWN_ ( e ) { if ( this . _UNKNOWN_ && ( e . target as HTMLElement ) . getAttribute ( 's' ) === 's' ) { this . _UNKNOWN_ ( e ) ; } } _UNKNOWN_ ( loading ) { this . _UNKNOWN_ = loading ; } open ( ) { this . _UNKNOWN_ = true ; } close ( ) { this . _UNKNOWN_ = false ; } _UNKNOWN_ ( e ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . emit ( e ) ; } else { this . _UNKNOWN_ = false ; } this . subject . next ( 's' ) ; } _UNKNOWN_ ( e : MouseEvent | KeyboardEvent ) { this . _UNKNOWN_ . emit ( e ) ; this . subject . next ( 's' ) ; } constructor ( public subject , private _UNKNOWN_ , private _UNKNOWN_ ) { this . subject . modalId = this . modalId ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } ngAfterViewInit ( ) { if ( this . _UNKNOWN_ ) { const compRef < void > = this . _UNKNOWN_ . createComponent ( this . _UNKNOWN_ , null , this . _UNKNOWN_ . injector ) ; Object . assign ( compRef . instance , this . _UNKNOWN_ ) ; } } ngOnDestroy ( ) { if ( this . _visible ) { _UNKNOWN_ . _UNKNOWN_ ( false ) ; } this . subject . next ( 's' ) ; this . subject . unsubscribe ( ) ; this . subject = null ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $boolean$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $number$ O O O $number$ O O O O O $any$ O O $string$ O O O $complex$ O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $number$ O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $string$ O O O $any$ O $string$ O O O O $string$ O O O $any$ O $string$ O O O O $object$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $any$ O $any$ O O O O $object$ O O O O O O $string$ O O O O $any$ O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O $boolean$ O O O O O O $boolean$ O $boolean$ O O O O O O O $boolean$ O O O O $void$ O O O O O O $any$ O $any$ O O O O $number$ O O O O O O O $void$ O O $number$ O $any$ O $Position$ O $number$ O O O $number$ O $any$ O $Position$ O $number$ O O O O O O O O O O O O O $void$ O O O O O O $any$ O $any$ O O O O O O O $boolean$ O $boolean$ O O O $any$ O $any$ O O O $boolean$ O O $any$ O $void$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $any$ O O O $complex$ O $complex$ O O O O O O O O $string$ O O $complex$ O O O $number$ O O O $string$ O O O $any$ O O O $number$ O $number$ O O O O $number$ O $number$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $string$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O $ComponentRef$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $ObjectConstructor$ O O O $any$ O $any$ O O O $object$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $string$ O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $boolean$ O O $boolean$ O $any$ O O O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $any$ O O O $object$ O $object$ O O O O $object$ O $object$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O O O O $string$ O O O O O O $any$ O O O $object$ O $object$ O O O O $object$ O $object$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $complex$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $complex$ O $complex$ O O O $any$ O O O O $any$ O O O O O O O $void$ O $KeyboardEvent$ O O O O O O $boolean$ O O O O $void$ O $KeyboardEvent$ O O O O $void$ O $complex$ O O O $number$ O O O $number$ O O O O O O $any$ O O O $any$ O $any$ O O $string$ O $complex$ O O O O O O O $any$ O O O O O O O O $string$ O O O $string$ O O O O O $object$ O O O $void$ O O O O O $any$ O O O O O O O O O O O O O O O $boolean$ O O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O O O O $any$ O O O O O $string$ O O O O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O O O $void$ O $string$ O O O O $string$ O $string$ O O O $void$ O O O $number$ O $any$ O O O O $string$ O O O O O $void$ O O O O O $any$ O $any$ O $string$ O O O O O O O O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O $MouseEvent$ O O O O O O $boolean$ O O $MouseEvent$ O $EventTarget$ O $complex$ O O $string$ O O O O O O O O O $void$ O $MouseEvent$ O O O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O $void$ O O O O O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O $void$ O $MouseEvent$ O O O O O O $any$ O O O O $any$ O $any$ O $MouseEvent$ O O O O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O $void$ O $complex$ O $complex$ O $complex$ O O O O $any$ O $any$ O $complex$ O O O O $any$ O $any$ O O O O O O O O $any$ O O $ViewContainerRef$ O O $any$ O O O O $any$ O $string$ O O O $string$ O O $void$ O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O O O $any$ O O O $ComponentRef$ O O O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O $ObjectConstructor$ O O O $any$ O $any$ O O O $object$ O O O O $void$ O O O O O O O $boolean$ O O $any$ O $void$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O
<s> import { Injectable , TemplateRef , Type , } from 's' ; export class _UNKNOWN_ { visible = false ; title : string | TemplateRef < void > ; content : string | TemplateRef < void > | Type < void > ; class : string ; width : string | number ; zIndex : number ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; style : object ; _UNKNOWN_ : ( ) => void ; _UNKNOWN_ : ( ) => void ; } export class _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ : string ; footer : TemplateRef < void > | boolean ; _UNKNOWN_ : object ; } export class _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ : string ; _UNKNOWN_ : string ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $boolean$ O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O O O $string$ O O O $complex$ O O O O O $number$ O O O $string$ O O O $string$ O O O $object$ O O O $void$ O O O O O O $void$ O O O O O O O O O $any$ O $any$ O $boolean$ O O O $boolean$ O O O $string$ O O O $any$ O $any$ O O O O O O $object$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O O O
<s> import { ApplicationRef , ComponentFactory , ComponentFactoryResolver , ComponentRef , Injectable , _UNKNOWN_ , TemplateRef , Type , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export interface ConfigInterface { type ? : string ; title ? : string ; content ? : string | Type < any > ; width ? : string | number ; zIndex ? : number ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; style ? : object ; class ? : string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string ; footer ? : TemplateRef < void > | boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : ( ) => void ; _UNKNOWN_ ? : ( ) => void ; _UNKNOWN_ ? : object ; _UNKNOWN_ ? : _UNKNOWN_ < void > ; } @ Injectable ( ) export class _UNKNOWN_ { _UNKNOWN_ : ComponentFactory < _UNKNOWN_ > ; _UNKNOWN_ : ComponentFactory < _UNKNOWN_ > ; constructor ( private _UNKNOWN_ , private _UNKNOWN_ , private _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ . resolveComponentFactory ( _UNKNOWN_ ) ; this . _UNKNOWN_ = this . _UNKNOWN_ . resolveComponentFactory ( _UNKNOWN_ ) ; } _UNKNOWN_ ( _UNKNOWN_ , options = { } as any ) { const props = { } ; const _UNKNOWN_ : string [ ] = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ; const config = { ... options , ... _UNKNOWN_ } ; _UNKNOWN_ . forEach ( key => { if ( config [ key ] !== undefined ) { const _UNKNOWN_ = 's' + key . replace ( "s" , ( a ) => { return a . _UNKNOWN_ ( ) ; } ) ; props [ _UNKNOWN_ ] = config [ key ] ; } } ) ; const _UNKNOWN_ = ! ! config [ 's' ] ; props [ 's' ] = this . _UNKNOWN_ ( props [ 's' ] , _UNKNOWN_ ) ; props [ 's' ] = this . _UNKNOWN_ ( props [ 's' ] ) ; delete props [ 's' ] ; delete props [ 's' ] ; return props ; } _UNKNOWN_ ( fn ? : ( ) => Promise < void > | void , _UNKNOWN_ = false ) { return ( _UNKNOWN_ , _instance ) => { if ( _UNKNOWN_ ) { _instance . _UNKNOWN_ = true ; } if ( fn ) { const ret = fn ( ) ; if ( ! ret ) { _UNKNOWN_ ( ) ; } else if ( ret . then ) { ret . then ( _UNKNOWN_ ) ; } } else { _UNKNOWN_ ( ) ; } } ; } _UNKNOWN_ ( props , factory < _UNKNOWN_ | _UNKNOWN_ > ) { document . body . insertBefore ( document . createElement ( factory . selector ) , document . body . firstChild ) ; let _UNKNOWN_ < _UNKNOWN_ | _UNKNOWN_ > ; let compRef < _UNKNOWN_ | _UNKNOWN_ > ; let instance : _UNKNOWN_ | _UNKNOWN_ ; let subject ; if ( props [ 's' ] instanceof Type ) { _UNKNOWN_ = this . _UNKNOWN_ . resolveComponentFactory ( props [ 's' ] ) ; props [ 's' ] = _UNKNOWN_ ; } compRef = this . _UNKNOWN_ . bootstrap ( factory ) ; instance = compRef . instance ; subject = instance . subject ; [ 's' , 's' ] . forEach ( ( eventType ) => { subject . on ( eventType , ( ) => { const eventHandler = props [ eventType ] ; if ( eventHandler ) { eventHandler ( ( ) => { instance . _UNKNOWN_ = false ; setTimeout ( ( ) => { compRef . destroy ( ) ; } , 0 ) ; } , instance ) ; } } ) ; } ) ; Object . assign ( instance , props , { _UNKNOWN_ : true } ) ; return subject ; } open ( config ) { const options = new _UNKNOWN_ ( ) ; const props = this . _UNKNOWN_ ( config , options ) ; return this . _UNKNOWN_ ( props , this . _UNKNOWN_ ) ; } _UNKNOWN_ ( config ) { const options = new _UNKNOWN_ ( ) ; const props = this . _UNKNOWN_ ( config , options ) ; return this . _UNKNOWN_ ( props , this . _UNKNOWN_ ) ; } info ( props ) { const config = { ... { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } , ... props } ; return this . _UNKNOWN_ ( config ) ; } success ( props ) { const config = { ... { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } , ... props } ; return this . _UNKNOWN_ ( config ) ; } error ( props ) { const config = { ... { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } , ... props } ; return this . _UNKNOWN_ ( config ) ; } warning ( props ) { const config = { ... { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } , ... props } ; return this . _UNKNOWN_ ( config ) ; } confirm ( props ) { const config = { ... { _UNKNOWN_ : 's' , _UNKNOWN_ : this . _UNKNOWN_ . translate ( 's' ) , _UNKNOWN_ : this . _UNKNOWN_ . translate ( 's' ) } , ... props } ; return this . _UNKNOWN_ ( config ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $string$ O O O O $string$ O O O O $any$ O O O O $any$ O O O O $complex$ O O O O O O $number$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $object$ O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $any$ O O $any$ O O O O O O $boolean$ O O O O $void$ O O O O O O O $void$ O O O O O O O $object$ O O O O $any$ O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $ApplicationRef$ O O $ComponentFactoryResolver$ O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O ${}$ O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O $any$ O O $string[]$ O $void$ O $string$ O O O O O O $string$ O O $undefined$ O O O $string$ O O O $string$ O $complex$ O O O O $string$ O O O O $string$ O $string$ O O O O O O ${}$ O $string$ O O O O $string$ O O O O O O O $boolean$ O O O O O O O O ${}$ O O O O O O $any$ O ${}$ O O O O $boolean$ O O ${}$ O O O O O O $any$ O ${}$ O O O O O O ${}$ O O O O O ${}$ O O O O O ${}$ O O $any$ O $complex$ O O O O O $PromiseConstructor$ O O O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O $boolean$ O O $any$ O $any$ O O O O O O $complex$ O O O $complex$ O $complex$ O O O O O O $complex$ O O $any$ O O O O O O O $Promise<void>$ O O O O $Promise<void>$ O O O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $Document$ O $HTMLElement$ O $T$ O $Document$ O O O $any$ O $any$ O O $Document$ O $HTMLElement$ O $ChildNode$ O O O $any$ O $any$ O $any$ O O O $ComponentRef$ O $any$ O $any$ O O O $complex$ O $any$ O $any$ O O $any$ O O O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $complex$ O $any$ O $any$ O $any$ O $complex$ O $any$ O O O O O O O $void$ O O $string$ O O O $any$ O $void$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O $any$ O O $any$ O O O O O $complex$ O $boolean$ O O O $number$ O O O O O $any$ O $any$ O O O O O O O O O O $complex$ O O O O O O O O O $ObjectConstructor$ O O O $complex$ O $any$ O O $true$ O O O O O O $any$ O O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $string$ O O O $string$ O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $string$ O O O $string$ O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $string$ O O O $string$ O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $string$ O O O $string$ O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $string$ O O O $string$ O O O $any$ O $string$ O O O O $string$ O O O $any$ O $string$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { entryComponents : [ _UNKNOWN_ , _UNKNOWN_ ] , providers : [ _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { InjectionToken } from 's' ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; } export const _UNKNOWN_ = new InjectionToken < _UNKNOWN_ > ( 's' ) ; export const _UNKNOWN_ = new InjectionToken < _UNKNOWN_ > ( 's' ) ; export const _UNKNOWN_ = { provide : _UNKNOWN_ , useValue : { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : true , _UNKNOWN_ : true } } ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $string$ O O O O $string$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O O $complex$ O O $any$ O $any$ O $complex$ O O $string$ O O O $string$ O O O $number$ O O O $number$ O O O $boolean$ O O O $boolean$ O O O O O O
<s> import { Component , Inject , Optional , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( @ Optional ( ) @ Inject ( _UNKNOWN_ ) defaultConfig , @ Optional ( ) @ Inject ( _UNKNOWN_ ) config ) { super ( defaultConfig , config ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O
<s> import { animate , state , style , transition , trigger , } from 's' ; import { Component , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ trigger ( 's' , [ state ( 's' , style ( { opacity : 0 , transform : 's' } ) ) , transition ( 's' , [ style ( { opacity : 0 , transform : 's' } ) , animate ( 's' ) ] ) , state ( 's' , style ( { opacity : 0 , transform : 's' } ) ) , transition ( 's' , [ style ( { opacity : 0 , transform : 's' } ) , animate ( 's' ) ] ) , ] ) ] , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( container ) { super ( container ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O O O $any$ O O O O O O $any$ O O O $any$ O O $number$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $number$ O O O $string$ O O O O O $any$ O O O O O O O O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O O O $void$ O O O O O $void$ O O O O O O
<s> import { OverlayModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , OverlayModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , providers : [ _UNKNOWN_ ] , entryComponents : [ _UNKNOWN_ ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $complex$ O O $complex$ O O $any$ O O O O O O $any$ O O O
<s> import { Component , ElementRef , EventEmitter , Input , Output , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ { private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; _el : HTMLElement ; _current = 0 ; _total : number ; _pageSize = 0 ; _UNKNOWN_ = 0 ; _UNKNOWN_ = Infinity ; _UNKNOWN_ = [ ] ; _options = [ 0 , 0 , 0 , 0 , 0 ] ; @ Input ( ) _UNKNOWN_ = false ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : string ; @ Output ( ) _UNKNOWN_ : EventEmitter < number > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < number > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < number > = new EventEmitter ( ) ; _UNKNOWN_ ( pageSize ) { this . _UNKNOWN_ ( this . _current - Math . round ( pageSize / 0 ) ) ; } _UNKNOWN_ ( pageSize ) { this . _UNKNOWN_ ( this . _current + Math . round ( pageSize / 0 ) ) ; } @ Input ( ) set _UNKNOWN_ ( value : number [ ] ) { if ( value ) { this . _options = value ; } } @ Input ( ) set _UNKNOWN_ ( value ) { if ( this . _current === value ) { return ; } if ( value > this . _UNKNOWN_ || value < this . _UNKNOWN_ ) { return ; } this . _current = Number ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : number { return this . _current ; } @ Input ( ) set _UNKNOWN_ ( value ) { if ( value === this . _pageSize ) { return ; } this . _pageSize = value ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : number { return this . _pageSize ; } @ Input ( ) set _UNKNOWN_ ( value ) { if ( value === this . _total ) { return ; } this . _total = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : number { return this . _total ; } _UNKNOWN_ ( $event ) { this . _UNKNOWN_ = $event ; this . _UNKNOWN_ . emit ( $event ) ; } _UNKNOWN_ ( $event ) { this . _UNKNOWN_ = $event ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = Math . ceil ( this . _total / this . _pageSize ) ; if ( this . _current > this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } const _UNKNOWN_ = [ ] ; if ( this . _UNKNOWN_ <= 0 ) { for ( let i = 0 ; i <= this . _UNKNOWN_ - 0 ; i ++ ) { _UNKNOWN_ . push ( { index : i } ) ; } } else { const current = + this . _current ; let left = Math . max ( 0 , current - 0 ) ; let right = Math . min ( current + 0 , this . _UNKNOWN_ - 0 ) ; if ( current - 0 <= 0 ) { right = 0 ; } if ( this . _UNKNOWN_ - current <= 0 ) { left = this . _UNKNOWN_ - 0 ; } for ( let i = left ; i <= right ; i ++ ) { _UNKNOWN_ . push ( { index : i } ) ; } } this . _UNKNOWN_ = _UNKNOWN_ ; } _UNKNOWN_ ( index ) { if ( index === this . _UNKNOWN_ - 0 || index === this . _UNKNOWN_ + 0 || index === this . _UNKNOWN_ ) { return ; } if ( index < this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ ; } else if ( index > this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ ; } else { this . _UNKNOWN_ = index ; } this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } get _UNKNOWN_ ( ) : boolean { return this . _current === this . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : boolean { return this . _current === this . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : number { return Math . round ( this . _pageSize / 0 ) ; } constructor ( private _elementRef ) { this . _el = this . _elementRef . nativeElement ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $HTMLElement$ O $complex$ O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O $number$ O $any[]$ O O O O $number[]$ O O O O O O O O O O O O O O $any$ O O $boolean$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $string$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $void$ O $number$ O O O O $void$ O O O $number$ O $Math$ O $number$ O $number$ O O O O O O $void$ O $number$ O O O O $void$ O O O $number$ O $Math$ O $number$ O $number$ O O O O O O O $any$ O O O $number[]$ O $number[]$ O O O O O O O O $number[]$ O O O O $number[]$ O $number[]$ O O O O $any$ O O O $number$ O $number$ O O O O O O $number$ O $number$ O O O O O O O $number$ O O O $number$ O $number$ O O O $number$ O O O O O O O $number$ O $NumberConstructor$ O $number$ O O O O $void$ O O O O O $number$ O O O O O O O O $number$ O O O $any$ O O O $number$ O $number$ O O O O $number$ O O O $number$ O O O O O O O $number$ O $number$ O O O $any$ O $any$ O O O $number$ O O O O $void$ O O O O O $number$ O O O O O O O O $number$ O O O $any$ O O O $number$ O $number$ O O O O $number$ O O O $number$ O O O O O O O $number$ O $number$ O O O $void$ O O O O O $number$ O O O O O O O O $number$ O O $void$ O $number$ O O O O $number$ O $number$ O O O $any$ O $any$ O $number$ O O O $void$ O $number$ O O O O $number$ O $number$ O O O $any$ O $any$ O O O $number$ O O O $void$ O O O O O $number$ O $Math$ O $number$ O O O $number$ O O O $number$ O O O O O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O $any$ O $any$ O O O $number$ O O O O $any[]$ O O O O O O O O $number$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $any[]$ O $number$ O O $number$ O $number$ O O O O O O O O $number$ O O O O $number$ O O $number$ O $Math$ O $number$ O O O $number$ O O O O O $number$ O $Math$ O $number$ O $number$ O O O O O $number$ O O O O O O $number$ O O O O O O $number$ O O O O O O O O $number$ O $number$ O O O O $number$ O O O $number$ O O O O O O O $number$ O $number$ O $number$ O $number$ O $number$ O O O $any[]$ O $number$ O O $number$ O $number$ O O O O O O O $any[]$ O $any[]$ O O $void$ O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O O O O $number$ O $number$ O O O O $any$ O $any$ O O O $number$ O O O O $any$ O $any$ O O O $number$ O O O O $boolean$ O O O O O O O O $number$ O O O $number$ O O O $boolean$ O O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O O $Math$ O $number$ O O O $number$ O O O O O O O O $ElementRef$ O O O O $HTMLElement$ O O O $any$ O $any$ O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] , imports : [ CommonModule , FormsModule , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { AnimationEvent , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , ConnectionPositionPair , _UNKNOWN_ , } from 's' ; import { AfterViewInit , ChangeDetectorRef , Component , ContentChild , EventEmitter , Input , Output , TemplateRef , ViewChild , ViewEncapsulation , } from 's' ; import { BehaviorSubject } from 's' ; import { Observable } from 's' ; import { _UNKNOWN_ } from 's' ; import { 0 , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = { } ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ = 0 ; @ Output ( ) _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter ( ) ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ ViewChild ( 's' ) overlay : _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ ; @ Input ( ) set _UNKNOWN_ ( value ) { const visible = _UNKNOWN_ ( value ) ; if ( this . _UNKNOWN_ . value !== visible ) { this . _UNKNOWN_ . next ( visible ) ; this . _UNKNOWN_ . emit ( visible ) ; } } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ . value ; } _UNKNOWN_ = new BehaviorSubject < boolean > ( false ) ; _UNKNOWN_ = this . _UNKNOWN_ . asObservable ( ) ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ = this . _UNKNOWN_ === 's' ; } get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } _prefix = 's' ; _UNKNOWN_ : ConnectionPositionPair [ ] = [ ... 0 ] ; _UNKNOWN_ = { } ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { if ( value !== this . _UNKNOWN_ ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ . unshift ( _UNKNOWN_ [ this . _UNKNOWN_ ] as ConnectionPositionPair ) ; } } get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } updatePosition ( ) { if ( this . overlay && this . overlay . overlayRef ) { this . overlay . overlayRef . updatePosition ( ) ; } } _UNKNOWN_ ( $event ) { for ( const key in _UNKNOWN_ ) { if ( JSON . stringify ( $event . _UNKNOWN_ ) === JSON . stringify ( _UNKNOWN_ [ key ] ) ) { this . _UNKNOWN_ = key ; break ; } } this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . detectChanges ( ) ; } show ( ) { if ( ! this . _UNKNOWN_ ( ) ) { this . _UNKNOWN_ = true ; } } hide ( ) { this . _UNKNOWN_ = false ; } _UNKNOWN_ ( e ) { if ( e . toState === 's' && ! this . _UNKNOWN_ ) { this . _UNKNOWN_ . emit ( false ) ; } if ( e . toState === 's' && this . _UNKNOWN_ ) { this . _UNKNOWN_ . emit ( true ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ `template` ] : true } ; } _UNKNOWN_ ( origin ) { this . _UNKNOWN_ = origin ; } constructor ( private _UNKNOWN_ ) { } private _UNKNOWN_ ( ) { return this . _UNKNOWN_ ? false : ( this . _UNKNOWN_ === 's' || this . _UNKNOWN_ == null ) ; } } </s>	O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O $complex$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $boolean$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O ${}$ O O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O $boolean$ O O O O O O $any$ O $any$ O $boolean$ O O O O $any$ O $any$ O $boolean$ O O O O $any$ O $any$ O $boolean$ O O O O O $boolean$ O O O O O O O O $any$ O $any$ O O $any$ O O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $boolean$ O O O $string$ O O O O O $string$ O O O O O O O O $string$ O O $string$ O O O $any[]$ O $any$ O O O O O $any[]$ O O ${}$ O O O O $string$ O O O $string$ O O O O $any$ O O O $string$ O $string$ O O O O $string$ O O O $string$ O O O O $string$ O $string$ O O O $any[]$ O $number$ O $complex$ O O O $string$ O O $any$ O O O O O $string$ O O O O O O O O $string$ O O $void$ O O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O O O O O $string$ O $complex$ O O O O $JSON$ O $complex$ O $any$ O $any$ O O $JSON$ O $complex$ O $complex$ O $string$ O O O O O O $string$ O $string$ O O O O O O O $void$ O O O O O $any$ O $any$ O O O O $void$ O O O O O O O O $boolean$ O O O O O O $boolean$ O O O O O $void$ O O O O O $boolean$ O O O O $void$ O $AnimationEvent$ O O O O $any$ O $any$ O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O $void$ O O O O O ${}$ O O O O O $string$ O O O O O O O O O O O O $void$ O $any$ O O O O $any$ O $any$ O O O O O $ChangeDetectorRef$ O O O O $boolean$ O O O O O O $any$ O O O O O O $string$ O O O O O $string$ O O O O O O O
<s> import { ChangeDetectorRef , Component , EventEmitter , Input , Output , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ extends _UNKNOWN_ { private _UNKNOWN_ = false ; _prefix = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = true ; @ Input ( ) _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; @ Input ( ) _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Output ( ) _UNKNOWN_ : EventEmitter < void > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < void > = new EventEmitter ( ) ; constructor ( cdr , private _UNKNOWN_ ) { super ( cdr ) ; } show ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = true ; } else { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ . emit ( ) ; this . _UNKNOWN_ = false ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . emit ( ) ; this . _UNKNOWN_ = false ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O O $boolean$ O O O $string$ O O O $string$ O O O $boolean$ O O O O $any$ O O $any$ O O $any$ O O $string$ O O O $any$ O $string$ O O O O O $any$ O O $string$ O O O $any$ O $string$ O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O $ChangeDetectorRef$ O O $any$ O O O O $any$ O O O $void$ O O O O O O O O $boolean$ O O O O $boolean$ O O O O O O O O $void$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O $boolean$ O O O O $void$ O O O O O $any$ O $any$ O O O O O $boolean$ O O O O O O
<s> import { AfterViewInit , ComponentFactoryResolver , Directive , ElementRef , HostBinding , Input , Optional , 0 , SimpleChanges , ViewContainerRef , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Directive ( { selector : 's' , } ) export class _UNKNOWN_ implements AfterViewInit { @ Input ( 's' ) get _UNKNOWN_ ( ) : string { return this . tooltip . _UNKNOWN_ ; } set _UNKNOWN_ ( title ) { if ( this . _UNKNOWN_ ) { this . tooltip . _UNKNOWN_ = title ; } } @ HostBinding ( 's' ) _UNKNOWN_ ; private tooltip : _UNKNOWN_ ; private _UNKNOWN_ = false ; private _UNKNOWN_ ; constructor ( public elementRef , private hostView , private resolver , private renderer , @ Optional ( ) tooltip ) { this . tooltip = tooltip ; if ( ! this . tooltip ) { const factory = this . resolver . resolveComponentFactory ( _UNKNOWN_ ) ; this . tooltip = this . hostView . createComponent ( factory ) . instance ; this . _UNKNOWN_ = true ; } this . tooltip . _UNKNOWN_ ( this ) ; } ngAfterViewInit ( ) { if ( this . tooltip . _UNKNOWN_ === 's' ) { let overlayElement ; this . renderer . listen ( this . elementRef . nativeElement , 's' , ( ) => this . _UNKNOWN_ ( true , true , this . tooltip . _UNKNOWN_ ) ) ; this . renderer . listen ( this . elementRef . nativeElement , 's' , ( ) => { this . _UNKNOWN_ ( true , false , this . tooltip . _UNKNOWN_ ) ; if ( this . tooltip . overlay . overlayRef && ! overlayElement ) { overlayElement = this . tooltip . overlay . overlayRef . overlayElement ; this . renderer . listen ( overlayElement , 's' , ( ) => this . _UNKNOWN_ ( false , true ) ) ; this . renderer . listen ( overlayElement , 's' , ( ) => this . _UNKNOWN_ ( false , false ) ) ; } } ) ; } else if ( this . tooltip . _UNKNOWN_ === 's' ) { this . renderer . listen ( this . elementRef . nativeElement , 's' , ( ) => this . show ( ) ) ; this . renderer . listen ( this . elementRef . nativeElement , 's' , ( ) => this . hide ( ) ) ; } else if ( this . tooltip . _UNKNOWN_ === 's' ) { this . renderer . listen ( this . elementRef . nativeElement , 's' , ( e ) => { e . preventDefault ( ) ; this . show ( ) ; } ) ; } } private show ( ) { this . tooltip . show ( ) ; this . _UNKNOWN_ = true ; } private hide ( ) { this . tooltip . hide ( ) ; this . _UNKNOWN_ = false ; } private _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , delay = - 0 ) { if ( this . _UNKNOWN_ ) { window . clearTimeout ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ = null ; } else if ( delay > 0 ) { this . _UNKNOWN_ = window . setTimeout ( ( ) => { this . _UNKNOWN_ = null ; _UNKNOWN_ ? this . show ( ) : this . hide ( ) ; } , delay * 0 ) ; } else { _UNKNOWN_ && _UNKNOWN_ ? this . show ( ) : this . hide ( ) ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O O $any$ O $any$ O O $any$ O O O O $string$ O O O O O O O O $any$ O $string$ O O O $string$ O $string$ O O O O O O $boolean$ O O O O $any$ O $string$ O $string$ O O O O $any$ O O O $any$ O O $any$ O $any$ O O $boolean$ O O O O $any$ O O O O $ElementRef$ O O $ViewContainerRef$ O O $ComponentFactoryResolver$ O O $Renderer2$ O O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $boolean$ O O O O O O $any$ O $void$ O O O O O $void$ O O O O O O O $any$ O $string$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O O O O O $any$ O $number$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O $void$ O O O O O O O $any$ O $number$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O O O O O O O O O O O O O $any$ O $string$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O O O O O O O O $any$ O $string$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $void$ O O O O O O O O O $void$ O O O O O $any$ O $void$ O O O O O $any$ O O O O O $void$ O O O O O $any$ O $void$ O O O O O $any$ O O O O O $void$ O $boolean$ O $boolean$ O $number$ O O O O O O O O O $any$ O O $complex$ O $void)$ O O O $any$ O O O O $any$ O O O O O O O $number$ O O O O O O $any$ O $complex$ O $number)$ O O O O O O O $any$ O O O $boolean$ O O O $void$ O O O O O $void$ O O O O O $number$ O O O O O O O $boolean$ O $boolean$ O O O $void$ O O O O O $void$ O O O O O O O
<s> import { ComponentFactoryResolver , Directive , ElementRef , 0 , ViewContainerRef , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Directive ( { selector : 's' , } ) export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( elementRef , hostView , resolver , renderer , tooltip ) { super ( elementRef , hostView , resolver , renderer , tooltip ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O O $any$ O $any$ O O O $ElementRef$ O $ViewContainerRef$ O $ComponentFactoryResolver$ O $Renderer2$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O
<s> import { OverlayModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule , _UNKNOWN_ , OverlayModule , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , Input , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ extends _UNKNOWN_ { _prefix = 's' ; @ Input ( ) _UNKNOWN_ ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $string$ O O O O $any$ O O $any$ O O O
<s> import { ComponentFactoryResolver , Directive , ElementRef , 0 , ViewContainerRef , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Directive ( { selector : 's' , } ) export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( elementRef , hostView , resolver , renderer , tooltip ) { super ( elementRef , hostView , resolver , renderer , tooltip ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O O $any$ O $any$ O O O $ElementRef$ O $ViewContainerRef$ O $ComponentFactoryResolver$ O $Renderer2$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O
<s> import { OverlayModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { entryComponents : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule , OverlayModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O O O O $any$ O O O
<s> import { forwardRef , Component , Input , OnInit , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements ControlValueAccessor , OnInit { _UNKNOWN_ = { normal : 's' , exception : 's' , success : 's' , } ; _UNKNOWN_ = 's' ; _UNKNOWN_ = { } ; _UNKNOWN_ = { } ; _UNKNOWN_ = 0 ; _UNKNOWN_ = false ; _UNKNOWN_ = 's' ; onChange : ( value ) => void = ( ) => null ; onTouched : ( ) => void = ( ) => null ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : number = this . _UNKNOWN_ === 's' ? 0 : 0 ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ = true ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( 's' ) set _UNKNOWN_ ( value : ( input ) => string ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ = true ; } _UNKNOWN_ = ( percent ) => percent + 's' ; _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ || 0 ; this . _UNKNOWN_ = { 's' : _UNKNOWN_ , 's' : _UNKNOWN_ , 's' : _UNKNOWN_ * 0 + 0 , } ; const radius = 0 - this . _UNKNOWN_ / 0 ; const len = Math . PI * 0 * radius ; this . _UNKNOWN_ = `template` ; this . _UNKNOWN_ = { 's' : `template` , 's' : ( 0 - this . _UNKNOWN_ ) / 0 * len + 's' , 's' : 's' } ; } writeValue ( value ) { this . _UNKNOWN_ = value == null ? 0 : + value ; if ( this . _UNKNOWN_ === 0 ) { this . _UNKNOWN_ = 's' ; } else { this . _UNKNOWN_ = this . _UNKNOWN_ ; } if ( this . _UNKNOWN_ === 's' ) { this . _UNKNOWN_ ( ) ; } } registerOnChange ( fn : ( _ ) => void ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => void ) { this . onTouched = fn ; } ngOnInit ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O ${}$ O O O O ${}$ O O O O $number$ O O O $boolean$ O O O $string$ O O O $void$ O O $number$ O O O O O O O O O $void$ O O O O O O O O O O O O $any$ O O $string$ O O O O $any$ O O $number$ O O O O O $string$ O O O O O O O O $any$ O O $number$ O O O O $any$ O O $boolean$ O O O O $any$ O O $string$ O O O O $any$ O O O O $string$ O $string$ O O $number$ O O O O O O O $string$ O $string$ O O O $boolean$ O O O O $string$ O O $number$ O O $number$ O O O $void$ O O O O $number$ O O O $number$ O O O O O ${}$ O O O O $number$ O O O $number$ O O O $number$ O O O O O O O O $number$ O O O O O $number$ O O O O $number$ O $Math$ O $number$ O O O $number$ O O O $string$ O O O O O ${}$ O O O O O O O O O O O O O $number$ O O O O $number$ O O O O O O O O O $void$ O $number$ O O O O $number$ O $number$ O O O O O O $number$ O O O O O $number$ O O O O O O $string$ O O O O O O O O $string$ O O O $string$ O O O O O O $string$ O O O O O O $void$ O O O O O $void$ O $void$ O O $number$ O O O O O O O $void$ O $void$ O O $void$ O $void$ O O O O O O O O O $void$ O $void$ O O $void$ O O O O O $string$ O O O $string$ O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { exports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { forwardRef , Component , Input , OnInit , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit , ControlValueAccessor { private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _disabled = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ ; _UNKNOWN_ : number [ ] = [ ] ; _count = 0 ; _value = 0 ; _UNKNOWN_ = 0 ; _UNKNOWN_ : RegExp = "s" ; onChange : ( value ) => void = ( ) => null ; onTouched : ( ) => void = ( ) => null ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _count = value ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } @ Input ( ) set _UNKNOWN_ ( input ) { let value = input ; this . _value = value ; if ( this . _UNKNOWN_ . test ( value . toString ( ) ) ) { value += 0 ; this . _UNKNOWN_ = true ; } this . _UNKNOWN_ = value ; } get _UNKNOWN_ ( ) : number { return this . _value ; } set _UNKNOWN_ ( input ) { let value = input ; if ( this . _value === value ) { return ; } this . _value = value ; if ( this . _UNKNOWN_ . test ( value . toString ( ) ) ) { value += 0 ; this . _UNKNOWN_ = true ; } this . _UNKNOWN_ = value ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ `template` ] : this . _disabled } ; } _UNKNOWN_ ( ) { let index = 0 ; while ( index < this . _count ) { this . _UNKNOWN_ . push ( index ++ ) ; } } _UNKNOWN_ ( e , index , isFull ) { e . stopPropagation ( ) ; if ( this . _disabled ) { return ; } this . _UNKNOWN_ = this . _value = index + 0 ; this . _UNKNOWN_ = ! isFull && this . _UNKNOWN_ ; if ( this . _UNKNOWN_ ) { this . _value -= 0 ; } this . onChange ( this . _value ) ; } _UNKNOWN_ ( e , index , isFull ) { e . stopPropagation ( ) ; if ( this . _disabled ) { return ; } const _UNKNOWN_ = ! isFull && this . _UNKNOWN_ ; if ( this . _UNKNOWN_ === index + 0 && _UNKNOWN_ === this . _UNKNOWN_ ) { return ; } this . _UNKNOWN_ = index + 0 ; this . _UNKNOWN_ = _UNKNOWN_ ; } _UNKNOWN_ ( e ) { e . stopPropagation ( ) ; let _UNKNOWN_ = this . _value ; if ( this . _UNKNOWN_ . test ( _UNKNOWN_ . toString ( ) ) ) { _UNKNOWN_ += 0 ; this . _UNKNOWN_ = true ; } this . _UNKNOWN_ = _UNKNOWN_ ; } _UNKNOWN_ ( i ) { return { [ this . _UNKNOWN_ ] : true , [ `template` ] : ( i + 0 < this . _UNKNOWN_ ) || ( ! this . _UNKNOWN_ ) && ( i + 0 === this . _UNKNOWN_ ) , [ `template` ] : ( this . _UNKNOWN_ ) && ( i + 0 === this . _UNKNOWN_ ) , [ `template` ] : ( this . _UNKNOWN_ ) && ( i + 0 === this . _UNKNOWN_ ) , [ `template` ] : ( i + 0 > this . _UNKNOWN_ ) } ; } writeValue ( value : number | null ) { this . _UNKNOWN_ = value || 0 ; } registerOnChange ( fn : ( _ ) => void ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => void ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $string$ O O O $string$ O O O $any$ O $number[]$ O O O O O O O O $number$ O O O $number$ O O O $number$ O O O $RegExp$ O $RegExpConstructor$ O O O $void$ O O $number$ O O O O O O O O O $void$ O O O O O O O O O O O O $any$ O O O $number$ O $number$ O O O O $number$ O $number$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $any$ O O O $number$ O $number$ O O O $number$ O $number$ O O O $number$ O $number$ O O O O O $RegExp$ O $boolean$ O $number$ O $string$ O O O O O $number$ O O O O O $boolean$ O O O O O O $number$ O $number$ O O O $number$ O O O O O O O O $number$ O O O $number$ O $number$ O O O $number$ O $number$ O O O O O $number$ O $number$ O O O O O O O $number$ O $number$ O O O O O $RegExp$ O $boolean$ O $number$ O $string$ O O O O O $number$ O O O O O $boolean$ O O O O O O $number$ O $number$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O $void$ O O O O O $any$ O O O O O $string$ O O O O O O O O O O $boolean$ O O O $void$ O O O O $number$ O O O O O $number$ O O O $number$ O O O O $number[]$ O $number$ O $number$ O O O O O $void$ O $MouseEvent$ O $number$ O $boolean$ O O $MouseEvent$ O $void$ O O O O O O O $boolean$ O O O O O O O $number$ O O O $number$ O $number$ O O O O O $boolean$ O O $boolean$ O O O $boolean$ O O O O O $boolean$ O O O O $number$ O O O O O O $void$ O O O $number$ O O O $void$ O $MouseEvent$ O $number$ O $boolean$ O O $MouseEvent$ O $void$ O O O O O O O $boolean$ O O O O O O $boolean$ O O $boolean$ O O O $boolean$ O O O O O $number$ O $number$ O O O $boolean$ O O O $boolean$ O O O O O O O $number$ O $number$ O O O O O $boolean$ O $boolean$ O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O $number$ O O O $number$ O O O O O $RegExp$ O $boolean$ O $number$ O $string$ O O O O O $number$ O O O O O $boolean$ O O O O O O $number$ O $number$ O O $object$ O $number$ O O O O O O O $string$ O O O O O O O O O $number$ O O O O O $number$ O O O O O O $boolean$ O O O $number$ O O O O O $number$ O O O O O O O O O $boolean$ O O O $number$ O O O O O $number$ O O O O O O O O O $boolean$ O O O $number$ O O O O O $number$ O O O O O O O $number$ O O O O O $number$ O O O O $void$ O $number$ O O O O O O O O $number$ O $number$ O O O O $void$ O $void$ O O $number$ O O O O O O O $void$ O $void$ O O $void$ O $void$ O O O O O O O O O $void$ O $void$ O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O $void$ O O O O O $void$ O O O O O $void$ O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { exports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { InjectionToken } from 's' ; export interface _UNKNOWN_ { _UNKNOWN_ : string ; _UNKNOWN_ : string ; } export const _UNKNOWN_ = new InjectionToken < _UNKNOWN_ > ( 's' ) ; export function _UNKNOWN_ ( document , options ? ) : ( ) => void { return function _UNKNOWN_ ( ) : void { if ( options ) { const style = document . createElement ( 's' ) ; style . innerHTML = `template` ; document . head . appendChild ( style ) ; } } ; } </s>	O O O $any$ O O O O O O $any$ O $string$ O O O $string$ O O O O O O $any$ O O $any$ O $any$ O O O O O O O $void$ O $Document$ O $any$ $any$ O O O O O O O O O $void$ O O O O O O O $any$ O O O $HTMLStyleElement$ O $Document$ O O O O O O $HTMLStyleElement$ O $string$ O O O $Document$ O $HTMLHeadElement$ O $T$ O $HTMLStyleElement$ O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { template : `template` , styleUrls : [ 's' , 's' , ] , encapsulation : ViewEncapsulation . None , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { DOCUMENT } from 's' ; import { Component , Inject , Input , OnInit , Optional , } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements OnInit { private _document : Document ; private options : _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; constructor ( @ Inject ( DOCUMENT ) _document , @ Inject ( _UNKNOWN_ ) @ Optional ( ) options , ) { this . _document = _document ; this . options = options ; } ngOnInit ( ) { if ( this . _UNKNOWN_ && this . _UNKNOWN_ && ! this . options ) { const options = { _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ } ; const initializer = _UNKNOWN_ ( this . _document , options ) ; initializer ( ) ; } } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O O $Document$ O $complex$ O O $any$ O $any$ O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $any$ O O O O O $Document$ O $any$ O O O $any$ O $any$ O O $void$ O O O O O O O $string$ O O O $string$ O O O O $any$ O O O $any$ O O $string$ O O O $string$ O $string$ O O O $string$ O O O $void$ O $void$ O O O $Document$ O $any$ O O $void$ O O O O O O O
<s> import { CommonModule , DOCUMENT } from 's' ; import { _UNKNOWN_ , ComponentFactoryResolver , ComponentRef , Inject , Injector , NgModule , OnDestroy , Optional } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { exports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule ] , entryComponents : [ _UNKNOWN_ ] , providers : [ { provide : _UNKNOWN_ , multi : true , useFactory : _UNKNOWN_ , deps : [ DOCUMENT , [ new Optional ( ) , _UNKNOWN_ ] ] } , ] , } ) export class _UNKNOWN_ implements OnDestroy { private _document : Document ; private _UNKNOWN_ : ComponentRef < _UNKNOWN_ > ; constructor ( @ Inject ( DOCUMENT ) _document , injector , resolver ) { this . _document = _document ; const componentFactory = resolver . resolveComponentFactory ( _UNKNOWN_ ) ; const div = this . _document . createElement ( 's' ) ; this . _UNKNOWN_ = componentFactory . create ( injector , null , div ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . destroy ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O O $complex$ O O $any$ O O $complex$ O O O $any$ O $any$ O $boolean$ O O O $void$ O $void$ O $any[]$ O O $any$ O O O $any$ O O O $any$ O O O O O O O O O O $any$ O $any$ O O $Document$ O $complex$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $Injector$ O $ComponentFactoryResolver$ O O O O $Document$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $HTMLDivElement$ O O O $Document$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $HTMLDivElement$ O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { OverlayModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule , OverlayModule ] , entryComponents : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { Component , Input , OnChanges , SimpleChanges , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` } ) export class _UNKNOWN_ implements OnChanges { private _vertical = false ; private _UNKNOWN_ = false ; @ Input ( ) _UNKNOWN_ : number = null ; @ Input ( ) _UNKNOWN_ : number = null ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _vertical = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _vertical ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } attrs : Array < { id : number , value : number , offset : number , classes : { [ key ] : boolean } , style : object , label : Mark } > ; ngOnChanges ( changes ) { if ( changes . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } if ( changes . _UNKNOWN_ || changes . _UNKNOWN_ || changes . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( index , attr : { id : number , value : number , offset : number , classes : { [ key ] : boolean } , style : object , label : Mark } ) { return attr . id ; } _UNKNOWN_ ( ) { const range = this . _UNKNOWN_ - this . _UNKNOWN_ ; this . attrs = this . _UNKNOWN_ . map ( mark => { const { value , offset , config } = mark ; let label = config ; let style ; if ( this . _UNKNOWN_ ) { style = { marginBottom : 's' , bottom : `template` } ; } else { const _UNKNOWN_ = this . _UNKNOWN_ . length ; const unit = 0 / ( _UNKNOWN_ - 0 ) ; const _UNKNOWN_ = unit * 0 ; style = { width : `template` , marginLeft : `template` , left : `template` } ; } if ( typeof config === 's' ) { label = config . label ; if ( config . style ) { style = { ... style , ... config . style } ; } } return { id : value , value , offset , classes : { [ `template` ] : true } , style , label } ; } ) ; } _UNKNOWN_ ( ) { if ( this . attrs && this . _UNKNOWN_ !== null && this . _UNKNOWN_ !== null ) { this . attrs . forEach ( attr => { const value = attr . value ; const isActive = ( ! this . _UNKNOWN_ && value === this . _UNKNOWN_ ) || ( this . _UNKNOWN_ && value <= this . _UNKNOWN_ && value >= this . _UNKNOWN_ ) ; attr . classes [ `template` ] = isActive ; } ) ; } } } export type Mark = string | { style : object ; label : string ; } ; export class _UNKNOWN_ { number : Mark ; } export class _UNKNOWN_ extends Array < { value : number , offset : number , config : Mark } > { [ index ] : { value : number ; offset : number ; config : Mark ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $any$ O O $number$ O O O O O O $any$ O O $number$ O O O O O O $any$ O O $any$ O $any$ O O $any$ O O $string$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O $complex$ O $ArrayConstructor$ O O $number$ O O O $number$ O O O $number$ O O O $complex$ O O O $string$ O O O O O $object$ O O O $any$ O $any$ O O O $void$ O $SimpleChanges$ O O O O $any$ O $any$ O O O O $void$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O O O O $number$ O $number$ O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $complex$ O O O $string$ O O O O O $object$ O O O $any$ O $any$ O O O O $complex$ O $number$ O O $void$ O O O O $number$ O O O $number$ O O O $number$ O O O $complex$ O O O $any$ O $U[]$ O $complex$ O O O O $number$ O $number$ O $any$ O O $complex$ O O $any$ O $any$ O O $object$ O O O O O $boolean$ O O $object$ O O $string$ O O O $string$ O O O O O O O O $number$ O O O $any$ O $number$ O O $number$ O O O O $number$ O O O O O $number$ O $number$ O O O $object$ O O $string$ O O O $string$ O O O $string$ O O O O O O O O $any$ O O O O $any$ O $complex$ O $string$ O O O $complex$ O $object$ O O $object$ O O O $object$ O O $complex$ O $object$ O O O O O O $number$ O $number$ O $number$ O $number$ O $complex$ O O O O O O O O O $object$ O $any$ O O O O O O $void$ O O O O O O O $complex$ O O O $number$ O O O O O $number$ O O O O O O $complex$ O $void$ O $complex$ O O O $number$ O $complex$ O $number$ O O $boolean$ O O O O O $boolean$ O $number$ O O O $number$ O O O O O $boolean$ O $number$ O O O $number$ O $number$ O O O $number$ O O $complex$ O $complex$ O O O O $boolean$ O O O O O O O O O $any$ O O O O $object$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $ArrayConstructor$ O O $number$ O O O $number$ O O O $any$ O $any$ O O O O $number$ O O O $number$ O O O $number$ O O O $any$ O $any$ O O O O
<s> import { Injectable } from 's' ; @ Injectable ( ) export class _UNKNOWN_ { _UNKNOWN_ ( e ) { e . stopPropagation ( ) ; e . preventDefault ( ) ; } _UNKNOWN_ ( num ) { const _UNKNOWN_ = num . toString ( ) ; const _UNKNOWN_ = _UNKNOWN_ . indexOf ( 's' ) ; return _UNKNOWN_ >= 0 ? _UNKNOWN_ . length - _UNKNOWN_ - 0 : 0 ; } _UNKNOWN_ < T > ( arr : T [ ] ) : T [ ] { return arr . slice ( ) ; } _UNKNOWN_ ( e ) { return ! e . touches || e . touches . length > 0 || ( e . type . toLowerCase ( ) === 's' && e . touches . length > 0 ) ; } _UNKNOWN_ ( min , max , value ) { return ( value - min ) / ( max - min ) * 0 ; } _UNKNOWN_ ( num , min , max ) { let res = + num ; if ( isNaN ( res ) ) { return min ; } if ( num < min ) { res = min ; } else if ( num > max ) { res = max ; } return res ; } _UNKNOWN_ ( elem ) : { top : number , left : number } { if ( ! elem . _UNKNOWN_ ( ) . length ) { return { top : 0 , left : 0 } ; } const rect = elem . getBoundingClientRect ( ) ; const win = elem . ownerDocument . defaultView ; return { top : rect . top + win . pageYOffset , left : rect . left + win . pageXOffset } ; } } </s>	O O O $any$ O O O O O $any$ O O O O $any$ O $void$ O $Event$ O O $Event$ O $void$ O O O $Event$ O $void$ O O O O $number$ O $number$ O O O $string$ O $number$ O $string$ O O O O $number$ O $string$ O $number$ O O O O O $number$ O O O $string$ O $number$ O $number$ O O O O O O $T[]$ O $any$ O O $T[]$ O $any$ O O O O $any$ O O O O $T[]$ O $T[]$ O O O O $boolean$ O $TouchEvent$ O O O O $TouchEvent$ O $TouchList$ O $TouchEvent$ O $TouchList$ O $number$ O O O O $TouchEvent$ O $string$ O $string$ O O O O O $TouchEvent$ O $TouchList$ O $number$ O O O O O $number$ O $number$ O $number$ O $number$ O O O O $number$ O $number$ O O O $number$ O $number$ O O O O O $number$ O $number$ O $number$ O $number$ O O O $number$ O O $number$ O O O $boolean$ O $number$ O O O O $number$ O O O O $number$ O $number$ O O $number$ O $number$ O O O O O $number$ O $number$ O O $number$ O $number$ O O O $number$ O O $complex$ O $HTMLElement$ O O O $number$ O O O $number$ O O O O O O O $HTMLElement$ O $any$ O O O $number$ O O O O $number$ O O O $number$ O O O O O O $DOMRect$ O $HTMLElement$ O $DOMRect$ O O O O $complex$ O $HTMLElement$ O $Document$ O $complex$ O O O $number$ O $DOMRect$ O $number$ O $complex$ O $number$ O $number$ O $DOMRect$ O $number$ O $complex$ O $number$ O O O O O
<s> import { forwardRef , Component , ElementRef , EventEmitter , Input , OnChanges , OnDestroy , OnInit , Output , SimpleChanges , ViewChild , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { Observable } from 's' ; import { Subscription } from 's' ; import { fromEvent } from 's' ; import { merge } from 's' ; import { distinctUntilChanged } from 's' ; import { filter } from 's' ; import { map } from 's' ; import { pluck } from 's' ; import { takeUntil } from 's' ; import { tap } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export type _UNKNOWN_ = number [ ] | number ; export class _UNKNOWN_ { offset : number ; value : number ; active : boolean ; } @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements ControlValueAccessor , OnInit , OnChanges , OnDestroy { @ Input ( ) _UNKNOWN_ : number | string = null ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ = null ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ = 0 ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ = null ; @ Input ( ) _UNKNOWN_ : ( value ) => string ; @ Output ( ) _UNKNOWN_ = new EventEmitter < _UNKNOWN_ > ( ) ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _vertical = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _vertical ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _range = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _range ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } private _disabled = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = true ; private _range = false ; private _vertical = false ; value : _UNKNOWN_ = null ; @ ViewChild ( 's' ) slider : ElementRef ; _UNKNOWN_ : HTMLDivElement ; _UNKNOWN_ : number = null ; _UNKNOWN_ : number = null ; _UNKNOWN_ = 's' ; classMap : object ; _UNKNOWN_ : number = null ; track = { offset : null , length : null } ; _UNKNOWN_ : _UNKNOWN_ [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] ; bounds = { lower : null , upper : null } ; _UNKNOWN_ : ( value ) => void ; isDragging = false ; _UNKNOWN_ : Observable < number > ; _UNKNOWN_ : Observable < number > ; _UNKNOWN_ : Observable < number > ; _UNKNOWN_ : Subscription ; _UNKNOWN_ : Subscription ; _UNKNOWN_ : Subscription ; setValue ( val , _UNKNOWN_ = false ) { if ( _UNKNOWN_ ) { this . value = this . _UNKNOWN_ ( val ) ; this . log ( `template` ) ; this . _UNKNOWN_ ( ) ; } else { if ( ! this . _UNKNOWN_ ( this . value , val ) ) { this . value = val ; this . log ( `template` ) ; this . _UNKNOWN_ ( ) ; this . log ( `template` , val ) ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( this . value ) ; } } } } getValue ( _UNKNOWN_ = false ) { if ( _UNKNOWN_ && this . _UNKNOWN_ ) { return this . utils . _UNKNOWN_ ( this . value as number [ ] ) . sort ( ( a , b ) => a - b ) ; } return this . value ; } _UNKNOWN_ ( value ? ) { let _UNKNOWN_ = value ; if ( typeof _UNKNOWN_ === 's' ) { _UNKNOWN_ = this . getValue ( true ) ; } return this . _UNKNOWN_ ? ( _UNKNOWN_ as number [ ] ) . map ( val => this . _UNKNOWN_ ( val ) ) : this . _UNKNOWN_ ( _UNKNOWN_ as number ) ; } writeValue ( val ) { if ( typeof this . _UNKNOWN_ !== 's' ) { return ; } this . log ( `template` , val ) ; this . setValue ( val , true ) ; } registerOnChange ( fn : ( value ) => void ) { this . _UNKNOWN_ = fn ; } registerOnTouched ( fn : ( ) => void ) { } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; this . _UNKNOWN_ ( isDisabled ) ; this . _UNKNOWN_ ( ) ; } constructor ( private utils ) { } ngOnInit ( ) { this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ = this . _UNKNOWN_ ( this . _UNKNOWN_ ? 0 : 0 ) ; this . _UNKNOWN_ = this . slider . nativeElement ; if ( this . getValue ( ) === null ) { this . setValue ( this . _UNKNOWN_ ( null ) ) ; } this . _UNKNOWN_ = this . _UNKNOWN_ === null ? null : this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ ( ) ; } ngOnChanges ( changes ) { const { _UNKNOWN_ , _UNKNOWN_ } = changes ; if ( _UNKNOWN_ && ! _UNKNOWN_ . _UNKNOWN_ ) { this . _UNKNOWN_ ( _UNKNOWN_ . currentValue ) ; this . _UNKNOWN_ ( ) ; } else if ( _UNKNOWN_ && ! _UNKNOWN_ . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ ? this . _UNKNOWN_ ( this . _UNKNOWN_ ) : null ; } } ngOnDestroy ( ) { this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . classMap = { [ this . _UNKNOWN_ ] : true , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ ? this . _UNKNOWN_ . length : 0 } ; } _UNKNOWN_ ( _UNKNOWN_ ) { if ( this . _UNKNOWN_ ) { let _UNKNOWN_ = null ; let _UNKNOWN_ ; let activeIndex ; ( this . getValue ( ) as number [ ] ) . forEach ( ( val , index ) => { _UNKNOWN_ = Math . abs ( _UNKNOWN_ - val ) ; if ( _UNKNOWN_ === null || _UNKNOWN_ < _UNKNOWN_ ) { _UNKNOWN_ = _UNKNOWN_ ; activeIndex = index ; } } ) ; this . _UNKNOWN_ = activeIndex ; } } _UNKNOWN_ ( _UNKNOWN_ ) { if ( this . _UNKNOWN_ ) { const newValue = this . utils . _UNKNOWN_ ( this . value as number [ ] ) ; newValue [ this . _UNKNOWN_ ] = _UNKNOWN_ ; this . setValue ( newValue ) ; } else { this . setValue ( _UNKNOWN_ ) ; } } _UNKNOWN_ ( ) { const value = this . getValue ( ) ; const offset = this . _UNKNOWN_ ( value ) ; const _UNKNOWN_ = this . getValue ( true ) ; const _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ ) ; const _UNKNOWN_ = this . _UNKNOWN_ ? _UNKNOWN_ as number [ ] : [ 0 , _UNKNOWN_ ] ; const _UNKNOWN_ = this . _UNKNOWN_ ? [ _UNKNOWN_ [ 0 ] , _UNKNOWN_ [ 0 ] - _UNKNOWN_ [ 0 ] ] : [ 0 , _UNKNOWN_ ] ; this . _UNKNOWN_ . forEach ( ( handle , index ) => { handle . offset = this . _UNKNOWN_ ? offset [ index ] : offset ; handle . value = this . _UNKNOWN_ ? value [ index ] : value ; } ) ; [ this . bounds . lower , this . bounds . upper ] = _UNKNOWN_ ; [ this . track . offset , this . track . length ] = _UNKNOWN_ ; } _UNKNOWN_ ( marks ) : _UNKNOWN_ [ ] { const _UNKNOWN_ = [ ] ; for ( const key in marks ) { const mark = marks [ key ] ; const val = typeof key === 's' ? key : parseFloat ( key ) ; if ( val < this . _UNKNOWN_ || val > this . _UNKNOWN_ ) { continue ; } _UNKNOWN_ . push ( { value : val , offset : this . _UNKNOWN_ ( val ) , config : mark } ) ; } return _UNKNOWN_ ; } onDragStart ( value ) { this . log ( 's' , value ) ; this . _UNKNOWN_ ( true ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( this . _UNKNOWN_ ? this . _UNKNOWN_ : 0 ) ; } _UNKNOWN_ ( value ) { this . log ( 's' , value ) ; this . _UNKNOWN_ ( value ) ; } onDragEnd ( ) { this . log ( 's' ) ; this . _UNKNOWN_ ( false ) ; this . _UNKNOWN_ . emit ( this . getValue ( true ) ) ; this . _UNKNOWN_ ( true ) ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ ; const _UNKNOWN_ = this . _UNKNOWN_ ? 's' : 's' ; const mouse = { start : 's' , move : 's' , end : 's' , _UNKNOWN_ : [ _UNKNOWN_ ] } as { start : string , move : string , end : string , _UNKNOWN_ : string [ ] , filter ( e ) : boolean , _UNKNOWN_ : Observable < number > , _UNKNOWN_ : Observable < number > , _UNKNOWN_ : Observable < number > } ; const touch = { start : 's' , move : 's' , end : 's' , _UNKNOWN_ : [ 's' , 's' , _UNKNOWN_ ] , filter : ( e : MouseEvent | _UNKNOWN_ ) => ! this . utils . _UNKNOWN_ ( e as _UNKNOWN_ ) } as { start : string , move : string , end : string , _UNKNOWN_ : string [ ] , filter ( e ) : boolean , _UNKNOWN_ : Observable < number > , _UNKNOWN_ : Observable < number > , _UNKNOWN_ : Observable < number > } ; [ mouse , touch ] . forEach ( source => { const { start , move , end , _UNKNOWN_ , _UNKNOWN_ = ( ( ) => true ) } = source as any ; source . _UNKNOWN_ = fromEvent ( _UNKNOWN_ , start ) . pipe ( filter ( _UNKNOWN_ ) , tap ( this . utils . _UNKNOWN_ ) , pluck ( ... _UNKNOWN_ ) , map ( ( position ) => this . _UNKNOWN_ ( position ) ) ) ; source . _UNKNOWN_ = fromEvent ( document , end ) ; source . _UNKNOWN_ = fromEvent ( document , move ) . pipe ( filter ( _UNKNOWN_ ) , tap ( this . utils . _UNKNOWN_ ) , pluck ( ... _UNKNOWN_ ) , distinctUntilChanged ( ) , map ( ( position ) => this . _UNKNOWN_ ( position ) ) , distinctUntilChanged ( ) , takeUntil ( source . _UNKNOWN_ ) , ) ; } ) ; this . _UNKNOWN_ = merge ( mouse . _UNKNOWN_ , touch . _UNKNOWN_ ) ; this . _UNKNOWN_ = merge ( mouse . _UNKNOWN_ , touch . _UNKNOWN_ ) ; this . _UNKNOWN_ = merge ( mouse . _UNKNOWN_ , touch . _UNKNOWN_ ) ; } _UNKNOWN_ ( _UNKNOWN_ : string [ ] = [ 's' , 's' , 's' ] ) { this . log ( 's' , this . _UNKNOWN_ ) ; if ( _UNKNOWN_ . indexOf ( 's' ) !== - 0 && this . _UNKNOWN_ && ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ . subscribe ( this . onDragStart . bind ( this ) ) ; } if ( _UNKNOWN_ . indexOf ( 's' ) !== - 0 && this . _UNKNOWN_ && ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ . subscribe ( this . _UNKNOWN_ . bind ( this ) ) ; } if ( _UNKNOWN_ . indexOf ( 's' ) !== - 0 && this . _UNKNOWN_ && ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ . subscribe ( this . onDragEnd . bind ( this ) ) ; } } _UNKNOWN_ ( _UNKNOWN_ : string [ ] = [ 's' , 's' , 's' ] ) { this . log ( 's' , this . _UNKNOWN_ ) ; if ( _UNKNOWN_ . indexOf ( 's' ) !== - 0 && this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; this . _UNKNOWN_ = null ; } if ( _UNKNOWN_ . indexOf ( 's' ) !== - 0 && this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; this . _UNKNOWN_ = null ; } if ( _UNKNOWN_ . indexOf ( 's' ) !== - 0 && this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; this . _UNKNOWN_ = null ; } } _UNKNOWN_ ( _UNKNOWN_ ) { const _UNKNOWN_ = [ 's' , 's' ] ; if ( _UNKNOWN_ ) { this . isDragging = true ; this . _UNKNOWN_ ( _UNKNOWN_ ) ; } else { this . isDragging = false ; this . _UNKNOWN_ ( _UNKNOWN_ ) ; } } _UNKNOWN_ ( disabled ) { if ( disabled ) { this . _UNKNOWN_ ( ) ; } else { this . _UNKNOWN_ ( [ 's' ] ) ; } } _UNKNOWN_ ( position ) { const _UNKNOWN_ = this . _UNKNOWN_ ( ) ; const _UNKNOWN_ = this . _UNKNOWN_ ( ) ; const ratio = this . utils . _UNKNOWN_ ( ( position - _UNKNOWN_ ) / _UNKNOWN_ , 0 , 0 ) ; const val = ( this . _UNKNOWN_ - this . _UNKNOWN_ ) * ( this . _UNKNOWN_ ? 0 - ratio : ratio ) + this . _UNKNOWN_ ; const points = ( this . _UNKNOWN_ === null ? [ ] : Object . keys ( this . _UNKNOWN_ ) . map ( parseFloat ) ) ; if ( this . _UNKNOWN_ !== null && ! this . _UNKNOWN_ ) { const _UNKNOWN_ = Math . round ( val / this . _UNKNOWN_ ) * this . _UNKNOWN_ ; points . push ( _UNKNOWN_ ) ; } const _UNKNOWN_ = points . map ( point => Math . abs ( val - point ) ) ; const closest = points [ _UNKNOWN_ . indexOf ( Math . min ( ... _UNKNOWN_ ) ) ] ; return this . _UNKNOWN_ === null ? closest : parseFloat ( closest . toFixed ( this . utils . _UNKNOWN_ ( this . _UNKNOWN_ ) ) ) ; } _UNKNOWN_ ( value ) { return this . utils . _UNKNOWN_ ( this . _UNKNOWN_ , this . _UNKNOWN_ , value ) ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ !== null ) { return this . _UNKNOWN_ ; } const offset = this . utils . _UNKNOWN_ ( this . _UNKNOWN_ ) ; return this . _UNKNOWN_ ? offset . top : offset . left ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ !== null ) { return this . _UNKNOWN_ ; } const _UNKNOWN_ = this . _UNKNOWN_ ; return this . _UNKNOWN_ ? _UNKNOWN_ . clientHeight : _UNKNOWN_ . clientWidth ; } _UNKNOWN_ ( remove = false ) { this . _UNKNOWN_ = remove ? null : this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = remove ? null : this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( value ) { let res = value ; if ( ! this . _UNKNOWN_ ( value ) ) { res = this . _UNKNOWN_ === null ? ( this . _UNKNOWN_ ? [ this . _UNKNOWN_ , this . _UNKNOWN_ ] : this . _UNKNOWN_ ) : this . _UNKNOWN_ ; } else { res = this . _UNKNOWN_ ? ( value as number [ ] ) . map ( val => this . utils . _UNKNOWN_ ( val , this . _UNKNOWN_ , this . _UNKNOWN_ ) ) : this . utils . _UNKNOWN_ ( value as number , this . _UNKNOWN_ , this . _UNKNOWN_ ) ; } return res ; } _UNKNOWN_ ( value ) { const range = this . _UNKNOWN_ ; if ( value === null || value === undefined ) { return false ; } const isArray = Array . isArray ( value ) ; if ( ! Array . isArray ( value ) ) { let _UNKNOWN_ = value ; if ( typeof value !== 's' ) { _UNKNOWN_ = parseFloat ( value ) ; } if ( isNaN ( _UNKNOWN_ ) ) { return false ; } } if ( isArray !== ! ! range ) { throw new Error ( `template` ) ; } return true ; } _UNKNOWN_ ( value , val ) { if ( typeof value !== typeof val ) { return false ; } if ( Array . isArray ( value ) ) { const len = value . length ; for ( let i = 0 ; i < len ; i ++ ) { if ( value [ i ] !== val [ i ] ) { return false ; } } return true ; } else { return value === val ; } } log ( ... messages : any [ ] ) { if ( this . _UNKNOWN_ !== null ) { const args = [ `template` ] . concat ( Array . prototype . slice . call ( arguments ) ) ; console . log . apply ( null , args ) ; } } private _UNKNOWN_ ( _UNKNOWN_ = 0 ) { this . _UNKNOWN_ . forEach ( ( handle , index ) => { this . _UNKNOWN_ [ index ] . active = index === _UNKNOWN_ ; } ) ; } private _UNKNOWN_ ( ) { this . _UNKNOWN_ . forEach ( handle => handle . active = false ) ; } private _UNKNOWN_ ( amount ) : _UNKNOWN_ [ ] { const _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; for ( let i = 0 ; i < amount ; i ++ ) { _UNKNOWN_ . push ( { offset : null , value : null , active : false } ) ; } return _UNKNOWN_ ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O $any$ O $number$ O O O $number$ O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $complex$ O O O O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $number$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $string$ O O $number$ O O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O $HTMLDivElement$ O $complex$ O $number$ O O O O O $number$ O O O O O $string$ O O O $object$ O O O $number$ O O O O O $complex$ O O $null$ O O O $null$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $complex$ O O $null$ O O O $null$ O O O O $void$ O O $any$ O O O O $boolean$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $void$ O $any$ O $boolean$ O O O O O O $boolean$ O O O O $any$ O O O $any$ O $any$ O O O O $void$ O O O O O O $void$ O O O O O O O O O O O $boolean$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $void$ O O O O O O $void$ O O O O O $void$ O O O $any$ O O O O O O $void$ O O O O $void$ O O O $any$ O O O O O O $any$ O $boolean$ O O O O O O $boolean$ O O O $boolean$ O O O O O $any$ O $T[]$ O O O $any$ O O O O O O $number[]$ O O $number$ O $number$ O O $number$ O $number$ O O O O O O $any$ O O $any$ O $any$ $any$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O O O $any$ O O O O O O O O $boolean$ O O $any$ O O O O O O $U[]$ O $number$ O O O $number$ O $number$ O O O O O $number$ O $any$ O O O O O $void$ O $any$ O O O O O O O $void$ O O O O O O O O O $void$ O O O $any$ O O O O $void$ O $any$ O O O O O $void$ O $void$ O O $any$ O O O O O O O $void$ O $void$ O O $void$ O $void$ O O O O O O O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $void$ O $boolean$ O O O O $void$ O O O O O O O $any$ O O O $void$ O O O O O $boolean$ O O O $any$ O O O O $any$ O O O $any$ O O O $boolean$ O O O O O O O O $HTMLDivElement$ O O O $any$ O $any$ O O O O O $any$ O O O O O O O O $void$ O O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O $any$ O O O O $void$ O O O O O $void$ O O O $boolean$ O O O O $void$ O O O O $void$ O $SimpleChanges$ O O O O $any$ O $any$ O O $any$ O O O $any$ O O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O $void$ O O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $object$ O O O O O $string$ O O O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O O $any$ O O O $any$ O $number$ O O O O O $void$ O $number$ O O O O O O $boolean$ O O O $any$ O O O O $any$ O O $any$ O O O O $any$ O O O O O O O O $void$ O O $number$ O $number$ O O O $any$ O $Math$ O $number$ O $number$ O $number$ O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $number$ O O O O O O O $number$ O $any$ O O O $void$ O $number$ O O O O O O $boolean$ O O O $number[]$ O O O $any$ O $T[]$ O O O $any$ O O O O O O $number[]$ O O O $number$ O O $number$ O O O $void$ O $number[]$ O O O O O O O $void$ O $number$ O O O O $void$ O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O $boolean$ O $any$ O O O O O O O O $any$ O O O $any[]$ O O O $boolean$ O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O O O $any$ O $void$ O O $any$ O $number$ O O O $any$ O $number$ O O O $boolean$ O $any$ O $number$ O O $any$ O $any$ O $number$ O O O $boolean$ O $any$ O $number$ O O $any$ O O O O O O O $complex$ O $any$ O O O $complex$ O $any$ O O $any$ O O O O $complex$ O $any$ O O O $complex$ O $any$ O O $any[]$ O O $any$ O $any$ O O $any$ O O O O $any[]$ O O O O O O O $string$ O $any$ O O O $any$ O $any$ O $string$ O O O $number$ O O $string$ O O O $never$ O $number$ O $string$ O O O O $number$ O O O $number$ O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $number$ O $number$ O $number$ O O O $number$ O $number$ O O $any$ O $any$ O O O O O $any[]$ O O $void$ O $number$ O O O O $void$ O O O $number$ O O O O $void$ O O O O O O $void$ O O O O O $void$ O $number$ O O O O $void$ O $number$ O O O O $void$ O O O $boolean$ O O O $number$ O O O O O $void$ O $number$ O O O O $void$ O O O $number$ O O O O $void$ O $number$ O O O $void$ O O O O O $void$ O O O O O O $void$ O O O O O O $any$ O $any$ O O O $any$ O O O O O O O $void$ O O O O O O $void$ O O O O $void$ O O O O $HTMLDivElement$ O O O $HTMLDivElement$ O O O O O O $boolean$ O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O O O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O $boolean$ O $Event$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O $boolean$ O O $complex$ O $complex$ O $complex$ O O O O O $any$ O $boolean$ O $complex$ O $complex$ O O O O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O $boolean$ O $Event$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $complex$ O $complex$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $complex$ O O O $complex$ O $any$ O $any$ O $HTMLDivElement$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $void$ O O $any$ O O $any$ O O $any$ O O $number$ O O O O $number$ O $number$ O O O O $complex$ O $any$ O $any$ O $Document$ O $any$ O O $complex$ O $any$ O $any$ O $Document$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $void$ O O $any$ O O $any$ O O $any$ O O O $any$ O O $number$ O O O O $number$ O $number$ O O O $any$ O O O $any$ O $complex$ O $any$ O O O O O O O O O $any$ O $any$ O $complex$ O $any$ O $complex$ O $any$ O O O O $any$ O $any$ O $complex$ O $any$ O $complex$ O $any$ O O O O $any$ O $any$ O $complex$ O $any$ O $complex$ O $any$ O O O $void$ O $string[]$ O O O O O O O O O O O O O O O O $void$ O O O O O $any$ O O O O $string[]$ O $number$ O O O O O O O O O $any$ O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O $void$ O $any$ O O O O O O O O $string[]$ O $number$ O O O O O O O O O $any$ O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O $void$ O $any$ O O O O O O O O $string[]$ O $number$ O O O O O O O O O $any$ O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O $void$ O $any$ O O O O O O O $void$ O $string[]$ O O O O O O O O O O O O O O O O $void$ O O O O O $any$ O O O O $string[]$ O $number$ O O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O O $string[]$ O $number$ O O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O O $string[]$ O $number$ O O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O $void$ O $boolean$ O O O $string[]$ O O O O O O O O O $boolean$ O O O O $boolean$ O O O O O $void$ O $string[]$ O O O O O O O $boolean$ O O O O O $void$ O $string[]$ O O O O $void$ O $boolean$ O O O O $boolean$ O O O O $void$ O O O O O O O O $void$ O O O O O O O O $number$ O $number$ O O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O O $number$ O O O $any$ O $number$ O O $number$ O $number$ O O $number$ O O O O O O O $number$ O O O O $number$ O O O $number$ O O O O O $boolean$ O O O $number$ O $number$ O O O O $number$ O O $number[]$ O O O O $any$ O O O O O O $ObjectConstructor$ O $complex$ O O O $any$ O O $U[]$ O $number$ O O O O O O O $number$ O O O O O O $boolean$ O O O $number$ O $Math$ O $number$ O $number$ O O O $number$ O O O O $number$ O $number[]$ O $number$ O $number$ O O O O $number[]$ O $number[]$ O $U[]$ O $number$ O $Math$ O $number$ O $number$ O $number$ O O O O $number$ O $number[]$ O $number[]$ O $number$ O $Math$ O $number$ O O $number[]$ O O O O O O O $number$ O O O $number$ O $number$ O $number$ O $string$ O O O $any$ O $number$ O O O $number$ O O O O O $number$ O $number$ O O O O O $any$ O $number$ O O O $number$ O O O $number$ O $number$ O O O $number$ O O O O O O O $number$ O O O O O O O $number$ O O O $complex$ O O O $any$ O $complex$ O O O $HTMLDivElement$ O O O O O $boolean$ O $complex$ O $number$ O $complex$ O $number$ O O $number$ O O O O O O O $number$ O O O O O O O $number$ O O O $HTMLDivElement$ O O O $HTMLDivElement$ O O O O $boolean$ O $HTMLDivElement$ O $number$ O $HTMLDivElement$ O $number$ O O $void$ O $boolean$ O O O O O O $number$ O $boolean$ O O O O O $number$ O O O O O $number$ O $boolean$ O O O O O $number$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $boolean$ O $any$ O O O $any$ O O O $any$ O O O O O O $boolean$ O O O O $number$ O O O $number$ O O O O $number$ O O O O $any$ O O O O $any$ O O O $boolean$ O O $any$ O O O O O O $U[]$ O $number$ O O O $any$ O $number$ O $number$ O O O $number$ O O O $number$ O O O O O $any$ O $number$ O $any$ O O O O O $number$ O O O $number$ O O O O $any$ O O $boolean$ O $any$ O O O $boolean$ O O O $boolean$ O O O $any$ O O O $any$ O $undefined$ O O O O O O O $boolean$ O $ArrayConstructor$ O $complex$ O $any$ O O O O O $ArrayConstructor$ O $complex$ O $any$ O O O O $number$ O $number$ O O O O $number$ O O O O $number$ O $number$ O $never$ O O O O O $boolean$ O $number$ O O O O O O O O O O $boolean$ O O O $boolean$ O O O O $ErrorConstructor$ O O O O O O O O O $boolean$ O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O O O O $ArrayConstructor$ O $complex$ O $any$ O O O O $number$ O $number[]$ O $number$ O O O O $number$ O O O $number$ O $number$ O $number$ O O O O O $number[]$ O $number$ O O $any$ O $number$ O O O O O O O O O O O O O O O $number$ O $any$ O O O $void$ O O $any[]$ O O O O O O O O O O $complex$ O O O O O $string[]$ O O O O O $complex$ O $ArrayConstructor$ O $any[]$ O $any[]$ O $any$ O $IArguments$ O O O $Console$ O $void$ O $any$ O O O $string[]$ O O O O O $void$ O $number$ O O O O O O $any$ O $void$ O O $any$ O $number$ O O O O O $any$ O $number$ O O $boolean$ O $number$ O $number$ O O O O O O $void$ O O O O O $any$ O $void$ O $any$ O $any$ O $boolean$ O O O O O O $any$ O $number$ O O $any$ O O O O $any$ O $any$ O O O O O O O O O $number$ O O O $number$ O $number$ O $number$ O O O $any$ O $number$ O O $null$ O O O $null$ O O O $false$ O O O O O O O $any$ O O O O
<s> import { Component , HostListener , Input , OnChanges , OnInit , SimpleChanges , ViewChild , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` } ) export class _UNKNOWN_ implements OnChanges { @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) _UNKNOWN_ : number ; @ Input ( ) _UNKNOWN_ : ( value ) => string ; @ Input ( ) set _UNKNOWN_ ( value ) { const show = _UNKNOWN_ ( value ) ; if ( this . tooltip ) { if ( show ) { this . tooltip . show ( ) ; } else { this . tooltip . hide ( ) ; } } } @ ViewChild ( 's' ) tooltip : _UNKNOWN_ ; _UNKNOWN_ : string ; style : object = { } ; constructor ( private _UNKNOWN_ ) { } ngOnChanges ( changes ) { if ( changes . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } if ( changes . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( $event ) { if ( ! this . _UNKNOWN_ . isDragging ) { this . _UNKNOWN_ = true ; } } @ HostListener ( 's' , [ 's' ] ) onMouseLeave ( $event ) { if ( ! this . _UNKNOWN_ . isDragging ) { this . _UNKNOWN_ = false ; } } private _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ ? this . _UNKNOWN_ ( this . _UNKNOWN_ ) : `template` ; } private _UNKNOWN_ ( ) { if ( this . tooltip ) { window . setTimeout ( ( ) => this . tooltip . updatePosition ( ) , 0 ) ; } } private _UNKNOWN_ ( ) { this . style [ this . _UNKNOWN_ ? 's' : 's' ] = `template` ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $number$ O O O O $any$ O O $number$ O O O O $any$ O O $string$ O O $number$ O O O O O $any$ O O O $boolean$ O $boolean$ O O O $boolean$ O $boolean$ O $boolean$ O O O O O O $any$ O O O O $boolean$ O O O O $any$ O $void$ O O O O O O O O $any$ O $void$ O O O O O O O $any$ O O O $any$ O $any$ O $string$ O O O $object$ O O O O O O O O O $any$ O O O $void$ O $SimpleChanges$ O O O O $any$ O $any$ O O O O $void$ O O O O O O $any$ O $any$ O O O O $void$ O O O O O $void$ O O O O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O O O O O O $any$ O $boolean$ O O O O $boolean$ O O O O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O O O O O O $any$ O $boolean$ O O O O $boolean$ O O O O O O $void$ O O O O O $string$ O O O $string$ O O O $string$ O O O $number$ O O O O O O $void$ O O O O O O O $any$ O O $complex$ O $number)$ O O O O O O $any$ O $void$ O O O O O O O O O $void$ O O O O O $object$ O O O $string$ O O O O O O O O O O O
<s> import { Component , Input , OnChanges , SimpleChanges , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` } ) export class _UNKNOWN_ implements OnChanges { private _vertical = false ; private _UNKNOWN_ = false ; @ Input ( ) _UNKNOWN_ : number = null ; @ Input ( ) _UNKNOWN_ : number = null ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _vertical = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _vertical ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } attrs : Array < { id : number , value : number , offset : number , classes : { [ key ] : boolean } , style : object } > ; ngOnChanges ( changes ) { if ( changes . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } if ( changes . _UNKNOWN_ || changes . _UNKNOWN_ || changes . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( index , attr : { id : number , value : number , offset : number , classes : { [ key ] : boolean } , style : object } ) { return attr . id ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ ? 's' : 's' ; const _UNKNOWN_ = this . _UNKNOWN_ ; this . attrs = this . _UNKNOWN_ . map ( mark => { const { value , offset } = mark ; return { id : value , value , offset , style : { [ _UNKNOWN_ ] : `template` } , classes : { [ `template` ] : true , [ `template` ] : false } } ; } ) ; } _UNKNOWN_ ( ) { if ( this . attrs && this . _UNKNOWN_ !== null && this . _UNKNOWN_ !== null ) { this . attrs . forEach ( attr => { const value = attr . value ; const isActive = ( ! this . _UNKNOWN_ && value === this . _UNKNOWN_ ) || ( this . _UNKNOWN_ && value <= this . _UNKNOWN_ && value >= this . _UNKNOWN_ ) ; attr . classes [ `template` ] = isActive ; } ) ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $any$ O O $number$ O O O O O O $any$ O O $number$ O O O O O O $any$ O O $any$ O $any$ O O $any$ O O $string$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O $complex$ O $ArrayConstructor$ O O $number$ O O O $number$ O O O $number$ O O O $complex$ O O O $string$ O O O O O $object$ O O O O O $void$ O $SimpleChanges$ O O O O $any$ O $any$ O O O O $void$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O O O O $number$ O $number$ O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $complex$ O O O $string$ O O O O O $object$ O O O O O O $complex$ O $number$ O O $void$ O O O O O O O O $boolean$ O O O O O O $string$ O O O $string$ O O O $complex$ O O O $any$ O $U[]$ O $complex$ O O O O $number$ O $number$ O O $complex$ O O O $number$ O $number$ O $number$ O $number$ O $complex$ O O O O O O O O O $complex$ O O O O O O O O O O O O O O O O O O O O $void$ O O O O O O O $complex$ O O O $number$ O O O O O $number$ O O O O O O $complex$ O $void$ O $complex$ O O O $number$ O $complex$ O $number$ O O $boolean$ O O O O O $boolean$ O $number$ O O O $number$ O O O O O $boolean$ O $number$ O O O $number$ O $number$ O O O $number$ O O $complex$ O $complex$ O O O O $boolean$ O O O O O O O O
<s> import { Component , Input , OnChanges , SimpleChanges , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` } ) export class _UNKNOWN_ implements OnChanges { private _vertical = false ; private _UNKNOWN_ = false ; @ Input ( ) _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _vertical = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _vertical ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } style : { bottom ? : string , height ? : string , left ? : string , width ? : string , visibility ? : string } = { } ; ngOnChanges ( changes ) { if ( changes . _UNKNOWN_ ) { this . style . visibility = this . _UNKNOWN_ ? 's' : 's' ; } if ( changes . _UNKNOWN_ || changes . _UNKNOWN_ || changes . _UNKNOWN_ ) { if ( this . _UNKNOWN_ ) { this . style . bottom = `template` ; this . style . height = `template` ; } else { this . style . left = `template` ; this . style . width = `template` ; } } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O $complex$ O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O O O O $void$ O $SimpleChanges$ O O O O $any$ O $any$ O O O O $complex$ O $string$ O O O $boolean$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O $complex$ O $string$ O O O O O $complex$ O $string$ O O O O O O O O $complex$ O $string$ O O O O O $complex$ O $string$ O O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule , _UNKNOWN_ ] , providers : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { AfterContentInit , Component , ElementRef , HostBinding , Input , 0 , ViewChild , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements AfterContentInit { private _UNKNOWN_ = true ; _UNKNOWN_ : string ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value || 's' ; } get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ && ( this . _UNKNOWN_ . nativeElement . childNodes . length !== 0 ) ; } _el : HTMLElement ; _size : string ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _size = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } [ value ] ; } get _UNKNOWN_ ( ) : string { return this . _size ; } constructor ( private _elementRef , private _renderer ) { this . _el = this . _elementRef . nativeElement ; } ngAfterContentInit ( ) { if ( this . _UNKNOWN_ . nativeElement . children . length !== 0 ) { this . _renderer . setStyle ( this . _el , 's' , 's' ) ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O $boolean$ O O O $string$ O O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O $any$ O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $HTMLElement$ O $complex$ O $string$ O O O O $any$ O O O $string$ O $string$ O O O O $string$ O O $string$ O O O $string$ O O O O $string$ O O O O $string$ O O O O O O O O $string$ O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $HTMLElement$ O O O O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { exports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { AfterViewInit , ChangeDetectorRef , Component , ContentChild , ElementRef , Input , 0 , TemplateRef , ViewChild , ViewEncapsulation , } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements AfterViewInit { _status = 's' ; _UNKNOWN_ = false ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; _el ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _direction = 's' ; _UNKNOWN_ = 's' ; index = 0 ; _UNKNOWN_ ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ Input ( ) set _UNKNOWN_ ( status ) { this . _status = status ; this . _UNKNOWN_ = true ; } get _UNKNOWN_ ( ) : string { return this . _status ; } @ Input ( ) _UNKNOWN_ : string ; _description = 's' ; _UNKNOWN_ : TemplateRef < void > ; @ Input ( ) set _UNKNOWN_ ( value : string | TemplateRef < void > ) { if ( value instanceof TemplateRef ) { this . _UNKNOWN_ = value ; } else { this . _description = value as string ; } } get _current ( ) : number { return this . _UNKNOWN_ ; } set _current ( current ) { this . _UNKNOWN_ = current ; if ( ! this . _UNKNOWN_ ) { if ( current > this . index ) { this . _status = 's' ; } else if ( current === this . index ) { if ( this . _UNKNOWN_ ) { this . _status = 's' ; } else { this . _status = 's' ; } } else { this . _status = 's' ; } } this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ 's' ] : true , [ `template` ] : this . _status === 's' , [ `template` ] : this . _status === 's' , [ `template` ] : this . _status === 's' , [ `template` ] : this . _status === 's' , [ 's' ] : this . _UNKNOWN_ , [ 's' ] : ! ! this . _UNKNOWN_ , [ 's' ] : ( this . _UNKNOWN_ === 's' && this . _current === this . index - 0 ) } ; for ( const i in this . _UNKNOWN_ ) { if ( this . _UNKNOWN_ [ i ] ) { this . _renderer . addClass ( this . _el , i ) ; } else { this . _renderer . removeClass ( this . _el , i ) ; } } } _UNKNOWN_ ( ) { let width = this . _UNKNOWN_ . nativeElement . offsetWidth + this . _UNKNOWN_ . nativeElement . offsetWidth ; if ( ! this . _UNKNOWN_ ) { width = width - 0 ; } this . _renderer . setStyle ( this . _UNKNOWN_ . nativeElement , 's' , ( 0 / ( this . _UNKNOWN_ - 0 ) ) + 's' ) ; this . _renderer . setStyle ( this . _UNKNOWN_ . nativeElement , 's' , ( - ( width / ( this . _UNKNOWN_ - 0 ) + 0 ) ) + 's' ) ; if ( this . _direction === 's' ) { if ( this . _UNKNOWN_ && this . _UNKNOWN_ . nativeElement ) { this . _renderer . setStyle ( this . _UNKNOWN_ . nativeElement , 's' , ( ( width / ( this . _UNKNOWN_ - 0 ) + 0 ) ) + 's' ) ; } } } constructor ( private _UNKNOWN_ , private _renderer , public cdr ) { this . _el = _UNKNOWN_ . nativeElement ; } ngAfterViewInit ( ) { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $string$ O O O $boolean$ O O O $number$ O O O $number$ O O O $any$ O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $string$ O O O $number$ O O O $any$ O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $boolean$ O O O O O $string$ O O O O O O O O $string$ O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $string$ O $any$ O O O O O O $number$ O O O O O O O O $number$ O O O $number$ O $number$ O O O O $number$ O $number$ O O O O O O $boolean$ O O O O $number$ O O O $number$ O O O O $string$ O O O O O O O $number$ O O O $number$ O O O O O O $string$ O O O O $string$ O O O O O O O O $string$ O O O O O O O O O $string$ O O O O O O O $void$ O O O O $void$ O O O O O $any$ O O O O O O O O O O O O O O $string$ O O O O O O O O O $string$ O O O O O O O O O $string$ O O O O O O O O O $string$ O O O O O O O O O $boolean$ O O O O O O O O O $any$ O O O O O O O O $string$ O O O O O $number$ O O O $number$ O O O O O O O O $string$ O O O $any$ O O O O O O $any$ O $string$ O O O O O $any$ O $any$ O O O $any$ O $string$ O O O O O O O $any$ O $any$ O O O $any$ O $string$ O O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $boolean$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O $number$ O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O O $number$ O O O O O O O O O O O O O O O $string$ O O O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O $number$ O O O O O O O O O O O O O O O O O $ElementRef$ O O $Renderer2$ O O $ChangeDetectorRef$ O O O O $any$ O $any$ O $any$ O O $void$ O O O O O O O O $boolean$ O O O O $void$ O O O O O O O
<s> import { AfterViewInit , Component , ContentChildren , Input , OnDestroy , OnInit , QueryList , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export type _UNKNOWN_ = 's' | 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit , OnDestroy , AfterViewInit { private _UNKNOWN_ = false ; _status = 's' ; _current = 0 ; _UNKNOWN_ : object ; _UNKNOWN_ = false ; _direction : _UNKNOWN_ = 's' ; _UNKNOWN_ ; @ ContentChildren ( _UNKNOWN_ ) steps : QueryList < _UNKNOWN_ > ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _direction = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _direction ; } @ Input ( ) _UNKNOWN_ : 's' | 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( status ) { this . _status = status ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : string { return this . _status ; } @ Input ( ) set _UNKNOWN_ ( current ) { this . _current = current ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : number { return this . _current ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ `template` ] : true , [ `template` ] : true , [ `template` ] : this . _UNKNOWN_ , [ 's' ] : this . _UNKNOWN_ === 's' } ; } _UNKNOWN_ ( ) { setTimeout ( ( ) => { this . steps . toArray ( ) . forEach ( ( step , index , arr ) => { step . _UNKNOWN_ = this . _UNKNOWN_ ; step . _UNKNOWN_ = this . _UNKNOWN_ as boolean ; step . _direction = this . _UNKNOWN_ ; step . index = index ; step . _UNKNOWN_ = arr . length ; step . _current = this . _UNKNOWN_ ; step . _UNKNOWN_ = index === 0 ; if ( arr . length === index + 0 ) { step . _UNKNOWN_ = true ; } else { step . _UNKNOWN_ = false ; step . _UNKNOWN_ ( ) ; } if ( this . _UNKNOWN_ === step . index ) { step . _status = this . _UNKNOWN_ ; } step . _UNKNOWN_ ( ) ; } ) ; } ) ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } ngOnDestroy ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; this . _UNKNOWN_ = null ; } } ngAfterViewInit ( ) { setTimeout ( ( ) => { this . _UNKNOWN_ = true ; } ) ; this . _UNKNOWN_ ( ) ; if ( this . steps ) { this . _UNKNOWN_ = this . steps . changes . subscribe ( ( ) => { this . _UNKNOWN_ ( ) ; } ) ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O $string$ O O O $number$ O O O $object$ O O O $boolean$ O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $void$ O O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O O O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $void$ O O O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $number$ O $number$ O O O O $number$ O $number$ O O O $void$ O O O O O $number$ O O O O O O O O $number$ O O $void$ O O O O O $object$ O O O O O O O O O O O O O O O O O O O O $boolean$ O O O O O O O O O O O O O $void$ O O O $number$ O O O O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $number$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $number$ O $any$ O $any$ O O $any$ O $any$ O O O $string$ O O $any$ O $any$ O O O O O O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O $void$ O O O $number$ O O O O O O O $boolean$ O O O O O O O O $void$ O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $void$ O O O O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O O $any$ O O O
<s> import { forwardRef , Component , HostListener , Input , OnInit , ViewEncapsulation , } from 's' ; import { ControlValueAccessor , NG_VALUE_ACCESSOR } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , providers : [ { provide : NG_VALUE_ACCESSOR , useExisting : forwardRef ( ( ) => _UNKNOWN_ ) , multi : true } ] , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit , ControlValueAccessor { private _disabled = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ ; _size : string ; _checked = false ; onChange : ( value ) => void = ( ) => null ; onTouched : ( ) => void = ( ) => null ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _size = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : string { return this . _size ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ HostListener ( 's' , [ 's' ] ) onClick ( e ) { e . preventDefault ( ) ; if ( ! this . _disabled ) { this . updateValue ( ! this . _checked ) ; this . onChange ( this . _checked ) ; } } updateValue ( value ) { if ( this . _checked === value ) { return ; } this . _checked = value ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ `template` ] : this . _checked , [ `template` ] : this . _disabled , [ `template` ] : this . _size === 's' } ; } writeValue ( value ) { this . updateValue ( value ) ; } registerOnChange ( fn : ( _ ) => void ) { this . onChange = fn ; } registerOnTouched ( fn : ( ) => void ) { this . onTouched = fn ; } _UNKNOWN_ ( isDisabled ) { this . _UNKNOWN_ = isDisabled ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $boolean$ O O O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O $string$ O O O $string$ O O O $any$ O $string$ O O O $boolean$ O O O $void$ O O $boolean$ O O O O O O O O O $void$ O O O O O O O O O O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $void$ O O O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O O O O $boolean$ O O O O $void$ O O O O $boolean$ O O O O $void$ O O O $boolean$ O O O O $void$ O $boolean$ O O O O O O $boolean$ O $boolean$ O O O O O O O $boolean$ O $boolean$ O O O $void$ O O O O $void$ O O O O O $any$ O O O O O $string$ O O O O O O O O O O $boolean$ O O O O O O O $boolean$ O O O O O O O $string$ O O O O O $void$ O $boolean$ O O O O $void$ O $boolean$ O O O $void$ O $void$ O O $boolean$ O O O O O O O $void$ O $void$ O O $void$ O $void$ O O O O O O O O O $void$ O $void$ O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O $void$ O O O O O $void$ O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { exports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { Component , EventEmitter , HostBinding , HostListener , Input , Output , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ { private _UNKNOWN_ = false ; private _UNKNOWN_ = true ; @ Output ( ) _UNKNOWN_ = new EventEmitter ( ) ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ HostBinding ( 's' ) get hidden ( ) : boolean { return ! this . _UNKNOWN_ ; } @ HostBinding ( `template` ) get expanded ( ) : boolean { return this . _UNKNOWN_ && this . _UNKNOWN_ ; } @ HostBinding ( `template` ) get collapsed ( ) : boolean { return this . _UNKNOWN_ && ! this . _UNKNOWN_ ; } @ HostListener ( 's' ) onClick ( ) { this . _UNKNOWN_ = ! this . _UNKNOWN_ ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O $boolean$ O O O O $boolean$ O O O O $any$ O O $any$ O O $any$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O O $boolean$ O O O O O O O O O $boolean$ O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O O O $any$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O $boolean$ O O O $any$ O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O O $any$ O $any$ O O O $boolean$ O O O O O
<s> import { Component , HostBinding , Input , } from 's' ; @ Component ( { selector : 's' , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ { @ Input ( ) _UNKNOWN_ ; @ HostBinding ( `template` ) get _UNKNOWN_ ( ) : number { return this . _UNKNOWN_ * 0 ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O $string$ O O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O $any$ O O $any$ O O $any$ O O O O $number$ O O O O O O O O $any$ O O O O O O
<s> import { Directive , HostBinding } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Component , HostBinding , OnInit } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ ( ) { this . _UNKNOWN_ . _UNKNOWN_ = false ; this . _UNKNOWN_ . _UNKNOWN_ ( ) ; } constructor ( private _UNKNOWN_ ) { } ngOnInit ( ) { this . _UNKNOWN_ . _UNKNOWN_ = true ; this . _UNKNOWN_ . _UNKNOWN_ = false ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $complex$ O O O O O O O O O O $any$ O $any$ O $void$ O O O O O $any$ O $boolean$ O O O O O $any$ O $void$ O O O O O O O $any$ O O O $void$ O O O O O $any$ O $boolean$ O O O O O $any$ O $boolean$ O O O O O O
<s> import { Directive , ElementRef , HostBinding , Input , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Directive ( { selector : 's' } ) export class _UNKNOWN_ { private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; _el : HTMLElement ; @ Input ( ) _UNKNOWN_ ; @ Input ( ) @ HostBinding ( `template` ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) @ HostBinding ( `template` ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } constructor ( private _elementRef ) { this . _el = this . _elementRef . nativeElement ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O O O O $any$ O O $boolean$ O O O O $boolean$ O O O $HTMLElement$ O $complex$ O O $any$ O O $any$ O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O O $ElementRef$ O O O O $HTMLElement$ O O O $any$ O $any$ O O O O
<s> import { Component , EventEmitter , Host , Input , Optional , Output , 0 , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { _value : string = null ; @ Output ( ) _UNKNOWN_ : EventEmitter < string > = new EventEmitter ( ) ; @ Input ( ) get _UNKNOWN_ ( ) : string { return this . _value ; } set _UNKNOWN_ ( value ) { this . _value = value ; if ( this . _UNKNOWN_ ) { if ( ( this . _value !== 's' ) && ( this . _value !== 's' ) ) { this . _renderer . removeClass ( this . _UNKNOWN_ . _el , 's' ) ; } else { this . _renderer . addClass ( this . _UNKNOWN_ . _el , 's' ) ; } } } _UNKNOWN_ ( value ) { if ( this . _UNKNOWN_ === value ) { this . _UNKNOWN_ = null ; } else { this . _UNKNOWN_ = value ; } this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } constructor ( @ Host ( ) @ Optional ( ) private _UNKNOWN_ , private _renderer ) { } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $string$ O O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O $string$ O O O O O O O O $string$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O O O $any$ O O O O O O O $string$ O O O O O O O $string$ O O O O O O O $any$ O $any$ O O O $any$ O $HTMLElement$ O O O O O O O O O $any$ O $any$ O O O $any$ O $HTMLElement$ O O O O O O O $void$ O $string$ O O O O O O $string$ O $string$ O O O O $string$ O O O O O O O O $string$ O $string$ O O O O $any$ O $any$ O O O $string$ O O O O O O $any$ O O O $any$ O O O $any$ O O $Renderer2$ O O O O O
<s> import { AfterViewInit , ChangeDetectorRef , Component , ContentChild , ContentChildren , ElementRef , EventEmitter , Input , OnInit , Output , QueryList , TemplateRef , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements AfterViewInit , OnInit { private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = true ; private _UNKNOWN_ = true ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; data : any [ ] = [ ] ; _UNKNOWN_ : { x : number , y : number } ; _el : HTMLElement ; _current = 0 ; _total : number ; _pageSize = 0 ; _UNKNOWN_ : any [ ] = [ ] ; _isInit = false ; _UNKNOWN_ = false ; _UNKNOWN_ = [ ] ; @ Output ( ) _UNKNOWN_ : EventEmitter < number > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < number > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < any [ ] > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < number > = new EventEmitter ( ) ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ = [ 0 , 0 , 0 , 0 , 0 ] ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ ContentChildren ( _UNKNOWN_ , { descendants : true } ) set _UNKNOWN_ ( value < _UNKNOWN_ > ) { this . _UNKNOWN_ = value . toArray ( ) ; } @ Input ( ) set _UNKNOWN_ ( value : { x : number , y : number } ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ . detectChanges ( ) ; } get _UNKNOWN_ ( ) : { x : number , y : number } { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( data : any [ ] ) { this . _UNKNOWN_ = true ; this . data = data ; } get _UNKNOWN_ ( ) : any [ ] { return this . data ; } @ Input ( ) set _UNKNOWN_ ( value : any [ ] ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ = this . _UNKNOWN_ . length ; this . _UNKNOWN_ ( true ) ; } get _UNKNOWN_ ( ) : any [ ] { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { if ( this . _current === value ) { return ; } this . _current = value ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; } get _UNKNOWN_ ( ) : number { return this . _current ; } _UNKNOWN_ ( value ) { this . _UNKNOWN_ . emit ( value ) ; } @ Input ( ) set _UNKNOWN_ ( value ) { if ( this . _pageSize === value ) { return ; } this . _pageSize = value ; this . _UNKNOWN_ ( ) ; if ( this . _isInit ) { this . _UNKNOWN_ . emit ( value ) ; } } get _UNKNOWN_ ( ) : number { return this . _pageSize ; } @ Input ( ) set _UNKNOWN_ ( value ) { if ( this . _total === value ) { return ; } this . _total = value ; } get _UNKNOWN_ ( ) : number { return this . _total ; } _UNKNOWN_ ( _UNKNOWN_ = false ) { if ( ! this . _UNKNOWN_ ) { if ( this . _UNKNOWN_ ) { if ( _UNKNOWN_ ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ = 0 ; } else { const _UNKNOWN_ = Math . ceil ( this . _UNKNOWN_ . length / this . _UNKNOWN_ ) ; this . _UNKNOWN_ = ! this . _UNKNOWN_ ? 0 : ( this . _UNKNOWN_ > _UNKNOWN_ ? _UNKNOWN_ : this . _UNKNOWN_ ) ; } } this . data = this . _UNKNOWN_ . slice ( ( this . _UNKNOWN_ - 0 ) * this . _UNKNOWN_ , this . _UNKNOWN_ * this . _UNKNOWN_ ) ; } else { this . data = this . _UNKNOWN_ ; } this . _UNKNOWN_ . emit ( this . data ) ; } } ngOnInit ( ) { } constructor ( private _elementRef , private _UNKNOWN_ ) { this . _el = this . _elementRef . nativeElement ; } ngAfterViewInit ( ) { this . _isInit = true ; } _UNKNOWN_ ( event ) { if ( this . _UNKNOWN_ != null && this . _UNKNOWN_ . x != null ) { const body = event . currentTarget as HTMLDivElement ; const head = body . parentElement . getElementsByClassName ( 's' ) [ 0 ] ; head . scrollLeft = body . scrollLeft ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $number$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $any[]$ O O O O O O O O $complex$ O O $number$ O O O $number$ O O O O $HTMLElement$ O $complex$ O $number$ O O O $number$ O O O $number$ O O O $any[]$ O O O O O O O O $boolean$ O O O $boolean$ O O O $any[]$ O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $string$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $number[]$ O O O O O O O O O O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O $boolean$ O O O O O $any$ O $QueryList$ O $any$ O O O O O $any[]$ O $any$ O $any$ O O O O O $any$ O O O $complex$ O $complex$ O O $number$ O O O $number$ O O O O O O O $complex$ O $complex$ O O O $any$ O $any$ O O O O O $complex$ O O O O $number$ O O O $number$ O O O O O O O $complex$ O O O $any$ O O O $any[]$ O $any[]$ O O O O O O O O $boolean$ O O O O O $any[]$ O $any[]$ O O O $any[]$ O O O O O O O O O O $any[]$ O O O $any$ O O O $any[]$ O $any[]$ O O O O O O O O $any[]$ O $any[]$ O O O $number$ O O O $any[]$ O $number$ O O O $void$ O O O O O O $any[]$ O O O O O O O O O O $any[]$ O O O $any$ O O O $number$ O $number$ O O O O O O $number$ O $number$ O O O O O O O $number$ O $number$ O O O $void$ O O O O O $any$ O $any$ O O O $number$ O O O O $number$ O O O O O O O O $number$ O O $void$ O $number$ O O O O $any$ O $any$ O $number$ O O O O $any$ O O O $number$ O $number$ O O O O O O $number$ O $number$ O O O O O O O $number$ O $number$ O O O $void$ O O O O O O O $boolean$ O O O O $any$ O $any$ O $number$ O O O O O $number$ O O O O O O O O $number$ O O O $any$ O O O $number$ O $number$ O O O O O O $number$ O $number$ O O O O O O O $number$ O $number$ O O O $number$ O O O O O O O O $number$ O O $void$ O $boolean$ O O O O O O O O O $boolean$ O O O O O O $boolean$ O O O O $boolean$ O O O O O O $boolean$ O O O O $number$ O O O O O O O $number$ O $Math$ O $number$ O O O $any[]$ O $number$ O O O $number$ O O O O $number$ O O O O $number$ O O O O O O $number$ O $number$ O $number$ O O O $number$ O O O O O O $any[]$ O O O $any[]$ O $any[]$ O O O O $number$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O O O $any[]$ O O O $any[]$ O O O O $any$ O $any$ O O O $any[]$ O O O O $void$ O O O O O O O $ElementRef$ O O $ChangeDetectorRef$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O O $boolean$ O O O O $void$ O $Event$ O O O O O O $complex$ O O O O O $complex$ O $number$ O O O O O $HTMLDivElement$ O $Event$ O $EventTarget$ O $complex$ O O $Element$ O $HTMLDivElement$ O $HTMLElement$ O $HTMLCollectionOf<Element>$ O O O O O O O $Element$ O $number$ O $HTMLDivElement$ O $number$ O O O O O
<s> import { Directive , HostBinding , Input } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Directive , HostBinding } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { Directive , ElementRef , HostBinding , Input , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Directive ( { selector : 's' } ) export class _UNKNOWN_ { private _UNKNOWN_ = false ; private _UNKNOWN_ = false ; _el : HTMLElement ; @ Input ( ) @ HostBinding ( `template` ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) @ HostBinding ( `template` ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } constructor ( private _elementRef ) { this . _el = this . _elementRef . nativeElement ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O O O O $any$ O O $boolean$ O O O O $boolean$ O O O $HTMLElement$ O $complex$ O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O O $ElementRef$ O O O O $HTMLElement$ O O O $any$ O $any$ O O O O
<s> import { Directive , HostBinding } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , Input , TemplateRef , ViewEncapsulation , } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , } ) export class _UNKNOWN_ { @ Input ( ) content : TemplateRef < void > ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O O
<s> import { Directive , ElementRef , HostBinding , Input } from 's' ; import { _UNKNOWN_ } from 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { private _disabled = false ; @ Input ( ) @ HostBinding ( 's' ) set disabled ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get disabled ( ) : boolean { return this . _disabled ; } constructor ( public elementRef ) { } _UNKNOWN_ ( ) { return this . elementRef . nativeElement . offsetLeft ; } _UNKNOWN_ ( ) { return this . elementRef . nativeElement . offsetWidth ; } _UNKNOWN_ ( ) { return this . elementRef . nativeElement . offsetTop ; } _UNKNOWN_ ( ) { return this . elementRef . nativeElement . offsetHeight ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O $boolean$ O O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O O $ElementRef$ O O O $number$ O O O O O O $any$ O $any$ O $any$ O O $number$ O O O O O O $any$ O $any$ O $any$ O O $number$ O O O O O O $any$ O $any$ O $any$ O O $number$ O O O O O O $any$ O $any$ O $any$ O O O O
<s> import { Directive , ElementRef , HostBinding , Input , NgZone , 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export type _UNKNOWN_ = 's' | 's' ; @ Directive ( { selector : 's' , host : { 's' : 's' } } ) export class _UNKNOWN_ { private _UNKNOWN_ = false ; @ Input ( ) @ HostBinding ( 's' ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : _UNKNOWN_ = 's' ; constructor ( private _renderer , private _elementRef , private _ngZone ) { } _UNKNOWN_ ( element ) { this . show ( ) ; this . _ngZone . runOutsideAngular ( ( ) => { _UNKNOWN_ ( ( ) => { if ( this . _UNKNOWN_ === 's' ) { this . _renderer . _UNKNOWN_ ( this . _elementRef . nativeElement , 's' ) ; this . _renderer . setStyle ( this . _elementRef . nativeElement , 's' , `template` ) ; this . _renderer . setStyle ( this . _elementRef . nativeElement , 's' , this . _UNKNOWN_ ( element ) ) ; } else { this . _renderer . _UNKNOWN_ ( this . _elementRef . nativeElement , 's' ) ; this . _renderer . setStyle ( this . _elementRef . nativeElement , 's' , `template` ) ; this . _renderer . setStyle ( this . _elementRef . nativeElement , 's' , this . _UNKNOWN_ ( element ) ) ; } } ) ; } ) ; } show ( ) { this . _renderer . setStyle ( this . _elementRef . nativeElement , 's' , 's' ) ; } _UNKNOWN_ ( value ) { this . _renderer . setStyle ( this . _elementRef . nativeElement , 's' , value ) ; } hide ( ) { this . _renderer . setStyle ( this . _elementRef . nativeElement , 's' , 's' ) ; } _UNKNOWN_ ( element ) { return element ? element . offsetLeft + 's' : 's' ; } _UNKNOWN_ ( element ) { return element ? element . offsetWidth + 's' : 's' ; } _UNKNOWN_ ( element ) { return element ? element . offsetTop + 's' : 's' ; } _UNKNOWN_ ( element ) { return element ? element . offsetHeight + 's' : 's' ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $number$ O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O $string$ O O O $complex$ O O O O O O O O O O $any$ O O $boolean$ O O O O $any$ O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $any$ O $any$ O O O O O O $Renderer2$ O O $ElementRef$ O O $NgZone$ O O O $void$ O $HTMLElement$ O O O O $void$ O O O O O $any$ O $any$ O O O O O $number$ O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $string$ O $HTMLElement$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $string$ O $HTMLElement$ O O O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $void$ O $string$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $string$ O $HTMLElement$ O O O $HTMLElement$ O $HTMLElement$ O $number$ O O O O O O $string$ O $HTMLElement$ O O O $HTMLElement$ O $HTMLElement$ O $number$ O O O O O O $string$ O $HTMLElement$ O O O $HTMLElement$ O $HTMLElement$ O $number$ O O O O O O $string$ O $HTMLElement$ O O O $HTMLElement$ O $HTMLElement$ O $number$ O O O O O O O O
<s> import { Direction , Directionality } from 's' ; import { AfterContentChecked , AfterContentInit , Component , ContentChild , ContentChildren , ElementRef , HostBinding , Input , NgZone , Optional , QueryList , 0 , TemplateRef , ViewChild , ViewEncapsulation , } from 's' ; import { Subscription } from 's' ; import { fromEvent } from 's' ; import { merge } from 's' ; import { of as observableOf } from 's' ; import { auditTime } from 's' ; import { startWith } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = 0 ; export type _UNKNOWN_ = 's' | 's' ; export type _UNKNOWN_ = 's' | 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , host : { 's' : 's' } } ) export class _UNKNOWN_ implements AfterContentChecked , AfterContentInit { private _UNKNOWN_ = true ; private _UNKNOWN_ = false ; private _UNKNOWN_ = true ; _UNKNOWN_ = false ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _UNKNOWN_ = 0 ; _UNKNOWN_ = false ; _UNKNOWN_ : Subscription | null = null ; _UNKNOWN_ : number ; _UNKNOWN_ : boolean ; _selectedIndex = 0 ; _UNKNOWN_ : _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; _type = 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _type = value ; if ( this . _type !== 's' ) { this . _inkBar . _UNKNOWN_ ( 's' ) ; } else { this . _inkBar . _UNKNOWN_ ( 's' ) ; } } get _UNKNOWN_ ( ) : string { return this . _type ; } @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ ContentChildren ( _UNKNOWN_ ) _labelWrappers : QueryList < _UNKNOWN_ > ; @ ViewChild ( _UNKNOWN_ ) _inkBar : _UNKNOWN_ ; @ ViewChild ( 's' ) _tabListContainer : ElementRef ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _UNKNOWN_ ; } @ Input ( ) set selectedIndex ( value ) { this . _UNKNOWN_ = this . _selectedIndex !== value ; this . _selectedIndex = value ; } get selectedIndex ( ) : number { return this . _selectedIndex ; } constructor ( public _elementRef , private _ngZone , private _renderer , @ Optional ( ) private _dir ) { } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { this . scrollDistance += ( _UNKNOWN_ === 's' ? - 0 : 0 ) * this . _UNKNOWN_ / 0 ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ !== this . _labelWrappers . length ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ = this . _labelWrappers . length ; } if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( this . _selectedIndex ) ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = false ; } if ( this . _UNKNOWN_ ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ = false ; } } ngAfterContentInit ( ) { this . _UNKNOWN_ = this . _ngZone . runOutsideAngular ( ( ) => { const _UNKNOWN_ = this . _dir ? this . _dir . change : observableOf ( null ) ; const resize = typeof window !== 's' ? fromEvent ( window , 's' ) . pipe ( auditTime ( 0 ) ) : observableOf ( null ) ; return merge ( _UNKNOWN_ , resize ) . pipe ( startWith ( null ) ) . subscribe ( ( ) => { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ ( ) ; } ) ; } ) ; } _UNKNOWN_ ( ) { const scrollDistance = this . scrollDistance ; if ( this . _UNKNOWN_ === 's' ) { const translateX = this . _getLayoutDirection ( ) === 's' ? - scrollDistance : scrollDistance ; this . _renderer . setStyle ( this . _UNKNOWN_ . nativeElement , 's' , `template` ) ; } else { this . _renderer . setStyle ( this . _UNKNOWN_ . nativeElement , 's' , `template` ) ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ > this . _UNKNOWN_ ; if ( ! this . _UNKNOWN_ ) { this . scrollDistance = 0 ; } } _UNKNOWN_ ( _UNKNOWN_ ) { const _UNKNOWN_ = this . _labelWrappers ? this . _labelWrappers . toArray ( ) [ _UNKNOWN_ ] : null ; if ( ! _UNKNOWN_ ) { return ; } let _UNKNOWN_ ; let _UNKNOWN_ ; if ( this . _UNKNOWN_ === 's' ) { if ( this . _getLayoutDirection ( ) === 's' ) { _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) ; _UNKNOWN_ = _UNKNOWN_ + _UNKNOWN_ . _UNKNOWN_ ( ) ; } else { _UNKNOWN_ = this . _UNKNOWN_ . nativeElement . offsetWidth - _UNKNOWN_ . _UNKNOWN_ ( ) ; _UNKNOWN_ = _UNKNOWN_ - _UNKNOWN_ . _UNKNOWN_ ( ) ; } } else { _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) ; _UNKNOWN_ = _UNKNOWN_ + _UNKNOWN_ . _UNKNOWN_ ( ) ; } const _UNKNOWN_ = this . scrollDistance ; const _UNKNOWN_ = this . scrollDistance + this . _UNKNOWN_ ; if ( _UNKNOWN_ < _UNKNOWN_ ) { this . scrollDistance -= _UNKNOWN_ - _UNKNOWN_ + _UNKNOWN_ ; } else if ( _UNKNOWN_ > _UNKNOWN_ ) { this . scrollDistance += _UNKNOWN_ - _UNKNOWN_ + _UNKNOWN_ ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . scrollDistance === 0 ; this . _UNKNOWN_ = this . scrollDistance === this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { return ( this . _UNKNOWN_ - this . _UNKNOWN_ ) || 0 ; } set scrollDistance ( v ) { this . _UNKNOWN_ = Math . max ( 0 , Math . min ( this . _UNKNOWN_ ( ) , v ) ) ; this . _UNKNOWN_ = true ; this . _UNKNOWN_ ( ) ; } get scrollDistance ( ) : number { return this . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : number { let _UNKNOWN_ = 0 ; if ( this . _UNKNOWN_ ) { _UNKNOWN_ = 0 ; } if ( this . _UNKNOWN_ === 's' ) { return this . _tabListContainer . nativeElement . offsetWidth - _UNKNOWN_ ; } else { return this . _tabListContainer . nativeElement . offsetHeight - _UNKNOWN_ ; } } get _UNKNOWN_ ( ) : number { if ( this . _UNKNOWN_ === 's' ) { return this . _UNKNOWN_ . nativeElement . scrollWidth ; } else { return this . _UNKNOWN_ . nativeElement . scrollHeight ; } } get _UNKNOWN_ ( ) : number { if ( this . _UNKNOWN_ === 's' ) { return this . _elementRef . nativeElement . offsetWidth ; } else { return this . _elementRef . nativeElement . offsetHeight ; } } _getLayoutDirection ( ) { return this . _dir && this . _dir . value === 's' ? 's' : 's' ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ === 's' ) { const _UNKNOWN_ = this . _labelWrappers && this . _labelWrappers . length ? this . _labelWrappers . toArray ( ) [ this . selectedIndex ] . elementRef . nativeElement : null ; if ( this . _inkBar ) { this . _inkBar . _UNKNOWN_ ( _UNKNOWN_ ) ; } } } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $number$ O O O $boolean$ O O O $any$ O $any$ O O O O O $number$ O O O $boolean$ O O O $number$ O O O $any$ O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O O O $string$ O O O O O O $any$ O $void$ O O O O O O O O O $any$ O $void$ O O O O O O O $string$ O O O O O O O O $string$ O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $void$ O O O O O O O $boolean$ O O O O $void$ O O O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O $number$ O $number$ O O O O $boolean$ O O O $number$ O $number$ O O O $number$ O $number$ O O O $number$ O O O O O O O O $number$ O O O O O $ElementRef$ O O $NgZone$ O O $Renderer2$ O O $any$ O O O $Directionality$ O O O $void$ O O O O O O O $boolean$ O O O O $void$ O O O O O O $void$ O O O O $void$ O $any$ O O O O $number$ O O $any$ O O O O O O O O O O O $number$ O O O O $void$ O O O O O O O $number$ O O O $any$ O $any$ O O O O O O $boolean$ O O O O $void$ O O O O O O $number$ O O O $any$ O $any$ O O O O O O $boolean$ O O O O $void$ O O O $number$ O O O O O O $boolean$ O O O O $void$ O O O O O O $void$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O O O O $boolean$ O O O O $void$ O O O O O O $boolean$ O O O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O $complex$ O O O $any$ O $complex$ O O O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O O $boolean$ O O O O $void$ O O O O O O $void$ O O O O O O O O O O $void$ O O O O $number$ O O O $number$ O O O O O $any$ O O O O O $number$ O O O $any$ O O O O O O $number$ O $number$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $boolean$ O O O $number$ O O O $number$ O O O O O O $boolean$ O O O O $number$ O O O O O $void$ O $number$ O O O $any$ O O O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O O $any$ O O O O O O $number$ O O $number$ O O O O O $any$ O O O O O O O O $any$ O O O O O O $number$ O $any$ O $any$ O O O $number$ O $number$ O $any$ O $any$ O O O O O O $number$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $number$ O $number$ O $any$ O $any$ O O O O O O O $number$ O $any$ O $any$ O O O $number$ O $number$ O $any$ O $any$ O O O O O $number$ O O O $number$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O $number$ O O O O $number$ O $number$ O $number$ O O O O O O O $number$ O $number$ O O O O $number$ O $number$ O $number$ O O O O O $void$ O O O O O $boolean$ O O O $number$ O O O O O $boolean$ O O O $number$ O O O $number$ O O O O $number$ O O O O O O O $number$ O O O $number$ O O O O O O $number$ O $number$ O O O O $number$ O $Math$ O $number$ O O O $Math$ O $number$ O O O $number$ O O O $number$ O O O O O $boolean$ O O O O O $void$ O O O O O $number$ O O O O O O O O $number$ O O O $number$ O O O O O O $number$ O O O O O O O $boolean$ O O $number$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $number$ O O O O O O O $any$ O $any$ O $any$ O $number$ O O O O $number$ O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $number$ O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $Direction$ O O O O O O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O O O O O $string$ O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $number$ O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $void$ O $any$ O O O O O O O
<s> import { AfterContentChecked , AfterViewInit , Component , ContentChild , ElementRef , EventEmitter , Input , OnInit , Output , 0 , TemplateRef , ViewChild , ViewEncapsulation , } from 's' ; import { Observable } from 's' ; import { map } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { inkBar : boolean ; _UNKNOWN_ : boolean ; } export class _UNKNOWN_ { index : number ; tab : _UNKNOWN_ ; } export type _UNKNOWN_ = 's' | 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | 's' ; export type _UNKNOWN_ = 's' | 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements AfterContentChecked , OnInit , AfterViewInit { _el ; _UNKNOWN_ ; _UNKNOWN_ = 's' ; _width ; _UNKNOWN_ : _UNKNOWN_ = 's' ; _UNKNOWN_ : _UNKNOWN_ = 's' ; _UNKNOWN_ : number | null = 0 ; _selectedIndex : number | null = null ; _UNKNOWN_ = false ; _tabs : _UNKNOWN_ [ ] = [ ] ; @ Input ( ) _UNKNOWN_ : TemplateRef < void > ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ ViewChild ( 's' ) _UNKNOWN_ : _UNKNOWN_ ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ | boolean = true ; @ Input ( ) _UNKNOWN_ = true ; @ Input ( ) _UNKNOWN_ = false ; @ Input ( ) set _UNKNOWN_ ( value : number | null ) { this . _UNKNOWN_ = value ; } get _UNKNOWN_ ( ) : number | null { return this . _selectedIndex ; } @ Output ( ) get _UNKNOWN_ ( ) : Observable < number > { return this . _UNKNOWN_ . pipe ( map ( event => event . index ) ) ; } @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter < _UNKNOWN_ > ( true ) ; @ Input ( ) _UNKNOWN_ = 's' ; _type : _UNKNOWN_ = 's' ; tabs : _UNKNOWN_ [ ] = [ ] ; @ Input ( ) set _UNKNOWN_ ( value ) { if ( this . _UNKNOWN_ === value ) { return ; } this . _UNKNOWN_ = value ; if ( ( this . _UNKNOWN_ === 's' ) || ( this . _UNKNOWN_ === 's' ) ) { this . _UNKNOWN_ = 's' ; } else { this . _UNKNOWN_ = 's' ; } this . _UNKNOWN_ ( value ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _UNKNOWN_ ; } @ Input ( ) set _UNKNOWN_ ( value ) { if ( this . _type === value ) { return ; } this . _type = value ; if ( this . _type === 's' ) { this . _UNKNOWN_ = false ; } this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _type ; } _UNKNOWN_ ( value ) { if ( this . _UNKNOWN_ ) { if ( value === 's' ) { this . _renderer . insertBefore ( this . _UNKNOWN_ . nativeElement , this . _UNKNOWN_ . nativeElement , this . _UNKNOWN_ . _elementRef . nativeElement ) ; } else { this . _renderer . insertBefore ( this . _UNKNOWN_ . nativeElement , this . _UNKNOWN_ . _elementRef . nativeElement , this . _UNKNOWN_ . nativeElement ) ; } } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = { [ this . _UNKNOWN_ ] : true , [ `template` ] : ( this . _UNKNOWN_ === 's' ) || ( this . _UNKNOWN_ === 's' ) , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : ( this . _UNKNOWN_ === false ) || ( ( this . _UNKNOWN_ as _UNKNOWN_ ) . _UNKNOWN_ === false ) , [ `template` ] : this . _type , [ `template` ] : ( this . _UNKNOWN_ === 's' ) } ; } _UNKNOWN_ ( index ) { this . _UNKNOWN_ = index ; this . _tabs [ index ] . _UNKNOWN_ . emit ( ) ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { const indexToSelect = this . _UNKNOWN_ = Math . min ( this . _tabs . length - 0 , Math . max ( this . _UNKNOWN_ || 0 , 0 ) ) ; if ( this . _selectedIndex !== indexToSelect && this . _selectedIndex != null ) { this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ( indexToSelect ) ) ; } this . _tabs . forEach ( ( tab , index ) => { tab . position = index - indexToSelect ; if ( this . _selectedIndex != null && tab . position === 0 && ! tab . origin ) { tab . origin = indexToSelect - this . _selectedIndex ; } } ) ; this . _selectedIndex = indexToSelect ; } ngAfterViewInit ( ) { this . _UNKNOWN_ = true ; this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } private _UNKNOWN_ ( index ) { const event = new _UNKNOWN_ ( ) ; event . index = index ; if ( this . _tabs && this . _tabs . length ) { event . tab = this . _tabs [ index ] ; this . _tabs . forEach ( ( item , i ) => { if ( i !== index ) { item . _UNKNOWN_ . emit ( ) ; } } ) ; event . tab . _UNKNOWN_ . emit ( ) ; } return event ; } get _UNKNOWN_ ( ) : boolean { return ( this . _UNKNOWN_ === true ) || ( ( this . _UNKNOWN_ as _UNKNOWN_ ) . inkBar === true ) ; } get _UNKNOWN_ ( ) : boolean { return ( this . _UNKNOWN_ === true ) || ( ( this . _UNKNOWN_ as _UNKNOWN_ ) . _UNKNOWN_ === true ) ; } constructor ( private _renderer ) { } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $boolean$ O O O $boolean$ O O O O O O $any$ O $number$ O O O $any$ O $any$ O O O O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $number$ O O O O O O O $number$ O O O O O O O $boolean$ O O O $any$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $complex$ O $any$ O O O O O O $any$ O O $boolean$ O O O O $any$ O O $boolean$ O O O O $any$ O O O $number$ O $number$ O O O O O O O O $number$ O $number$ O O O $number$ O O O O O O O O O O $number$ O O O $any$ O O O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O $void$ O $any$ O O O O $void$ O O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O $complex$ O O O O O O $void$ O O O O O $any$ O O O $any$ O O O O $any$ O O $void$ O $any$ O O O O O O $boolean$ O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $void$ O O O O O $any$ O O O O O $string$ O O O O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $complex$ O O O O O O O O $complex$ O $any$ O O $boolean$ O O O O O O O O O O $any$ O O O O O O O O $string$ O O O O O O $void$ O $number$ O O O O $number$ O $number$ O O O $any$ O $number$ O O $any$ O $any$ O O O O $void$ O O O O O $void$ O O O O $void$ O O O O $number$ O O O $number$ O $Math$ O $number$ O O O $any$ O $number$ O O O $Math$ O $number$ O O O $number$ O O O O O O O O O O O $number$ O $number$ O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $number$ O O O O O O $any$ O $void$ O O $any$ O $number$ O O O $any$ O $number$ O $number$ O $number$ O O O O O $number$ O O O $any$ O $number$ O O O O $any$ O $number$ O O $any$ O $number$ O $number$ O O O $number$ O O O O O O O $number$ O $number$ O O $void$ O O O O O $boolean$ O O O O O $void$ O O O $any$ O O O O $any$ O $number$ O O O $any$ O O $any$ O O O $any$ O $number$ O $number$ O O O O O $any$ O O O $any$ O $number$ O O $any$ O $any$ O O O $any$ O $number$ O O O O $any$ O $void$ O O $any$ O $number$ O O O O O $number$ O $number$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $boolean$ O O O O O O O O O $complex$ O O O O O O O O $complex$ O $any$ O O $boolean$ O O O O O O $boolean$ O O O O O O O O O $complex$ O O O O O O O O $complex$ O $any$ O O $boolean$ O O O O O O O O $Renderer2$ O O O O O
<s> import { Component , ContentChild , EventEmitter , HostBinding , Input , OnDestroy , OnInit , Output , TemplateRef , ViewChild , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] , host : { 's' : 's' } } ) export class _UNKNOWN_ implements OnDestroy , OnInit { private disabled = false ; position : number | null = null ; origin : number | null = null ; @ Input ( ) set _UNKNOWN_ ( value ) { this . disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . disabled ; } @ Output ( ) _UNKNOWN_ = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter ( ) ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ ViewChild ( TemplateRef ) _content : TemplateRef < void > ; get content ( ) : TemplateRef < void > | null { return this . _content ; } constructor ( private _UNKNOWN_ ) { } ngOnInit ( ) { this . _UNKNOWN_ . _tabs . push ( this ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . _tabs . splice ( this . _UNKNOWN_ . _tabs . indexOf ( this ) , 0 ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O $complex$ O O O O O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O $number$ O O O O O O O $number$ O O O O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $any$ O O $any$ O O O O $any$ O O $any$ O O $any$ O O O O $any$ O O $any$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O O O O O O $any$ O O O O O $any$ O O O $void$ O O O O O $any$ O $any$ O $number$ O O O O O $void$ O O O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $number$ O O O O O O O O O O
<s> import { ObserversModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule , ObserversModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O O O O $any$ O O O
<s> import { AnimationEvent } from 's' ; import { AfterViewInit , Component , ElementRef , EventEmitter , HostBinding , HostListener , Input , OnInit , Output , 0 , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements AfterViewInit { private _checked = false ; private _UNKNOWN_ = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ = false ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _checked = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _checked ; } @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : string ; @ Output ( ) _UNKNOWN_ = new EventEmitter < Event > ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter < AnimationEvent > ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter < boolean > ( ) ; @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ! this . _UNKNOWN_ ; } get _backgroundColor ( ) : string { const _UNKNOWN_ = this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; return ( this . _UNKNOWN_ && ! _UNKNOWN_ ) ? this . _UNKNOWN_ : null ; } _UNKNOWN_ ( event ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . emit ( event ) ; } } get _UNKNOWN_ ( ) : object { const _UNKNOWN_ = this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; return { [ this . _UNKNOWN_ ] : true , [ `template` ] : _UNKNOWN_ , [ `template` ] : ( this . _UNKNOWN_ && ! _UNKNOWN_ ) , [ `template` ] : true , [ `template` ] : this . _UNKNOWN_ } ; } get _UNKNOWN_ ( ) : string { return `template` ; } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( event ) { event . preventDefault ( ) ; this . _UNKNOWN_ . emit ( ! this . _UNKNOWN_ ) ; } _UNKNOWN_ ( event ) { this . _UNKNOWN_ . emit ( event ) ; if ( event . defaultPrevented ) { return ; } this . _UNKNOWN_ = true ; } _UNKNOWN_ ( color ) { return "s" . test ( color ) ; } constructor ( private _elementRef , private _render ) { } ngAfterViewInit ( ) { this . _render . addClass ( this . _elementRef . nativeElement , `template` ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O O $boolean$ O O O O $boolean$ O O O $string$ O O O $boolean$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $string$ O O O O $any$ O O $any$ O O $any$ O $complex$ O O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O O $any$ O O O O O O O $any$ O O O O $boolean$ O O O O O O O O O $boolean$ O O O $string$ O O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O O $string$ O O $boolean$ O O O O $string$ O O O O $void$ O $AnimationEvent$ O O O O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O O O $object$ O O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O O O $string$ O O O O O O O O $boolean$ O O O O O O O O $string$ O O $boolean$ O O O O O O O O O O O O O O $boolean$ O O O O $string$ O O O O O O O O O O $any$ O O O O O O O $void$ O $Event$ O O $Event$ O $void$ O O O O O $any$ O $any$ O O O O $boolean$ O O O $void$ O $MouseEvent$ O O O O $any$ O $any$ O $MouseEvent$ O O O O $MouseEvent$ O $boolean$ O O O O O O O $boolean$ O O O O $boolean$ O $string$ O O O O O $boolean$ O $string$ O O O O O O $ElementRef$ O O $Renderer2$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O
<s> import { AnimationEvent } from 's' ; import { AfterViewInit , Component , ElementRef , EventEmitter , HostBinding , HostListener , Input , OnInit , Output , 0 , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , animations : [ _UNKNOWN_ ] , template : `template` , styleUrls : [ 's' , 's' ] } ) export class _UNKNOWN_ implements AfterViewInit { private _UNKNOWN_ = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ = false ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : string ; @ Output ( ) _UNKNOWN_ = new EventEmitter < Event > ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter < AnimationEvent > ( ) ; @ HostBinding ( 's' ) get _UNKNOWN_ ( ) : boolean { return ! this . _UNKNOWN_ ; } get _backgroundColor ( ) : string { const _UNKNOWN_ = this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; return ( this . _UNKNOWN_ && ! _UNKNOWN_ ) ? this . _UNKNOWN_ : null ; } _UNKNOWN_ ( event ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . emit ( event ) ; } } get _UNKNOWN_ ( ) : object { const _UNKNOWN_ = this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; return { [ this . _UNKNOWN_ ] : true , [ `template` ] : _UNKNOWN_ , [ `template` ] : ( this . _UNKNOWN_ && ! _UNKNOWN_ ) } ; } get _UNKNOWN_ ( ) : string { return `template` ; } _UNKNOWN_ ( event ) { this . _UNKNOWN_ . emit ( event ) ; if ( event . defaultPrevented ) { return ; } this . _UNKNOWN_ = true ; } _UNKNOWN_ ( color ) { return "s" . test ( color ) ; } constructor ( private _elementRef , private _render ) { } ngAfterViewInit ( ) { this . _render . addClass ( this . _elementRef . nativeElement , `template` ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $boolean$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $any$ O O $boolean$ O O O $string$ O O O $boolean$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $string$ O O O O $any$ O O $any$ O O $any$ O $complex$ O O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $boolean$ O O O O O O O O O $boolean$ O O O $string$ O O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O O $string$ O O $boolean$ O O O O $string$ O O O O $void$ O $AnimationEvent$ O O O O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O O O $object$ O O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O O O $string$ O O O O O O O O $boolean$ O O O O O O O O $string$ O O $boolean$ O O O O O $string$ O O O O O O O O O $void$ O $Event$ O O O O $any$ O $any$ O $Event$ O O O O $Event$ O $boolean$ O O O O O O O $boolean$ O O O O $boolean$ O $string$ O O O O O $boolean$ O $string$ O O O O O O $ElementRef$ O O $Renderer2$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , ContentChild , Input , OnInit , TemplateRef , ViewEncapsulation , } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ = { 's' : true } ; _color : string = 's' ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; @ Input ( ) set _UNKNOWN_ ( color ) { this . _color = color ; if ( color === 's' ) { this . _UNKNOWN_ [ 's' ] = true ; } else if ( color === 's' ) { this . _UNKNOWN_ [ 's' ] = true ; } else { this . _UNKNOWN_ [ 's' ] = true ; } } get _UNKNOWN_ ( ) : string { return this . _color ; } ngOnInit ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ = true ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $complex$ O O O O O O O $string$ O O O O O $boolean$ O O O $boolean$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O O $string$ O O O O O O $complex$ O O O O O O O O O O $string$ O O O O O O $complex$ O O O O O O O O O O O $complex$ O O O O O O O O O $string$ O O O O O O O O $string$ O O $void$ O O O O O O O $any$ O O O O $boolean$ O O O O O O O
<s> import { AfterContentInit , Component , ContentChild , ContentChildren , OnInit , QueryList , TemplateRef , ViewEncapsulation , } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit , AfterContentInit { _UNKNOWN_ = false ; items : _UNKNOWN_ [ ] = [ ] ; @ ContentChildren ( _UNKNOWN_ ) _UNKNOWN_ : QueryList < _UNKNOWN_ > ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < void > ; ngOnInit ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ = true ; } } ngAfterContentInit ( ) { setTimeout ( _ => { if ( this . _UNKNOWN_ && this . _UNKNOWN_ . length ) { const _UNKNOWN_ = this . _UNKNOWN_ . toArray ( ) ; _UNKNOWN_ [ _UNKNOWN_ . length - 0 ] . _UNKNOWN_ = true ; } } ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $boolean$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O $void$ O O O O O O O $any$ O O O O $boolean$ O O O O O $void$ O O O $number$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> export interface _UNKNOWN_ { title : string ; direction ? : 's' | 's' ; disabled ? : boolean ; checked ? : boolean ; _UNKNOWN_ ? : boolean ; [ key ] : any ; } </s>	O O O $any$ O $string$ O O O O O O O O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O O $string$ O O O O O O
<s> import { Component , ContentChild , DoCheck , ElementRef , EventEmitter , Input , _UNKNOWN_ , IterableDiffers , OnChanges , OnInit , Output , 0 , SimpleChanges , TemplateRef } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ implements OnChanges , OnInit , DoCheck { private _UNKNOWN_ = false ; @ Input ( ) direction = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) dataSource : _UNKNOWN_ [ ] = [ ] ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ = 's' ; @ Input ( ) filter = 's' ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : ( inputValue , item ) => boolean ; @ Input ( ) render : TemplateRef < void > ; @ Input ( ) footer : TemplateRef < void > ; @ Output ( ) _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter < boolean > ( ) ; @ Output ( ) handleSelect : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < { direction : string , value : string } > = new EventEmitter ( ) ; _UNKNOWN_ = 's' ; _classList : string [ ] = [ ] ; _UNKNOWN_ ( ) { this . _classList . forEach ( cls => this . _renderer . removeClass ( this . _el . nativeElement , cls ) ) ; this . _classList = [ this . _UNKNOWN_ , ! ! this . footer && `template` ] . filter ( item => ! ! item ) ; this . _classList . forEach ( cls => this . _renderer . addClass ( this . _el . nativeElement , cls ) ) ; } stat = { _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 } ; _UNKNOWN_ ( status ) { this . dataSource . forEach ( item => { if ( ! item . disabled && ! item . _UNKNOWN_ ) { item . checked = status ; } } ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . emit ( status ) ; } private _UNKNOWN_ ( ) { const _UNKNOWN_ = this . dataSource . filter ( w => ! w . disabled ) . length ; this . stat . _UNKNOWN_ = this . dataSource . filter ( w => w . checked && ! w . disabled ) . length ; this . stat . _UNKNOWN_ = this . dataSource . filter ( w => ! w . _UNKNOWN_ ) . length ; this . stat . _UNKNOWN_ = _UNKNOWN_ > 0 && _UNKNOWN_ === this . stat . _UNKNOWN_ ; this . stat . _UNKNOWN_ = this . stat . _UNKNOWN_ > 0 && ! this . stat . _UNKNOWN_ ; } _UNKNOWN_ ( value ) { this . filter = value ; this . dataSource . forEach ( item => { item . _UNKNOWN_ = value . length > 0 && ! this . _UNKNOWN_ ( value , item ) ; } ) ; this . stat . _UNKNOWN_ = this . dataSource . filter ( w => ! w . _UNKNOWN_ ) . length ; this . _UNKNOWN_ . emit ( { direction : this . direction , value } ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( 's' ) ; } private _UNKNOWN_ ( text , item ) { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ( text , item ) ; } return item . title . includes ( text ) ; } _UNKNOWN_ : _UNKNOWN_ < { } > ; constructor ( private _el , private _renderer , differs ) { this . _UNKNOWN_ = differs . find ( [ ] ) . create ( null ) ; } ngOnChanges ( changes ) { if ( 's' in changes ) { this . _UNKNOWN_ ( ) ; } } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } ngDoCheck ( ) { const change = this . _UNKNOWN_ . diff ( this . dataSource ) ; if ( change ) { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( item ) { if ( item . disabled ) { return ; } item . checked = ! item . checked ; this . _UNKNOWN_ ( ) ; this . handleSelect . emit ( item ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $boolean$ O O $string$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O $string$ O O O $string[]$ O O O O O O O O $void$ O O O O O $string[]$ O $void$ O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O O $string[]$ O O O O $string$ O O O O O $any$ O O O O $complex$ O $string$ O O O $string$ O O O O $string[]$ O $void$ O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O $complex$ O O $boolean$ O O O $boolean$ O O O $number$ O O O $number$ O O O O $void$ O $boolean$ O O O O $any$ O $void$ O $any$ O O O O O $any$ O $boolean$ O O $any$ O $boolean$ O O $any$ O $boolean$ O $boolean$ O O O O O O O $void$ O O O O O $any$ O $any$ O $boolean$ O O O O $void$ O O O O $number$ O O O $any$ O $complex$ O $any$ O O $any$ O $boolean$ O O $number$ O O O $complex$ O $number$ O O O $any$ O $complex$ O $any$ O $any$ O $boolean$ O O $any$ O $boolean$ O O $number$ O O O $complex$ O $number$ O O O $any$ O $complex$ O $any$ O O $any$ O $boolean$ O O $number$ O O O $complex$ O $boolean$ O $number$ O O O $number$ O O O $complex$ O $number$ O O O $complex$ O $boolean$ O O O $complex$ O $number$ O O O O O O $complex$ O $boolean$ O O $void$ O $string$ O O O O $string$ O $string$ O O O $any$ O $void$ O $any$ O O $any$ O $boolean$ O $string$ O $number$ O O O O O O $boolean$ O $string$ O $any$ O O O O O O O $complex$ O $number$ O O O $any$ O $complex$ O $any$ O O $any$ O $boolean$ O O $number$ O O O $any$ O $any$ O O $string$ O O O $string$ O $string$ O O O O $void$ O O O O O $void$ O O O O O O $boolean$ O $string$ O $any$ O O O O O O $boolean$ O O O O O $boolean$ O $string$ O $any$ O O O O $any$ O $string$ O $boolean$ O $string$ O O O $any$ O $any$ O O O O O O O O $ElementRef$ O O $Renderer2$ O $IterableDiffers$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $void$ O $SimpleChanges$ O O O O O O $any$ O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O O O O $void$ O O O O O $void$ O $any$ O O O O $any$ O $boolean$ O O O O O $any$ O $boolean$ O O $any$ O $boolean$ O O O $void$ O O O O O $any$ O $any$ O $any$ O O O O O
<s> import { Component , EventEmitter , Input , Output } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { @ Input ( ) placeholder : string ; @ Input ( ) value : string ; @ Output ( ) _UNKNOWN_ = new EventEmitter < string > ( ) ; @ Output ( ) _UNKNOWN_ = new EventEmitter ( ) ; _UNKNOWN_ ( ) { this . _UNKNOWN_ . emit ( this . value ) ; } _UNKNOWN_ ( ) { this . value = 's' ; this . _UNKNOWN_ . emit ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $any$ O O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O O $void$ O O O O O $any$ O $any$ O O O $string$ O O O $void$ O O O O O $string$ O O O O O $any$ O $any$ O O O O O O
<s> import { ChangeDetectionStrategy , ChangeDetectorRef , Component , ContentChild , ElementRef , EventEmitter , Input , OnChanges , Output , SimpleChanges , TemplateRef , ViewEncapsulation } from 's' ; import { Observable } from 's' ; import { of } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { direction : string ; list : _UNKNOWN_ [ ] ; } export interface _UNKNOWN_ { from : string ; to : string ; list : _UNKNOWN_ [ ] ; } export interface _UNKNOWN_ { direction : string ; value : string ; } export interface _UNKNOWN_ { direction : string ; checked : boolean ; list : _UNKNOWN_ [ ] ; item : _UNKNOWN_ ; } @ Component ( { selector : 's' , template : `template` , encapsulation : ViewEncapsulation . None , styleUrls : [ 's' , 's' ] , host : { 's' : 's' } , changeDetection : ChangeDetectionStrategy . OnPush } ) export class _UNKNOWN_ implements OnChanges { private _UNKNOWN_ = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; @ Input ( ) _UNKNOWN_ : string [ ] = this . _UNKNOWN_ . translate ( 's' ) . split ( 's' ) ; @ Input ( ) _UNKNOWN_ : string [ ] = [ ] ; @ Input ( ) _UNKNOWN_ : object ; @ Input ( ) _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; @ Input ( ) _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; @ Input ( ) _UNKNOWN_ : ( arg ) => Observable < _UNKNOWN_ [ ] > = ( arg ) => of ( arg . list ) ; @ ContentChild ( 's' ) render : TemplateRef < void > ; @ ContentChild ( 's' ) footer : TemplateRef < void > ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : ( inputValue , item ) => boolean ; @ Input ( ) _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; @ Input ( ) _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter ( ) ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; private _UNKNOWN_ ( ) { this . _UNKNOWN_ = [ ] ; this . _UNKNOWN_ = [ ] ; this . _UNKNOWN_ . forEach ( record => { if ( record . direction === 's' ) { this . _UNKNOWN_ . push ( record ) ; } else { this . _UNKNOWN_ . push ( record ) ; } } ) ; } private _UNKNOWN_ ( direction ) : _UNKNOWN_ [ ] { return this [ direction === 's' ? 's' : 's' ] . filter ( w => w . checked ) ; } _UNKNOWN_ = ( checked ) => this . handleSelect ( 's' , checked ) ; _UNKNOWN_ = ( checked ) => this . handleSelect ( 's' , checked ) ; _UNKNOWN_ = ( item ) => this . handleSelect ( 's' , item . checked , item ) ; _UNKNOWN_ = ( item ) => this . handleSelect ( 's' , item . checked , item ) ; handleSelect ( direction : 's' | 's' , checked , item ? ) { const list = this . _UNKNOWN_ ( direction ) ; this . _UNKNOWN_ ( direction , list . length ) ; this . _UNKNOWN_ . emit ( { direction , checked , list , item } ) ; } _UNKNOWN_ ( ret : { direction : string , value : string } ) { this . _UNKNOWN_ . emit ( ret ) ; this . cd . detectChanges ( ) ; } _UNKNOWN_ = false ; _UNKNOWN_ = false ; private _UNKNOWN_ ( direction , count ? ) { this [ direction === 's' ? 's' : 's' ] = ( typeof count === 's' ? this . _UNKNOWN_ ( direction ) . filter ( w => ! w . disabled ) . length : count ) > 0 ; this . cd . detectChanges ( ) ; } _UNKNOWN_ = ( ) => this . moveTo ( 's' ) ; _UNKNOWN_ = ( ) => this . moveTo ( 's' ) ; moveTo ( direction ) { const _UNKNOWN_ = direction === 's' ? 's' : 's' ; this . _UNKNOWN_ ( _UNKNOWN_ , 0 ) ; const datasource = direction === 's' ? this . _UNKNOWN_ : this . _UNKNOWN_ ; const _UNKNOWN_ = datasource . filter ( item => item . checked === true && ! item . disabled ) ; this . _UNKNOWN_ ( { direction , list : _UNKNOWN_ } ) . subscribe ( _UNKNOWN_ => this . _UNKNOWN_ ( direction , _UNKNOWN_ . filter ( i => ! ! i ) ) , ( ) => _UNKNOWN_ . forEach ( i => i . checked = false ) ) ; } private _UNKNOWN_ ( direction , list : _UNKNOWN_ [ ] ) { const _UNKNOWN_ = direction === 's' ? 's' : 's' ; const datasource = direction === 's' ? this . _UNKNOWN_ : this . _UNKNOWN_ ; const _UNKNOWN_ = direction === 's' ? this . _UNKNOWN_ : this . _UNKNOWN_ ; for ( const item of list ) { const idx = datasource . indexOf ( item ) ; if ( idx === - 0 ) continue ; item . checked = false ; _UNKNOWN_ . push ( item ) ; datasource . splice ( idx , 0 ) ; } this . _UNKNOWN_ ( _UNKNOWN_ ) ; this . _UNKNOWN_ . emit ( { from : _UNKNOWN_ , to : direction , list } ) ; } constructor ( private _UNKNOWN_ , private el , private cd ) { } ngOnChanges ( changes ) { if ( 's' in changes || 's' in changes ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( 's' ) ; this . _UNKNOWN_ ( 's' ) ; } this . cd . detectChanges ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O $string$ O O O $any$ O $any$ O O O O O O $any$ O $string$ O O O $string$ O O O $any$ O $any$ O O O O O O $any$ O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O $complex$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $boolean$ O O O $string$ O O O $string$ O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O $string[]$ O O O O O O O $any$ O $string$ O O O O $complex$ O O O O O $any$ O O $string[]$ O O O O O O O O O $any$ O O $object$ O O O O $any$ O O $string$ O O O $any$ O $string$ O O O O O $any$ O O $string$ O O O $any$ O $string$ O O O O O $any$ O O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $boolean$ O O $string$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $string$ O O O O O $any$ O O $string$ O O O $any$ O $string$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $void$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $void$ O $any$ O O O O $any$ O O O O O O O O $any$ O $number$ O $any$ O O O O O O O $any$ O $number$ O $any$ O O O O O O O O $any$ O $string$ O O $any$ O O O O O O $string$ O O O O O O O O $complex$ O $any$ O $any$ O $boolean$ O O O $void$ O O $boolean$ O O O O $void$ O O O $boolean$ O O $void$ O O $boolean$ O O O O $void$ O O O $boolean$ O O $void$ O O $any$ O O O O $void$ O O O $any$ O $boolean$ O $any$ O O $void$ O O $any$ O O O O $void$ O O O $any$ O $boolean$ O $any$ O O $void$ O O O O O O O $boolean$ O $any$ $any$ O O O $any$ O O O $any$ O O O O O O $void$ O O O $any$ O $number$ O O O O $any$ O $any$ O O O O $boolean$ O $any$ O $any$ O O O O $void$ O $complex$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $complex$ O O O O $any$ O $any$ O O O O $boolean$ O O O $boolean$ O O O O $void$ O $string$ O $number$ $number$ O O O O $string$ O O O O O O O O O O $number$ O O O O O $any$ O $string$ O O $complex$ O $any$ O O $any$ O $boolean$ O O $number$ O $number$ O O O O O O $any$ O $any$ O O O O $void$ O O O O O O $void$ O O O O $void$ O O O O O O $void$ O O O O $void$ O $string$ O O O O O $string$ O O O O O O O O O $void$ O O O O O O O $any$ O $string$ O O O O O $any$ O O O $any$ O O $any$ O $any$ O $complex$ O $any$ O $any$ O $boolean$ O O O O $any$ O $boolean$ O O O O $any$ O O $string$ O $any$ O $any$ O O O $any$ O $any$ O O O $void$ O $string$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O $any$ O $void$ O $any$ O $any$ O $boolean$ O O O O O O O $void$ O $string$ O $any$ O $any$ O O O O O O O $string$ O O O O O O O O $any$ O $string$ O O O O O $any$ O O O $any$ O O $any$ O $string$ O O O O O $any$ O O O $any$ O O O O $any$ O $any$ O O O $number$ O $any$ O $number$ O $any$ O O O O $number$ O O O O O O $any$ O $boolean$ O O O $any$ O $number$ O $any$ O O $any$ O $complex$ O $number$ O O O O O O O $void$ O O O O O O $any$ O $any$ O O $string$ O O O $string$ O $string$ O $any$ O O O O O O O $any$ O O $ElementRef$ O O $ChangeDetectorRef$ O O O $void$ O $SimpleChanges$ O O O O O O $any$ O O O $any$ O O O O $void$ O O O O O $void$ O O O O O O $void$ O O O O O O O $any$ O $any$ O O O O O O
<s> import { CommonModule } from 's' ; import { ModuleWithProviders , NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { Observable } from 's' ; import { Subscription } from 's' ; export type _UNKNOWN_ = 's' | 's' | 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' ; export interface _UNKNOWN_ { uid : string ; size : number ; name : string ; filename ? : string ; lastModified ? : string ; _UNKNOWN_ ? : Date ; url ? : string ; status ? : _UNKNOWN_ ; _UNKNOWN_ ? : File ; percent ? : number ; thumbUrl ? : string ; response ? : any ; error ? : any ; _UNKNOWN_ ? : any ; type : string ; [ key ] : any ; } export interface _UNKNOWN_ { file : _UNKNOWN_ ; fileList : _UNKNOWN_ [ ] ; event ? : { percent : number } ; } export interface _UNKNOWN_ { _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : boolean ; } export interface _UNKNOWN_ { disabled ? : boolean ; accept ? : string ; action ? : string ; _UNKNOWN_ ? : ( file , fileList : _UNKNOWN_ [ ] ) => boolean | Observable < any > ; _UNKNOWN_ ? : ( item ) => Subscription ; data ? : { } | ( ( file ) => { } ) ; headers ? : { } ; name ? : string ; multiple ? : boolean ; withCredentials ? : boolean ; filters ? : _UNKNOWN_ [ ] ; onStart ? : ( file ) => void ; onProgress ? : ( e , file ) => void ; onSuccess ? : ( ret , file , xhr ) => void ; onError ? : ( err , file ) => void ; } export interface _UNKNOWN_ { name : string ; fn : ( fileList : _UNKNOWN_ [ ] ) => _UNKNOWN_ [ ] ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $string$ O O O $number$ O O O $string$ O O O $string$ O O O O $string$ O O O O $Date$ O O $DateConstructor$ O $string$ O O O O $any$ O O $any$ O $File$ O O $complex$ O $number$ O O O O $string$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $string$ O O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $complex$ O O O $number$ O O O O O O O $any$ O $boolean$ O O O O $boolean$ O O O O O O O $any$ O $boolean$ O O O O $string$ O O O O $string$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O ${}$ O O O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $any$ O O $any$ O O O $void$ O O O $any$ O O O O $void$ O O O $any$ O $any$ O O O O $void$ O O O $any$ O $any$ O $any$ O O O O $void$ O O O $any$ O $any$ O O O O O O O $any$ O $string$ O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O
<s> import { Component , ViewChild , ElementRef , HostListener , OnInit , OnChanges , OnDestroy , SimpleChange , SimpleChanges , ChangeDetectorRef , Input , 0 , Optional } from 's' ; import { HttpClient , HttpRequest , _UNKNOWN_ , HttpResponse , HttpHeaders } from 's' ; import { Observable } from 's' ; import { Subscription } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , host : { 's' : 's' , 's' : 's' , 's' : 's' } , preserveWhitespaces : false } ) export class _UNKNOWN_ implements OnInit , OnChanges , OnDestroy { private _UNKNOWN_ : { [ key ] : Subscription } = { } ; private _UNKNOWN_ = false ; private destroy = false ; @ ViewChild ( 's' ) file : ElementRef ; @ Input ( ) classes : string [ ] = [ ] ; @ Input ( ) options : _UNKNOWN_ ; @ HostListener ( 's' ) onClick ( ) { if ( this . options . disabled || ! this . file ) return ; ( this . file . nativeElement as HTMLInputElement ) . click ( ) ; } @ HostListener ( 's' , [ 's' ] ) onKeyDown ( e ) { if ( this . options . disabled ) return ; if ( e . key === 's' ) { this . onClick ( ) ; } } @ HostListener ( 's' , [ 's' ] ) @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( e ) { if ( this . options . disabled ) return ; if ( e . type === 's' ) { e . preventDefault ( ) ; return ; } const files = Array . prototype . slice . call ( e . dataTransfer . files ) . filter ( file => this . _UNKNOWN_ ( file , this . options . accept ) ) ; this . _UNKNOWN_ ( files ) ; e . preventDefault ( ) ; } onChange ( e ) { if ( this . options . disabled ) return ; this . _UNKNOWN_ ( e . target . files ) ; e . target . value = 's' ; } private _UNKNOWN_ ( file , _UNKNOWN_ ) { if ( file && _UNKNOWN_ ) { const _UNKNOWN_ = Array . isArray ( _UNKNOWN_ ) ? _UNKNOWN_ : _UNKNOWN_ . split ( 's' ) ; const fileName = file . name || 's' ; const mimeType = file . type || 's' ; const _UNKNOWN_ = mimeType . replace ( "s" , 's' ) ; return _UNKNOWN_ . some ( type => { const _UNKNOWN_ = type . trim ( ) ; if ( _UNKNOWN_ . charAt ( 0 ) === 's' ) { return fileName . toLowerCase ( ) . indexOf ( _UNKNOWN_ . toLowerCase ( ) , fileName . toLowerCase ( ) . length - _UNKNOWN_ . toLowerCase ( ) . length ) !== - 0 ; } else if ( "s" . test ( _UNKNOWN_ ) ) { return _UNKNOWN_ === _UNKNOWN_ . replace ( "s" , 's' ) ; } return mimeType === _UNKNOWN_ ; } ) ; } return true ; } private _UNKNOWN_ ( fileList : any [ ] ) { let _UNKNOWN_ : any [ ] = Array . prototype . slice . call ( fileList ) ; this . options . filters . forEach ( f => _UNKNOWN_ = f . fn ( _UNKNOWN_ ) ) ; _UNKNOWN_ . forEach ( ( file ) => { file . uid = Math . random ( ) . toString ( 0 ) . substring ( 0 ) ; this . upload ( file , _UNKNOWN_ ) ; } ) ; } private upload ( file , fileList : any [ ] ) { if ( ! this . options . _UNKNOWN_ ) { return this . post ( file ) ; } const before = this . options . _UNKNOWN_ ( file , fileList ) ; if ( before instanceof Observable ) { before . subscribe ( ( _UNKNOWN_ ) => { const _UNKNOWN_ = Object . prototype . toString . call ( _UNKNOWN_ ) ; if ( _UNKNOWN_ === 's' || _UNKNOWN_ === 's' ) { this . post ( _UNKNOWN_ ) ; } else { this . post ( file ) ; } } , ( err ) => { console && console . log ( err ) ; } ) ; } else if ( before !== false ) { return this . post ( file ) ; } } private post ( file ) { if ( this . destroy ) return ; const opt = this . options ; const request = opt . _UNKNOWN_ || this . xhr ; const { uid } = file ; let { data } = opt ; if ( typeof data === 's' ) { data = data ( file ) ; } this . _UNKNOWN_ [ uid ] = ( opt . _UNKNOWN_ || this . xhr ) . call ( this , { action : opt . action , name : opt . name , headers : opt . headers , file , data , withCredentials : opt . withCredentials , onProgress : opt . onProgress ? e => { opt . onProgress ( e , file ) ; } : null , onSuccess : ( ret , xhr ) => { delete this . _UNKNOWN_ [ uid ] ; opt . onSuccess ( ret , file , xhr ) ; } , onError : ( xhr ) => { delete this . _UNKNOWN_ [ uid ] ; opt . onError ( xhr , file ) ; } } ) ; opt . onStart ( file ) ; } private xhr ( args ) { const formData = new FormData ( ) ; formData . append ( args . name , args . file ) ; if ( args . data ) { Object . keys ( args . data ) . map ( key => { formData . append ( key , args . data [ key ] ) ; } ) ; } if ( ! args . headers ) args . headers = { } ; if ( args . headers [ 's' ] !== null ) { args . headers [ 's' ] = `template` ; } const req = new HttpRequest ( 's' , args . action , formData , { _UNKNOWN_ : true , withCredentials : args . withCredentials , headers : new HttpHeaders ( args . headers ) } ) ; return this . http . request ( req ) . subscribe ( ( event ) => { if ( event . type === _UNKNOWN_ . _UNKNOWN_ ) { if ( event . total > 0 ) { event . percent = event . loaded / event . total * 0 ; } args . onProgress ( event ) ; } else if ( event instanceof HttpResponse ) { args . onSuccess ( event . body , event ) ; } } , ( err ) => { this . abort ( args ) ; args . onError ( err ) ; } ) ; } abort ( file ? ) { if ( file ) { let uid = file ; if ( file && file . uid ) { uid = file . uid ; } if ( this . _UNKNOWN_ [ uid ] ) { this . _UNKNOWN_ [ uid ] . unsubscribe ( ) ; delete this . _UNKNOWN_ [ uid ] ; } } else { Object . keys ( this . _UNKNOWN_ ) . forEach ( ( uid ) => { if ( this . _UNKNOWN_ [ uid ] ) { this . _UNKNOWN_ [ uid ] . unsubscribe ( ) ; } delete this . _UNKNOWN_ [ uid ] ; } ) ; } } _UNKNOWN_ = 's' ; _classList : string [ ] = [ ] ; _UNKNOWN_ ( ) { this . _classList . forEach ( cls => this . _renderer . removeClass ( this . _el . nativeElement , cls ) ) ; this . _classList = [ this . _UNKNOWN_ , this . options . disabled && `template` , ... this . classes ] . filter ( item => ! ! item ) ; this . _classList . forEach ( cls => this . _renderer . addClass ( this . _el . nativeElement , cls ) ) ; this . cd . detectChanges ( ) ; } constructor ( @ Optional ( ) private http , private _el , private _renderer , private cd ) { if ( ! http ) throw new Error ( `template` ) ; } ngOnInit ( ) { this . _UNKNOWN_ = true ; this . _UNKNOWN_ ( ) ; } ngOnChanges ( changes : { [ P in keyof this ] ? : SimpleChange } & SimpleChanges ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } } ngOnDestroy ( ) { this . destroy = true ; this . abort ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $complex$ O O O O O O O O O O O O O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O O $string$ O O $any$ O O O O O O $boolean$ O O O O $boolean$ O O O O $any$ O O O $any$ O $any$ O O $any$ O O $string[]$ O O O O O O O O O $any$ O O $any$ O $any$ O O $any$ O O O $void$ O O O O O O O $any$ O $boolean$ O O O O $any$ O O O O O O $any$ O $any$ O $complex$ O O $void$ O O O O O $any$ O O O O O O O $void$ O $KeyboardEvent$ O O O O O O $any$ O $boolean$ O O O O O $KeyboardEvent$ O $string$ O O O O O O $void$ O O O O O O $any$ O O O O O O O O $any$ O O O O O O O $void$ O $DragEvent$ O O O O O O $any$ O $boolean$ O O O O O $DragEvent$ O $string$ O O O O $DragEvent$ O $void$ O O O O O O O $any$ O $ArrayConstructor$ O $any[]$ O $any[]$ O $any$ O $DragEvent$ O $DataTransfer$ O $FileList$ O O $any$ O $any$ O O O $boolean$ O $any$ O O O $any$ O $string$ O O O O O $void$ O $any$ O O $DragEvent$ O $void$ O O O O $void$ O $any$ O O O O O O $any$ O $boolean$ O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $boolean$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $ArrayConstructor$ O $complex$ O $any$ O O $any[]$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O O O O $boolean$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O O $void$ O $any[]$ O O O O O O O $any[]$ O O O O O $ArrayConstructor$ O $any[]$ O $any[]$ O $any$ O $any[]$ O O O O $any$ O $any$ O $void$ O $any$ O $any[]$ O $any$ O $any$ O $any[]$ O O O $any[]$ O $void$ O O $any$ O O O $any$ O $any$ O $Math$ O $number$ O O O $string$ O O O O $string$ O O O O O O $any$ O $any$ O $any[]$ O O O O O O O $any$ O $any$ O $any[]$ O O O O O O O O O O O $any$ O $any$ O O O O O $void$ O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any[]$ O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O $any$ O $ObjectConstructor$ O $Object$ O $string$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O O $void$ O $any$ O O O O O O O $void$ O $any$ O O O O O O $any$ O O O $Console$ O $Console$ O $void$ O $any$ O O O O O O O O O $any$ O O O O O O O $void$ O $any$ O O O O O $void$ O $any$ O O O O O O $boolean$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $complex$ O $any$ O O O $any$ O $any$ O O O $any$ O O $any$ O O O O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O ${}$ O $any$ O ${}$ O $any$ O $any$ O $boolean$ O $any$ O $boolean$ O $void$ O $any$ O $void$ O $any$ O O $any$ O $void$ O $any$ O $any$ O O O O O O $void$ O O $any$ O $any$ O O O O O O $complex$ O $any$ O O $any$ O $void$ O $any$ O $any$ O $any$ O O O O $void$ O O $any$ O O O O O O $complex$ O $any$ O O $any$ O $void$ O $any$ O $any$ O O O O O O $any$ O $void$ O $any$ O O O O $Subscription$ O $any$ O O O $FormData$ O O $complex$ O O O $FormData$ O $void$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $ObjectConstructor$ O $complex$ O $any$ O $any$ O O $U[]$ O $string$ O O $FormData$ O $void$ O $string$ O $any$ O $any$ O $string$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $FormData$ O O $boolean$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $complex$ O $any$ O O O O O $complex$ O $any$ O O $any$ O O O O O O $complex$ O $any$ O O O O O O $ObjectConstructor$ O $complex$ O O O $complex$ O O $void$ O O $string$ O O O O O O O $complex$ O $string$ O O O O O $complex$ O $string$ O O $any$ O O O O O O O $complex$ O $string$ O O O O O O O $string$ O O O $string[]$ O O O O O O O O $void$ O O O O O $string[]$ O $void$ O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O O $string[]$ O O O O $string$ O O O $any$ O $boolean$ O O O O O O $string[]$ O O $complex$ O $string$ O O O $string$ O O O O $string[]$ O $void$ O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O $HttpClient$ O O $ElementRef$ O O $Renderer2$ O O $ChangeDetectorRef$ O O O O O $any$ O O O $ErrorConstructor$ O O O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O O $void$ O $any$ O O O $any$ O O O O O O $any$ O O $any$ O O O O O O $boolean$ O O O O $void$ O O O O O $void$ O O O O O $boolean$ O O O O O $void$ O O O O O O
<s> import { Component , Input , 0 , ElementRef , SimpleChange , SimpleChanges , OnInit , OnChanges } from 's' ; import { animate , state , style , transition , trigger } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , animations : [ trigger ( 's' , [ transition ( 's' , [ style ( { height : 's' , width : 's' , opacity : 0 } ) , animate ( 0 , style ( { height : 's' , width : 's' , opacity : 0 } ) ) ] ) , transition ( 's' , [ animate ( 0 , style ( { height : 's' , width : 's' , opacity : 0 } ) ) ] ) ] ) ] , preserveWhitespaces : false } ) export class _UNKNOWN_ implements OnInit , OnChanges { @ Input ( ) _UNKNOWN_ : _UNKNOWN_ ; @ Input ( ) items : _UNKNOWN_ [ ] ; @ Input ( ) icons : _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : ( file ) => void ; @ Input ( ) onRemove : ( file ) => void ; _UNKNOWN_ = 's' ; _classList : string [ ] = [ ] ; _UNKNOWN_ ( ) { this . _classList . forEach ( cls => this . _renderer . removeClass ( this . _el . nativeElement , cls ) ) ; this . _classList = [ this . _UNKNOWN_ , `template` ] . filter ( item => ! ! item ) ; this . _classList . forEach ( cls => this . _renderer . addClass ( this . _el . nativeElement , cls ) ) ; } private locale = { _UNKNOWN_ : this . _UNKNOWN_ . translate ( 's' ) , _UNKNOWN_ : this . _UNKNOWN_ . translate ( 's' ) , _UNKNOWN_ : this . _UNKNOWN_ . translate ( 's' ) , } ; _UNKNOWN_ ( file , e ) { if ( ! this . _UNKNOWN_ ) return ; e . preventDefault ( ) ; return this . _UNKNOWN_ ( file ) ; } _UNKNOWN_ ( file ) { if ( this . onRemove ) this . onRemove ( file ) ; } constructor ( private _el , private _renderer , private _UNKNOWN_ ) { } ngOnInit ( ) { } ngOnChanges ( changes : { [ P in keyof this ] ? : SimpleChange } & SimpleChanges ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any[]$ O O $any$ O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O $number$ O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O $number$ O O O O O O O O $any$ O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O $number$ O O O O O O O O O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O $any$ O O $void$ O O $any$ O O O O O $any$ O O $void$ O O $any$ O O O O $string$ O O O $string[]$ O O O O O O O O $void$ O O O O O $string[]$ O $void$ O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O O $string[]$ O O O O $string$ O O O O $complex$ O $string$ O O O $string$ O O O O $string[]$ O $void$ O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O O $complex$ O O $string$ O O O $any$ O $string$ O O O O $string$ O O O $any$ O $string$ O O O O $string$ O O O $any$ O $string$ O O O O O O $void$ O $any$ O $any$ O O O O O O O $void$ O O O $any$ O $any$ O O O O O O $void$ O $any$ O O O $void$ O $any$ O O O O O O $void$ O O O $void$ O $any$ O O O O O O $ElementRef$ O O $Renderer2$ O O $any$ O O O $void$ O O O O $void$ O $any$ O O O $any$ O O O O O O $any$ O O $any$ O O O O $void$ O O O O O O
<s> import { Component , ChangeDetectionStrategy , ViewChild , ViewEncapsulation , Input , Output , EventEmitter , OnInit , OnChanges , SimpleChanges , SimpleChange , OnDestroy , ChangeDetectorRef } from 's' ; import { Observable } from 's' ; import { Subscription } from 's' ; import { of } from 's' ; import { filter } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styleUrls : [ 's' , 's' ] , encapsulation : ViewEncapsulation . None , preserveWhitespaces : false , changeDetection : ChangeDetectionStrategy . OnPush } ) export class _UNKNOWN_ implements OnInit , OnChanges , OnDestroy { private _UNKNOWN_ = false ; private _UNKNOWN_ : any ; @ ViewChild ( 's' ) upload : _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ = 's' ; @ Input ( ) _UNKNOWN_ : number = 0 ; @ Input ( ) _UNKNOWN_ : number = 0 ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ : ( file , fileList : _UNKNOWN_ [ ] ) => boolean | Observable < any > ; @ Input ( ) _UNKNOWN_ : ( item ) => Subscription ; @ Input ( ) _UNKNOWN_ : { } | ( ( file ) => { } ) ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ [ ] > = new EventEmitter < _UNKNOWN_ [ ] > ( ) ; private _disabled = false ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _disabled = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _disabled ; } @ Input ( ) _UNKNOWN_ : { } ; @ Input ( ) _UNKNOWN_ : _UNKNOWN_ = 's' ; private _multiple = false ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _multiple = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _multiple ; } @ Input ( ) _UNKNOWN_ = 's' ; private _UNKNOWN_ : boolean | _UNKNOWN_ = true ; @ Input ( ) set _UNKNOWN_ ( value : boolean | _UNKNOWN_ ) { this . _UNKNOWN_ = typeof value === 's' ? _UNKNOWN_ ( value ) : value ; } get _UNKNOWN_ ( ) : boolean | _UNKNOWN_ { return this . _UNKNOWN_ ; } private _UNKNOWN_ = true ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } private _UNKNOWN_ = false ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = _UNKNOWN_ ( value ) ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } @ Input ( ) _UNKNOWN_ : ( file ) => boolean | Observable < boolean > ; @ Input ( ) _UNKNOWN_ : ( file ) => void ; @ Output ( ) _UNKNOWN_ : EventEmitter < _UNKNOWN_ > = new EventEmitter < _UNKNOWN_ > ( ) ; _UNKNOWN_ : _UNKNOWN_ ; private _UNKNOWN_ ( ) : this { if ( typeof this . _UNKNOWN_ === 's' && this . _UNKNOWN_ ) { this . _UNKNOWN_ = { _UNKNOWN_ : true , _UNKNOWN_ : true } ; } const filters : _UNKNOWN_ [ ] = this . _UNKNOWN_ . slice ( ) ; if ( this . _UNKNOWN_ && this . _UNKNOWN_ > 0 && filters . findIndex ( w => w . name === 's' ) === - 0 ) { filters . push ( { name : 's' , fn : ( fileList : _UNKNOWN_ [ ] ) => fileList . slice ( - this . _UNKNOWN_ ) } ) ; } if ( this . _UNKNOWN_ > 0 && filters . findIndex ( w => w . name === 's' ) === - 0 ) { filters . push ( { name : 's' , fn : ( fileList : _UNKNOWN_ [ ] ) => fileList . filter ( w => ( w . size / 0 ) <= this . _UNKNOWN_ ) } ) ; } if ( this . _UNKNOWN_ && this . _UNKNOWN_ . length > 0 && filters . findIndex ( w => w . name === 's' ) === - 0 ) { const types = this . _UNKNOWN_ . split ( 's' ) ; filters . push ( { name : 's' , fn : ( fileList : _UNKNOWN_ [ ] ) => fileList . filter ( w => ~ types . indexOf ( w . type ) ) } ) ; } this . _UNKNOWN_ = { disabled : this . _UNKNOWN_ , accept : this . _UNKNOWN_ , action : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ , data : this . _UNKNOWN_ , headers : this . _UNKNOWN_ , name : this . _UNKNOWN_ , multiple : this . _UNKNOWN_ , withCredentials : this . _UNKNOWN_ , filters , onStart : this . onStart , onProgress : this . onProgress , onSuccess : this . onSuccess , onError : this . onError } ; return this ; } constructor ( private cd , private _UNKNOWN_ ) { } private _UNKNOWN_ ( file ) { return { lastModified : file . lastModified , _UNKNOWN_ : file . _UNKNOWN_ , name : file . filename || file . name , size : file . size , type : file . type , uid : file . uid , response : file . response , error : file . error , percent : 0 , _UNKNOWN_ : < any > file } ; } private _UNKNOWN_ ( file , fileList : _UNKNOWN_ [ ] ) { const _UNKNOWN_ = file . uid !== undefined ? 's' : 's' ; return fileList . filter ( item => item [ _UNKNOWN_ ] === file [ _UNKNOWN_ ] ) [ 0 ] ; } private _UNKNOWN_ ( file , fileList : _UNKNOWN_ [ ] ) : _UNKNOWN_ [ ] { const _UNKNOWN_ = file . uid !== undefined ? 's' : 's' ; const removed = fileList . filter ( item => item [ _UNKNOWN_ ] !== file [ _UNKNOWN_ ] ) ; if ( removed . length === fileList . length ) { return null ; } return removed ; } private _UNKNOWN_ = this . _UNKNOWN_ . translate ( 's' ) ; private _UNKNOWN_ ( file ) { return file . response && typeof file . response === 's' ? file . response : ( file . error && file . error . statusText ) || this . _UNKNOWN_ ; } private _UNKNOWN_ ( ) { clearInterval ( this . _UNKNOWN_ ) ; } private _UNKNOWN_ ( ) : ( s ) => number { let k = 0 ; const i = 0 ; const end = 0 ; return ( s ) => { let start = s ; if ( start >= end ) { return start ; } start += k ; k = k - i ; if ( k < 0 ) { k = 0 ; } return start * 0 ; } ; } private _UNKNOWN_ ( file ) { const _UNKNOWN_ = this . _UNKNOWN_ ( ) ; let _UNKNOWN_ = 0 ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = setInterval ( ( ) => { _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; this . onProgress ( { percent : _UNKNOWN_ , } , file ) ; } , 0 ) ; } private _UNKNOWN_ ( file ) { if ( typeof document === 's' || typeof window === 's' || ! ( window as any ) . FileReader || ! ( window as any ) . File || ! ( file . _UNKNOWN_ instanceof File ) || file . thumbUrl !== undefined ) { return ; } file . thumbUrl = 's' ; const reader = new FileReader ( ) ; reader . _UNKNOWN_ = ( ) => file . thumbUrl = reader . result ; reader . _UNKNOWN_ ( file . _UNKNOWN_ ) ; } private onStart = ( file ) : void => { if ( ! this . _UNKNOWN_ ) this . _UNKNOWN_ = [ ] ; const _UNKNOWN_ = this . _UNKNOWN_ ( file ) ; _UNKNOWN_ . status = 's' ; this . _UNKNOWN_ . push ( _UNKNOWN_ ) ; this . _UNKNOWN_ ( _UNKNOWN_ ) ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ . emit ( { file : _UNKNOWN_ , fileList : this . _UNKNOWN_ } ) ; if ( ! ( window as any ) . FormData ) { this . _UNKNOWN_ ( _UNKNOWN_ ) ; } this . cd . detectChanges ( ) ; } private onProgress = ( e : { percent : number } , file ) : void => { const fileList = this . _UNKNOWN_ ; const _UNKNOWN_ = this . _UNKNOWN_ ( file , fileList ) ; if ( ! _UNKNOWN_ ) return ; _UNKNOWN_ . percent = e . percent ; this . _UNKNOWN_ . emit ( { event : e , file : { ... _UNKNOWN_ } , fileList : this . _UNKNOWN_ , } ) ; this . cd . detectChanges ( ) ; } private onSuccess = ( res , file , xhr ? ) : void => { this . _UNKNOWN_ ( ) ; const fileList = this . _UNKNOWN_ ; const _UNKNOWN_ = this . _UNKNOWN_ ( file , fileList ) ; if ( ! _UNKNOWN_ ) return ; _UNKNOWN_ . status = 's' ; _UNKNOWN_ . response = res ; this . _UNKNOWN_ . emit ( { file : { ... _UNKNOWN_ } , fileList , } ) ; this . cd . detectChanges ( ) ; } private onError = ( err , file ) : void => { this . _UNKNOWN_ ( ) ; const fileList = this . _UNKNOWN_ ; const _UNKNOWN_ = this . _UNKNOWN_ ( file , fileList ) ; if ( ! _UNKNOWN_ ) return ; _UNKNOWN_ . error = err ; _UNKNOWN_ . status = 's' ; _UNKNOWN_ . message = this . _UNKNOWN_ ( file ) ; this . _UNKNOWN_ . emit ( { file : { ... _UNKNOWN_ } , fileList , } ) ; this . cd . detectChanges ( ) ; } private _UNKNOWN_ : string ; _UNKNOWN_ ( e ) { if ( e . type === this . _UNKNOWN_ ) return ; this . _UNKNOWN_ = e . type ; this . _UNKNOWN_ ( ) ; } onRemove = ( file ) : void => { this . upload . abort ( file ) ; file . status = 's' ; ( ( this . _UNKNOWN_ ? this . _UNKNOWN_ instanceof Observable ? this . _UNKNOWN_ : of ( this . _UNKNOWN_ ( file ) ) : of ( true ) ) as Observable < any > ) . pipe ( filter ( ( res ) => res ) ) . subscribe ( res => { const _UNKNOWN_ = this . _UNKNOWN_ ( file , this . _UNKNOWN_ ) ; if ( _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ . emit ( { file , fileList : _UNKNOWN_ } ) ; this . _UNKNOWN_ . emit ( this . _UNKNOWN_ ) ; this . cd . detectChanges ( ) ; } } ) ; } _UNKNOWN_ = 's' ; _classList : string [ ] = [ ] ; _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ === 's' ; let _UNKNOWN_ : string [ ] = [ ] ; if ( this . _UNKNOWN_ === 's' ) { _UNKNOWN_ = [ this . _UNKNOWN_ . some ( file => file . status === 's' ) && `template` , this . _UNKNOWN_ === 's' && `template` ] ; } else { _UNKNOWN_ = [ `template` ] ; } this . _classList = [ this . _UNKNOWN_ , `template` , ... _UNKNOWN_ , this . _UNKNOWN_ && `template` ] . filter ( item => ! ! item ) ; this . cd . detectChanges ( ) ; } ngOnInit ( ) { this . _UNKNOWN_ = true ; } ngOnChanges ( changes : { [ P in keyof this ] ? : SimpleChange } & SimpleChanges ) { if ( changes . _UNKNOWN_ ) ( this . _UNKNOWN_ || [ ] ) . forEach ( file => file . message = this . _UNKNOWN_ ( file ) ) ; this . _UNKNOWN_ ( ) . _UNKNOWN_ ( ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O $any$ O $any$ O $any$ O $boolean$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O $any$ O O $number$ O O O O O O $any$ O O $number$ O O O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $string$ O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O O O O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $boolean$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O ${}$ O O O O O $any$ O O $any$ O $any$ O O O O $boolean$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $string$ O O O O $complex$ O O O $any$ O O O O $any$ O O O $complex$ O $complex$ O O O $any$ O O O O $complex$ O O $complex$ O O O $boolean$ O $boolean$ O O $any$ O O O $complex$ O O O O O $any$ O O O O $complex$ O O O $boolean$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $boolean$ O O O O $any$ O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O $boolean$ O O O O $boolean$ O O O O O O O O $boolean$ O O O $any$ O O $any$ O O $any$ O O O O $any$ O O O O O $any$ O O $void$ O O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O $this$ O O O O O O O O O O $complex$ O O O O O $boolean$ O O O O $complex$ O O $true$ O O O $true$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $boolean$ O O O $number$ O O O $any$ O $number$ O $any$ O $any$ O $string$ O O O O O O O O $any$ O $number$ O O $string$ O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O $number$ O O O O O O O O O $number$ O O O $any$ O $number$ O $any$ O $any$ O $string$ O O O O O O O O $any$ O $number$ O O $string$ O O O $any$ O O $any$ O $any$ O O O O $any$ O $complex$ O $any$ O O $any$ O $number$ O O O O O O $number$ O O O O O O O O O $string$ O O O $string$ O $number$ O O O $any$ O $number$ O $any$ O $any$ O $string$ O O O O O O O O O $string[]$ O O O $string$ O $complex$ O O O O $any$ O $number$ O O $string$ O O O $any$ O O $any$ O $any$ O O O O $any$ O $complex$ O $any$ O O $string[]$ O $number$ O $any$ O $string$ O O O O O O O O $any$ O O $boolean$ O O O $boolean$ O $string$ O O O $string$ O $string$ O O O $string$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O ${}$ O O O ${}$ O $string$ O O O $string$ O $boolean$ O O O $boolean$ O $boolean$ O O O $boolean$ O $any$ O $void$ O O O $void$ O $void$ O O O $void$ O $void$ O O O $void$ O $void$ O O O $void$ O O O O O O O O O $ChangeDetectorRef$ O O $any$ O O O O $any$ O $any$ O O O O $string$ O $any$ O $string$ O $Date$ O $any$ O $Date$ O $string$ O $any$ O $string$ O $any$ O $string$ O $number$ O $any$ O $number$ O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $number$ O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $string$ O $undefined$ O O O O O O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O $string$ O $undefined$ O O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $number$ O $any$ O $number$ O O O O O O O $any$ O O O $string$ O O O $any$ O $string$ O O O O O $string$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $string$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O $void$ O O O $void$ O O O $any$ O O O O $number$ O O O O $number$ O O O O O $number$ O O O O O O O O O O O O O O O $number$ O O O O $number$ O $number$ O O O $number$ O O O O O $number$ O O $number$ O $number$ O $number$ O $number$ O O O O O $number$ O O O O $number$ O O O O O $number$ O O O O O O O $void$ O $any$ O O O $number$ O O O $number$ O O O O $number$ O O O O O $void$ O O O O O $any$ O $number$ O O O O O $number$ O $number$ O $number$ O O O O $void$ O O $number$ O $number$ O O O $any$ O O O O O O O O O $void$ O $any$ O O O O O $Document$ O O O O $complex$ O O O O O $complex$ O O O O $any$ O O O $complex$ O O O O $any$ O O O $any$ O $File$ O $complex$ O O $any$ O $string$ O $undefined$ O O O O O $any$ O $string$ O O O O $FileReader$ O O $complex$ O O O $FileReader$ O $any$ O O O O $any$ O $string$ O $FileReader$ O $complex$ O $FileReader$ O $void$ O $any$ O $File$ O O O O $void$ O O $any$ O O O O O O O O O O $any$ O O O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $number$ O $any$ O O O O $void$ O $any$ O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O $complex$ O O O O $any$ O O O O $void$ O $any$ O O O O O $any$ O $any$ O O O O O $void$ O O $complex$ O O $number$ O O O O $any$ O O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $number$ O $complex$ O $number$ O O O $any$ O $any$ O O $complex$ O $complex$ O O O O O $any$ O O $any$ O O O $any$ O O O O O O $any$ O $any$ O O O O O $void$ O O $any$ O $any$ O $any$ $any$ O O O O O O O $void$ O O O O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O O $any$ O O O O O O $any$ O $any$ O O O O O $void$ O O $any$ O $any$ O O O O O O O $void$ O O O O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $string$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O $any$ O O O O O O $any$ O $any$ O O O O O $string$ O O O $void$ O $DragEvent$ O O O O $DragEvent$ O $string$ O O O $string$ O O O O O $string$ O $DragEvent$ O $string$ O O O $void$ O O O O $void$ O O $any$ O O O O O O O $any$ O $void$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O $boolean$ O O $boolean$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O O O O O O $string$ O O O $string[]$ O O O O O O O O $void$ O O O O $boolean$ O O O $any$ O O O O $string[]$ O O O O O O O O O O O O $any$ O O O O $string[]$ O O O O $any$ O $boolean$ O $any$ O $any$ O $any$ O O O O O O O O $string$ O O O O O O O O O $string[]$ O O O O O O O O $string[]$ O O O O $string$ O O O O $string[]$ O O O $boolean$ O O O O $complex$ O $string$ O O O $string$ O O O O $any$ O $any$ O O O O $void$ O O O O O $boolean$ O O O O $void$ O $any$ O O O $any$ O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O O O O O $this$ O O O $void$ O O O O $void$ O O O O O $void$ O O O O O O
<s> import { CommonModule } from 's' ; import { ModuleWithProviders , NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { Overlay } from 's' ; import { ComponentPortal } from 's' ; import { Injectable , Type } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; export class _UNKNOWN_ < _UNKNOWN_ extends _UNKNOWN_ , _UNKNOWN_ > { protected _counter = 0 ; protected _container : _UNKNOWN_ ; constructor ( overlay , _UNKNOWN_ < _UNKNOWN_ > , private _UNKNOWN_ = 's' ) { this . _container = overlay . create ( ) . attach ( new ComponentPortal ( _UNKNOWN_ ) ) . instance ; } remove ( messageId ? ) { if ( messageId ) { this . _container . _UNKNOWN_ ( messageId ) ; } else { this . _container . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( message , options ? ) { const _UNKNOWN_ = { ... message , ... { messageId : this . _UNKNOWN_ ( ) , options , createdAt : new Date ( ) } } ; this . _container . _UNKNOWN_ ( _UNKNOWN_ ) ; return _UNKNOWN_ ; } protected _UNKNOWN_ ( ) { return this . _UNKNOWN_ + this . _counter ++ ; } } @ Injectable ( ) export class _UNKNOWN_ extends _UNKNOWN_ < _UNKNOWN_ , _UNKNOWN_ > { constructor ( overlay ) { super ( overlay , _UNKNOWN_ , 's' ) ; } success ( content , options ? ) { return this . _UNKNOWN_ ( { type : 's' , content } , options ) ; } error ( content , options ? ) { return this . _UNKNOWN_ ( { type : 's' , content } , options ) ; } info ( content , options ? ) { return this . _UNKNOWN_ ( { type : 's' , content } , options ) ; } warning ( content , options ? ) { return this . _UNKNOWN_ ( { type : 's' , content } , options ) ; } loading ( content , options ? ) { return this . _UNKNOWN_ ( { type : 's' , content } , options ) ; } create ( type , content , options ? ) { return this . _UNKNOWN_ ( { type , content } , options ) ; } html ( html , options ? ) { return this . _UNKNOWN_ ( { html } , options ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $number$ O O O O $any$ O $any$ O O O $Overlay$ O $Type$ O $any$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O O $void$ O $string$ $string$ O O O O $string$ O O O O $any$ O $void$ O $string$ O O O O O O O $any$ O $void$ O O O O O $any$ O $object$ O $any$ $any$ O O O $any$ O O O $object$ O O O $string$ O O O $string$ O O O $any$ O $Date$ O O $DateConstructor$ O O O O O O O $any$ O $void$ O $any$ O O O $any$ O O O $string$ O O O O O O $string$ O O O $number$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $Overlay$ O O O O $any$ O $any$ O O O O O $any$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O O O $string$ O O $any$ O O O $any$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O O O $string$ O O $any$ O O O $any$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O O O $string$ O O $any$ O O O $any$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O O O $string$ O O $any$ O O O $any$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O O O $string$ O O $any$ O O O $any$ O $string$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O $string$ O O $any$ O O O $any$ O $any$ O $any$ $any$ O O O O O $any$ O O $string$ O O $any$ O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ extends _UNKNOWN_ { type ? : 's' | 's' | 's' | 's' | 's' ; title ? : string ; } export interface _UNKNOWN_ extends _UNKNOWN_ { messageId : string ; state ? : 's' | 's' ; options ? : _UNKNOWN_ ; createdAt : Date ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O O O $string$ O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O $any$ O O $any$ O $Date$ O $DateConstructor$ O O O
<s> import { Overlay } from 's' ; import { Injectable } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ extends _UNKNOWN_ < _UNKNOWN_ , _UNKNOWN_ > { constructor ( overlay ) { super ( overlay , _UNKNOWN_ , 's' ) ; } success ( title , content , options ? ) { return this . _UNKNOWN_ ( { type : 's' , title , content } , options ) as _UNKNOWN_ ; } error ( title , content , options ? ) { return this . _UNKNOWN_ ( { type : 's' , title , content } , options ) as _UNKNOWN_ ; } info ( title , content , options ? ) { return this . _UNKNOWN_ ( { type : 's' , title , content } , options ) as _UNKNOWN_ ; } warning ( title , content , options ? ) { return this . _UNKNOWN_ ( { type : 's' , title , content } , options ) as _UNKNOWN_ ; } _UNKNOWN_ ( title , content , options ? ) { return this . _UNKNOWN_ ( { type : 's' , title , content } , options ) as _UNKNOWN_ ; } create ( type , title , content , options ? ) { return this . _UNKNOWN_ ( { type , title , content } , options ) as _UNKNOWN_ ; } html ( html , options ? ) { return this . _UNKNOWN_ ( { html } , options ) as _UNKNOWN_ ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $Overlay$ O O O O $any$ O $any$ O O O O O $any$ O $string$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O O O $string$ O $string$ O O $any$ O O $any$ O O $any$ O $string$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O O O $string$ O $string$ O O $any$ O O $any$ O O $any$ O $string$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O O O $string$ O $string$ O O $any$ O O $any$ O O $any$ O $string$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O O O $string$ O $string$ O O $any$ O O $any$ O O $any$ O $string$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O O O $string$ O $string$ O O $any$ O O $any$ O O $any$ O $string$ O $string$ O $string$ O $any$ $any$ O O O O O $any$ O O $string$ O $string$ O $string$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ $any$ O O O O O $any$ O O $string$ O O $any$ O O $any$ O O O O
<s> import { ModuleWithProviders , NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export * from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export * from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ NgModule ( { exports} ) export class _UNKNOWN_ { static forRoot ( options ? ) { return { ngModule : _UNKNOWN_ , providers : [ _UNKNOWN_ , _UNKNOWN_ , { provide : _UNKNOWN_ , useValue : options } , ] } ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $ModuleWithProviders$ O $any$ $any$ O O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class AppComponent { title = 's' ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O O O
<s> import { BrowserModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { AppComponent } from 's' ; @ NgModule ( { declarations : [ AppComponent ] , imports : [ BrowserModule , _UNKNOWN_ . forRoot ( ) , ] , providers : [ ] , bootstrap : [ AppComponent ] } ) export class AppModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O O O $undefined[]$ O O O O $complex$ O O $any$ O O O O O $any$ O O O
<s> export const environment = { production : true } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> export const environment = { production : false } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O $boolean$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O O
<s> import 's' ; import 's' ; import 's' ; </s>	O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class AppComponent { title = 's' ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O O O
<s> import { BrowserModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { AppComponent } from 's' ; @ NgModule ( { declarations : [ AppComponent ] , imports : [ BrowserModule , _UNKNOWN_ . forRoot ( ) , ] , providers : [ ] , bootstrap : [ AppComponent ] } ) export class AppModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O O O $undefined[]$ O O O O $complex$ O O $any$ O O O O O $any$ O O O
<s> export const environment = { production : true } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> export const environment = { production : false } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O $boolean$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O O
<s> import 's' ; import 's' ; import 's' ; </s>	O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class AppComponent { title = 's' ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O O O
<s> import { BrowserModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { AppComponent } from 's' ; @ NgModule ( { declarations : [ AppComponent ] , imports : [ BrowserModule , _UNKNOWN_ . forRoot ( ) , ] , providers : [ ] , bootstrap : [ AppComponent ] } ) export class AppModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O O O $undefined[]$ O O O O $complex$ O O $any$ O O O O O $any$ O O O
<s> export const environment = { production : true } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> export const environment = { production : false } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O $boolean$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O O
<s> import 's' ; import 's' ; import 's' ; </s>	O O O O O O O O O O O
<s> import { Component , DebugElement , ViewChild } from 's' ; import { _UNKNOWN_ , fakeAsync , tick , ComponentFixture , TestBed } from 's' ; import { By } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; interface _UNKNOWN_ { top : number ; left : number ; } describe ( 's' , ( ) => { let scrollService ; let fixture < _UNKNOWN_ > ; let context ; let debugElement ; let component ; let _UNKNOWN_ ; let _UNKNOWN_ = 0 ; let _UNKNOWN_ = new Event ( 's' ) ; let startOffset = 0 ; let _UNKNOWN_ : Event [ ] = [ _UNKNOWN_ , new Event ( 's' ) , new Event ( 's' ) , new Event ( 's' ) , new Event ( 's' ) , new Event ( 's' ) , ] ; beforeEach ( fakeAsync ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , providers : [ { provide : _UNKNOWN_ , useClass : _UNKNOWN_ } , ] } ) . compileComponents ( ) ; fixture = TestBed . createComponent ( _UNKNOWN_ ) ; context = fixture . componentInstance ; component = context . _UNKNOWN_ ; scrollService = TestBed . get ( _UNKNOWN_ ) ; _UNKNOWN_ = new _UNKNOWN_ ( ) ; debugElement = fixture . debugElement ; _UNKNOWN_ . wrap ( ) . id = 's' ; } ) ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { let edge = _UNKNOWN_ + startOffset ; _UNKNOWN_ ( ) ; _UNKNOWN_ ( window , edge + 0 ) ; _UNKNOWN_ . _UNKNOWN_ ( window , edge + 0 ) ; _UNKNOWN_ . _UNKNOWN_ ( window , edge ) ; _UNKNOWN_ . _UNKNOWN_ ( window , edge - 0 ) ; tick ( 0 ) ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . wrap ( ) . offsetTop !== _UNKNOWN_ ) . toBe ( true ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . content ( ) === null ) . toBe ( false ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { _UNKNOWN_ ( ) ; _UNKNOWN_ ( window , _UNKNOWN_ + startOffset - 0 ) ; expect ( _UNKNOWN_ . wrap ( ) . offsetTop !== _UNKNOWN_ ) . toBe ( true ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { _UNKNOWN_ ( ) ; _UNKNOWN_ ( window , _UNKNOWN_ + startOffset + 0 ) ; expect ( _UNKNOWN_ . wrap ( ) . offsetTop ) . toBe ( _UNKNOWN_ ) ; _UNKNOWN_ ( ) ; } ) ) ; describe ( 's' , ( ) => { xit ( 's' , fakeAsync ( ( ) => { _UNKNOWN_ ( ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . elementRef ( ) , { top : startOffset , left : 0 } ) ; _UNKNOWN_ ( window , _UNKNOWN_ + startOffset + 0 ) ; expect ( _UNKNOWN_ . wrap ( ) . offsetLeft ) . toBe ( 0 ) ; _UNKNOWN_ ( window , _UNKNOWN_ + startOffset - 0 ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . elementRef ( ) , { top : startOffset , left : 0 } ) ; _UNKNOWN_ ( window , _UNKNOWN_ + startOffset + 0 ) ; expect ( _UNKNOWN_ . wrap ( ) . offsetLeft ) . toBe ( 0 ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; for ( let event of _UNKNOWN_ ) { it ( `template` , fakeAsync ( ( ) => { _UNKNOWN_ ( ) ; _UNKNOWN_ ( window , _UNKNOWN_ + startOffset + 0 ) ; expect ( _UNKNOWN_ . wrap ( ) . offsetTop ) . toBe ( _UNKNOWN_ ) ; _UNKNOWN_ ( ) ; } ) ) ; } } ) ; } ) ; describe ( 's' , ( ) => { let offsetTop = 0 ; let _UNKNOWN_ = 0 ; beforeEach ( ( ) => { context . _UNKNOWN_ = offsetTop ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { _UNKNOWN_ ( { offsetTop : offsetTop + 0 } ) ; _UNKNOWN_ ( window , 0 ) ; expect ( _UNKNOWN_ . wrap ( ) . offsetTop !== offsetTop ) . toBe ( true ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { _UNKNOWN_ ( { offsetTop : offsetTop + 0 } ) ; _UNKNOWN_ ( window , 0 ) ; expect ( _UNKNOWN_ . wrap ( ) . offsetTop ) . toBe ( offsetTop ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { context . _UNKNOWN_ = offsetTop . toString ( ) ; _UNKNOWN_ ( { offsetTop : offsetTop + 0 } ) ; _UNKNOWN_ ( window , 0 ) ; expect ( _UNKNOWN_ . wrap ( ) . offsetTop ) . toBe ( offsetTop ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { let target ; beforeEach ( ( ) => { target = _UNKNOWN_ . target ( ) ; context . _UNKNOWN_ = target ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { _UNKNOWN_ ( ) ; _UNKNOWN_ ( window , _UNKNOWN_ + startOffset + 0 ) ; expect ( _UNKNOWN_ . elementRef ( ) . offsetTop !== _UNKNOWN_ ) . toBe ( true ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { _UNKNOWN_ ( ) ; _UNKNOWN_ ( target , _UNKNOWN_ + startOffset - 0 ) ; expect ( _UNKNOWN_ . elementRef ( ) . offsetTop !== _UNKNOWN_ ) . toBe ( true ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , fakeAsync ( ( ) => { _UNKNOWN_ ( ) ; _UNKNOWN_ ( target , _UNKNOWN_ + startOffset + 0 ) ; expect ( _UNKNOWN_ . elementRef ( ) . offsetTop !== _UNKNOWN_ ) . toBe ( true ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; } ) ; describe ( 's' , ( ) => { let _UNKNOWN_ ; beforeEach ( ( ) => { component . _UNKNOWN_ . subscribe ( ( returnValue ) => { _UNKNOWN_ = returnValue ; } ) ; } ) ; it ( `template` , fakeAsync ( ( done ) => { _UNKNOWN_ ( ) ; _UNKNOWN_ ( window , _UNKNOWN_ + startOffset + 0 ) ; expect ( _UNKNOWN_ ) . toBe ( true ) ; _UNKNOWN_ ( ) ; } ) ) ; it ( `template` , fakeAsync ( ( done ) => { _UNKNOWN_ ( ) ; _UNKNOWN_ ( window , _UNKNOWN_ + startOffset + 0 ) ; _UNKNOWN_ ( window , _UNKNOWN_ + startOffset - 0 ) ; expect ( _UNKNOWN_ ) . toBe ( false ) ; _UNKNOWN_ ( ) ; } ) ) ; } ) ; class _UNKNOWN_ { offsets : { [ key ] : _UNKNOWN_ } ; _UNKNOWN_ : { [ key ] : number } ; constructor ( ) { spyOn ( scrollService , 's' ) . and . callFake ( this . _UNKNOWN_ . bind ( this ) ) ; spyOn ( scrollService , 's' ) . and . callFake ( this . _UNKNOWN_ . bind ( this ) ) ; this . offsets = { 's' : { top : 0 , left : 0 } } ; this . _UNKNOWN_ = { 's' : 0 } ; } _UNKNOWN_ ( el ? : Window | Element , left ? ) { let scroll = left ? 0 : ( this . _UNKNOWN_ [ this . getKey ( el ) ] ) ; return scroll ; } _UNKNOWN_ ( el ) { return this . offsets [ el . id ] || { top : 0 , left : 0 } ; } emitEvent ( el : Element | Window , event ) { el . dispatchEvent ( event ) ; } _UNKNOWN_ ( el : Element | Window , _UNKNOWN_ ) { this . _UNKNOWN_ [ this . getKey ( el ) ] = _UNKNOWN_ ; this . emitEvent ( ( el || window ) , _UNKNOWN_ ) ; } _UNKNOWN_ ( el , offset ) { this . offsets [ this . getKey ( el ) ] = { top : offset . top , left : offset . left } ; } _UNKNOWN_ ( el , offsetTop ) { this . _UNKNOWN_ ( el , { top : offsetTop , left : 0 , } ) ; } content ( ) { return debugElement . query ( By . css ( 's' ) ) . nativeElement ; } elementRef ( ) { return debugElement . query ( By . css ( 's' ) ) . nativeElement ; } wrap ( ) { return debugElement . query ( By . css ( 's' ) ) . nativeElement ; } target ( ) { return debugElement . query ( By . css ( 's' ) ) . nativeElement ; } private getKey ( el : Element | Window ) { let key ; if ( el instanceof Window ) { key = 's' ; } else { key = ( el && el . id ) || 's' ; } return key ; } } function _UNKNOWN_ ( options : { offsetTop ? : number } = { } ) { _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . elementRef ( ) , options . offsetTop || startOffset ) ; tick ( 0 ) ; fixture . detectChanges ( ) ; _UNKNOWN_ . _UNKNOWN_ ( window , 0 ) ; tick ( 0 ) ; fixture . detectChanges ( ) ; } function _UNKNOWN_ ( el : Element | Window , offset ) { _UNKNOWN_ . _UNKNOWN_ ( el , offset ) ; tick ( 0 ) ; fixture . detectChanges ( ) ; } } ) ; @ Component ( { template : `template` } ) class _UNKNOWN_ { @ ViewChild ( _UNKNOWN_ ) _UNKNOWN_ : _UNKNOWN_ ; _UNKNOWN_ : Element ; _UNKNOWN_ : { } ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $number$ O O O $number$ O O O O $any$ O O O O O O O O $any$ O O $ComponentFixture$ O $any$ O O O $any$ O O $DebugElement$ O O $any$ O O $any$ O O $number$ O O O O $Event$ O O $complex$ O O O O O $number$ O O O O $any$ O $complex$ O O O O $Event$ O O $complex$ O O O O O $complex$ O O O O O $complex$ O O O O O $complex$ O O O O O $complex$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $HTMLElement$ O O O $string$ O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $number$ O $number$ O $number$ O $void$ O O O $void$ O $complex$ O $number$ O O O O $any$ O $void$ O $complex$ O $number$ O O O O $any$ O $void$ O $complex$ O $number$ O O $any$ O $void$ O $complex$ O $number$ O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O $number$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $HTMLElement$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $void$ O O O $void$ O $complex$ O $number$ O $number$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O $number$ O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $void$ O O O $void$ O $complex$ O $number$ O $number$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O O $any$ O $number$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $void$ O O O $any$ O $void$ O $any$ O $HTMLElement$ O O O O $number$ O $number$ O $number$ O O O O O $void$ O $complex$ O $number$ O $number$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O O $any$ O O O O $void$ O $complex$ O $number$ O $number$ O O O O $any$ O $void$ O $any$ O $HTMLElement$ O O O O $number$ O $number$ O $number$ O O O O O $void$ O $complex$ O $number$ O $number$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O O $any$ O O O O $any$ O O O O O O O O O O O O O $Event$ O $any$ O O $any$ O O O $any$ O O O O O $void$ O O O $void$ O $complex$ O $number$ O $number$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O O $any$ O $number$ O O $any$ O O O O O O O O O O O O O O $any$ O O O O O O O O $number$ O O O O $number$ O O O $any$ O O O O O $any$ O ${}$ O $number$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $void$ O O $number$ O $number$ O O O O O $void$ O $complex$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O $number$ O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $void$ O O $number$ O $number$ O O O O O $void$ O $complex$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O O $any$ O $number$ O O $any$ O O O O O O O O O O $any$ O O O $any$ O O O O O $any$ O ${}$ O $number$ O $string$ O O O $void$ O O $number$ O $number$ O O O O O $void$ O $complex$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O O $any$ O $number$ O O $any$ O O O O O O O O O O $any$ O O O O O O O O $HTMLElement$ O $any$ O O O O O $HTMLElement$ O $any$ O $HTMLElement$ O O O $any$ O $Element$ O $HTMLElement$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $void$ O O O $void$ O $complex$ O $number$ O $number$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O $number$ O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $void$ O O O $void$ O $HTMLElement$ O $number$ O $number$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O $number$ O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $void$ O O O $void$ O $HTMLElement$ O $number$ O $number$ O O O O $any$ O $any$ O $HTMLElement$ O O O $number$ O $number$ O O $any$ O O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O O O $void$ O O O $void$ O $complex$ O $number$ O $number$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O O O $void$ O O O $void$ O $complex$ O $number$ O $number$ O O O O $void$ O $complex$ O $number$ O $number$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O O O O O O $any$ O $complex$ O O O $string$ O O $any$ O O $complex$ O O O $string$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $number$ O $any$ O O O O O O O $complex$ O O O O O $number$ O O O $number$ O O O O O O O $complex$ O O O O O O O O $number$ O $complex$ O O $complex$ O $complex$ O $boolean$ $boolean$ O O O $number$ O $boolean$ O O O O O O $complex$ O O O $string$ O $complex$ O O O O O $number$ O O $any$ O $Element$ O O O O O $complex$ O $Element$ O $string$ O O O $number$ O O O $number$ O O O O O $void$ O $complex$ O $complex$ O $complex$ O $Event$ O O $complex$ O $boolean$ O $Event$ O O O $void$ O $complex$ O $complex$ O $complex$ O $number$ O O O O $complex$ O O O $string$ O $complex$ O O O $number$ O O O $void$ O O $complex$ O $complex$ O O $Event$ O O O $void$ O $Element$ O $any$ O O O O $complex$ O O O $string$ O $Element$ O O O O $number$ O $any$ O $number$ O $number$ O $any$ O $number$ O O O $void$ O $Element$ O $number$ O O O O $void$ O $Element$ O O $number$ O $number$ O $number$ O O O O O O O $HTMLElement$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $HTMLElement$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $HTMLElement$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $HTMLElement$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $string$ O $complex$ O $complex$ O $complex$ O O O $string$ O O O $complex$ O $complex$ O O $string$ O O O O O O $string$ O O $Element$ O $Element$ O $string$ O O O O O O $string$ O O O O $void$ O $complex$ O O $number$ O O O O O O O O O $any$ O $void$ O $any$ O $HTMLElement$ O O O $complex$ O $number$ O $number$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $void$ O $complex$ O O O O $any$ O O O O $any$ O $any$ O O O O O $void$ O $complex$ O $complex$ O $complex$ O $number$ O O $any$ O $void$ O $complex$ O $number$ O O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $Element$ O $complex$ O ${}$ O O O O O O
<s> import { Component , DebugElement , ViewChild } from 's' ; import { fakeAsync , tick , ComponentFixture , TestBed } from 's' ; import { By } from 's' ; import { NoopAnimationsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let scrollService ; let fixture < _UNKNOWN_ > ; let context ; let debugElement ; let component ; let _UNKNOWN_ ; const _UNKNOWN_ = 0 ; class _UNKNOWN_ { scrollTo ( el : Element | Window , scrollTop ) { scrollService . _UNKNOWN_ = scrollTop ; el . dispatchEvent ( new Event ( 's' ) ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) . nativeElement . click ( ) ; } _UNKNOWN_ ( ) { return debugElement . query ( By . css ( 's' ) ) ; } } beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ , NoopAnimationsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] , providers : [ { provide : _UNKNOWN_ , useClass : _UNKNOWN_ } ] } ) . compileComponents ( ) ; fixture = TestBed . createComponent ( _UNKNOWN_ ) ; context = fixture . componentInstance ; component = fixture . componentInstance . _UNKNOWN_ ; _UNKNOWN_ = new _UNKNOWN_ ( ) ; debugElement = fixture . debugElement ; scrollService = TestBed . get ( _UNKNOWN_ ) ; } ) ; describe ( 's' , ( ) => { it ( `template` , fakeAsync ( ( ) => { _UNKNOWN_ . scrollTo ( window , _UNKNOWN_ - 0 ) ; tick ( ) ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) === null ) . toBe ( true ) ; } ) ) ; it ( `template` , fakeAsync ( ( ) => { _UNKNOWN_ . scrollTo ( window , _UNKNOWN_ ) ; tick ( ) ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) === null ) . toBe ( true ) ; } ) ) ; describe ( `template` , ( ) => { beforeEach ( fakeAsync ( ( ) => { _UNKNOWN_ . scrollTo ( window , _UNKNOWN_ + 0 ) ; tick ( ) ; fixture . detectChanges ( ) ; } ) ) ; it ( `template` , ( ) => { expect ( _UNKNOWN_ . _UNKNOWN_ ( ) === null ) . toBe ( false ) ; } ) ; it ( `template` , ( ) => { expect ( debugElement . query ( By . css ( 's' ) ) === null ) . toBe ( false ) ; } ) ; it ( `template` , fakeAsync ( ( ) => { _UNKNOWN_ . _UNKNOWN_ ( ) ; tick ( ) ; expect ( scrollService . _UNKNOWN_ ( window ) ) . toEqual ( 0 ) ; } ) ) ; } ) ; } ) ; describe ( 's' , ( ) => { const _UNKNOWN_ = 0 ; beforeEach ( ( ) => { component . _UNKNOWN_ = _UNKNOWN_ ; } ) ; it ( `template` , fakeAsync ( ( ) => { _UNKNOWN_ . scrollTo ( window , _UNKNOWN_ - 0 ) ; tick ( ) ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) === null ) . toBe ( true ) ; } ) ) ; it ( `template` , fakeAsync ( ( ) => { _UNKNOWN_ . scrollTo ( window , _UNKNOWN_ ) ; tick ( ) ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) === null ) . toBe ( true ) ; } ) ) ; describe ( `template` , ( ) => { beforeEach ( fakeAsync ( ( ) => { _UNKNOWN_ . scrollTo ( window , _UNKNOWN_ + 0 ) ; tick ( ) ; fixture . detectChanges ( ) ; } ) ) ; it ( `template` , ( ) => { expect ( _UNKNOWN_ . _UNKNOWN_ ( ) === null ) . toBe ( false ) ; } ) ; } ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( fakeAsync ( ( ) => { _UNKNOWN_ . scrollTo ( window , _UNKNOWN_ + 0 ) ; tick ( ) ; fixture . detectChanges ( ) ; } ) ) ; describe ( 's' , ( ) => { it ( `template` , fakeAsync ( ( done ) => { component . _UNKNOWN_ . subscribe ( ( returnValue ) => { expect ( returnValue ) . toBe ( true ) ; done ( ) ; } ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; tick ( ) ; } ) ) ; } ) ; } ) ; describe ( 's' , ( ) => { let _UNKNOWN_ ; beforeEach ( fakeAsync ( ( ) => { _UNKNOWN_ = debugElement . query ( By . css ( 's' ) ) . nativeElement ; component . _UNKNOWN_ = _UNKNOWN_ ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { _UNKNOWN_ . scrollTo ( window , _UNKNOWN_ + 0 ) ; tick ( ) ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) === null ) . toBe ( true ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { const throttleTime = 0 ; _UNKNOWN_ . scrollTo ( _UNKNOWN_ , _UNKNOWN_ + 0 ) ; tick ( throttleTime + 0 ) ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( ) === null ) . toBe ( false ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { it ( `template` , fakeAsync ( ( ) => { let _UNKNOWN_ < _UNKNOWN_ > ; let _UNKNOWN_ ; _UNKNOWN_ = TestBed . createComponent ( _UNKNOWN_ ) ; _UNKNOWN_ = fixture . componentInstance ; _UNKNOWN_ . scrollTo ( window , _UNKNOWN_ + 0 ) ; tick ( ) ; _UNKNOWN_ . detectChanges ( ) ; expect ( _UNKNOWN_ . debugElement . query ( By . css ( 's' ) ) === null ) . toBe ( false ) ; } ) ) ; } ) ; } ) ; @ Component ( { template : `template` } ) class _UNKNOWN_ { @ ViewChild ( _UNKNOWN_ ) _UNKNOWN_ : _UNKNOWN_ ; } @ Component ( { template : `template` } ) class _UNKNOWN_ { @ ViewChild ( _UNKNOWN_ ) _UNKNOWN_ : _UNKNOWN_ ; } class _UNKNOWN_ { _UNKNOWN_ : number ; _UNKNOWN_ ( el ? : Element | Window , top = true ) { return this . _UNKNOWN_ ; } scrollTo ( containerEl : Element | Window , _UNKNOWN_ = 0 , easing ? : { } , callback ? : { } ) { this . _UNKNOWN_ = _UNKNOWN_ ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O $ComponentFixture$ O $any$ O O O $any$ O O $DebugElement$ O O $any$ O O $any$ O O O O O O O $any$ O $void$ O $complex$ O $complex$ O $complex$ O $number$ O O $any$ O $number$ O $number$ O $complex$ O $boolean$ O O $complex$ O O O O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O O $DebugElement$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $any$ O $void$ O $complex$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O $any$ O $void$ O $complex$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $void$ O $complex$ O O O O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $any$ O $void$ O O O $any$ O O O $any$ O $any$ O $number$ O $complex$ O O O $any$ O O O O O O O O O O O O O O $any$ O O O O O O O O O O O O $any$ O O O O O $any$ O $number$ O O O O O O $any$ O O O $any$ O O O O O $any$ O $void$ O $complex$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O $any$ O $void$ O $complex$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $void$ O $complex$ O O O O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $void$ O $complex$ O O O O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O O $any$ O O O O O O $any$ O $void$ O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O O $HTMLElement$ O $any$ O $any$ O O O O O $HTMLElement$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $HTMLElement$ O $HTMLElement$ O O O O O $any$ O O O $any$ O O O O O $any$ O $void$ O $complex$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O O O O O O $any$ O $void$ O $HTMLElement$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $ComponentFixture$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $void$ O $complex$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O O O O O O O O O $any$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $number$ O O O $number$ O $complex$ O O $complex$ O $complex$ O $boolean$ O O O O O O O $number$ O O $void$ O $complex$ O $complex$ O $complex$ O $number$ O O O ${}$ O O O O O ${}$ O O O O O O O O $number$ O $number$ O O O O
<s> import { Component , DebugElement } from 's' ; import { async , ComponentFixture , _UNKNOWN_ , TestBed } from 's' ; import { By } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , providers : [ ] } ) . compileComponents ( ) ; } ) ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 's' ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; testComponent . _UNKNOWN_ = null ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; debugElement . nativeElement . classList . add ( 's' ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 's' ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; testComponent . _UNKNOWN_ = null ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) ) . toBeDefined ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . innerHTML ) . toEqual ( 's' ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) ) . toBeDefined ( ) ; testComponent . _UNKNOWN_ = 's' ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) ) . toBeDefined ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) ) . toBeDefined ( ) ; testComponent . _UNKNOWN_ = 's' ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; } ) ; } ) ; @ Component ( { selector : 's' , template : `template` , } ) class _UNKNOWN_ { } @ Component ( { selector : 's' , template : `template` , } ) class _UNKNOWN_ { } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _UNKNOWN_ = 's' ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _UNKNOWN_ = 's' ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O $undefined[]$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $string$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $string$ O O O O O
<s> import { Component , DebugElement , ViewChild } from 's' ; import { async , fakeAsync , tick , ComponentFixture , _UNKNOWN_ , TestBed } from 's' ; import { By } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let testComponent ; let fixture ; let buttonDebugElement ; let _UNKNOWN_ < _UNKNOWN_ > ; let groupDebugElement ; let groupInstance ; let _UNKNOWN_ ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ ] , declarations : [ TestAppComponent ] , providers : [ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( TestAppComponent ) ; testComponent = fixture . debugElement . componentInstance ; buttonDebugElement = fixture . debugElement . query ( By . css ( 's' ) ) ; } ) ; it ( 's' , ( ) => { testComponent . type = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . type = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . type = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; } ) ; it ( 's' , ( ) => { testComponent . shape = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . shape = null ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; } ) ; it ( 's' , ( ) => { testComponent . size = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . size = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . size = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; testComponent . size = null ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; } ) ; it ( 's' , ( ) => { testComponent . _UNKNOWN_ = true ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = false ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; } ) ; it ( 's' , ( ) => { buttonDebugElement . nativeElement . classList . add ( 's' ) ; testComponent . type = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . type = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . type = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . shape = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . size = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . size = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . size = 's' ; fixture . detectChanges ( ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( buttonDebugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { buttonDebugElement . nativeElement . click ( ) ; expect ( testComponent . isLoading ) . toBe ( true ) ; tick ( 0 ) ; expect ( testComponent . isLoading ) . toBe ( false ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , providers : [ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; testComponent = fixture . debugElement . componentInstance ; buttonDebugElement = fixture . debugElement . query ( By . css ( 's' ) ) ; } ) ; it ( 's' , ( ) => { buttonDebugElement . nativeElement . click ( ) ; expect ( testComponent . isLoading ) . toBe ( false ) ; } ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , providers : [ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { _UNKNOWN_ = TestBed . createComponent ( _UNKNOWN_ ) ; _UNKNOWN_ = _UNKNOWN_ . debugElement . componentInstance ; groupDebugElement = _UNKNOWN_ . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; } ) ; it ( 's' , ( ) => { groupInstance = groupDebugElement . injector . get < _UNKNOWN_ > ( _UNKNOWN_ ) ; _UNKNOWN_ . size = 's' ; _UNKNOWN_ . detectChanges ( ) ; expect ( groupDebugElement . nativeElement . firstElementChild . classList . contains ( 's' ) ) . toBe ( true ) ; _UNKNOWN_ . size = 's' ; _UNKNOWN_ . detectChanges ( ) ; expect ( groupDebugElement . nativeElement . firstElementChild . classList . contains ( 's' ) ) . toBe ( true ) ; _UNKNOWN_ . size = 's' ; _UNKNOWN_ . detectChanges ( ) ; expect ( groupDebugElement . nativeElement . firstElementChild . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( groupDebugElement . nativeElement . firstElementChild . classList . contains ( 's' ) ) . toBe ( false ) ; } ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , providers : [ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; testComponent = fixture . debugElement . componentInstance ; } ) ; it ( 's' , async ( ( ) => { fixture . detectChanges ( ) ; const component = testComponent as _UNKNOWN_ ; expect ( component . _UNKNOWN_ . _UNKNOWN_ ) . toBe ( true ) ; expect ( component . _UNKNOWN_ . _UNKNOWN_ ) . toBe ( true ) ; } ) ) ; it ( 's' , async ( ( ) => { fixture . detectChanges ( ) ; const component = testComponent as _UNKNOWN_ ; expect ( component . _UNKNOWN_ . _UNKNOWN_ ) . toBe ( false ) ; expect ( component . _UNKNOWN_ . _UNKNOWN_ ) . toBe ( false ) ; } ) ) ; } ) ; } ) ; @ Component ( { selector : 's' , template : `template` } ) class TestAppComponent { type = 's' ; size = 's' ; shape = 's' ; isLoading = false ; _UNKNOWN_ = false ; _UNKNOWN_ = ( value ) => { this . isLoading = true ; setTimeout ( _ => { this . isLoading = false ; } , 0 ) ; } } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { type = 's' ; isLoading = false ; _UNKNOWN_ = ( value ) => { this . isLoading = true ; setTimeout ( _ => { this . isLoading = false ; } , 0 ) ; } } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { size = 's' ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { @ ViewChild ( 's' ) _UNKNOWN_ : _UNKNOWN_ ; @ ViewChild ( 's' ) _UNKNOWN_ : _UNKNOWN_ ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O O $ComponentFixture$ O $any$ O O O $DebugElement$ O O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $undefined[]$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $undefined[]$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $undefined[]$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O $undefined[]$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O $any$ O O O O $any$ O $any$ O $any$ O $boolean$ O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O $any$ O O O O $any$ O $any$ O $any$ O $boolean$ O O $any$ O O O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O $void$ O O $any$ O O O O O $boolean$ O O O $number$ O $any$ O O O O $boolean$ O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $string$ O O O $boolean$ O O O $void$ O O $any$ O O O O O $boolean$ O O O $number$ O $any$ O O O O $boolean$ O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $string$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O
<s> import { async , ComponentFixture , TestBed } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => null ) ; } ) ; describe ( 's' , ( ) => { let component ; let fixture < _UNKNOWN_ > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { component . _UNKNOWN_ = true ; fixture . detectChanges ( ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O $any$ O O O O O O O O $any$ O O $ComponentFixture$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $boolean$ O O O $any$ O $any$ O O O O O O O O O O
<s> import { DOCUMENT , _UNKNOWN_ } from 's' ; import { ReflectiveInjector } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { const TOP = 0 ; let injector ; let document ; let location ; let scrollService ; class _UNKNOWN_ { body = new _UNKNOWN_ ( ) ; documentElement = new _UNKNOWN_ ( ) ; } class _UNKNOWN_ { scrollTop = jasmine . createSpy ( 's' ) ; } class _UNKNOWN_ { scrollTop = jasmine . createSpy ( 's' ) ; } class _UNKNOWN_ { hash : string ; } beforeEach ( ( ) => { spyOn ( window , 's' ) ; } ) ; beforeEach ( ( ) => { injector = ReflectiveInjector . _UNKNOWN_ ( [ _UNKNOWN_ , { provide : DOCUMENT , useClass : _UNKNOWN_ } , { provide : _UNKNOWN_ , useClass : _UNKNOWN_ } ] ) ; location = injector . get ( _UNKNOWN_ ) ; document = injector . get ( DOCUMENT ) ; scrollService = injector . get ( _UNKNOWN_ ) ; } ) ; describe ( 's' , ( ) => { it ( `template` , ( ) => { scrollService . _UNKNOWN_ ( window , TOP ) ; expect ( document . body . scrollTop ) . toBe ( TOP ) ; } ) ; it ( `template` , ( ) => { let el = new _UNKNOWN_ ( ) as any ; scrollService . _UNKNOWN_ ( el , TOP ) ; expect ( el . scrollTop ) . toBe ( TOP ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $number$ O O O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O $any$ O O $any$ O O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $string$ O O O O $any$ O O O O O $any$ O $complex$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $void$ O $complex$ O $number$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $number$ O O O O O $any$ O O O O O O O O $Element$ O O $any$ O O O O O $any$ O $void$ O $Element$ O $number$ O O $any$ O $Element$ O $number$ O O $any$ O $number$ O O O O O O O O O O O O
<s> import { Component , DebugElement } from 's' ; import { async , ComponentFixture , _UNKNOWN_ , TestBed } from 's' ; import { By } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) . compileComponents ( ) ; } ) ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; expect ( ( ) => fixture . detectChanges ( ) ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; const _UNKNOWN_ = parseFloat ( getStyle ( _UNKNOWN_ , 's' ) ) ; const _UNKNOWN_ = parseFloat ( getStyle ( _UNKNOWN_ , 's' ) ) ; expect ( _UNKNOWN_ ) . toBeGreaterThan ( _UNKNOWN_ / 0 ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; const 0 = parseFloat ( getStyle ( _UNKNOWN_ , 's' ) ) ; const 0 = parseFloat ( getStyle ( _UNKNOWN_ , 's' ) ) ; expect ( 0 ) . toEqual ( 0 ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; const 0 = parseFloat ( getStyle ( _UNKNOWN_ , 's' ) ) ; expect ( 0 ) . toEqual ( NaN ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 0 / 0 ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; testComponent . _UNKNOWN_ = - 0 ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; testComponent . _UNKNOWN_ = 's' ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . 0 = 0 ; testComponent . 0 = 0 ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . 0 = 0 ; testComponent . 0 = 0 ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . 0 = 0 ; testComponent . 0 = 0 ; fixture . detectChanges ( ) ; testComponent . 0 = 0 ; testComponent . 0 = 0 ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; testComponent . 0 = 0 ; testComponent . 0 = 0 ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; testComponent . 0 = 0 / 0 ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; testComponent . 0 = - 0 ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; testComponent . 0 = 's' ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . 0 = 0 ; testComponent . _push = 0 ; testComponent . 0 = 0 ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . 0 = 0 ; testComponent . _push = 's' ; testComponent . 0 = 0 ; testComponent . _UNKNOWN_ = 's' ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . 0 = { xs : 0 , _UNKNOWN_ : 0 , md : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 } ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . 0 = { xs : 's' , _UNKNOWN_ : 0 , md : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 } ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = TestBed . createComponent ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ . debugElement . componentInstance ; const _UNKNOWN_ = _UNKNOWN_ . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; _UNKNOWN_ . nativeElement . classList . add ( 's' ) ; _UNKNOWN_ . _UNKNOWN_ = 0 ; _UNKNOWN_ . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; const _UNKNOWN_ = TestBed . createComponent ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ . debugElement . componentInstance ; const _UNKNOWN_ = _UNKNOWN_ . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; _UNKNOWN_ . nativeElement . classList . add ( 's' ) ; _UNKNOWN_ . 0 = 0 ; _UNKNOWN_ . 0 = 0 ; _UNKNOWN_ . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; const _UNKNOWN_ = TestBed . createComponent ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ . debugElement . componentInstance ; const _UNKNOWN_ = _UNKNOWN_ . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; _UNKNOWN_ . nativeElement . classList . add ( 's' ) ; _UNKNOWN_ . 0 = 0 ; _UNKNOWN_ . _push = 0 ; _UNKNOWN_ . _UNKNOWN_ = 0 ; _UNKNOWN_ . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; const _UNKNOWN_ = TestBed . createComponent ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ . debugElement . componentInstance ; const _UNKNOWN_ = _UNKNOWN_ . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; _UNKNOWN_ . nativeElement . classList . add ( 's' ) ; _UNKNOWN_ . 0 = { xs : 0 , _UNKNOWN_ : 0 , md : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 } ; _UNKNOWN_ . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = TestBed . createComponent ( _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; _UNKNOWN_ . detectChanges ( ) ; const className = 's' ; expect ( _UNKNOWN_ . nativeElement . className === className ) . toBe ( true ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; const _UNKNOWN_ = getStyle ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = getStyle ( _UNKNOWN_ , 's' ) ; expect ( _UNKNOWN_ ) . toEqual ( 's' ) ; expect ( _UNKNOWN_ ) . toEqual ( 's' ) ; const _UNKNOWN_ = getStyle ( _UNKNOWN_ , 's' ) ; const _UNKNOWN_ = getStyle ( _UNKNOWN_ , 's' ) ; expect ( _UNKNOWN_ ) . toEqual ( 's' ) ; expect ( _UNKNOWN_ ) . toEqual ( 's' ) ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; const 0 = getStyle ( _UNKNOWN_ , 's' ) ; const 0 = getStyle ( _UNKNOWN_ , 's' ) ; expect ( 0 ) . toEqual ( 's' ) ; expect ( 0 ) . toEqual ( 's' ) ; const 0 = getStyle ( _UNKNOWN_ , 's' ) ; const 0 = getStyle ( _UNKNOWN_ , 's' ) ; expect ( 0 ) . toEqual ( 's' ) ; expect ( 0 ) . toEqual ( 's' ) ; testComponent . _UNKNOWN_ = - 0 ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; testComponent . _UNKNOWN_ = 's' ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _type = 's' ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 's' ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; testComponent . _type = 's' ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; testComponent . _type = 's' ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; const _UNKNOWN_ = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _type = 's' ; testComponent . 0 = 's' ; testComponent . 0 = 's' ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . 0 = 's' ; testComponent . 0 = 's' ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . 0 = - 0 ; testComponent . 0 = - 0 ; expect ( ( ) => { fixture . detectChanges ( ) ; } ) . not . toThrow ( ) ; } ) ; } ) ; } ) ; function getStyle ( el , prop ) { return getComputedStyle ( el . nativeElement ) . getPropertyValue ( prop ) ; } @ Component ( { template : 's' } ) class _UNKNOWN_ { } @ Component ( { template : 's' } ) class _UNKNOWN_ { } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _UNKNOWN_ = 0 ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { 0 = 0 ; 0 = 0 ; 0 = 0 ; 0 = 0 ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { 0 = 0 ; _push = 0 ; _UNKNOWN_ = 0 ; } @ Component ( { selector : 's' , template : `template` , } ) class _UNKNOWN_ { 0 = { xs : 0 , _UNKNOWN_ : 0 , md : 0 , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 } ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _type = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _type = 's' ; 0 = 0 ; 0 = 0 ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $number$ O $number$ O $string$ O $any$ O O O O O O $number$ O $number$ O $string$ O $any$ O O O O O $any$ O $number$ O O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $number$ O $number$ O $string$ O $any$ O O O O O O $number$ O $number$ O $string$ O $any$ O O O O O $any$ O $number$ O O $any$ O $number$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $number$ O $number$ O $string$ O $any$ O O O O O $any$ O $number$ O O $any$ O $number$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O $string$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $string$ O $string$ O $any$ O O O O O $string$ O $string$ O $any$ O O O O $any$ O $string$ O O $any$ O O O O $any$ O $string$ O O $any$ O O O O O $string$ O $string$ O $any$ O O O O O $string$ O $string$ O $any$ O O O O $any$ O $string$ O O $any$ O O O O $any$ O $string$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $string$ O $string$ O $any$ O O O O O $string$ O $string$ O $any$ O O O O $any$ O $string$ O O $any$ O O O O $any$ O $string$ O O $any$ O O O O O $string$ O $string$ O $any$ O O O O O $string$ O $string$ O $any$ O O O O $any$ O $string$ O O $any$ O O O O $any$ O $string$ O O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O O $string$ O $DebugElement$ O $string$ O O O $CSSStyleDeclaration$ O $any$ O $any$ O O $string$ O $string$ O O O O $any$ O O $string$ O O O O O $any$ O O O $any$ O O $string$ O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $number$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $number$ O O O $number$ O O O $number$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $number$ O O O $number$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $string$ O O O $number$ O O O $number$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O O O
<s> import { Component } from 's' ; import { async , fakeAsync , tick , TestBed } from 's' ; import { FormsModule } from 's' ; import { By } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let testComponent ; let fixture ; let debugElement ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ ] , providers : [ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; testComponent = fixture . debugElement . componentInstance ; debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { fixture . detectChanges ( ) ; const _UNKNOWN_ = debugElement . nativeElement . querySelector ( 's' ) ; expect ( _UNKNOWN_ . classList . contains ( 's' ) ) . toBe ( true ) ; _UNKNOWN_ . click ( ) ; fixture . detectChanges ( ) ; expect ( testComponent . _UNKNOWN_ ) . toBe ( 0 ) ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; tick ( ) ; const _UNKNOWN_ = debugElement . nativeElement . querySelector ( 's' ) ; _UNKNOWN_ . click ( ) ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( testComponent . _UNKNOWN_ ) . toBe ( 0 ) ; } ) ) ; it ( 's' , ( ) => { testComponent . isDisabled = true ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { testComponent . size = 's' ; tick ( ) ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . size = 's' ; tick ( ) ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; } ) ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ ] , providers : [ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; testComponent = fixture . debugElement . componentInstance ; debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { fixture . detectChanges ( ) ; const _UNKNOWN_ = debugElement . nativeElement . querySelector ( 's' ) ; expect ( _UNKNOWN_ . classList . contains ( 's' ) ) . toBe ( true ) ; _UNKNOWN_ . click ( ) ; fixture . detectChanges ( ) ; expect ( testComponent . _UNKNOWN_ ) . toBe ( 0 ) ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; tick ( ) ; const _UNKNOWN_ = debugElement . nativeElement . querySelector ( 's' ) ; _UNKNOWN_ . click ( ) ; fixture . detectChanges ( ) ; expect ( _UNKNOWN_ . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( testComponent . _UNKNOWN_ ) . toBe ( 0 ) ; } ) ) ; } ) ; } ) ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { isDisabled = false ; _UNKNOWN_ = 0 ; size = 's' ; } @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O O $undefined[]$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O O $undefined[]$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $boolean$ O O O $number$ O O O $string$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $number$ O O O O O
<s> import { Component , ViewChild } from 's' ; import { async , ComponentFixture , _UNKNOWN_ , TestBed } from 's' ; import { By } from 's' ; import { BrowserAnimationsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ , BrowserAnimationsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , providers : [ ] } ) . compileComponents ( ) ; } ) ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _mode = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _mode = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _mode = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _mode = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; testComponent . _mode = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const 0 = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _mode = 's' ; testComponent . _UNKNOWN_ = true ; 0 . nativeElement . click ( ) ; fixture . detectChanges ( ) ; const 0 = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; 0 . nativeElement . click ( ) ; fixture . detectChanges ( ) ; expect ( 0 . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _mode = 's' ; testComponent . _UNKNOWN_ = false ; debugElement . nativeElement . click ( ) ; fixture . detectChanges ( ) ; const 0 = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; 0 . nativeElement . click ( ) ; fixture . detectChanges ( ) ; expect ( 0 . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; debugElement . nativeElement . classList . add ( 's' ) ; testComponent . _UNKNOWN_ = 's' ; testComponent . _UNKNOWN_ = { 0 : true } ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( debugElement . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; expect ( debugElement ) . toBeDefined ( ) ; testComponent . _mode = 's' ; testComponent . _UNKNOWN_ = true ; testComponent . _UNKNOWN_ = true ; fixture . detectChanges ( ) ; const 0 = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; expect ( 0 . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _mode = 's' ; testComponent . _UNKNOWN_ = true ; testComponent . _UNKNOWN_ = true ; fixture . detectChanges ( ) ; const 0 = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; expect ( 0 . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; testComponent . _UNKNOWN_ = true ; fixture . detectChanges ( ) ; const 0 = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; expect ( 0 . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _mode = 's' ; testComponent . _UNKNOWN_ = false ; fixture . detectChanges ( ) ; const 0 = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; expect ( 0 . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; expect ( debugElement ) . toBeDefined ( ) ; testComponent . _mode = 's' ; testComponent . _UNKNOWN_ = false ; fixture . detectChanges ( ) ; const 0 = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; expect ( 0 . nativeElement . classList . contains ( 's' ) ) . toBe ( false ) ; testComponent . _mode = 's' ; testComponent . _UNKNOWN_ = true ; fixture . detectChanges ( ) ; const 0 = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; expect ( 0 . nativeElement . classList . contains ( 's' ) ) . toBe ( true ) ; } ) ; } ) ; } ) ; @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _mode = 's' ; _UNKNOWN_ = { 0 : false } ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _mode = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _mode = 's' ; _UNKNOWN_ = true ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ ( value ) { if ( ! this . _UNKNOWN_ ) { if ( value === 's' ) { this . _UNKNOWN_ = false ; } else if ( value === 's' ) { this . _UNKNOWN_ = false ; } } } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $undefined[]$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O $boolean$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $string$ O O O O O O $boolean$ O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $string$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $string$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $void$ O $string$ O O O O O O O $boolean$ O O O O $string$ O O O O O O $boolean$ O O O O O O O $string$ O O O O O O $boolean$ O O O O O O O O
<s> import { async , TestBed } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { it ( 's' , async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ . forRoot ( ) , ] , } ) . compileComponents ( ) ; expect ( TestBed . get ( _UNKNOWN_ ) ) . not . toBeDefined ( ) ; } ) ) ; it ( 's' , async ( ( ) => { const options = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } ; TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ . forRoot ( options ) , ] , } ) . compileComponents ( ) ; expect ( TestBed . get ( _UNKNOWN_ ) ) . toBeDefined ( ) ; } ) ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $any$ O O $string$ O O O $string$ O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O O O O
<s> import { Component , ViewChild } from 's' ; import { async , fakeAsync , tick , ComponentFixture , _UNKNOWN_ , TestBed } from 's' ; import { By } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , providers : [ ] } ) . compileComponents ( ) ; } ) ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( debugElement . nativeElement . querySelectorAll ( 's' ) . length ) . toBe ( 0 ) ; testComponent . _UNKNOWN_ = 0 ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . classList . contains ( 's' ) ) . toBe ( true ) ; testComponent . _UNKNOWN_ = 0 ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . classList . contains ( 's' ) ) . toBe ( true ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . classList . contains ( 's' ) ) . toBe ( false ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . classList . contains ( 's' ) ) . toBe ( false ) ; testComponent . _UNKNOWN_ = 0 ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelectorAll ( 's' ) . length ) . toBe ( 0 ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) ) . toBeDefined ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; debugElement . nativeElement . querySelector ( 's' ) . click ( ) ; fixture . detectChanges ( ) ; expect ( testComponent . _UNKNOWN_ ) . toBe ( 0 ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) ) . toBeDefined ( ) ; expect ( debugElement . nativeElement . querySelectorAll ( 's' ) . length ) . toBe ( 0 ) ; testComponent . _UNKNOWN_ = 0 ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelectorAll ( 's' ) . length ) . toBe ( 0 ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . classList . contains ( 's' ) ) . toBe ( false ) ; testComponent . _UNKNOWN_ = 's' ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . classList . contains ( 's' ) ) . toBe ( true ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . classList . contains ( 's' ) ) . toBe ( true ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) ) . toBeDefined ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; const testComponent = fixture . debugElement . componentInstance ; const debugElement = fixture . debugElement . query ( By . directive ( _UNKNOWN_ ) ) ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . className ) . toEqual ( 's' ) ; testComponent . pageSize = 0 ; fixture . detectChanges ( ) ; expect ( debugElement . nativeElement . querySelector ( 's' ) . className ) . toEqual ( 's' ) ; } ) ; } ) ; @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; } @ Component ( { selector : 's' , template : `template` } ) class _UNKNOWN_ { _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 0 ; _UNKNOWN_ = 's' ; } @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) class _UNKNOWN_ { } @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) class _UNKNOWN_ { pageSize = 0 ; } } ) ; </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O $undefined[]$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $number$ O O O $number$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O $number$ O O O $number$ O O O $number$ O O O $string$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O $any$ O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O $any$ O $number$ O O O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let _UNKNOWN_ ; let _UNKNOWN_ ; let _UNKNOWN_ ; beforeEach ( ( ) => { _UNKNOWN_ = { head : { appendChild : ( ) => null } , createElement : ( ) => null } as any ; _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } as any ; _UNKNOWN_ = { } as any ; spyOn ( _UNKNOWN_ , 's' ) . and . returnValue ( _UNKNOWN_ ) ; spyOn ( _UNKNOWN_ . head , 's' ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; _UNKNOWN_ ( ) ; expect ( _UNKNOWN_ . createElement ) . toHaveBeenCalledWith ( 's' ) ; expect ( _UNKNOWN_ . head . appendChild ) . toHaveBeenCalledWith ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ ( ) ; expect ( _UNKNOWN_ . createElement ) . not . toHaveBeenCalled ( ) ; expect ( _UNKNOWN_ . head . appendChild ) . not . toHaveBeenCalled ( ) ; } ) ; } ) ; </s>	O O O $void$ O $any$ O O O O $any$ O O O O O O O O $Document$ O O $any$ O O $HTMLDivElement$ O $any$ O O O O O $Document$ O O $complex$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O $HTMLDivElement$ O O O O O O $any$ O $Document$ O O O O $any$ O $any$ O $HTMLDivElement$ O O $any$ O $Document$ O $HTMLHeadElement$ O O O O O O O $any$ O O O O O O O O $void$ O $void$ O $Document$ O $any$ O O $void$ O O O $any$ O $Document$ O O O O $any$ O O O O $any$ O $Document$ O $HTMLHeadElement$ O $T$ O O $any$ O $HTMLDivElement$ O O O O O $any$ O O O O O O O O $void$ O $void$ O $Document$ O O $void$ O O O $any$ O $Document$ O O O O $any$ O $any$ O O O $any$ O $Document$ O $HTMLHeadElement$ O $T$ O O $any$ O $any$ O O O O O O O O O O
<s> import { DOCUMENT } from 's' ; import { _UNKNOWN_ , ComponentFactory , ComponentFactoryResolver , ComponentRef , Injector } from 's' ; import { async , inject , TestBed } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let component ; let _UNKNOWN_ ; let _UNKNOWN_ ; let _UNKNOWN_ ; beforeEach ( ( ) => { _UNKNOWN_ = { head : { appendChild : ( ) => null } , createElement : ( ) => null } as any ; _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } as any ; _UNKNOWN_ = { } as any ; spyOn ( _UNKNOWN_ , 's' ) . and . returnValue ( _UNKNOWN_ ) ; spyOn ( _UNKNOWN_ . head , 's' ) ; } ) ; it ( 's' , ( ) => { component = new _UNKNOWN_ ( _UNKNOWN_ , undefined ) ; component . _UNKNOWN_ = 's' ; component . _UNKNOWN_ = 's' ; component . ngOnInit ( ) ; expect ( _UNKNOWN_ . createElement ) . toHaveBeenCalledWith ( 's' ) ; expect ( _UNKNOWN_ . head . appendChild ) . toHaveBeenCalledWith ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { component = new _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; component . _UNKNOWN_ = 's' ; component . _UNKNOWN_ = 's' ; component . ngOnInit ( ) ; expect ( _UNKNOWN_ . createElement ) . not . toHaveBeenCalled ( ) ; expect ( _UNKNOWN_ . head . appendChild ) . not . toHaveBeenCalled ( ) ; } ) ; it ( 's' , ( ) => { component = new _UNKNOWN_ ( _UNKNOWN_ , undefined ) ; component . ngOnInit ( ) ; expect ( _UNKNOWN_ . createElement ) . not . toHaveBeenCalled ( ) ; expect ( _UNKNOWN_ . head . appendChild ) . not . toHaveBeenCalled ( ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O $Document$ O O $any$ O O $HTMLDivElement$ O $any$ O O O O O $Document$ O O $complex$ O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O $HTMLDivElement$ O O O O O O $any$ O $Document$ O O O O $any$ O $any$ O $HTMLDivElement$ O O $any$ O $Document$ O $HTMLHeadElement$ O O O O O O O $any$ O O O O O O O $any$ O O $any$ O $Document$ O $undefined$ O O $any$ O $string$ O O O $any$ O $string$ O O O $any$ O $void$ O O O $any$ O $Document$ O O O O $any$ O O O O $any$ O $Document$ O $HTMLHeadElement$ O $T$ O O $any$ O $HTMLDivElement$ O O O O O $any$ O O O O O O O $any$ O O $any$ O $Document$ O $any$ O O $any$ O $string$ O O O $any$ O $string$ O O O $any$ O $void$ O O O $any$ O $Document$ O O O O $any$ O $any$ O O O $any$ O $Document$ O $HTMLHeadElement$ O $T$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O $any$ O $Document$ O $undefined$ O O $any$ O $void$ O O O $any$ O $Document$ O O O O $any$ O $any$ O O O $any$ O $Document$ O $HTMLHeadElement$ O $T$ O O $any$ O $any$ O O O O O O O O O O
<s> import { _UNKNOWN_ , ComponentFactory , ComponentFactoryResolver , ComponentRef , Injector } from 's' ; import { async , inject , TestBed } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let ngModule ; let _UNKNOWN_ ; let _UNKNOWN_ ; let _UNKNOWN_ ; let _UNKNOWN_ ; let _UNKNOWN_ < _UNKNOWN_ > ; let _UNKNOWN_ < _UNKNOWN_ > ; beforeEach ( ( ) => { _UNKNOWN_ = { createElement : ( ) => null } as any ; _UNKNOWN_ = { } as any ; _UNKNOWN_ = { resolveComponentFactory : ( ) => null } as any ; _UNKNOWN_ = { } as any ; _UNKNOWN_ = { create : ( ) => null } as any ; _UNKNOWN_ = { destroy : ( ) => null } as any ; spyOn ( _UNKNOWN_ , 's' ) . and . returnValue ( _UNKNOWN_ ) ; spyOn ( _UNKNOWN_ , 's' ) ; spyOn ( _UNKNOWN_ , 's' ) . and . returnValue ( _UNKNOWN_ ) ; spyOn ( _UNKNOWN_ , 's' ) . and . returnValue ( _UNKNOWN_ ) ; } ) ; beforeEach ( ( ) => { ngModule = new _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . createElement ) . toHaveBeenCalledWith ( 's' ) ; expect ( _UNKNOWN_ . resolveComponentFactory ) . toHaveBeenCalledWith ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ . create ) . toHaveBeenCalledWith ( _UNKNOWN_ , null , _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { ngModule . ngOnDestroy ( ) ; expect ( _UNKNOWN_ . destroy ) . toHaveBeenCalled ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ _UNKNOWN_ ] , declarations : [ ] , providers : [ ] , } ) . compileComponents ( ) ; } ) ) ; it ( 's' , inject ( [ _UNKNOWN_ ] , ( _UNKNOWN_ : Function [ ] ) => { expect ( _UNKNOWN_ . some ( x => x . name === 's' ) ) . toBe ( true ) ; } ) ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O $Document$ O O $Injector$ O O $ComponentFactoryResolver$ O O $HTMLDivElement$ O O $any$ O $any$ O O O $ComponentRef$ O $any$ O O $any$ O O O O O $Document$ O O $any$ O O O O O O O O O $any$ O O O O O O $any$ O O $any$ O O O O O O O O O $HTMLDivElement$ O O O O O O $any$ O O $any$ O O O O O O O O O $any$ O O $any$ O O O O O O O O O $any$ O $Document$ O O O O $any$ O $any$ O $HTMLDivElement$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O O $any$ O $Document$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O $Document$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $HTMLDivElement$ O O O O O $any$ O O O O O O O $any$ O $void$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $undefined[]$ O O O O $undefined[]$ O O O O O O O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O O O $Function[]$ O $FunctionConstructor$ O O O O O $any$ O $Function[]$ O $boolean$ O $Function$ O $Function$ O $string$ O O O O O $any$ O O O O O O O O O O O O
<s> import { Component , DebugElement , ViewChild } from 's' ; import { async , fakeAsync , tick , ComponentFixture , _UNKNOWN_ , TestBed } from 's' ; import { FormsModule } from 's' ; import { By } from 's' ; import { NoopAnimationsModule } from 's' ; import { Observable } from 's' ; import { of } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; const DEFAULT = `template` ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; const DATA = [ ] ; for ( let i = 0 ; i < 0 ; i ++ ) { DATA . push ( { key : i . toString ( ) , title : `template` , description : `template` , direction : i % 0 === 0 ? 's' : 's' } ) ; } function _UNKNOWN_ ( el , count = 0 , direction : 's' | 's' = 's' ) : _UNKNOWN_ [ ] { const find = el . querySelectorAll ( `template` ) ; const ret : _UNKNOWN_ [ ] = [ ] ; for ( let i = 0 , len = find . length ; i < len ; i ++ ) { if ( count > i ) { ret . push ( find [ i ] as _UNKNOWN_ ) ; } else { break ; } } return ret ; } describe ( 's' , ( ) => { let fixture < _UNKNOWN_ > ; let context ; let dl ; let el ; function createTestModule ( html ) { TestBed . configureTestingModule ( { declarations : [ _UNKNOWN_ ] , imports : [ _UNKNOWN_ , FormsModule , _UNKNOWN_ , NoopAnimationsModule ] , providers : [ { provide : _UNKNOWN_ , useValue : true } ] } ) ; TestBed . overrideComponent ( _UNKNOWN_ , { set : { template : html } } ) ; fixture = TestBed . createComponent ( _UNKNOWN_ ) ; context = fixture . componentInstance ; spyOn ( context , 's' ) ; spyOn ( context , 's' ) ; spyOn ( context , 's' ) ; spyOn ( context , 's' ) ; spyOn ( context , 's' ) ; spyOn ( context , 's' ) ; dl = fixture . debugElement ; el = fixture . nativeElement ; fixture . detectChanges ( ) ; } describe ( 's' , ( ) => { beforeEach ( ( ) => { createTestModule ( DEFAULT ) ; } ) ; it ( 's' , ( ) => { expect ( context ) . not . toBeNull ( ) ; const titleEl = dl . query ( By . css ( 's' ) ) ; expect ( titleEl . nativeElement . textContent ) . toContain ( `template` , `template` ) ; const _UNKNOWN_ = dl . query ( By . css ( 's' ) ) ; expect ( _UNKNOWN_ . nativeElement . textContent ) . toContain ( `template` , `template` ) ; const _UNKNOWN_ = dl . query ( By . css ( 's' ) ) ; expect ( _UNKNOWN_ . styles . width ) . toBe ( `template` , `template` ) ; expect ( _UNKNOWN_ . styles . height ) . toBe ( `template` , `template` ) ; const _UNKNOWN_ = dl . query ( By . css ( 's' ) ) ; expect ( _UNKNOWN_ . nativeElement . textContent ) . toContain ( `template` , `template` ) ; } ) ; it ( 's' , ( ) => { ( dl . query ( By . css ( 's' ) ) . nativeElement as _UNKNOWN_ ) . click ( ) ; fixture . detectChanges ( ) ; expect ( context . select ) . toHaveBeenCalled ( ) ; } ) ; it ( 's' , ( ) => { context . list = [ ... DATA ] . map ( ( item , idx ) => { if ( idx <= 0 ) item . checked = true ; return item ; } ) ; fixture . detectChanges ( ) ; ( el . querySelectorAll ( `template` ) [ 0 ] as HTMLButtonElement ) . click ( ) ; fixture . detectChanges ( ) ; expect ( context . change ) . toHaveBeenCalled ( ) ; } ) ; it ( 's' , ( ) => { context . list = [ ... DATA ] . map ( ( item , idx ) => { if ( idx <= 0 ) item . checked = true ; return item ; } ) ; fixture . detectChanges ( ) ; ( el . querySelectorAll ( `template` ) [ 0 ] as HTMLButtonElement ) . click ( ) ; fixture . detectChanges ( ) ; expect ( context . change ) . toHaveBeenCalled ( ) ; } ) ; it ( 's' , ( ) => { context . _UNKNOWN_ = true ; fixture . detectChanges ( ) ; expect ( dl . query ( By . css ( 's' ) ) ) . not . toBeNull ( `template` ) ; const _UNKNOWN_ = dl . query ( By . css ( 's' ) ) ; expect ( _UNKNOWN_ . nativeElement . getAttribute ( 's' ) ) . toBe ( `template` , `template` ) ; const _UNKNOWN_ = dl . query ( By . css ( 's' ) ) ; expect ( _UNKNOWN_ . nativeElement . textContent ) . toContain ( `template` , `template` ) ; } ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { createTestModule ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( el , 0 ) ; expect ( _UNKNOWN_ . length ) . toBe ( 0 ) ; expect ( _UNKNOWN_ [ 0 ] . textContent ) . toContain ( `template` ) ; } ) ; it ( 's' , ( ) => { const _UNKNOWN_ = dl . query ( By . css ( 's' ) ) ; expect ( _UNKNOWN_ ) . toBeDefined ( ) ; expect ( _UNKNOWN_ . nativeElement . textContent ) . toContain ( `template` ) ; _UNKNOWN_ . nativeElement . click ( ) ; fixture . detectChanges ( ) ; expect ( context . reload ) . toHaveBeenCalled ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { beforeEach ( ( ) => { createTestModule ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { context . list = [ ... DATA ] . map ( ( item , idx ) => { if ( idx <= 0 ) item . checked = true ; return item ; } ) ; fixture . detectChanges ( ) ; ( el . querySelectorAll ( `template` ) [ 0 ] as HTMLButtonElement ) . click ( ) ; fixture . detectChanges ( ) ; expect ( context . _UNKNOWN_ ) . toHaveBeenCalled ( ) ; } ) ; } ) ; } ) ; @ Component ( { template : 's' } ) class _UNKNOWN_ { @ ViewChild ( _UNKNOWN_ ) comp : _UNKNOWN_ ; list = [ ... DATA ] ; _UNKNOWN_ = false ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ ( inputValue , option ) { return option . description . indexOf ( inputValue ) > - 0 ; } select ( ) { } change ( ) { } search ( ) { } reload ( ) { } _UNKNOWN_ ( arg ) < _UNKNOWN_ [ ] > { if ( arg . direction === 's' && arg . list . length > 0 ) arg . list . splice ( 0 , 0 ) ; return of ( arg . list ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O $any[]$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O $any[]$ O $number$ O O $string$ O $number$ O $string$ O O O $string$ O O O $string$ O O O $string$ O $number$ O O O O O O O O O O O O O $HTMLLIElement[]$ O $HTMLElement$ O $number$ O O O O O O O O O O O O $complex$ O O O O $NodeListOf<Element>$ O $HTMLElement$ O O O O O O O $HTMLLIElement[]$ O $complex$ O O O O O O O O O $number$ O O O $number$ O $NodeListOf<Element>$ O $number$ O $number$ O $number$ O $number$ O O O O O $number$ O $number$ O O $HTMLLIElement[]$ O $number$ O $NodeListOf<Element>$ O $number$ O O $complex$ O O O O O O O O O O $HTMLLIElement[]$ O O $any$ O O O O O O O O $ComponentFixture$ O $any$ O O O $any$ O O $DebugElement$ O O $HTMLElement$ O O $void$ O $string$ O O $any$ O $any$ O O $complex$ O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O O $any$ O $any$ O $boolean$ O O O O O O O $any$ O $any$ O $any$ O O $complex$ O O $string$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $HTMLElement$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O $void$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $complex$ O O $void$ O O O $any$ O $any$ O O O $any$ O $any$ O $void$ O O $any$ O O O O O O $any$ O O O O O O O $any$ O $any[]$ O O O $any[]$ O O $U[]$ O O $any$ O $number$ O O O O O $number$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $HTMLElement$ O O O O O O O O O $complex$ O O $void$ O O O $any$ O $any$ O O O $any$ O $any$ O $void$ O O $any$ O O O O O O $any$ O O O O O O O $any$ O $any[]$ O O O $any[]$ O O $U[]$ O O $any$ O $number$ O O O O O $number$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $HTMLElement$ O O O O O O O O O $complex$ O O $void$ O O O $any$ O $any$ O O O $any$ O $any$ O $void$ O O $any$ O O O O O O $any$ O O O O O O O $any$ O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $void$ O O O O O O O $any$ O O O O O O O O $HTMLLIElement[]$ O $HTMLLIElement[]$ O $HTMLElement$ O O O O $any$ O $HTMLLIElement[]$ O $number$ O O $any$ O O O O $any$ O $HTMLLIElement[]$ O O O O $string$ O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $void$ O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $void$ O O O O O O O $any$ O O O O O O O $any$ O $any[]$ O O O $any[]$ O O $U[]$ O O $any$ O $number$ O O O O O $number$ O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $HTMLElement$ O O O O O O O O O $complex$ O O $void$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $any$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any[]$ O O O $any[]$ O O $boolean$ O O O $string$ O O O $string$ O O O $boolean$ O $string$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $void$ O O O O $void$ O O O O $void$ O O O O $void$ O O O O $Observable$ O $any$ O O $any$ O O O O O O $any$ O $string$ O O O $any$ O $any$ O $number$ O O O $any$ O $any$ O $complex$ O O O O O O O $any$ O $any$ O $any$ O O O O O
<s> import { TestBed , ComponentFixture , fakeAsync , tick } from 's' ; import { HttpClientTestingModule , HttpTestingController } from 's' ; import { Component , ViewChild , DebugElement , Injector } from 's' ; import { of } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { target : { files : [ new File ( [ `template` ] , 's' ) ] } } ; const _UNKNOWN_ = { name : "s" , size : 0 , type : "s" } ; const _UNKNOWN_ = { target : { files : { 0 : _UNKNOWN_ , length : 0 , item : ( ) => _UNKNOWN_ } } } ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { let fixture < TestComponent > ; let dl ; let instance ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ HttpClientTestingModule ] , declarations : [ _UNKNOWN_ , TestComponent ] } ) ; fixture = TestBed . createComponent ( TestComponent ) ; dl = fixture . debugElement ; instance = dl . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( instance ) . toBeTruthy ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { let injector ; let fixture < _UNKNOWN_ > ; let comp ; let http ; beforeEach ( ( ) => { injector = TestBed . configureTestingModule ( { imports : [ HttpClientTestingModule ] , declarations : [ _UNKNOWN_ ] } ) ; ( injector as TestBed ) . compileComponents ( ) ; fixture = TestBed . createComponent ( _UNKNOWN_ ) ; comp = fixture . debugElement . componentInstance ; comp . options = < _UNKNOWN_ > { action : 's' , accept : 's' , filters : [ ] , data : { a : 0 } , headers : { token : 's' } , name : 's' , multiple : true , withCredentials : true , _UNKNOWN_ : ( ) => true , onStart : ( file ) => { } , onProgress : ( ) => { } , onSuccess : ( ) => { } , onError : ( ) => { } } ; http = injector . get ( HttpTestingController ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { spyOn ( comp . options , 's' ) ; spyOn ( comp . options , 's' ) ; spyOn ( comp . options , 's' ) ; comp . onChange ( _UNKNOWN_ ) ; tick ( 0 ) ; const req = http . expectOne ( 's' ) ; req . event ( { type : 0 , loaded : 0 , total : 0 } ) req . flush ( 's' ) ; expect ( comp . options . onProgress ) . toHaveBeenCalled ( ) ; expect ( comp . options . onStart ) . toHaveBeenCalled ( ) ; expect ( comp . options . onSuccess ) . toHaveBeenCalled ( ) ; } ) ) ; it ( 's' , fakeAsync ( ( ) => { comp . onChange ( _UNKNOWN_ ) ; tick ( 0 ) ; const req = http . expectOne ( 's' ) ; expect ( req . request . withCredentials ) . toBe ( true ) ; expect ( req . request . headers . get ( 's' ) ) . toBe ( 's' ) ; const body = req . request . body as FormData ; expect ( body . has ( 's' ) ) . toBe ( true ) ; expect ( body . has ( 's' ) ) . toBe ( true ) ; req . flush ( 's' ) ; } ) ) ; it ( 's' , ( ) => { spyOn ( comp . options , 's' ) ; comp . options . filters = [ { name : 's' , fn : ( fileList : _UNKNOWN_ [ ] ) => fileList . filter ( w => ( w . size / 0 ) <= this . _UNKNOWN_ ) } ] ; comp . onChange ( _UNKNOWN_ ) ; expect ( comp . options . onStart ) . not . toHaveBeenCalled ( ) ; } ) ; it ( 's' , ( ) => { spyOn ( comp . options , 's' ) . and . returnValue ( false ) ; spyOn ( comp . options , 's' ) ; comp . onChange ( _UNKNOWN_ ) ; expect ( comp . options . _UNKNOWN_ ) . toHaveBeenCalled ( ) ; expect ( comp . options . onStart ) . not . toHaveBeenCalled ( ) ; } ) ; it ( 's' , fakeAsync ( ( ) => { spyOn ( comp . options , 's' ) ; spyOn ( comp . options , 's' ) ; spyOn ( comp . options , 's' ) ; comp . onChange ( _UNKNOWN_ ) ; tick ( 0 ) ; http . expectOne ( 's' ) . error ( < any > { status : 0 } ) ; expect ( comp . options . onStart ) . toHaveBeenCalled ( ) ; expect ( comp . options . onError ) . toHaveBeenCalled ( ) ; expect ( comp . options . onSuccess ) . not . toHaveBeenCalled ( ) ; } ) ) ; it ( 's' , ( ) => { comp . options . _UNKNOWN_ = ( ) => of ( true ) . subscribe ( ( ) => { } ) ; spyOn ( comp . options , 's' ) ; comp . onChange ( _UNKNOWN_ ) ; expect ( comp . options . _UNKNOWN_ ) . toHaveBeenCalled ( ) ; } ) ; } ) ; } ) ; @ Component ( { template : `template` } ) class TestComponent { @ ViewChild ( 's' ) comp : _UNKNOWN_ ; classes : string [ ] = [ 's' ] ; options : _UNKNOWN_ = { filters : [ ] } ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $complex$ O O $complex$ O O $File[]$ O O O $complex$ O O O O O O O O O O O O $complex$ O O $string$ O O O $number$ O O O $string$ O O O O O O O O O O O O O O O O $complex$ O $number$ O O O $complex$ O O O O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $ComponentFixture$ O $any$ O O O $DebugElement$ O O $TestComponent$ O $any$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O O $complex$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $TestComponent$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $TestComponent$ O O $any$ O O O O O O O O O $any$ O O O O O O O O $Injector$ O O $ComponentFixture$ O $any$ O O O $any$ O O $HttpTestingController$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O O $complex$ O O $any$ O O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O $complex$ O O $number$ O O O O $complex$ O O $string$ O O O O $string$ O O O $true$ O O O $true$ O O O $boolean$ O O O O O O $void$ O O $any$ O O O O O $void$ O O O O O O O $void$ O O O O O O O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $void$ O $complex$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $number$ O O O $number$ O O O $number$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $void$ O O $any$ O O O $any$ O $any$ O $any$ O $void$ O O $any$ O O O $any$ O $any$ O $any$ O $void$ O O $any$ O O O O O O O $any$ O O O $any$ O O O O O $any$ O $void$ O $complex$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $FormData$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $FormData$ O $boolean$ O O O O O $any$ O O O O $any$ O $FormData$ O $boolean$ O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $string$ O O O $any$ O O $any$ O $any$ O O O O $any$ O $complex$ O $any$ O O $any$ O $number$ O O O O O O $any$ O O O O $any$ O $void$ O O O O $any$ O $any$ O $any$ O $void$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $void$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $void$ O O $any$ O $any$ O O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $void$ O $complex$ O O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O $number$ O O O O O $any$ O $any$ O $any$ O $void$ O O $any$ O O O $any$ O $any$ O $any$ O $void$ O O $any$ O O O $any$ O $any$ O $any$ O $void$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $void$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O $any$ O O $string$ O O O O O $any$ O O $any$ O O O $any$ O $any$ O $string[]$ O O O O O O O O O $any$ O $any$ O O $undefined[]$ O O O O O O O
<s> import { TestBed , ComponentFixture , fakeAsync , tick } from 's' ; import { Component , Injector , ViewChild , DebugElement } from 's' ; import { By } from 's' ; import { HttpClientModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let fixture < TestComponent > ; let dl ; let instance ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { imports : [ HttpClientModule , _UNKNOWN_ ] , declarations : [ TestComponent ] } ) ; fixture = TestBed . createComponent ( TestComponent ) ; dl = fixture . debugElement ; instance = dl . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( instance ) . toBeTruthy ( ) ; } ) ; it ( 's' , ( ) => { expect ( instance . ref . _UNKNOWN_ . disabled ) . toBe ( false ) ; instance . fileList = [ { uid : - 0 , name : 's' , status : 's' , url : 's' , } ] ; fixture . detectChanges ( ) ; expect ( instance . ref . _UNKNOWN_ . disabled ) . toBe ( true ) ; } ) ; } ) ; @ Component ( { template : `template` } ) class TestComponent { @ ViewChild ( 's' ) ref : _UNKNOWN_ ; fileList = [ ] ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $ComponentFixture$ O $any$ O O O $DebugElement$ O O $TestComponent$ O $any$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $TestComponent$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $TestComponent$ O O $any$ O O O O O O $any$ O O O O O O O $any$ O $TestComponent$ O $any$ O $any$ O $boolean$ O O $any$ O O O O $TestComponent$ O $any[]$ O O O $number$ O O O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O O $any$ O $TestComponent$ O $any$ O $any$ O $boolean$ O O $any$ O O O O O O O O O O O $any$ O O $string$ O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any[]$ O O O O O O
<s> export const environment = { production : true } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> export const environment = { production : false } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> export const _UNKNOWN_ = { 's' : [ { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } ] , 's' : [ { 's' : 's' , 's' : [ { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } ] } , { 's' : 's' , 's' : [ { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } ] } , { 's' : 's' , 's' : [ { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } ] } , { 's' : 's' , 's' : [ { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } ] } , { 's' : 's' , 's' : [ { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } ] } , { 's' : 's' , 's' : [ { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } ] } , { 's' : 's' , 's' : [ { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' , 's' : 's' } ] } ] } ; export const _UNKNOWN_ = [ { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } ] ; export const _UNKNOWN_ = [ { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } , { 's' : 's' , 's' : 's' } ] ; </s>	O O O $complexcomplex$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $complex
<s> import { Routes } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export const routes = [ { path : 's' , pathMatch : 's' , redirectTo : 's' } , ... _UNKNOWN_ , ... _UNKNOWN_ , { path : 's' , redirectTo : 's' , pathMatch : 's' } ] ; </s>	O O O $any$ O O O O O O $complex$ O $complex$ O O O O O O $Routes$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O O
<s> import { Component , ViewEncapsulation , OnInit } from 's' ; import { NavigationEnd , Router } from 's' ; import { Title } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class AppComponent implements OnInit { _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ = [ ] ; _UNKNOWN_ = null ; _UNKNOWN_ = [ 's' , 's' ] ; currentVersion = 's' ; constructor ( private router , private title ) { } _UNKNOWN_ ( url ) { if ( url ) { this . router . navigateByUrl ( url ) ; } } _UNKNOWN_ ( version ) { if ( version !== this . currentVersion ) { window . location . href = window . location . origin + `template` + version ; } else { window . location . href = window . location . origin ; } } ngOnInit ( ) { this . _UNKNOWN_ . components . forEach ( group => { this . _UNKNOWN_ = this . _UNKNOWN_ . concat ( [ ... group . children ] ) } ) ; this . router . events . subscribe ( event => { if ( event instanceof NavigationEnd ) { const _UNKNOWN_ = this . _UNKNOWN_ . find ( component => `template` === this . router . url ) ; if ( _UNKNOWN_ ) { this . title . setTitle ( `template` ) } const _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ . find ( component => `template` === this . router . url ) ; if ( _UNKNOWN_ ) { this . title . setTitle ( `template` ) } if ( this . router . url !== 's' + this . _UNKNOWN_ ) { this . _UNKNOWN_ = null ; } window . scrollTo ( 0 , 0 ) ; } } ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $complex$ O $complex$ O $any[]$ O O O O $any$ O O O $string[]$ O O O O O O O $string$ O O O O O O $Router$ O O $Title$ O O O $void$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O O $any$ O O O $string$ O O $complex$ O $Location$ O $string$ O $complex$ O $Location$ O $string$ O O O $any$ O O O O $complex$ O $Location$ O $string$ O $complex$ O $Location$ O $string$ O O O $void$ O O O O O $complex$ O $complex$ O $void$ O $complex$ O O O O $any[]$ O O O $any[]$ O $complex$ O O O $complex$ O $complex$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O O $any[]$ O $complex$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O $complex$ O O O $complex$ O $complex$ O $complex$ O $complex$ O O O O O $any$ O $any$ O O O O $complex$ O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $complex$ O $complex$ O O O O O O O O O O O O O
<s> import { Input , Component , OnInit , ViewEncapsulation , ElementRef , Inject } from 's' ; import { DOCUMENT } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ : string ; _UNKNOWN_ = false ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) _UNKNOWN_ = false ; @ Input ( ) get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ ; } set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } _UNKNOWN_ ( code ) { this . copy ( code ) . then ( ( ) => { this . _UNKNOWN_ = true ; setTimeout ( ( ) => { this . _UNKNOWN_ = false ; } , 0 ) ; } ) ; } copy ( value ) < string > { const promise = new Promise < string > ( ( resolve , reject ) : void => { let _UNKNOWN_ = null as _UNKNOWN_ ; try { _UNKNOWN_ = this . dom . createElement ( 's' ) ; _UNKNOWN_ . style . height = 's' ; _UNKNOWN_ . style . opacity = 's' ; _UNKNOWN_ . style . width = 's' ; this . dom . body . appendChild ( _UNKNOWN_ ) ; _UNKNOWN_ . value = value ; _UNKNOWN_ . select ( ) ; this . dom . execCommand ( 's' ) ; resolve ( value ) ; } finally { if ( _UNKNOWN_ && _UNKNOWN_ . parentNode ) { _UNKNOWN_ . parentNode . removeChild ( _UNKNOWN_ ) ; } } } ) ; return ( promise ) ; } constructor ( @ Inject ( DOCUMENT ) private dom , private _el ) { } ngOnInit ( ) { } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $string$ O O O $boolean$ O O O O $any$ O O $string$ O O O O $any$ O O $boolean$ O O O O $any$ O O O $string$ O O O O O O O O $string$ O O O $string$ O $string$ O O O O $string$ O $string$ O O $void$ O $any$ O O O O $Promise<string>$ O $any$ O O O O O O O O O O $boolean$ O O O $number$ O O O O O O O $boolean$ O O O O O O O O O O O O $Promise$ O $string$ O O O O O O $Promise<string>$ O O $PromiseConstructor$ O O O O O $void$ O $void$ O O O O O O $HTMLTextAreaElement$ O O O $complex$ O O O $HTMLTextAreaElement$ O O O $Document$ O O O O O O $HTMLTextAreaElement$ O $CSSStyleDeclaration$ O $string$ O O O $HTMLTextAreaElement$ O $CSSStyleDeclaration$ O $string$ O O O $HTMLTextAreaElement$ O $CSSStyleDeclaration$ O $string$ O O O O O $Document$ O $HTMLElement$ O $T$ O $HTMLTextAreaElement$ O O $HTMLTextAreaElement$ O $string$ O $string$ O $HTMLTextAreaElement$ O $void$ O O O O O $Document$ O $boolean$ O O O O $void$ O $string$ O O O O O O O $HTMLTextAreaElement$ O $HTMLTextAreaElement$ O $complex$ O O $HTMLTextAreaElement$ O $complex$ O $T$ O $HTMLTextAreaElement$ O O O O O O O O O $Promise<string>$ O O O O O O $any$ O $any$ O O $Document$ O O $ElementRef$ O O O $void$ O O O O O O
<s> import { Component , ElementRef , Input , OnInit , ViewChild } from 's' ; import * as Prism from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ ; @ ViewChild ( 's' ) _UNKNOWN_ : ElementRef ; @ Input ( ) _UNKNOWN_ : string ; @ Input ( ) get _UNKNOWN_ ( ) : string { return this . _UNKNOWN_ || 's' ; } set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = ( Prism as any ) . highlight ( value , ( Prism . languages as any ) . javascript ) ; } constructor ( ) { } ngOnInit ( ) { } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O $string$ O O O O $any$ O O O $string$ O O O O O O O O $any$ O O O O O $string$ O $string$ O O O O $any$ O O $any$ O O O O $any$ O $string$ O O $any$ O $any$ O O O O $any$ O O O O O O O O $void$ O O O O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule ] , declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { BrowserModule , Title } from 's' ; import { NgModule } from 's' ; import { BrowserAnimationsModule } from 's' ; import { FormsModule } from 's' ; import { HttpClientModule } from 's' ; import { RouterModule , _UNKNOWN_ } from 's' ; import { routes } from 's' ; import { AppComponent } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ AppComponent , ] , imports : [ BrowserModule , BrowserAnimationsModule , FormsModule , HttpClientModule , _UNKNOWN_ . forRoot ( { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } ) , _UNKNOWN_ , _UNKNOWN_ , RouterModule . forRoot ( routes , { useHash : true , _UNKNOWN_ : _UNKNOWN_ } ) ] , providers : [ { provide : _UNKNOWN_ , useValue : true } , { provide : _UNKNOWN_ , useValue : { _UNKNOWN_ : 0 } } , { provide : _UNKNOWN_ , useValue : { _UNKNOWN_ : 's' } } , { provide : _UNKNOWN_ , useValue : _UNKNOWN_ } , Title , ] , bootstrap : [ AppComponent ] } ) export class AppModule { } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $complex$ O O $any$ O O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O $any$ O $any$ O O O O $any[]$ O O O $any$ O $any$ O $boolean$ O O O O O $any$ O $any$ O $complex$ O O $number$ O O O O O O $any$ O $any$ O $complex$ O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O $boolean$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { onChange ( status ) { console . log ( status ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $void$ O $boolean$ O O $Console$ O $void$ O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) _UNKNOWN_ = require ( 's' ) _UNKNOWN_ = require ( 's' ) } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class 0 { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class 0 { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { _UNKNOWN_ ( ) { console . log ( 's' ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $void$ O O O $Console$ O $void$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styles : [ `template` ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) 0 = require ( 's' ) _UNKNOWN_ = require ( 's' ) 0 = require ( 's' ) _UNKNOWN_ = require ( 's' ) _UNKNOWN_ = require ( 's' ) } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , 0 , _UNKNOWN_ , 0 , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) _UNKNOWN_ = require ( 's' ) } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; const _UNKNOWN_ = [ 's' , 's' , 's' , 's' ] ; const _UNKNOWN_ = [ 's' , 's' , 's' , 's' ] ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { text : string = _UNKNOWN_ [ 0 ] ; color : string = _UNKNOWN_ [ 0 ] ; change ( ) { let idx = _UNKNOWN_ . indexOf ( this . text ) ; ++ idx ; if ( idx == _UNKNOWN_ . length ) idx = 0 ; this . text = _UNKNOWN_ [ idx ] ; this . color = _UNKNOWN_ [ idx ] ; } } </s>	O O O $any$ O O O O O $string[]$ O O O O O O O O O O O O $string[]$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $string$ O O O $string[]$ O O O O $string$ O O O $string[]$ O O O O $void$ O O O O $number$ O $string[]$ O $number$ O O O $string$ O O O $number$ O O O $number$ O $string[]$ O $number$ O $number$ O O O O O $string$ O $string[]$ O $number$ O O O O $string$ O $string[]$ O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) _UNKNOWN_ = require ( 's' ) _UNKNOWN_ = require ( 's' ) _UNKNOWN_ = require ( 's' ) } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { notify ( ) { console . log ( 's' ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $void$ O O O $Console$ O $void$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) _UNKNOWN_ = require ( 's' ) _UNKNOWN_ = require ( 's' ) } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { count = 0 ; dot = true ; _UNKNOWN_ ( ) { this . count ++ ; } _UNKNOWN_ ( ) { this . count -- ; } _UNKNOWN_ ( ) { this . dot = ! this . dot ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $number$ O O O $boolean$ O O O $void$ O O O O O $number$ O O O $void$ O O O O O $number$ O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { 0 = { } ; 0 = { backgroundColor : 's' , color : 's' , boxShadow : 's' } ; 0 = { backgroundColor : 's' } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O ${}$ O O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O $complex$ O O $string$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , encapsulation : ViewEncapsulation . None , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , CommonModule , FormsModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ = ( value ) => { this . _UNKNOWN_ = true ; setTimeout ( _ => { this . _UNKNOWN_ = false ; } , 0 ) ; } ; _UNKNOWN_ = ( value ) => { this . _UNKNOWN_ = true ; setTimeout ( _ => { this . _UNKNOWN_ = false ; } , 0 ) ; } ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $void$ O O $any$ O O O O O $boolean$ O O O $number$ O $any$ O O O O $boolean$ O O O O O O O O O O $void$ O O $any$ O O O O O $boolean$ O O O $number$ O $any$ O O O O $boolean$ O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { size = 's' ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , encapsulation : ViewEncapsulation . None , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , CommonModule , FormsModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { _UNKNOWN_ = { padding : 0 } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $complex$ O O $number$ O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = { width : 's' , _UNKNOWN_ : 's' , } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O $string$ O O O $string$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , encapsulation : ViewEncapsulation . None , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , CommonModule , FormsModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { array = [ 0 ] ; ngOnInit ( ) { setTimeout ( _ => { this . array = [ 0 , 0 , 0 , 0 ] ; } , 0 ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $number[]$ O O O O O $void$ O O O $number$ O $any$ O O O O $number[]$ O O O O O O O O O O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { array = [ 0 , 0 , 0 ] ; ngOnInit ( ) { setTimeout ( _ => { this . array = [ 0 , 0 , 0 , 0 ] ; } , 0 ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $number[]$ O O O O O O O O O $void$ O O O $number$ O $any$ O O O O $number[]$ O O O O O O O O O O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { array = [ ] ; ngOnInit ( ) { setTimeout ( _ => { this . array = [ 0 , 0 , 0 , 0 ] ; } , 0 ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any[]$ O O O O $void$ O O O $number$ O $any$ O O O O $any[]$ O O O O O O O O O O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { array = [ 0 , 0 , 0 ] ; ngOnInit ( ) { setTimeout ( ( ) => { this . array = [ 0 , 0 , 0 , 0 ] ; } , 0 ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $number[]$ O O O O O O O O O $void$ O O O $number$ O O O O O O O $number[]$ O O O O O O O O O O O O O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , encapsulation : ViewEncapsulation . None , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , CommonModule , FormsModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; const _UNKNOWN_ = [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } ] , } ] ; const _UNKNOWN_ = [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } ] , } , { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } ] , } ] ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { _options = null ; _value : any [ ] = null ; _UNKNOWN_ ( value ) { console . log ( value ) ; } ngOnInit ( ) { setTimeout ( ( ) => { this . _options = _UNKNOWN_ ; } , 0 ) ; } _UNKNOWN_ ( ) { if ( this . _options === _UNKNOWN_ ) { this . _options = _UNKNOWN_ ; } else { this . _options = _UNKNOWN_ ; } } } </s>	O O O $any$ O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O $any[]$ O O O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O $void$ O O O $number$ O O O O O O O $any$ O $complex$ O O O O O O O $void$ O O O O O O O $any$ O $complex$ O O O O $any$ O $complex$ O O O O O O $any$ O $complex$ O O O O O
<s> import { Component } from 's' ; const options = [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } ] , } ] ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _options = options ; _value : any [ ] = null ; _UNKNOWN_ ( value ) { console . log ( value ) ; } } </s>	O O O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O $complex$ O $any[]$ O O O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O
<s> import { Component , ViewChild , TemplateRef } from 's' ; const options = [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , code : 0 , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , code : 0 , _UNKNOWN_ : true } ] , } ] , } ] ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _options = options ; _value : any [ ] = null ; @ ViewChild ( 's' ) _UNKNOWN_ : TemplateRef < any > ; _UNKNOWN_ ( value ) { console . log ( value ) ; } get _UNKNOWN_ ( ) : Function { return this . _UNKNOWN_ . bind ( this ) ; } _UNKNOWN_ ( labels : string [ ] , selectedOptions : any [ ] ) { return this . _UNKNOWN_ ; } _UNKNOWN_ ( e , label , option ) { e . preventDefault ( ) ; e . stopPropagation ( ) ; console . log ( 's' , label , option ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $number$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $number$ O O O $boolean$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O $complex$ O $any[]$ O O O O O O O O $any$ O O O $any$ O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O $Function$ O O O $FunctionConstructor$ O O O O $any$ O $any$ O O O O O $any$ O $string[]$ O O O O O $any[]$ O O O O O O O O O $any$ O O $void$ O $Event$ O $string$ O $any$ O O $Event$ O $void$ O O O $Event$ O $void$ O O O $Console$ O $void$ O O O $string$ O $any$ O O O O O
<s> import { Component } from 's' ; const options = [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } ] , } ] ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _options = options ; _value : any [ ] = null ; _text = 's' ; _UNKNOWN_ ( value ) { console . log ( value ) ; } _UNKNOWN_ ( selectedOptions : any [ ] ) { this . _text = selectedOptions . map ( o => o . label ) . join ( 's' ) ; } } </s>	O O O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O $complex$ O $any[]$ O O O O O O O $string$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O $void$ O $any[]$ O O O O O O O O $string$ O $any[]$ O $U[]$ O $any$ O $any$ O $any$ O O $string$ O O O O O O O
<s> import { Component } from 's' ; const options = [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } ] , } ] ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _options = options ; _value : any [ ] = [ { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } ] ; _UNKNOWN_ ( value ) { console . log ( value ) ; } } </s>	O O O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O $complex$ O $any[]$ O O O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O
<s> import { Component } from 's' ; const options = [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , disabled : true , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } ] , } ] ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _options = options ; _value : any [ ] = null ; _UNKNOWN_ ( value ) { console . log ( value ) ; } } </s>	O O O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O $complex$ O $any[]$ O O O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O
<s> import { Component } from 's' ; const options = [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } ] , } ] ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _options = options ; _value : any [ ] = null ; _UNKNOWN_ ( value ) { console . log ( value ) ; } } </s>	O O O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O $complex$ O $any[]$ O O O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O
<s> import { Component } from 's' ; const _UNKNOWN_ = [ { value : 's' , label : 's' } , { value : 's' , label : 's' } ] ; const _UNKNOWN_ = { _UNKNOWN_ : [ { value : 's' , label : 's' , } , { value : 's' , label : 's' , _UNKNOWN_ : true } ] , _UNKNOWN_ : [ { value : 's' , label : 's' } ] } ; const _UNKNOWN_ = { _UNKNOWN_ : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , _UNKNOWN_ : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] } ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _value : any [ ] = null ; _UNKNOWN_ ( value ) { console . log ( value ) ; } loadData ( e : { option : any , index : number , resolve : Function , reject : Function } ) { if ( e . index === - 0 ) { e . resolve ( _UNKNOWN_ ) ; return ; } const option = e . option ; option . loading = true ; if ( e . index === 0 ) { setTimeout ( ( ) => { option . loading = false ; e . resolve ( _UNKNOWN_ [ option . value ] ) ; } , 0 ) ; } if ( e . index === 0 ) { setTimeout ( ( ) => { option . loading = false ; e . resolve ( _UNKNOWN_ [ option . value ] ) ; } , 0 ) ; } } } </s>	O O O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O $complex$ O O $complex$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O O O $complex$ O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any[]$ O O O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O $void$ O $complex$ O O $any$ O O O $number$ O O O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O O O O O $complex$ O $number$ O O O O O $complex$ O $Function$ O $complex$ O O O O O O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O O $complex$ O $number$ O O O O $number$ O O O O O $any$ O $any$ O O O $complex$ O $Function$ O $complex$ O $any$ O $any$ O O O O O O O O O O O $complex$ O $number$ O O O O $number$ O O O O O $any$ O $any$ O O O $complex$ O $Function$ O $complex$ O $any$ O $any$ O O O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; import { FormBuilder , FormGroup , Validators } from 's' ; const _UNKNOWN_ = [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } ] , } ] ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { _options = null ; _value : any [ ] = null ; _UNKNOWN_ : FormGroup ; _UNKNOWN_ ( value ) { console . log ( value ) ; } constructor ( private _UNKNOWN_ ) { this . _UNKNOWN_ ( ) ; } ngOnInit ( ) { this . _options = _UNKNOWN_ ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ . group ( { name : [ null , Validators . required ] } ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . reset ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O $any[]$ O O O O O O O $any$ O $any$ O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O O $FormBuilder$ O O O O $void$ O O O O $void$ O O O O O $any$ O $complex$ O O $void$ O O O O O $any$ O O O $any$ O $any$ O O $any[]$ O O O O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; const options = [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } , { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , children : [ { value : 's' , label : 's' , _UNKNOWN_ : true } ] , } ] , } ] ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _options = options ; 0 : any [ ] = null ; 0 : any [ ] = null ; 0 : any [ ] = null ; _UNKNOWN_ ( value ) { console . log ( value ) ; } } </s>	O O O $any$ O O O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O $complex$ O $any[]$ O O O O O O O $any[]$ O O O O O O O $any[]$ O O O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule , ReactiveFormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , FormsModule , ReactiveFormsModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _checked = true ; _UNKNOWN_ ( value ) { console . log ( value ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = true ; _UNKNOWN_ = false ; _UNKNOWN_ = ( ) => { this . _UNKNOWN_ = ! this . _UNKNOWN_ ; } ; _UNKNOWN_ = ( ) => { this . _UNKNOWN_ = ! this . _UNKNOWN_ ; } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $void$ O O O O O O O $boolean$ O O O O $boolean$ O O O $void$ O O O O O O O $boolean$ O O O O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = [ { label : 's' , value : 's' , checked : true } , { label : 's' , value : 's' } , { label : 's' , value : 's' } , ] ; _UNKNOWN_ = [ { label : 's' , value : 's' } , { label : 's' , value : 's' , checked : true } , { label : 's' , value : 's' } , ] ; _UNKNOWN_ = [ { label : 's' , value : 's' , disabled : true , checked : true } , { label : 's' , value : 's' , disabled : true } , { label : 's' , value : 's' } , ] ; _UNKNOWN_ ( value ) { console . log ( value ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; indeterminate = true ; _UNKNOWN_ = [ { label : 's' , value : 's' , checked : true } , { label : 's' , value : 's' , checked : false } , { label : 's' , value : 's' , checked : false } , ] ; _UNKNOWN_ ( ) { this . indeterminate = false ; if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . forEach ( item => item . checked = true ) ; } else { this . _UNKNOWN_ . forEach ( item => item . checked = false ) ; } } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ . every ( item => item . checked === false ) ) { this . _UNKNOWN_ = false ; this . indeterminate = false ; } else if ( this . _UNKNOWN_ . every ( item => item . checked === true ) ) { this . _UNKNOWN_ = true ; this . indeterminate = false ; } else { this . indeterminate = true ; } } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O $void$ O O O O O $boolean$ O O O O O O O $boolean$ O O O O $complex$ O $void$ O $complex$ O $complex$ O $boolean$ O O O O O O O O O $complex$ O $void$ O $complex$ O $complex$ O $boolean$ O O O O O O $void$ O O O O O O O $complex$ O $boolean$ O $complex$ O $complex$ O $boolean$ O O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O O O $complex$ O $boolean$ O $complex$ O $complex$ O $boolean$ O O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O O $boolean$ O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , FormsModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { panels = [ { active : true , name : 's' , _UNKNOWN_ : [ { active : false , name : 's' } ] } , { active : false , name : 's' } , { active : false , name : 's' } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $boolean$ O O O $string$ O O O $complex$ O O O $boolean$ O O O $string$ O O O O O O O $boolean$ O O O $string$ O O O O O $boolean$ O O O $string$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { panels = [ { active : true , name : 's' , disabled : false , _UNKNOWN_ : [ { active : false , name : 's' } ] } , { active : false , disabled : true , name : 's' } , { active : true , disabled : false , name : 's' } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $boolean$ O O O $string$ O O O $boolean$ O O O $complex$ O O O $boolean$ O O O $string$ O O O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { panels = [ { active : true , disabled : false , name : 's' , _UNKNOWN_ : [ { active : false , disabled : true , name : 's' } ] } , { active : false , disabled : true , name : 's' } , { active : false , disabled : false , name : 's' } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $complex$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { panels = [ { active : true , disabled : false , name : 's' , _UNKNOWN_ : { 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' } } , { active : false , disabled : true , name : 's' , _UNKNOWN_ : { 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' } } , { active : false , disabled : false , name : 's' , _UNKNOWN_ : { 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' } } ] ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $complex$ O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O $complex$ O O O O O O O O O O O O O O O O O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O $complex$ O O O O O O O O O O O O O O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { panels = [ { active : true , disabled : false , name : 's' , _UNKNOWN_ : [ { active : true , name : 's' } , { active : false , name : 's' } ] } , { active : false , disabled : true , name : 's' } , { active : false , disabled : false , name : 's' } ] ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $complex$ O O O $boolean$ O O O $string$ O O O O O $boolean$ O O O $string$ O O O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O $boolean$ O O O $boolean$ O O O $string$ O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , encapsulation : ViewEncapsulation . None , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , CommonModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = null ; _UNKNOWN_ = [ null , null ] ; constructor ( ) { } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O O O $any[]$ O O O O O O O O O O O O O O
<s> import { Component } from 's' ; import * as moment from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = null ; _moment = null ; _UNKNOWN_ = [ null , null ] ; _UNKNOWN_ ( current ) { return current && current . getTime ( ) > Date . now ( ) ; } _UNKNOWN_ ( current ) { return current && moment ( current ) . day ( 0 ) . valueOf ( ) > moment ( ) . valueOf ( ) ; } } </s>	O O O $any$ O O O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O O O $any$ O O O $any[]$ O O O O O O O $boolean$ O $Date$ O O O $Date$ O $Date$ O $number$ O O O $DateConstructor$ O $number$ O O O O $boolean$ O $Date$ O O O $Date$ O $any$ O $Date$ O O $any$ O O O O $any$ O O O $any$ O O O $any$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = new Date ( ) ; _UNKNOWN_ = [ new Date ( ) , new Date ( Date . now ( ) + 0 * 0 * 0 * 0 ) ] ; constructor ( ) { } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $Date$ O O $DateConstructor$ O O O $Date[]$ O O O $DateConstructor$ O O O O $DateConstructor$ O $DateConstructor$ O $number$ O O O O O O O O O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = new Date ( ) ; _UNKNOWN_ = new Date ( ) ; _UNKNOWN_ = [ new Date ( ) , new Date ( Date . now ( ) + 0 * 0 * 0 * 0 ) ] ; constructor ( ) { } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $Date$ O O $DateConstructor$ O O O $Date$ O O $DateConstructor$ O O O $Date[]$ O O O $DateConstructor$ O O O O $DateConstructor$ O $DateConstructor$ O $number$ O O O O O O O O O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { size = 's' ; _date = null ; _UNKNOWN_ = null ; _UNKNOWN_ = [ null , null ] ; constructor ( ) { } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O $any$ O O O $any$ O O O $any[]$ O O O O O O O O O O O O O O
<s> import { Component } from 's' ; import * as moment from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = null ; _UNKNOWN_ = null ; _UNKNOWN_ = ( len ) => { const result = [ ] ; for ( let i = 0 ; i < len ; i ++ ) { result . push ( i ) ; } return result ; } ; _UNKNOWN_ = ( ) => { if ( this . _UNKNOWN_ > this . _UNKNOWN_ ) { this . _UNKNOWN_ = null ; } } ; _UNKNOWN_ = ( ) => { if ( this . _UNKNOWN_ > this . _UNKNOWN_ ) { this . _UNKNOWN_ = null ; } } ; _UNKNOWN_ = ( startValue ) => { if ( ! startValue || ! this . _UNKNOWN_ ) { return false ; } return startValue . getTime ( ) >= this . _UNKNOWN_ . getTime ( ) ; } ; _UNKNOWN_ = ( endValue ) => { if ( ! endValue || ! this . _UNKNOWN_ ) { return false ; } return endValue . getTime ( ) <= this . _UNKNOWN_ . getTime ( ) ; } ; get _UNKNOWN_ ( ) { return this . _UNKNOWN_ && this . _UNKNOWN_ && moment ( this . _UNKNOWN_ ) . _UNKNOWN_ ( this . _UNKNOWN_ , 's' ) } get _UNKNOWN_ ( ) { return { _UNKNOWN_ : true , _UNKNOWN_ : ( ) => { return this . _UNKNOWN_ ? this . _UNKNOWN_ ( this . _UNKNOWN_ . getHours ( ) ) : [ ] ; } , _UNKNOWN_ : ( h ) => { if ( this . _UNKNOWN_ && h === this . _UNKNOWN_ . getHours ( ) ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ . getMinutes ( ) ) ; } return [ ] ; } , _UNKNOWN_ : ( h , m ) => { if ( this . _UNKNOWN_ && h === this . _UNKNOWN_ . getHours ( ) && m === this . _UNKNOWN_ . getMinutes ( ) ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ . getSeconds ( ) ) ; } return [ ] ; } } } } </s>	O O O $any$ O O O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O O O $any$ O O O $any[]$ O O $any$ O O O O $any[]$ O O O O O O O $number$ O O O $number$ O $any$ O $number$ O O O $any[]$ O $number$ O $number$ O O O O $any[]$ O O O $void$ O O O O O O O O O $any$ O O O $any$ O O O O $any$ O O O O O O $void$ O O O O O O O O O $any$ O O O $any$ O O O O $any$ O O O O O O $boolean$ O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $boolean$ O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O $any$ O O O $any$ O O O O O $complex$ O O O O O $boolean$ O O O $any[]$ O O O O O O O O $any$ O O O $any[]$ O O O $any$ O $any$ O O O O O O O O O $any[]$ O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $any[]$ O O O $any$ O $any$ O O O O O O O O O O O $any[]$ O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O O $any[]$ O O O $any$ O $any$ O O O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = null ; _UNKNOWN_ = [ null , null ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O O O $any[]$ O O O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { log ( e ) { console . log ( 's' ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $void$ O $any$ O O $Console$ O $void$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { visible = false ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { log ( data ) { console . log ( data ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , encapsulation : ViewEncapsulation . None , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , CommonModule , FormsModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; import { FormBuilder , FormGroup , FormControl } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ : FormGroup ; _UNKNOWN_ = [ ] ; _UNKNOWN_ = true ; _UNKNOWN_ ( ) { this . _UNKNOWN_ = ! this . _UNKNOWN_ ; this . _UNKNOWN_ . forEach ( ( c , index ) => { c . show = this . _UNKNOWN_ ? ( index < 0 ) : true ; } ) } _UNKNOWN_ ( ) { this . _UNKNOWN_ . reset ( ) ; } constructor ( private fb ) { } ngOnInit ( ) { this . _UNKNOWN_ = this . fb . group ( { } ) ; for ( let i = 0 ; i < 0 ; i ++ ) { this . _UNKNOWN_ . push ( { index : i , show : i < 0 } ) ; this . _UNKNOWN_ . addControl ( `template` , new FormControl ( ) ) ; } } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any[]$ O O O O $boolean$ O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O O $any[]$ O $void$ O O $any$ O $number$ O O O $any$ O $any$ O O O $boolean$ O O $number$ O O O O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O O $FormBuilder$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $number$ O $number$ O $boolean$ O $number$ O O O O O O O $any$ O $any$ O O O O $any$ O O O O O O O O
<s> import { Component , OnInit } from 's' ; import { FormBuilder , FormGroup , FormControl , Validators } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ : FormGroup ; _UNKNOWN_ = [ ] ; _UNKNOWN_ ( e ? ) { if ( e ) { e . preventDefault ( ) ; } const id = ( this . _UNKNOWN_ . length > 0 ) ? this . _UNKNOWN_ [ this . _UNKNOWN_ . length - 0 ] . id + 0 : 0 ; const control = { id , _UNKNOWN_ : `template` } ; const index = this . _UNKNOWN_ . push ( control ) ; console . log ( this . _UNKNOWN_ [ this . _UNKNOWN_ . length - 0 ] ) ; this . _UNKNOWN_ . addControl ( this . _UNKNOWN_ [ index - 0 ] . _UNKNOWN_ , new FormControl ( null , Validators . required ) ) ; } _UNKNOWN_ ( i , e ) { e . preventDefault ( ) ; if ( this . _UNKNOWN_ . length > 0 ) { const index = this . _UNKNOWN_ . indexOf ( i ) ; this . _UNKNOWN_ . splice ( index , 0 ) ; console . log ( this . _UNKNOWN_ ) ; this . _UNKNOWN_ . _UNKNOWN_ ( i . _UNKNOWN_ ) ; } } _UNKNOWN_ ( name ) { return this . _UNKNOWN_ . controls [ name ] ; } _UNKNOWN_ ( ) { for ( const i in this . _UNKNOWN_ . controls ) { this . _UNKNOWN_ . controls [ i ] . _UNKNOWN_ ( ) ; } console . log ( this . _UNKNOWN_ . value ) ; } constructor ( private fb ) { } ngOnInit ( ) { this . _UNKNOWN_ = this . fb . group ( { } ) ; this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any[]$ O O O O $void$ O $MouseEvent$ $MouseEvent$ O O O O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O $any$ O O O O $any[]$ O $number$ O O O O O O $any[]$ O O O $any[]$ O $number$ O O O O $any$ O O O O O O $complex$ O O $any$ O $string$ O O O O O $number$ O O O $any[]$ O $number$ O $complex$ O O $Console$ O $void$ O O O $any[]$ O O O $any[]$ O $number$ O O O O O O O $any$ O $any$ O O O $any[]$ O $number$ O O O O $any$ O O $any$ O O O $any$ O $any$ O O O O $void$ O $any$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O O O $any[]$ O $number$ O O O O O $number$ O O O $any[]$ O $number$ O $any$ O O O O $any[]$ O $complex$ O $number$ O O O O $Console$ O $void$ O O O $any[]$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $void$ O O O O O O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O $any$ O O O O $Console$ O $void$ O O O $any$ O $any$ O O O O O O $FormBuilder$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O O O O O $void$ O O O O O O
<s> import { Component , OnInit } from 's' ; import { FormBuilder , FormGroup , Validators , FormControl } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ : FormGroup ; _UNKNOWN_ ( ) { for ( const i in this . _UNKNOWN_ . controls ) { this . _UNKNOWN_ . controls [ i ] . _UNKNOWN_ ( ) ; } } constructor ( private fb ) { } _UNKNOWN_ ( ) { setTimeout ( _ => { this . _UNKNOWN_ . controls [ 's' ] . _UNKNOWN_ ( ) ; } ) ; } _UNKNOWN_ = ( control ) : { [ s ] : boolean } => { if ( ! control . value ) { return { required : true } ; } else if ( control . value !== this . _UNKNOWN_ . controls [ 's' ] . value ) { return { confirm : true , error : true } ; } } ; _UNKNOWN_ ( e ) { e . preventDefault ( ) ; } ngOnInit ( ) { this . _UNKNOWN_ = this . fb . group ( { email : [ null , [ Validators . email ] ] , password : [ null , [ Validators . required ] ] , _UNKNOWN_ : [ null , [ Validators . required , this . _UNKNOWN_ ] ] , _UNKNOWN_ : [ null , [ Validators . required ] ] , _UNKNOWN_ : [ 's' ] , phoneNumber : [ null , [ Validators . required ] ] , _UNKNOWN_ : [ null , [ Validators . required ] ] , _UNKNOWN_ : [ null , [ Validators . required ] ] , _UNKNOWN_ : [ false ] } ) ; } _UNKNOWN_ ( name ) { return this . _UNKNOWN_ . controls [ name ] ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O O O O O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O $any$ O O O O O O O O $FormBuilder$ O O O $void$ O O O $number$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O O O $complex$ O O $any$ O O O O $string$ O O O O O O O O O $any$ O $any$ O O O O $true$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O $true$ O O O $true$ O O O O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O $any[][]$ O O O O O $any$ O $any$ O O O $any[][]$ O O O O O $any$ O $any$ O O O $any[][]$ O O O O O $any$ O $any$ O O O $complex$ O O O $any[][]$ O O O O O $any$ O $any$ O O O $string[]$ O O O O O $any[][]$ O O O O O $any$ O $any$ O O O $any[][]$ O O O O O $any$ O $any$ O O O $any[][]$ O O O O O $any$ O $any$ O O O $boolean[]$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O
<s> import { Component , OnInit } from 's' ; import { FormBuilder , FormGroup , Validators } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ : FormGroup ; _UNKNOWN_ ( ) { for ( const i in this . _UNKNOWN_ . controls ) { this . _UNKNOWN_ . controls [ i ] . _UNKNOWN_ ( ) ; } } constructor ( private fb ) { } ngOnInit ( ) { this . _UNKNOWN_ = this . fb . group ( { userName : [ null , [ Validators . required ] ] , password : [ null , [ Validators . required ] ] } ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O O O O O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O $any$ O O O O O O O O $FormBuilder$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O $any[][]$ O O O O O $any$ O $any$ O O O $any[][]$ O O O O O $any$ O $any$ O O O O O O O O
<s> import { Component , OnInit } from 's' ; import { FormBuilder , FormGroup , Validators } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ : FormGroup ; _UNKNOWN_ ( ) { for ( const i in this . _UNKNOWN_ . controls ) { this . _UNKNOWN_ . controls [ i ] . _UNKNOWN_ ( ) ; } } get isHorizontal ( ) { return this . _UNKNOWN_ . controls [ 's' ] && this . _UNKNOWN_ . controls [ 's' ] . value === 's' ; } constructor ( private fb ) { } ngOnInit ( ) { this . _UNKNOWN_ = this . fb . group ( { _UNKNOWN_ : [ 's' ] , userName : [ null , [ Validators . required ] ] , password : [ null , [ Validators . required ] ] } ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O O O O O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O $any$ O O O O O O $boolean$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $FormBuilder$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O $string[]$ O O O O O $any[][]$ O O O O O $any$ O $any$ O O O $any[][]$ O O O O O $any$ O $any$ O O O O O O O O
<s> import { Component , OnInit } from 's' ; import { FormBuilder , FormGroup , Validators } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ : FormGroup ; _UNKNOWN_ ( ) { for ( const i in this . _UNKNOWN_ . controls ) { this . _UNKNOWN_ . controls [ i ] . _UNKNOWN_ ( ) ; } } constructor ( private fb ) { } ngOnInit ( ) { this . _UNKNOWN_ = this . fb . group ( { userName : [ null , [ Validators . required ] ] , password : [ null , [ Validators . required ] ] , _UNKNOWN_ : [ true ] , } ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O O O O O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O $any$ O O O O O O O O $FormBuilder$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O $any[][]$ O O O O O $any$ O $any$ O O O $any[][]$ O O O O O $any$ O $any$ O O O $boolean[]$ O O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; import { FormBuilder , FormGroup } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ : FormGroup ; marks = { 0 : 's' , 0 : 's' , 0 : 's' , 0 : 's' , 0 : 's' } now = new Date ( ) ; constructor ( private fb ) { } ngOnInit ( ) { this . _UNKNOWN_ = this . fb . group ( { select : [ 's' ] , _UNKNOWN_ : [ [ 's' ] ] , datepicker : [ new Date ( ) ] , _UNKNOWN_ : [ new Date ( ) ] , _UNKNOWN_ : [ 0 ] , switch : [ false ] , slider : [ 0 ] , _UNKNOWN_ : [ 0 ] , _UNKNOWN_ : [ 0 ] } ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O $Date$ O O $DateConstructor$ O O O O O O $FormBuilder$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O $string[]$ O O O O O $string[][]$ O O O O O O O $Date[]$ O O O $DateConstructor$ O O O O $Date[]$ O O O $DateConstructor$ O O O O $number[]$ O O O O O $boolean[]$ O O O O O $number[]$ O O O O O $number[]$ O O O O O $number[]$ O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; import { FormBuilder , FormGroup , FormControl , Validators } from 's' ; import { Observable } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ : FormGroup ; _UNKNOWN_ = ( $event , value ) => { $event . preventDefault ( ) ; for ( const key in this . _UNKNOWN_ . controls ) { this . _UNKNOWN_ . controls [ key ] . _UNKNOWN_ ( ) ; } console . log ( value ) ; } ; _UNKNOWN_ ( $event ) { $event . preventDefault ( ) ; this . _UNKNOWN_ . reset ( ) ; for ( const key in this . _UNKNOWN_ . controls ) { this . _UNKNOWN_ . controls [ key ] . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( ) { setTimeout ( _ => { this . _UNKNOWN_ . controls [ 's' ] . _UNKNOWN_ ( ) ; } ) } _UNKNOWN_ = ( control ) : any => { return Observable . create ( function ( observer ) { setTimeout ( ( ) => { if ( control . value === 's' ) { observer . next ( { error : true , _UNKNOWN_ : true } ) ; } else { observer . next ( null ) ; } observer . complete ( ) ; } , 0 ) ; } ) ; } ; _UNKNOWN_ ( name ) { return this . _UNKNOWN_ . controls [ name ] ; } _UNKNOWN_ = ( control ) : { [ s ] : boolean } => { const _UNKNOWN_ = "s" ; if ( ! control . value ) { return { required : true } } else if ( ! _UNKNOWN_ . test ( control . value ) ) { return { error : true , email : true } ; } } ; _UNKNOWN_ = ( control ) : { [ s ] : boolean } => { if ( ! control . value ) { return { required : true } ; } else if ( control . value !== this . _UNKNOWN_ . controls [ 's' ] . value ) { return { confirm : true , error : true } ; } } ; _UNKNOWN_ = ( control ) : any => { if ( new Date ( control . value ) > new Date ( ) ) { return { _UNKNOWN_ : true , error : true } } } ; constructor ( private fb ) { this . _UNKNOWN_ = this . fb . group ( { userName : [ 's' , [ Validators . required ] , [ this . _UNKNOWN_ ] ] , email : [ 's' , [ this . _UNKNOWN_ ] ] , _UNKNOWN_ : [ 's' , [ this . _UNKNOWN_ ] ] , password : [ 's' , [ Validators . required ] ] , _UNKNOWN_ : [ 's' , [ this . _UNKNOWN_ ] ] , comment : [ 's' , [ Validators . required ] ] } ) ; } ngOnInit ( ) { } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O $any$ O O O O $Console$ O $void$ O $any$ O O O O $void$ O $MouseEvent$ O O $MouseEvent$ O $void$ O O O O O $any$ O $any$ O O O O O O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O $any$ O O O O O $void$ O O O $number$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O $number$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O O O O $string$ O O O O O O O $RegExp$ O O O O O O $any$ O $any$ O O O O $true$ O O O O O O O O $RegExp$ O $boolean$ O $any$ O $any$ O O O O O $true$ O O O $true$ O O O O O O O $complex$ O O $any$ O O O O $string$ O O O O O O O O O $any$ O $any$ O O O O $true$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O $true$ O O O $true$ O O O O O O O $any$ O O $any$ O O O O O O O O $DateConstructor$ O $any$ O $any$ O O O $DateConstructor$ O O O O O O $boolean$ O O O $boolean$ O O O O O O O O O $FormBuilder$ O O O O $any$ O O O $any$ O $any$ O O $complex$ O O O O O $any$ O $any$ O O O O O $any$ O O O $complex$ O O O O O O O $complex$ O O O $any$ O O O O O O O $any$ O O O $complex$ O O O O O $any$ O $any$ O O O $complex$ O O O O O O O $complex$ O O O $complex$ O O O O O $any$ O $any$ O O O O O O $void$ O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { constructor ( ) { } ngOnInit ( ) { } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O O O O O O $void$ O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { ReactiveFormsModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , ReactiveFormsModule , FormsModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ = [ 0 , 0 , 0 , 0 ] ; ngOnInit ( ) { setTimeout ( _ => { this . _UNKNOWN_ = [ ... this . _UNKNOWN_ . reverse ( ) ] ; } , 0 ) } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $number[]$ O O O O O O O O O O O $void$ O O O $number$ O $any$ O O O O $number[]$ O O O O O $number[]$ O $number[]$ O O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; count = 0 ; _UNKNOWN_ = { 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 } ; _UNKNOWN_ = { 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 , 0 : 0 } ; _UNKNOWN_ ( value ) { return new Array ( value ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $number$ O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any[]$ O $any$ O O O O $ArrayConstructor$ O $any$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , ChangeDetectionStrategy } from 's' ; @ Component ( { selector : 's' , changeDetection : ChangeDetectionStrategy . OnPush , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = { direction : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , suggestion : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , logo : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , other : [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] , } ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $complex$ O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string
<s> import { AfterViewInit , Component , ElementRef , Input , OnInit , 0 , ViewEncapsulation } from 's' ; import * as marked from 's' ; import * as Prism from 's' ; import 's' ; import 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` } ) export class _UNKNOWN_ implements OnInit , AfterViewInit { _UNKNOWN_ = 's' ; _el : HTMLElement ; @ Input ( ) set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = marked ( value ) ; } constructor ( private _elementRef , private renderer ) { this . _el = this . _elementRef . nativeElement ; } ngAfterViewInit ( ) { const _UNKNOWN_ = this . _el . querySelectorAll ( 's' ) ; [ ] . forEach . call ( _UNKNOWN_ , code => { const className = code . className ; this . renderer . addClass ( code , className . replace ( 's' , 's' ) ) ; Prism . _UNKNOWN_ ( code ) ; } ) ; } ngOnInit ( ) { } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O $HTMLElement$ O $complex$ O O $any$ O O O $any$ O $any$ O O O O $string$ O $any$ O $any$ O O O O O O $ElementRef$ O O $Renderer2$ O O O O $HTMLElement$ O O O $any$ O $any$ O O $void$ O O O O $NodeListOf<Element>$ O O O $HTMLElement$ O O O O O O O O O $void$ O $any$ O $NodeListOf<Element>$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule ] , declarations : [ _UNKNOWN_ ] , exports : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O O $complex$ O O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { Directive , ElementRef , HostBinding , HostListener , Inject } from 's' ; import { DOCUMENT } from 's' ; @ Directive ( { selector : 's' } ) export class _UNKNOWN_ { @ HostBinding ( 's' ) _UNKNOWN_ = false ; @ HostListener ( 's' ) onClick ( ) { this . copy ( `template` ) . then ( ( ) => { this . _UNKNOWN_ = true ; setTimeout ( ( ) => { this . _UNKNOWN_ = false ; } , 0 ) ; } ) ; } copy ( value ) < string > { const promise = new Promise < string > ( ( resolve , reject ) : void => { let _UNKNOWN_ = null as _UNKNOWN_ ; try { _UNKNOWN_ = this . dom . createElement ( 's' ) ; _UNKNOWN_ . style . height = 's' ; _UNKNOWN_ . style . opacity = 's' ; _UNKNOWN_ . style . width = 's' ; this . dom . body . appendChild ( _UNKNOWN_ ) ; _UNKNOWN_ . value = value ; _UNKNOWN_ . select ( ) ; this . dom . execCommand ( 's' ) ; resolve ( value ) ; } finally { if ( _UNKNOWN_ && _UNKNOWN_ . parentNode ) { _UNKNOWN_ . parentNode . removeChild ( _UNKNOWN_ ) ; } } } ) ; return ( promise ) ; } constructor ( @ Inject ( DOCUMENT ) private dom , private _el ) { } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O O $any$ O O O $boolean$ O O O O $any$ O O O $void$ O O O O O $Promise<string>$ O O O O O O O O O O O O $boolean$ O O O $number$ O O O O O O O $boolean$ O O O O O O O O O O O O $Promise$ O $string$ O O O O O O $Promise<string>$ O O $PromiseConstructor$ O O O O O $void$ O $void$ O O O O O O $HTMLTextAreaElement$ O O O $complex$ O O O $HTMLTextAreaElement$ O O O $Document$ O O O O O O $HTMLTextAreaElement$ O $CSSStyleDeclaration$ O $string$ O O O $HTMLTextAreaElement$ O $CSSStyleDeclaration$ O $string$ O O O $HTMLTextAreaElement$ O $CSSStyleDeclaration$ O $string$ O O O O O $Document$ O $HTMLElement$ O $T$ O $HTMLTextAreaElement$ O O $HTMLTextAreaElement$ O $string$ O $string$ O $HTMLTextAreaElement$ O $void$ O O O O O $Document$ O $boolean$ O O O O $void$ O $string$ O O O O O O O $HTMLTextAreaElement$ O $HTMLTextAreaElement$ O $complex$ O O $HTMLTextAreaElement$ O $complex$ O $T$ O $HTMLTextAreaElement$ O O O O O O O O O $Promise<string>$ O O O O O O $any$ O $any$ O O $Document$ O O $ElementRef$ O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 's' ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { inputValue : string ; _UNKNOWN_ ( value ) { console . log ( value ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; date = new Date ( ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O $string$ O O O $Date$ O O $DateConstructor$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _value = 's' ; _UNKNOWN_ ( event ) { console . log ( event ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O $void$ O $string$ O O $Console$ O $void$ O $string$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { inputValue : string ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $string$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ : string ; _UNKNOWN_ : string ; autosize = { minRows : 0 , maxRows : 0 } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O $string$ O O O $complex$ O O $number$ O O O $number$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { inputValue : string ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { test ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; isDisabled = false ; _UNKNOWN_ = ( ) => { this . isDisabled = ! this . isDisabled ; } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O $boolean$ O O O $void$ O O O O O O O $boolean$ O O O O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; _UNKNOWN_ = value => `template` ; _UNKNOWN_ = value => value . replace ( 's' , 's' ) ; _UNKNOWN_ = value => `template` ; _UNKNOWN_ = value => value . replace ( 's' , 's' ) ; _UNKNOWN_ = value => value ? parseInt ( value , 0 ) : 's' ; _UNKNOWN_ = value => parseInt ( value , 0 ) ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O $string$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $string$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $complex$ O $any$ O $any$ O $number$ O $any$ O O O O O O $number$ O $any$ O $number$ O $any$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { _UNKNOWN_ = true ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class 0 { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $boolean$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , encapsulation : ViewEncapsulation . None , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; 0 = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , CommonModule , FormsModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , 0 , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ ; get locale ( ) { return this . _UNKNOWN_ ; } set locale ( locale ) { this . _UNKNOWN_ = locale ; this . _UNKNOWN_ . setLocale ( locale ) ; } constructor ( private _UNKNOWN_ ) { } ngOnInit ( ) { this . locale = _UNKNOWN_ ; } } @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] , } ) export class _UNKNOWN_ { constructor ( private _UNKNOWN_ ) { } showModal ( ) { this . _UNKNOWN_ . open ( { title : 's' , content : 's' , } ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . info ( { title : 's' , content : 's' , } ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . confirm ( { title : 's' , content : 's' , } ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $void$ O $any$ O O O O O O $any$ O O O $void$ O O O O O $any$ O $any$ O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O $any$ O O O O $any$ O O O $void$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O O O $void$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O O O $void$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule , RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } , ] ) , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; _UNKNOWN_ ( ) { this . _UNKNOWN_ = ! this . _UNKNOWN_ ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $void$ O O O O O $boolean$ O O O O $boolean$ O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { mode = false ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = true ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ ( value ) { if ( value === 's' ) { this . _UNKNOWN_ = false ; this . _UNKNOWN_ = false ; } else if ( value === 's' ) { this . _UNKNOWN_ = false ; this . _UNKNOWN_ = false ; } else if ( value === 's' ) { this . _UNKNOWN_ = false ; this . _UNKNOWN_ = false ; } } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $boolean$ O O O $void$ O $any$ O O O O $any$ O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O $any$ O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O $any$ O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { theme = true ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , encapsulation : ViewEncapsulation . None , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , _UNKNOWN_ , CommonModule , FormsModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { constructor ( private _message ) { } _UNKNOWN_ ( ) { this . _message . info ( 's' ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O O $any$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = ( ) => { this . _message . success ( 's' , { _UNKNOWN_ : 0 } ) ; } ; constructor ( private _message ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O O O O $number$ O O O O O O O O O O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = ( type , text ) => { this . _message . create ( type , `template` ) ; } ; constructor ( private _message ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { constructor ( private _message ) { } _UNKNOWN_ ( ) { const id = this . _message . loading ( 's' , { _UNKNOWN_ : 0 } ) . messageId ; setTimeout ( _ => { this . _message . remove ( id ) ; } , 0 ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O O $any$ O O O $void$ O O O O $string$ O O O $any$ O $any$ O O O O $number$ O O O O O $string$ O $number$ O $any$ O O O O $any$ O $void$ O $string$ O O O O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = ( ) => { this . _UNKNOWN_ . confirm ( { title : 's' , content : 's' , _UNKNOWN_ : true , _UNKNOWN_ ( ) { return new Promise ( ( resolve ) => { setTimeout ( resolve , 0 ) ; } ) ; } , _UNKNOWN_ ( ) { } } ) ; } ; constructor ( private _UNKNOWN_ ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $true$ O O O $Promise<unknown>$ O O O O O $PromiseConstructor$ O O $void$ O O O $number$ O $void$ O O O O O O O O O $void$ O O O O O O O O O O O O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = ( ) => { this . _UNKNOWN_ . confirm ( { title : 's' , content : 's' , _UNKNOWN_ ( ) { console . log ( 's' ) ; } , _UNKNOWN_ ( ) { } } ) ; } ; constructor ( private _UNKNOWN_ ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $void$ O O O $Console$ O $void$ O O O O O O $void$ O O O O O O O O O O O O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { success = ( ) => { const modal = this . _UNKNOWN_ . success ( { title : 's' , content : 's' } ) ; setTimeout ( ( ) => modal . destroy ( ) , 0 ) ; } ; constructor ( private _UNKNOWN_ ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O O O O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O $number$ O O O O $any$ O $void$ O O O O O O O O O O O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { info ( _UNKNOWN_ ) { this . _UNKNOWN_ . info ( { title : 's' , content : _UNKNOWN_ } ) ; } success ( ) { this . _UNKNOWN_ . success ( { title : 's' , content : 's' } ) ; } error ( ) { this . _UNKNOWN_ . error ( { title : 's' , content : 's' } ) ; } warning ( ) { this . _UNKNOWN_ . warning ( { title : 's' , content : 's' } ) ; } constructor ( private _UNKNOWN_ ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O $any$ O O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O O $void$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O O $void$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O O $void$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O O O O O $any$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { isVisible = false ; _UNKNOWN_ = false ; showModal = ( ) => { this . isVisible = true ; } ; _UNKNOWN_ = ( e ) => { this . _UNKNOWN_ = true ; setTimeout ( ( ) => { this . isVisible = false ; this . _UNKNOWN_ = false ; } , 0 ) ; } ; _UNKNOWN_ = ( e ) => { this . isVisible = false ; } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $void$ O O O O O O O $boolean$ O O O O O $void$ O O $any$ O O O O O $boolean$ O O O $number$ O O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O O O O $void$ O O $any$ O O O O O $boolean$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { isVisible = false ; showModal = ( ) => { this . isVisible = true ; } _UNKNOWN_ = ( e ) => { console . log ( 's' ) ; this . isVisible = false ; } _UNKNOWN_ = ( e ) => { console . log ( e ) ; this . isVisible = false ; } constructor ( ) { } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $void$ O O O O O O O $boolean$ O O O O $void$ O O $any$ O O O $Console$ O $void$ O O O O O O $boolean$ O O O O $void$ O O $any$ O O O $Console$ O $void$ O $any$ O O O O $boolean$ O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { isVisible = false ; _UNKNOWN_ = false ; showModal = ( ) => { this . isVisible = true ; } _UNKNOWN_ = ( e ) => { this . _UNKNOWN_ = true ; setTimeout ( ( ) => { this . isVisible = false ; this . _UNKNOWN_ = false ; } , 0 ) ; } _UNKNOWN_ = ( e ) => { this . isVisible = false ; } constructor ( ) { } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $void$ O O O O O O O $boolean$ O O O O $void$ O O $any$ O O O O O $boolean$ O O O $number$ O O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O O O $void$ O O $any$ O O O O O $boolean$ O O O O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { isVisible = false ; showModal = ( ) => { this . isVisible = true ; } _UNKNOWN_ = ( e ) => { this . isVisible = false ; } _UNKNOWN_ = ( e ) => { console . log ( e ) ; this . isVisible = false ; } _UNKNOWN_ = ( ) => { this . _UNKNOWN_ . confirm ( { title : 's' , content : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } ) ; } constructor ( private _UNKNOWN_ ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $void$ O O O O O O O $boolean$ O O O O $void$ O O $any$ O O O O O $boolean$ O O O O $void$ O O $any$ O O O $Console$ O $void$ O $any$ O O O O $boolean$ O O O O $void$ O O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O $any$ O O O O O
<s> import { Component , Input } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { _name : string ; @ Input ( ) set name ( value ) { this . _name = value ; } _UNKNOWN_ ( ) { this . subject . next ( 's' ) ; } _UNKNOWN_ ( ) { this . subject . destroy ( 's' ) ; } constructor ( private subject ) { this . subject . on ( 's' , ( ) => { console . log ( 's' ) ; } ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $string$ O O O O $any$ O O O $string$ O $string$ O O O O $string$ O $string$ O O $void$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $void$ O O O O O O O O $any$ O O O O $any$ O $void$ O O O O O O O $Console$ O $void$ O O O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { _UNKNOWN_ ; _UNKNOWN_ = false ; constructor ( private modalService ) { } showModal ( ) { const modal = this . modalService . open ( { title : 's' , content : 's' , _UNKNOWN_ : false , _UNKNOWN_ : true , _UNKNOWN_ ( ) { return new Promise ( ( resolve ) => { setTimeout ( resolve , 0 ) ; } ) ; } , _UNKNOWN_ ( ) { } } ) ; } _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) { this . _UNKNOWN_ = this . modalService . open ( { title : _UNKNOWN_ , content : _UNKNOWN_ , footer : _UNKNOWN_ , _UNKNOWN_ : false , _UNKNOWN_ ( ) { console . log ( 's' ) ; } } ) ; } _UNKNOWN_ ( ) { const subscription = this . modalService . open ( { title : 's' , content : _UNKNOWN_ , _UNKNOWN_ ( ) { } , _UNKNOWN_ ( ) { console . log ( 's' ) ; } , footer : false , _UNKNOWN_ : { name : 's' } } ) ; subscription . subscribe ( result => { console . log ( result ) ; } ) } _UNKNOWN_ ( e ) { this . _UNKNOWN_ = true ; setTimeout ( ( ) => { this . _UNKNOWN_ . destroy ( 's' ) ; this . _UNKNOWN_ = false ; this . _UNKNOWN_ = null ; } , 0 ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $boolean$ O O O O O O $any$ O O O $void$ O O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O O O $false$ O O O $true$ O O O $Promise<unknown>$ O O O O O $PromiseConstructor$ O O $void$ O O O $number$ O $void$ O O O O O O O O O $void$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $false$ O O O $void$ O O O $Console$ O $void$ O O O O O O O O O $void$ O O O O $any$ O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O $void$ O O O O O $void$ O O O $Console$ O $void$ O O O O O O $boolean$ O O O $complex$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O $Console$ O $void$ O $any$ O O O O O $void$ O $any$ O O O O $boolean$ O O O $number$ O O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O O $any$ O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; _UNKNOWN_ = false ; style : any = { top : 's' } ; _UNKNOWN_ = ( ) => { this . _UNKNOWN_ = true ; } ; _UNKNOWN_ = ( ) => { this . _UNKNOWN_ = true ; } ; _UNKNOWN_ = ( e ) => { console . log ( 's' ) ; this . _UNKNOWN_ = false ; } ; _UNKNOWN_ = ( e ) => { console . log ( e ) ; this . _UNKNOWN_ = false ; } ; _UNKNOWN_ = ( e ) => { console . log ( 's' ) ; this . _UNKNOWN_ = false ; } ; _UNKNOWN_ = ( e ) => { console . log ( e ) ; this . _UNKNOWN_ = false ; } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $any$ O O O O $string$ O O O O $void$ O O O O O O O $boolean$ O O O O O $void$ O O O O O O O $boolean$ O O O O O $void$ O O $any$ O O O $Console$ O $void$ O O O O O O $boolean$ O O O O O $void$ O O $any$ O O O $Console$ O $void$ O $any$ O O O O $boolean$ O O O O O $void$ O O $any$ O O O $Console$ O $void$ O O O O O O $boolean$ O O O O O $void$ O O $any$ O O O $Console$ O $void$ O $any$ O O O O $boolean$ O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , entryComponents : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { constructor ( private _UNKNOWN_ ) { } _UNKNOWN_ ( ) { this . _UNKNOWN_ . _UNKNOWN_ ( 's' , 's' ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O O $any$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = ( ) => { this . _UNKNOWN_ . _UNKNOWN_ ( 's' , 's' , { _UNKNOWN_ : 0 } ) ; } ; constructor ( private _UNKNOWN_ ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O O O O O O $number$ O O O O O O O O O O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = ( ) => { this . _UNKNOWN_ . html ( 's' ) ; } ; constructor ( private _UNKNOWN_ ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O O O O O O O O O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = ( type ) => { this . _UNKNOWN_ . create ( type , 's' , 's' ) ; } ; constructor ( private _UNKNOWN_ ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _current = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { constructor ( private message ) { } cancel = function ( ) { this . message . info ( 's' ) } ; confirm = ( ) => { this . message . info ( 's' ) } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O O $any$ O O O $void$ O O O O O O O $any$ O $any$ O O O O O $void$ O O O O O O O $any$ O $any$ O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; cancel = function ( ) { this . message . info ( 's' ) ; } confirm = ( ) => { this . message . info ( 's' ) ; } constructor ( private message ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $boolean$ O O O $void$ O O O O O O O $any$ O $any$ O O O O O $void$ O O O O O O O $any$ O $any$ O O O O O O O O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { constructor ( private message ) { } cancel = function ( ) { this . message . info ( 's' ) ; } ; confirm = ( ) => { this . message . info ( 's' ) } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O O $any$ O O O $void$ O O O O O O O $any$ O $any$ O O O O O O $void$ O O O O O O O $any$ O $any$ O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { constructor ( private message ) { } cancel = function ( ) { this . message . info ( 's' ) } ; confirm = ( ) => { this . message . info ( 's' ) } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O O $any$ O O O $void$ O O O O O O O $any$ O $any$ O O O O O $void$ O O O O O O O $any$ O $any$ O O O O O O O
<s> import { Component , ViewEncapsulation , ChangeDetectionStrategy } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , changeDetection : ChangeDetectionStrategy . OnPush , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ implements OnInit { content : any ; visible : boolean ; constructor ( ) { } ngOnInit ( ) { } _UNKNOWN_ ( ) { this . visible = false ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $boolean$ O O O O O O O O $void$ O O O O $void$ O O O O O $boolean$ O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { title : string ; content = 's' ; constructor ( ) { } ngOnInit ( ) { } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O O O O O O $void$ O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation , ChangeDetectionStrategy } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , changeDetection : ChangeDetectionStrategy . OnPush , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { value : number ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ + 0 ; if ( this . _UNKNOWN_ > 0 ) { this . _UNKNOWN_ = 0 ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ - 0 ; if ( this . _UNKNOWN_ < 0 ) { this . _UNKNOWN_ = 0 ; } } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O $void$ O O O O O $number$ O O O $number$ O O O O O O O $number$ O O O O O O $number$ O O O O O $void$ O O O O O $number$ O O O $number$ O O O O O O O $number$ O O O O O O $number$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = percent => `template` ; _UNKNOWN_ = percent => `template` ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O $any$ O O O $string$ O $any$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 0 ; _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ + 0 ; if ( this . _UNKNOWN_ > 0 ) { this . _UNKNOWN_ = 0 ; } } _UNKNOWN_ ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ - 0 ; if ( this . _UNKNOWN_ < 0 ) { this . _UNKNOWN_ = 0 ; } } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O $void$ O O O O O $number$ O O O $number$ O O O O O O O $number$ O O O O O O $number$ O O O O O $void$ O O O O O $number$ O O O $number$ O O O O O O O $number$ O O O O O O $number$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ FormsModule , _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 's' ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 's' ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 's' ; _UNKNOWN_ = false ; isDisabled = true ; _UNKNOWN_ = ( ) => { this . isDisabled = ! this . isDisabled ; } ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O $boolean$ O O O $boolean$ O O O $void$ O O O O O O O $boolean$ O O O O $boolean$ O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 's' ; _UNKNOWN_ = true ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O $boolean$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { value = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { options = [ ] ; selectedOption ; ngOnInit ( ) { setTimeout ( _ => { this . options = [ { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' , disabled : true } ] ; this . selectedOption = this . options [ 0 ] ; } , 0 ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any[]$ O O O O $any$ O $void$ O O O $number$ O $any$ O O O O $any[]$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O $any$ O O O $any[]$ O O O O O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ , Response } from 's' ; import { Observable } from 's' ; import 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { searchOptions ; _UNKNOWN_ = [ ] ; constructor ( private _UNKNOWN_ ) { } _UNKNOWN_ ( searchText ) { const query = encodeURI ( searchText ) ; ( this . _UNKNOWN_ . get ( `template` ) . map ( res => res . json ( ) ) as Observable < Response > ) . subscribe ( ( data ) => { this . searchOptions = data . result ; } ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any[]$ O O O O O O O $any$ O O O $void$ O $any$ O O O $string$ O $string$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { searchOptions ; _UNKNOWN_ ; ngOnInit ( ) { this . _UNKNOWN_ = [ 's' , 's' ] ; setTimeout ( _ => { this . searchOptions = [ { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } ] ; } , 0 ) ; setTimeout ( _ => { this . _UNKNOWN_ = [ 's' ] ; } , 0 ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O O O O $any$ O O O O O O O $number$ O $any$ O O O O $any$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O O O O $number$ O $any$ O O O O $any$ O O O O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { options = [ ] ; selectedOption ; loading = false ; index = 0 ; scrollToBottom ( ) { if ( ! this . loading ) { this . loading = true ; setTimeout ( ( ) => { this . _UNKNOWN_ ( ) ; this . loading = false ; } , 0 ) ; } } _UNKNOWN_ ( ) { for ( let i = 0 ; i < 0 ; i ++ ) { this . options . push ( { value : this . index , label : `template` } ) ; this . index ++ ; } } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; this . selectedOption = this . options [ 0 ] ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any[]$ O O O O $any$ O $boolean$ O O O $number$ O O O $void$ O O O O O O O O $boolean$ O O O O $boolean$ O O O $number$ O O O O O O O $void$ O O O O O $boolean$ O O O O O O O O O O $void$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $number$ O O O $number$ O $string$ O O O O O O O $number$ O O O O $void$ O O O O O $void$ O O O O O $any$ O O O $any[]$ O O O O O O O
<s> import { Component , OnInit } from 's' ; import { _UNKNOWN_ , Response } from 's' ; import { Observable } from 's' ; import 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { selectedOption ; searchOptions = [ ] ; constructor ( private _UNKNOWN_ ) { } _UNKNOWN_ ( searchText ) { const query = encodeURI ( searchText ) ; ( this . _UNKNOWN_ . get ( `template` ) . map ( res => res . json ( ) ) as Observable < Response > ) . subscribe ( ( data ) => { this . searchOptions = data . result ; } ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any[]$ O O O O O O O $any$ O O O $void$ O $any$ O O O $string$ O $string$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O $any$ O O O O O $any[]$ O $any$ O $any$ O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { selectedOption ; searchOptions ; ngOnInit ( ) { setTimeout ( _ => { this . searchOptions = [ { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } ] ; } , 0 ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O O $number$ O $any$ O O O O $any$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { size = 's' ; options = [ { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' , disabled : true } , ] ; single = 's' ; multiple = [ 's' ] ; tag = [ 's' ] ; constructor ( ) { } ngOnInit ( ) { } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O $string$ O O O $string[]$ O O O O O $string[]$ O O O O O O O O O O $void$ O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { searchOptions = [ { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } ] ; _UNKNOWN_ = [ this . searchOptions [ 0 ] ] ; ngOnInit ( ) { setTimeout ( _ => { this . _UNKNOWN_ = [ ] ; } , 0 ) } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $complex$ O O O O $complex$ O O O O O $void$ O O O $number$ O $any$ O O O O $complex$ O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { options = [ { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } , ] ; selectedOption = this . options [ 0 ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O $complex$ O O O $complex$ O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { disabled = false ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { _UNKNOWN_ ; _UNKNOWN_ ; onChange ( value ) { console . log ( `template` ) ; } _UNKNOWN_ ( value ) { console . log ( `template` ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $void$ O $any$ O O $Console$ O $void$ O O O O O $void$ O $any$ O O $Console$ O $void$ O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit { min = 0 ; max = 0 ; mid = parseFloat ( ( ( this . max - this . min ) / 0 ) . toFixed ( 0 ) ) ; _UNKNOWN_ = { 's' : true , 's' : true } ; _UNKNOWN_ = { 's' : true , 's' : true } ; _UNKNOWN_ ; set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } ngOnInit ( ) { this . _UNKNOWN_ = 0 ; } _UNKNOWN_ ( ) { const lower = this . _UNKNOWN_ >= this . mid ; this . _UNKNOWN_ [ 's' ] = ! lower ; this . _UNKNOWN_ [ 's' ] = lower ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $number$ O O O $number$ O O O $number$ O $number$ O O O O O $number$ O O O $number$ O O O O O $string$ O O O O O $complex$ O O O O O O O O O O O $complex$ O O O O O O O O O O O $any$ O O $number$ O $number$ O O O O $any$ O $number$ O O O $void$ O O O O O $number$ O O O O O O $any$ O O $void$ O O O O O $number$ O O O O $void$ O O O O $boolean$ O O O $any$ O O O $number$ O O O $complex$ O O O O O $boolean$ O O O $complex$ O O O O $boolean$ O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { 0 = 0 ; 0 = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $number$ O O O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { marks : any = { 0 : 's' , 0 : 's' , 0 : 's' , 0 : { style : { color : 's' , } , label : 's' , } } ; _UNKNOWN_ ( ) { this . marks = { 0 : 's' , 0 : 's' , } ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O $complex$ O O $string$ O O O O O $string$ O O O O O O $void$ O O O O O $any$ O O O O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { formatter ( value ) { return `template` ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $string$ O $any$ O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { style = { _UNKNOWN_ : 's' , height : 's' , marginLeft : 's' } ; marks = { 0 : 's' , 0 : 's' , 0 : 's' , 0 : { style : { color : 's' , } , label : 's' , } } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O O O O O O O O O O O O O O O O O O $complex$ O O $string$ O O O O O $string$ O O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule , Routes } from 's' ; import { _UNKNOWN_ } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ } ] ; @ NgModule ( { imports : [ RouterModule . forChild ( routes ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , FormsModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { current = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $number$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { current = 0 ; index = 's' ; pre ( ) { this . current -= 0 ; this . _UNKNOWN_ ( ) ; } next ( ) { this . current += 0 ; this . _UNKNOWN_ ( ) ; } done ( ) { this . _message . success ( 's' ) ; } _UNKNOWN_ ( ) { switch ( this . current ) { case 0 : { this . index = 's' ; break ; } case 0 : { this . index = 's' ; break ; } case 0 : { this . index = 's' ; break ; } default : { this . index = 's' ; } } } constructor ( private _message ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $number$ O O O $string$ O O O $void$ O O O O O $number$ O O O O O $void$ O O O O $void$ O O O O O $number$ O O O O O $void$ O O O O $void$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O O O $number$ O O O O O O O O $string$ O O O O O O O O O O O O $string$ O O O O O O O O O O O O $string$ O O O O O O O O O O O $string$ O O O O O O O O O $any$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { current = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { current = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { current = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { current = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $number$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { current = 0 ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $number$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ FormsModule , CommonModule , _UNKNOWN_ , _UNKNOWN_ , RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ _UNKNOWN_ , RouterModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; isDisabled = true ; _UNKNOWN_ = ( ) => { this . isDisabled = ! this . isDisabled ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $void$ O O O O O O O $boolean$ O O O O $boolean$ O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ FormsModule , _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Injectable } from 's' ; import { HttpClient , HttpParams } from 's' ; @ Injectable ( ) export class _UNKNOWN_ { _UNKNOWN_ = 's' ; getUsers ( pageIndex = 0 , pageSize = 0 , _UNKNOWN_ , sortOrder , _UNKNOWN_ ) { let params = new HttpParams ( ) . append ( 's' , `template` ) . append ( 's' , `template` ) . append ( 's' , _UNKNOWN_ ) . append ( 's' , sortOrder ) ; _UNKNOWN_ . forEach ( gender => { params = params . append ( 's' , gender ) ; } ) ; return this . http . get ( `template` , { params : params } ) } constructor ( private http ) { } } import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , providers : [ _UNKNOWN_ ] , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { _current = 0 ; _pageSize = 0 ; _total = 0 ; _UNKNOWN_ = [ ] ; _UNKNOWN_ = true ; _UNKNOWN_ = null ; _UNKNOWN_ = [ { name : 's' , value : false } , { name : 's' , value : false } ] ; sort ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( ) ; } reset ( ) { this . _UNKNOWN_ . forEach ( item => { item . value = false ; } ) ; this . _UNKNOWN_ ( true ) ; } constructor ( private _UNKNOWN_ ) { } _UNKNOWN_ ( reset = false ) { if ( reset ) { this . _current = 0 ; } this . _UNKNOWN_ = true ; const _UNKNOWN_ = this . _UNKNOWN_ . filter ( item => item . value ) . map ( item => item . name ) ; this . _UNKNOWN_ . getUsers ( this . _current , this . _pageSize , 's' , this . _UNKNOWN_ , _UNKNOWN_ ) . subscribe ( ( data ) => { this . _UNKNOWN_ = false ; this . _total = 0 ; this . _UNKNOWN_ = data . results ; } ) } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $string$ O O O $any$ O $number$ O O O $number$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $HttpClient$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $complex$ O O $any$ O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $number$ O O O $number$ O O O $number$ O O O $any[]$ O O O O $boolean$ O O O $any$ O O O $complex$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $boolean$ O O O O O $void$ O $any$ O O O O $any$ O $any$ O O O $void$ O O O O $void$ O O O O O $complex$ O $void$ O $complex$ O O $complex$ O $boolean$ O O O O O O O O $void$ O O O O O O O O $any$ O O O $void$ O $boolean$ O O O O O O $boolean$ O O O O $number$ O O O O O O $boolean$ O O O O $string[]$ O O O $complex$ O $complex$ O $complex$ O $complex$ O $boolean$ O O $U[]$ O $complex$ O $complex$ O $string$ O O O O $any$ O $any$ O O O $number$ O O O $number$ O O O O O $any$ O $string[]$ O O $any$ O O $any$ O O O O O $boolean$ O O O O O $number$ O O O O O $any[]$ O $any$ O $any$ O O O O $void$ O O O O O $void$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { data = [ { key : 's' , name : 's' , age : 0 , address : 's' , } , { key : 's' , name : 's' , age : 0 , address : 's' , } , { key : 's' , name : 's' , age : 0 , address : 's' , } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { data = [ { key : 's' , name : 's' , age : 0 , _UNKNOWN_ : 's' , phone : 0 , address : 's' , } , { key : 's' , name : 's' , _UNKNOWN_ : 's' , phone : 0 , age : 0 , address : 's' , } , { key : 's' , name : 's' , age : 0 , _UNKNOWN_ : 's' , phone : 0 , address : 's' , } , { key : 's' , name : 's' , age : 0 , _UNKNOWN_ : 's' , phone : 0 , address : 's' , } , { key : 's' , name : 's' , age : 0 , _UNKNOWN_ : 's' , phone : 0 , address : 's' , } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $number$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { _UNKNOWN_ = 's' ; _UNKNOWN_ = [ { name : 's' , value : false } , { name : 's' , value : false } ] ; _UNKNOWN_ = { name : null , age : null , address : null } ; _UNKNOWN_ = null ; _UNKNOWN_ = null ; data = [ { name : 's' , age : 0 , address : 's' , } , { name : 's' , age : 0 , address : 's' , } , { name : 's' , age : 0 , address : 's' , } , { name : 's' , age : 0 , address : 's' , } ] ; _UNKNOWN_ = [ ... this . data ] ; sort ( _UNKNOWN_ , value ) { this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = value ; Object . keys ( this . _UNKNOWN_ ) . forEach ( key => { if ( key !== _UNKNOWN_ ) { this . _UNKNOWN_ [ key ] = null ; } else { this . _UNKNOWN_ [ key ] = value ; } } ) ; this . search ( ) ; } search ( ) { const _UNKNOWN_ = this . _UNKNOWN_ . filter ( address => address . value ) ; const _UNKNOWN_ = ( item ) => { return ( _UNKNOWN_ . length ? _UNKNOWN_ . some ( address => item . address . indexOf ( address . name ) !== - 0 ) : true ) && ( item . name . indexOf ( this . _UNKNOWN_ ) !== - 0 ) } ; this . data = [ ... this . _UNKNOWN_ . filter ( item => _UNKNOWN_ ( item ) ) ] ; this . data = [ ... this . data . sort ( ( a , b ) => { if ( a [ this . _UNKNOWN_ ] > b [ this . _UNKNOWN_ ] ) { return ( this . _UNKNOWN_ === 's' ) ? 0 : - 0 ; } else if ( a [ this . _UNKNOWN_ ] < b [ this . _UNKNOWN_ ] ) { return ( this . _UNKNOWN_ === 's' ) ? - 0 : 0 ; } else { return 0 ; } } ) ] ; } reset ( array ) { array . forEach ( item => { item . value = false ; } ) ; this . search ( ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $string$ O O O $complex$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $boolean$ O O O O O $complex$ O O $null$ O O O $null$ O O O $null$ O O O O $any$ O O O $any$ O O O $complex$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $number$ O O O $string$ O O O O O O $complex$ O O O O O $complex$ O O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $ObjectConstructor$ O $complex$ O O O $complex$ O O $void$ O $string$ O O O O $string$ O $any$ O O O O $complex$ O $string$ O O O O O O O O O $complex$ O $string$ O O $any$ O O O O O O O $void$ O O O O $void$ O O O O $complex$ O O O $complex$ O $complex$ O $complex$ O $complex$ O $boolean$ O O O $boolean$ O O $any$ O O O O O $complex$ O $number$ O $complex$ O $boolean$ O $complex$ O $any$ O $any$ O $any$ O $complex$ O $string$ O O O O O O O O O O $any$ O $any$ O $any$ O O O $string$ O O O O O O O O O $complex$ O O O O O $complex$ O $complex$ O $complex$ O $boolean$ O $complex$ O O O O O O $complex$ O O O O O $complex$ O $complex$ O O $complex$ O $complex$ O O O O O $complex$ O O O $any$ O O $complex$ O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $complex$ O O O $any$ O O $complex$ O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O $void$ O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ = null ; _UNKNOWN_ = { } ; data = [ { key : 0 , name : 's' , age : 0 , address : 's' , } ] ; edit ( data ) { this . _UNKNOWN_ [ data . key ] = { ... data } ; this . _UNKNOWN_ = data . key ; } save ( data ) { Object . assign ( data , this . _UNKNOWN_ [ data . key ] ) ; this . _UNKNOWN_ = null ; } cancel ( data ) { this . _UNKNOWN_ [ data . key ] = { } ; this . _UNKNOWN_ = null ; } ngOnInit ( ) { this . data . forEach ( item => { this . _UNKNOWN_ [ item . key ] = { } ; } ) } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O O O ${}$ O O O O $complex$ O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $void$ O $any$ O O O O ${}$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O $void$ O $any$ O O $ObjectConstructor$ O O O $any$ O O O ${}$ O $any$ O $any$ O O O O O $any$ O O O O $void$ O $any$ O O O O ${}$ O $any$ O $any$ O O O O O O O $any$ O O O O $void$ O O O O O $complex$ O $void$ O $complex$ O O O O ${}$ O $complex$ O $number$ O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { data = [ { key : 0 , name : 's' , age : 0 , address : 's' , children : [ { key : 0 , name : 's' , age : 0 , address : 's' , } , { key : 0 , name : 's' , age : 0 , address : 's' , children : [ { key : 0 , name : 's' , age : 0 , address : 's' , } ] , } , { key : 0 , name : 's' , age : 0 , address : 's' , children : [ { key : 0 , name : 's' , age : 0 , address : 's' , children : [ { key : 0 , name : 's' , age : 0 , address : 's' , } , { key : 0 , name : 's' , age : 0 , address : 's' , } ] , } ] , } ] , } , { key : 0 , name : 's' , age : 0 , address : 's' , } ] ; _UNKNOWN_ = { } ; collapse ( array , data , $event ) { if ( $event === false ) { if ( data . children ) { data . children . forEach ( d => { const target = array . find ( a => a . key === d . key ) ; target . expand = false ; this . collapse ( array , target , false ) ; } ) ; } else { return ; } } } _UNKNOWN_ ( root ) { const stack = [ ] , array = [ ] , _UNKNOWN_ = { } ; stack . push ( { ... root , level : 0 , expand : false } ) ; while ( stack . length !== 0 ) { const node = stack . pop ( ) ; this . visitNode ( node , _UNKNOWN_ , array ) ; if ( node . children ) { for ( let i = node . children . length - 0 ; i >= 0 ; i -- ) { stack . push ( { ... node . children [ i ] , level : node . level + 0 , expand : false , parent : node } ) ; } } } return array ; } visitNode ( node , _UNKNOWN_ , array ) { if ( ! _UNKNOWN_ [ node . key ] ) { _UNKNOWN_ [ node . key ] = true ; array . push ( node ) ; } } ngOnInit ( ) { this . data . forEach ( item => { this . _UNKNOWN_ [ item . key ] = this . _UNKNOWN_ ( item ) ; } ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $complex$ O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O O O O O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O O O O O O O O O O O O O $number$ O O O $string$ O O O $number$ O O O $string$ O O O O O O ${}$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O O O O O O O O O O O O O O O $any[]$ O $any$ O O O $any[]$ O O O O $any[]$ O O O O ${}$ O O O O $any[]$ O $number$ O O O $any$ O $number$ O O O $boolean$ O O O O O O O $any[]$ O $number$ O O O O O $any$ O $any[]$ O $any$ O O O O O $void$ O $any$ O ${}$ O $any[]$ O O O O $any$ O $any$ O O O O O $number$ O $any$ O $any$ O $any$ O O O $number$ O O O $number$ O O O $any[]$ O $number$ O O O $any$ O $any$ O $number$ O O $any$ O $any$ O $any$ O O O $boolean$ O O O $any$ O $any$ O O O O O O O $any[]$ O O $void$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $void$ O O O O O $complex$ O $complex$ O $complex$ O O O O ${}$ O $complex$ O $number$ O O O O $any[]$ O $complex$ O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { data = [ { name : 's' , age : 0 , expand : false , address : 's' , description : 's' } , { name : 's' , age : 0 , expand : false , address : 's' , description : 's' } , { name : 's' , age : 0 , expand : false , address : 's' , description : 's' } , ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $number$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $number$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $string$ O O O $number$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { data = [ ] ; ngOnInit ( ) { for ( let i = 0 ; i < 0 ; i ++ ) { this . data . push ( { name : `template` , age : 0 , address : `template` , } ) ; } } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any[]$ O O O O $void$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $string$ O O O $number$ O O O $string$ O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { data = [ { key : 's' , name : 's' , age : 0 , address : 's' , } , { key : 's' , name : 's' , age : 0 , address : 's' , } , { key : 's' , name : 's' , age : 0 , address : 's' , } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ = [ ] ; ngOnInit ( ) { for ( let i = 0 ; i < 0 ; i ++ ) { this . _UNKNOWN_ . push ( { key : i , name : `template` , age : 0 , address : `template` , } ) ; } } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any[]$ O O O O $void$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $number$ O $number$ O $string$ O O O $number$ O O O $string$ O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { _UNKNOWN_ = [ { name : 's' , value : false } , { name : 's' , value : false } , ] ; _UNKNOWN_ = [ { name : 's' , value : false } , { name : 's' , value : false } ] ; _UNKNOWN_ = { name : null , age : null , address : null } ; _UNKNOWN_ = null ; _UNKNOWN_ = null ; data = [ { name : 's' , age : 0 , address : 's' , } , { name : 's' , age : 0 , address : 's' , } , { name : 's' , age : 0 , address : 's' , } , { name : 's' , age : 0 , address : 's' , } ] ; _UNKNOWN_ = [ ... this . data ] ; sort ( _UNKNOWN_ , value ) { this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = value ; Object . keys ( this . _UNKNOWN_ ) . forEach ( key => { if ( key !== _UNKNOWN_ ) { this . _UNKNOWN_ [ key ] = null ; } else { this . _UNKNOWN_ [ key ] = value ; } } ) ; this . search ( ) ; } search ( ) { const _UNKNOWN_ = this . _UNKNOWN_ . filter ( address => address . value ) ; const _UNKNOWN_ = this . _UNKNOWN_ . filter ( name => name . value ) ; const _UNKNOWN_ = ( item ) => { return ( _UNKNOWN_ . length ? _UNKNOWN_ . some ( address => item . address . indexOf ( address . name ) !== - 0 ) : true ) && ( _UNKNOWN_ . length ? _UNKNOWN_ . some ( name => item . name . indexOf ( name . name ) !== - 0 ) : true ) } ; this . data = [ ... this . _UNKNOWN_ . filter ( item => _UNKNOWN_ ( item ) ) ] ; this . data = [ ... this . data . sort ( ( a , b ) => { if ( a [ this . _UNKNOWN_ ] > b [ this . _UNKNOWN_ ] ) { return ( this . _UNKNOWN_ === 's' ) ? 0 : - 0 ; } else if ( a [ this . _UNKNOWN_ ] < b [ this . _UNKNOWN_ ] ) { return ( this . _UNKNOWN_ === 's' ) ? - 0 : 0 ; } else { return 0 ; } } ) ] ; } reset ( array ) { array . forEach ( item => { item . value = false ; } ) ; this . search ( ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $complex$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $boolean$ O O O O O O $complex$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $boolean$ O O O O O $complex$ O O $null$ O O O $null$ O O O $null$ O O O O $any$ O O O $any$ O O O $complex$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $number$ O O O $string$ O O O O O O $complex$ O O O O O $complex$ O O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $ObjectConstructor$ O $complex$ O O O $complex$ O O $void$ O $string$ O O O O $string$ O $any$ O O O O $complex$ O $string$ O O O O O O O O O $complex$ O $string$ O O $any$ O O O O O O O $void$ O O O O $void$ O O O O $complex$ O O O $complex$ O $complex$ O $complex$ O $complex$ O $boolean$ O O O $complex$ O O O $complex$ O $complex$ O $complex$ O $complex$ O $boolean$ O O O $boolean$ O O $any$ O O O O O $complex$ O $number$ O $complex$ O $boolean$ O $complex$ O $any$ O $any$ O $any$ O $complex$ O $string$ O O O O O O O O O O $complex$ O $number$ O $complex$ O $boolean$ O $complex$ O $any$ O $any$ O $any$ O $complex$ O $string$ O O O O O O O O O O O O $complex$ O O O O O $complex$ O $complex$ O $complex$ O $boolean$ O $complex$ O O O O O O $complex$ O O O O O $complex$ O $complex$ O O $complex$ O $complex$ O O O O O $complex$ O O O $any$ O O $complex$ O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O $complex$ O O O $any$ O O $complex$ O O O $any$ O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O $void$ O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ = false ; _UNKNOWN_ = true ; _UNKNOWN_ = 0 ; _UNKNOWN_ : Array < any > = [ ] ; _UNKNOWN_ = false ; _UNKNOWN_ = [ ] ; _indeterminate = false ; _UNKNOWN_ ( $event ) { this . _UNKNOWN_ = $event ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ . every ( value => value . checked === true ) ; const _UNKNOWN_ = this . _UNKNOWN_ . every ( value => ! value . checked ) ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _indeterminate = ( ! _UNKNOWN_ ) && ( ! _UNKNOWN_ ) ; this . _UNKNOWN_ = ! this . _UNKNOWN_ . some ( value => value . checked ) ; this . _UNKNOWN_ = this . _UNKNOWN_ . filter ( value => value . checked ) . length ; } _UNKNOWN_ ( value ) { if ( value ) { this . _UNKNOWN_ . forEach ( data => data . checked = true ) ; } else { this . _UNKNOWN_ . forEach ( data => data . checked = false ) ; } this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; setTimeout ( _ => { this . _UNKNOWN_ . forEach ( value => value . checked = false ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = false ; } , 0 ) ; } ngOnInit ( ) { for ( let i = 0 ; i < 0 ; i ++ ) { this . _UNKNOWN_ . push ( { key : i , name : `template` , age : 0 , address : `template` , } ) ; } } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $boolean$ O O O $boolean$ O O O $number$ O O O $any[]$ O $ArrayConstructor$ O O O O O O O $boolean$ O O O $any[]$ O O O O $boolean$ O O O $void$ O $any$ O O O O $any[]$ O $any$ O O $void$ O O O O $boolean$ O O O $any[]$ O $boolean$ O $any$ O $any$ O $any$ O O O O O $boolean$ O O O $any[]$ O $boolean$ O $any$ O O $any$ O $any$ O O O O $boolean$ O $boolean$ O O O $boolean$ O O O $boolean$ O O O O $boolean$ O O O O $boolean$ O O O O $any[]$ O $boolean$ O $any$ O $any$ O $any$ O O O O $number$ O O O $any[]$ O $complex$ O $any$ O $any$ O $any$ O O $number$ O O $void$ O $any$ O O O O $any$ O O O O $any[]$ O $void$ O $any$ O $any$ O $any$ O O O O O O O O O $any[]$ O $void$ O $any$ O $any$ O $any$ O O O O O O O $void$ O O O O $void$ O O O O O $boolean$ O O O $number$ O $any$ O O O O $any[]$ O $void$ O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O $boolean$ O O O O O O O O O $void$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $number$ O $number$ O $string$ O O O $number$ O O O $string$ O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; _indeterminate = false ; _UNKNOWN_ = [ ] ; data = [ { key : 's' , name : 's' , age : 0 , disabled : true , address : 's' , } , { key : 's' , name : 's' , age : 0 , address : 's' , } , { key : 's' , name : 's' , age : 0 , address : 's' , } ] ; _UNKNOWN_ ( $event ) { this . _UNKNOWN_ = $event ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ . every ( value => value . disabled || value . checked ) ; const _UNKNOWN_ = this . _UNKNOWN_ . every ( value => value . disabled || ! value . checked ) ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _indeterminate = ( ! _UNKNOWN_ ) && ( ! _UNKNOWN_ ) ; } _UNKNOWN_ ( value ) { if ( value ) { this . _UNKNOWN_ . forEach ( data => { if ( ! data . disabled ) { data . checked = true ; } } ) ; } else { this . _UNKNOWN_ . forEach ( data => data . checked = false ) ; } this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $any[]$ O O O O $complex$ O O O $string$ O O O $string$ O O O $number$ O O O $boolean$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $void$ O $any$ O O O O $any[]$ O $any$ O O O $void$ O O O O $void$ O O O O $boolean$ O O O $any[]$ O $boolean$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $boolean$ O O O $any[]$ O $boolean$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $boolean$ O $boolean$ O O O $boolean$ O O O $boolean$ O O O O $boolean$ O O O $void$ O $any$ O O O O $any$ O O O O $any[]$ O $void$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O O O $any[]$ O $void$ O $any$ O $any$ O $any$ O O O O O O O $void$ O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; _indeterminate = false ; _UNKNOWN_ = [ ] ; data = [ { key : 's' , name : 's' , age : 0 , address : 's' , } , { key : 's' , name : 's' , age : 0 , address : 's' , } , { key : 's' , name : 's' , age : 0 , address : 's' , } ] ; _UNKNOWN_ ( $event ) { this . _UNKNOWN_ = $event ; this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ . every ( value => value . checked === true ) ; const _UNKNOWN_ = this . _UNKNOWN_ . every ( value => ! value . checked ) ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _indeterminate = ( ! _UNKNOWN_ ) && ( ! _UNKNOWN_ ) ; } _UNKNOWN_ ( value ) { if ( value ) { this . _UNKNOWN_ . forEach ( data => { data . checked = true ; } ) ; } else { this . _UNKNOWN_ . forEach ( data => { data . checked = false ; } ) ; } this . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O $any[]$ O O O O $complex$ O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $string$ O O O $string$ O O O $number$ O O O $string$ O O O O O O $void$ O $any$ O O O O $any[]$ O $any$ O O O $void$ O O O O $void$ O O O O $boolean$ O O O $any[]$ O $boolean$ O $any$ O $any$ O $any$ O O O O O $boolean$ O O O $any[]$ O $boolean$ O $any$ O O $any$ O $any$ O O O O $boolean$ O $boolean$ O O O $boolean$ O O O $boolean$ O O O O $boolean$ O O O $void$ O $any$ O O O O $any$ O O O O $any[]$ O $void$ O $any$ O O $any$ O $any$ O O O O O O O O O O O $any[]$ O $void$ O $any$ O O $any$ O $any$ O O O O O O O O O $void$ O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ = [ ] ; _UNKNOWN_ = true ; _UNKNOWN_ = false ; _UNKNOWN_ = true ; _UNKNOWN_ = true ; _title = true ; _UNKNOWN_ = true ; _UNKNOWN_ = false ; _size = 's' ; ngOnInit ( ) { for ( let i = 0 ; i <= 0 ; i ++ ) { this . _UNKNOWN_ . push ( { key : i , name : 's' , age : `template` , address : `template` , description : `template` , } ) ; } } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any[]$ O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $string$ O O O $void$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $number$ O $number$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , FormsModule , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { tabs = [ { name : 's' , content : 's' } , { name : 's' , content : 's' } , { name : 's' , content : 's' } ] ; ngOnInit ( ) { setTimeout ( _ => { this . tabs [ 0 ] . content = 's' ; } , 0 ) ; } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $void$ O O O $number$ O $any$ O O O O $complex$ O O O O $string$ O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { tabs = [ { index : 0 } , { index : 0 } , { index : 0 } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { selectedIndex = 0 ; tabs = [ { name : 's' , disabled : false } , { name : 's' , disabled : true } , { name : 's' , disabled : false } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $number$ O O O $complex$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $boolean$ O O O O O $string$ O O O $boolean$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { tabs = [ { index : 0 } , { index : 0 } , { index : 0 } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { tabs = [ { active : true , name : 's' , icon : 's' } , { active : false , name : 's' , icon : 's' } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $boolean$ O O O $string$ O O O $string$ O O O O O $boolean$ O O O $string$ O O O $string$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { tabs = [ { index : 0 } , { index : 0 } , { index : 0 } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ implements OnInit { tabs = [ ] ; _UNKNOWN_ = 's' ; selectedIndex = 0 ; _UNKNOWN_ ( args ) { console . log ( args ) ; } ngOnInit ( ) { for ( let i = 0 ; i < 0 ; i ++ ) { this . tabs . push ( { name : `template` , content : `template` } ) ; } } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any[]$ O O O O $string$ O O O $number$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O $void$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $string$ O O O $string$ O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { tabs = [ { name : 's' } , { name : 's' } ] ; _UNKNOWN_ ( tab ) { this . tabs . splice ( this . tabs . indexOf ( tab ) , 0 ) ; } _UNKNOWN_ ( ) { this . tabs . push ( { name : 's' } ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O O O $string$ O O O O O $void$ O $any$ O O O O $complex$ O $complex$ O O O $complex$ O $number$ O $any$ O O O O O O $void$ O O O O O $complex$ O $number$ O O $string$ O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _position = 's' ; tabs = [ { index : 0 } , { index : 0 } , { index : 0 } ] ; options = [ { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } , { value : 's' , label : 's' } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $string$ O O O $complex$ O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , FormsModule , CommonModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { onClose ( event ) { console . log ( 's' ) ; } preventDefault ( event ) { event . preventDefault ( ) ; console . log ( 's' ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $void$ O $Event$ O O $Console$ O $void$ O O O O O $void$ O $Event$ O O $Event$ O $void$ O O O $Console$ O $void$ O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _checked = true ; _UNKNOWN_ ( checked ) { this . _checked = checked ; } } @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $boolean$ O O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewChild , ElementRef } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { public tags = [ 's' , 's' , 's' ] ; public _UNKNOWN_ = false ; public inputValue = 's' ; @ ViewChild ( 's' ) input : _UNKNOWN_ ; _UNKNOWN_ ( _UNKNOWN_ ) { this . tags = this . tags . filter ( tag => tag !== _UNKNOWN_ ) ; } _UNKNOWN_ ( tag ) { const _UNKNOWN_ = tag . length > 0 ; return _UNKNOWN_ ? `template` : tag ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; setTimeout ( ( ) => { this . input . nativeElement . focus ( ) ; } , 0 ) ; } _UNKNOWN_ ( ) { if ( this . inputValue ) { this . tags . push ( this . inputValue ) ; } this . inputValue = 's' ; this . _UNKNOWN_ = false ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O $string[]$ O O O O O O O O O O $boolean$ O O O O $string$ O O O O $any$ O O O $any$ O $any$ O $void$ O $any$ O O O O $string[]$ O O O $string[]$ O $complex$ O $string$ O $string$ O $any$ O O O $string$ O $string$ O O O $boolean$ O $string$ O $number$ O O O O $boolean$ O O O $string$ O O $void$ O O O O O $boolean$ O O O $number$ O O O O O O O $any$ O $HTMLElement$ O $void$ O O O O O O O O O $void$ O O O O O O O $string$ O O O O $string[]$ O $number$ O O O $string$ O O O O O $string$ O O O O O $boolean$ O O O O O O
<s> import { Component } from 's' ; const _UNKNOWN_ = [ 's' , 's' , 's' , 's' ] ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { public _UNKNOWN_ = _UNKNOWN_ ; public _UNKNOWN_ = [ ] ; _UNKNOWN_ ( checked , tag ) { if ( checked ) { this . _UNKNOWN_ . push ( tag ) ; } else { this . _UNKNOWN_ = this . _UNKNOWN_ . filter ( t => t !== tag ) ; } console . log ( 's' , this . _UNKNOWN_ ) ; } } </s>	O O O $any$ O O O O O $string[]$ O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O $string[]$ O $string[]$ O O $any[]$ O O O O $void$ O $boolean$ O $string$ O O O O $boolean$ O O O O $any[]$ O $number$ O $string$ O O O O O O O $any[]$ O O O $any[]$ O $complex$ O $any$ O $any$ O $string$ O O O $Console$ O $void$ O O O O O $any[]$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , FormsModule , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ FormsModule , CommonModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = null ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = null ; _UNKNOWN_ ( value ) { console . log ( value ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = null ; _UNKNOWN_ = ( start , end ) => { const result = [ ] ; for ( let i = start ; i < end ; i ++ ) { result . push ( i ) ; } return result ; } ; _UNKNOWN_ = ( ) => { const hours = this . _UNKNOWN_ ( 0 , 0 ) ; hours . splice ( 0 , 0 ) ; return hours ; } ; _UNKNOWN_ = ( h ) => { if ( h === 0 ) { return this . _UNKNOWN_ ( 0 , 0 ) ; } else if ( h === 0 ) { return this . _UNKNOWN_ ( 0 , 0 ) ; } return [ ] ; } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O O O $any[]$ O O $any$ O $any$ O O O O $any[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any[]$ O $number$ O $any$ O O O O $any[]$ O O O $any[]$ O O O O O O $any[]$ O O O $any[]$ O O O O O O $any[]$ O $complex$ O O O O O O O $any[]$ O O O $any[]$ O O $any$ O O O O O $any$ O O O O O O O $any[]$ O O O O O O O O O O $any$ O O O O O O O $any[]$ O O O O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = new Date ( ) ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $Date$ O O $DateConstructor$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = null ; _UNKNOWN_ = ( start , end ) => { const result = [ ] ; for ( let i = start ; i < end ; i ++ ) { result . push ( i ) ; } return result ; } ; _UNKNOWN_ = ( ) => { const hours = this . _UNKNOWN_ ( 0 , 0 ) ; hours . splice ( 0 , 0 ) ; return hours ; } ; _UNKNOWN_ = ( h ) => { if ( h === 0 ) { return this . _UNKNOWN_ ( 0 , 0 ) ; } else if ( h === 0 ) { return this . _UNKNOWN_ ( 0 , 0 ) ; } return [ ] ; } ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O O O $any[]$ O O $any$ O $any$ O O O O $any[]$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any[]$ O $number$ O $any$ O O O O $any[]$ O O O $any[]$ O O O O O O $any[]$ O O O $any[]$ O O O O O O $any[]$ O $complex$ O O O O O O O $any[]$ O O O $any[]$ O O $any$ O O O O O $any$ O O O O O O O $any[]$ O O O O O O O O O O $any$ O O O O O O O $any[]$ O O O O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = new Date ( ) ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $Date$ O O $DateConstructor$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { _date = new Date ( ) ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $Date$ O O $DateConstructor$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O O O
<s> import { Component , ViewEncapsulation , ChangeDetectionStrategy } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , changeDetection : ChangeDetectionStrategy . OnPush , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ implements OnInit { list : any [ ] = [ ] ; ngOnInit ( ) { this . getData ( ) ; } getData ( ) { const ret = [ ] ; for ( let i = 0 ; i < 0 ; i ++ ) { ret . push ( { key : i . toString ( ) , title : `template` , description : `template` , direction : Math . random ( ) * 0 > 0 ? 's' : 's' } ) ; } this . list = ret ; } reload ( direction ) { this . getData ( ) ; this . msg . success ( `template` ) ; } select ( ret ) { console . log ( 's' , ret ) ; } change ( ret ) { console . log ( 's' , ret ) ; } constructor ( public msg ) { } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any[]$ O O O O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O $any[]$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O $any[]$ O $number$ O O $string$ O $number$ O $string$ O O O $string$ O O O $string$ O O O $string$ O $Math$ O $number$ O O O O O O O O O O O O O O O O $any[]$ O $any[]$ O O $void$ O $string$ O O O O $void$ O O O O O $any$ O $any$ O O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O O $any$ O O O O O
<s> import { Component , OnInit } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ implements OnInit { list : any [ ] = [ ] ; ngOnInit ( ) { for ( let i = 0 ; i < 0 ; i ++ ) { this . list . push ( { key : i . toString ( ) , title : `template` , disabled : i % 0 < 0 , } ) ; } [ 0 , 0 ] . forEach ( idx => this . list [ idx ] . direction = 's' ) ; } select ( ret ) { console . log ( 's' , ret ) ; } change ( ret ) { console . log ( 's' , ret ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any[]$ O O O O O O O O $void$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $string$ O $number$ O $string$ O O O $string$ O O O $boolean$ O $number$ O O O O O O O O O O O O O O O $void$ O $number$ O O O $any[]$ O $number$ O O $any$ O O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O
<s> import { Component , OnInit } from 's' ; import { Observable } from 's' ; import { of } from 's' ; import { delay } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ implements OnInit { list : _UNKNOWN_ [ ] = [ ] ; ngOnInit ( ) { for ( let i = 0 ; i < 0 ; i ++ ) { this . list . push ( { key : i . toString ( ) , title : `template` , disabled : i % 0 < 0 , } ) ; } [ 0 , 0 ] . forEach ( idx => this . list [ idx ] . direction = 's' ) ; } _UNKNOWN_ ( arg ) < _UNKNOWN_ [ ] > { if ( arg . direction === 's' && arg . list . length > 0 ) arg . list . splice ( 0 , 0 ) ; return of ( arg . list ) . pipe ( delay ( 0 ) ) ; } select ( ret : { } ) { console . log ( 's' , ret ) ; } change ( ret : { } ) { console . log ( 's' , ret ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any$ O $number$ O O $string$ O $number$ O $string$ O O O $string$ O O O $boolean$ O $number$ O O O O O O O O O O O O O O O $void$ O $number$ O O O $any$ O $number$ O O O O O O O O $Observable$ O $any$ O O $any$ O O O O O O $any$ O $string$ O O O $any$ O $any$ O $number$ O O O $any$ O $any$ O $complex$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $void$ O ${}$ O O O O O $Console$ O $void$ O O O ${}$ O O O $void$ O ${}$ O O O O O $Console$ O $void$ O O O ${}$ O O O O O
<s> import { Component , OnInit } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ implements OnInit { list : any [ ] = [ ] ; ngOnInit ( ) { this . getData ( ) ; } getData ( ) { const ret = [ ] ; for ( let i = 0 ; i < 0 ; i ++ ) { ret . push ( { key : i . toString ( ) , title : `template` , description : `template` , direction : Math . random ( ) * 0 > 0 ? 's' : 's' , icon : `template` } ) ; } this . list = ret ; } select ( ret ) { console . log ( 's' , ret ) ; } change ( ret ) { console . log ( 's' , ret ) ; } constructor ( public msg ) { } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any[]$ O O O O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O $any[]$ O O O O O O O $number$ O O O $number$ O O O $number$ O O O $any[]$ O $number$ O O $string$ O $number$ O $string$ O O O $string$ O O O $string$ O O O $string$ O $Math$ O $number$ O O O O O O O O O O O $string$ O O O O O O O O $any[]$ O $any[]$ O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O O $any$ O O O O O
<s> import { Component , OnInit } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ implements OnInit { list : any [ ] = [ ] ; ngOnInit ( ) { for ( let i = 0 ; i < 0 ; i ++ ) { this . list . push ( { key : i . toString ( ) , title : `template` , description : `template` , direction : Math . random ( ) * 0 > 0 ? 's' : 's' } ) ; } } _UNKNOWN_ ( inputValue , option ) { return option . description . indexOf ( inputValue ) > - 0 ; } search ( ret ) { console . log ( 's' , ret ) ; } select ( ret ) { console . log ( 's' , ret ) ; } change ( ret ) { console . log ( 's' , ret ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any[]$ O O O O O O O O $void$ O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $string$ O $number$ O $string$ O O O $string$ O O O $string$ O O O $string$ O $Math$ O $number$ O O O O O O O O O O O O O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O $void$ O $any$ O O $Console$ O $void$ O O O $any$ O O O O O
<s> import { Component , ViewEncapsulation , ChangeDetectionStrategy } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { loading = false ; avatarUrl : string ; constructor ( private msg ) { } _UNKNOWN_ = ( file ) => { const _UNKNOWN_ = file . type === 's' ; if ( ! _UNKNOWN_ ) { this . msg . error ( 's' ) ; } const 0 = file . size / 0 / 0 < 0 ; if ( ! 0 ) { this . msg . error ( 's' ) ; } return _UNKNOWN_ && 0 ; } private 0 ( img , callback : ( img ) => void ) { const reader = new FileReader ( ) ; reader . addEventListener ( 's' , ( ) => callback ( reader . result ) ) ; reader . _UNKNOWN_ ( img ) ; } _UNKNOWN_ ( info : { file : _UNKNOWN_ } ) { if ( info . file . status === 's' ) { this . loading = true ; return ; } if ( info . file . status === 's' ) { this . 0 ( info . file . _UNKNOWN_ , ( img ) => { this . loading = false ; this . avatarUrl = img ; } ) ; } } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $boolean$ O O O $string$ O O O O O O $any$ O O O $boolean$ O O $File$ O O O O $boolean$ O $File$ O $string$ O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O $boolean$ O $File$ O $number$ O O O O O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O $boolean$ O $boolean$ O O O $void$ O $File$ O $void$ O O $any$ O O O O O O $FileReader$ O O $complex$ O O O $FileReader$ O $complex$ O O O O O O $void$ O $FileReader$ O $complex$ O O O $FileReader$ O $void$ O $File$ O O O $void$ O $complex$ O O $any$ O $any$ O O O O O $complex$ O $any$ O $any$ O O O O O O $boolean$ O O O O O O O O $complex$ O $any$ O O O O O O O O $void$ O $complex$ O $any$ O $File$ O O $any$ O O O O O $boolean$ O O O O O $string$ O $any$ O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { constructor ( private msg ) { } _UNKNOWN_ ( { file , fileList } ) { const status = file . status ; if ( status !== 's' ) { console . log ( file , fileList ) ; } if ( status === 's' ) { this . msg . success ( `template` ) ; } else if ( status === 's' ) { this . msg . error ( `template` ) ; } } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O O O O $any$ O O O $void$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $Console$ O $void$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { fileList = [ { uid : 0 , name : 's' , status : 's' , response : 's' , url : 's' , } , { uid : 0 , name : 's' , status : 's' , url : 's' , } , { uid : 0 , name : 's' , status : 's' , response : 's' , url : 's' , } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $complex$ O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { fileList = [ { uid : - 0 , name : 's' , status : 's' , url : 's' , } ] ; _UNKNOWN_ ( info ) { const fileList = info . fileList ; if ( info . file . response ) { info . file . url = info . file . response . url ; } this . fileList = fileList . filter ( item => { if ( item . response ) { return item . response . status === 's' ; } return true ; } ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $complex$ O O O $number$ O O O O $string$ O O O $string$ O O O $string$ O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $complex$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O
<s> import { filter } from 's' ; import { Component } from 's' ; import { HttpRequest , HttpClient , HttpResponse } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { _UNKNOWN_ = false ; fileList : _UNKNOWN_ [ ] = [ ] ; constructor ( private http , private msg ) { } _UNKNOWN_ = ( file ) : boolean => { this . fileList . push ( file ) ; return false ; } _UNKNOWN_ ( ) { const formData = new FormData ( ) ; this . fileList . forEach ( ( file ) => { formData . append ( 's' , file ) ; } ) ; this . _UNKNOWN_ = true ; const req = new HttpRequest ( 's' , 's' , formData , { } ) ; this . http . request ( req ) . pipe ( filter ( e => e instanceof HttpResponse ) ) . subscribe ( ( event ) => { this . _UNKNOWN_ = false ; this . msg . success ( 's' ) ; } , ( err ) => { this . _UNKNOWN_ = false ; this . msg . error ( 's' ) ; } ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $boolean$ O O O $any$ O $any$ O O O O O O O O O $HttpClient$ O O $any$ O O O $boolean$ O O $any$ O O O O O O O $any$ O $number$ O $any$ O O O O O O $void$ O O O O $FormData$ O O $complex$ O O O O O $any$ O $void$ O O $any$ O O O $FormData$ O $void$ O O O $any$ O O O O O O O $boolean$ O O O O $any$ O O $any$ O O O O O $FormData$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { fileList = [ { uid : - 0 , name : 's' , status : 's' , url : 's' , } ] ; _UNKNOWN_ = 's' ; _UNKNOWN_ = false ; constructor ( private msg ) { } _UNKNOWN_ = ( file ) => { this . _UNKNOWN_ = file . url || file . thumbUrl ; this . _UNKNOWN_ = true ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $complex$ O O O $number$ O O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $boolean$ O O O O O O $any$ O O O $void$ O O $any$ O O O O O $string$ O $any$ O $string$ O $any$ O $string$ O O O $boolean$ O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ `template` ] } ) export class _UNKNOWN_ { _UNKNOWN_ = [ { uid : - 0 , name : 's' , status : 's' , url : 's' , thumbUrl : 's' , } , { uid : - 0 , name : 's' , status : 's' , url : 's' , thumbUrl : 's' , } ] ; 0 = [ ... this . _UNKNOWN_ ] ; 0 = [ ... this . _UNKNOWN_ ] ; constructor ( private msg ) { } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $complex$ O O O $number$ O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $number$ O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $complex$ O O O O O $complex$ O O $complex$ O O O O O $complex$ O O O O O $any$ O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = require ( 's' ) ; _UNKNOWN_ = `template` ; _UNKNOWN_ = `template` ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $string$ O O O $string$ O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { CommonModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CommonModule , _UNKNOWN_ , _UNKNOWN_ , FormsModule ] , declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ = require ( 's' ) ; constructor ( ) { } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class 0 implements OnInit { _UNKNOWN_ = require ( 's' ) ; constructor ( ) { } ngOnInit ( ) { } } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { 0 } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : 0 } ] ) , _UNKNOWN_ , ] , exports : [ ] , declarations : [ 0 ] , providers : [ ] , } ) export class 0 { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O $any$ O O O $undefined[]$ O O O O O O O $any$ O O $undefined[]$ O O O O O O O O $any$ O O O
<s> import { Component , OnInit , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , templateUrl : 's' , styleUrls : [ 's' , ] } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ = require ( 's' ) ; constructor ( ) { } ngOnInit ( ) { } } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O $string[]$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O
<s> import { NgModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ RouterModule . forChild ( [ { path : 's' , component : _UNKNOWN_ } ] ) ] , exports : [ RouterModule ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ CommonModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , declarations : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare const __karma__ ; declare const require ; __karma__ . loaded = function ( ) { } ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ; __karma__ . start ( ) ; </s>	O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O
<s> import { browser , by , element } from 's' ; export class AppPage { navigateTo ( ) { return browser . get ( 's' ) ; } getParagraphText ( ) { return element ( by . css ( 's' ) ) . getText ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O
<s> import { AppPage } from 's' ; describe ( 's' , ( ) => { let page ; beforeEach ( ( ) => { page = new AppPage ( ) ; } ) ; it ( 's' , ( ) => { page . navigateTo ( ) ; expect ( page . getParagraphText ( ) ) . toEqual ( 's' ) ; } ) ; } ) ; </s>	O O O $any$ O O O O $any$ O O O O O O O O $AppPage$ O $any$ O O O O O $AppPage$ O O $any$ O O O O O O $any$ O O O O O O O $AppPage$ O $any$ O O O $any$ O $AppPage$ O $any$ O O O O $any$ O O O O O O O O O O O
<s> import { Component , Input } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , KEYS , _UNKNOWN_ , _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { mouse : { contextMenu : ( tree , node , $event ) => { $event . preventDefault ( ) ; alert ( `template` ) ; } , _UNKNOWN_ : ( tree , node , $event ) => { if ( node . hasChildren ) { _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) ; } } , click : ( tree , node , $event ) => { $event . shiftKey ? _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) : _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) ; } } , keys : { [ KEYS . ENTER ] : ( tree , node , $event ) => alert ( `template` ) } } ; @ Component ( { selector : 's' , styles : [ ] , template : `template` } ) export class _UNKNOWN_ { nodes = [ { name : 's' , children : [ { name : 's' } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' } , { name : 's' , children : [ { id : 0 , name : 's' } ] } ] } ] ; options : _UNKNOWN_ = { _UNKNOWN_ } ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $complex$ O O $void$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $void$ O O O O O O $void$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $complex$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $void$ O O O O O O O $any$ O O $string$ O O O $undefined[]$ O O O O $string$ O O O O O O $any$ O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O O O O O O O $any$ O $any$ O O $any$ O O O O
<s> import { async , ComponentFixture , TestBed } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let component ; let fixture < _UNKNOWN_ > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ _UNKNOWN_ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O $ComponentFixture$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O
<s> import { Component , Input } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , styles : [ ] , template : `template` } ) export class _UNKNOWN_ { options : _UNKNOWN_ = { } ; nodes = [ { name : 's' , children : [ { name : 's' } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' } , { name : 's' , children : [ { id : 0 , name : 's' } ] } ] } ] ; _UNKNOWN_ ( tree ) { this . nodes [ 0 ] . children . push ( { name : 's' } ) ; tree . _UNKNOWN_ . update ( ) ; } _UNKNOWN_ ( tree ) { tree . _UNKNOWN_ . _UNKNOWN_ ( 0 ) . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { console . log ( _UNKNOWN_ . _UNKNOWN_ ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $undefined[]$ O O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O O O O O O O $void$ O $any$ O O O O $complex$ O O O O $complex$ O $number$ O O $string$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O $any$ O O O O O
<s> import { async , ComponentFixture , TestBed } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let component ; let fixture < _UNKNOWN_ > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ _UNKNOWN_ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O $ComponentFixture$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes = [ { name : 's' , children : [ { name : 's' } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' , children : [ ] } , { name : 's' , children : [ { name : 's' } ] } ] } , { name : 's' } , { name : 's' , children : [ ] } , { name : 's' , children : null } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O O O O O $string$ O O O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $null$ O O O O O O O
<s> import { Component , Input , OnInit } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , KEYS , _UNKNOWN_ , _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { mouse : { contextMenu : ( tree , node , $event ) => { $event . preventDefault ( ) ; alert ( `template` ) ; } , _UNKNOWN_ : ( tree , node , $event ) => { if ( node . hasChildren ) { _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) ; } } , click : ( tree , node , $event ) => { $event . shiftKey ? _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) : _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) } } , keys : { [ KEYS . ENTER ] : ( tree , node , $event ) => alert ( `template` ) } } ; @ Component ( { selector : 's' , styles : [ `template` ] , template : `template` } ) export class _UNKNOWN_ implements OnInit { nodes : any [ ] ; 0 = [ { name : 's' } , { name : 's' } ] ; _UNKNOWN_ = new Array ( 0 ) . fill ( null ) . map ( ( item , n ) => ( { name : 's' + n , subTitle : 's' + n , hasChildren : n < 0 } ) ) ; _UNKNOWN_ : _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , getChildren : this . getChildren . bind ( this ) , _UNKNOWN_ , _UNKNOWN_ : 0 , _UNKNOWN_ : ( node ) => { return true ; } , _UNKNOWN_ : ( node ) => { return true ; } , _UNKNOWN_ : true , _UNKNOWN_ : true } ; constructor ( ) { } ngOnInit ( ) { setTimeout ( ( ) => { this . nodes = [ { expanded : true , name : 's' , subTitle : 's' , children : [ { name : 's' , subTitle : 's' , hasChildren : false } , { name : 's' , subTitle : 's' , hasChildren : false } ] } , { name : 's' , subTitle : 's' , children : [ { name : 's' , subTitle : 's' , uuid : 's' , hasChildren : false } , { name : 's' , subTitle : 's' , children : [ { uuid : 0 , name : 's' , subTitle : 's' , hasChildren : false } ] } ] } , { name : 's' , hasChildren : true } ] ; for ( let i = 0 ; i < 0 ; i ++ ) { this . nodes . push ( { name : `template` , subTitle : `template` , children : new Array ( 0 ) . fill ( null ) . map ( ( item , n ) => ( { name : `template` , subTitle : `template` } ) ) } ) ; } } , 0 ) ; } getChildren ( node ) { return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => resolve ( this . _UNKNOWN_ . map ( ( c ) => { return Object . assign ( { } , c , { hasChildren : node . level < 0 } ) ; } ) ) , 0 ) ; } ) ; } _UNKNOWN_ ( tree ) { this . nodes [ 0 ] . children . push ( { name : 's' } ) ; tree . _UNKNOWN_ . update ( ) ; } _UNKNOWN_ ( node ) { return node && node . children ? `template` : 's' ; } _UNKNOWN_ ( text , tree ) { tree . _UNKNOWN_ . _UNKNOWN_ ( text ) ; } _UNKNOWN_ ( tree ) { tree . _UNKNOWN_ . _UNKNOWN_ ( 0 ) . _UNKNOWN_ ( ) ; } onEvent ( event ) { console . log ( event ) ; } _UNKNOWN_ ( tree ) { } go ( $event ) { $event . stopPropagation ( ) ; alert ( 's' ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { console . log ( _UNKNOWN_ . _UNKNOWN_ ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $complex$ O O $void$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $void$ O O O O O O $void$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $complex$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $void$ O O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O $any$ O $any$ O $any[]$ O O O O O $complex$ O O O $string$ O O O O O $string$ O O O O O $complex$ O O $ArrayConstructor$ O O O O $any[]$ O O O O $U[]$ O O $any$ O $number$ O O O O $string$ O O O $number$ O $string$ O O O $number$ O $boolean$ O $number$ O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $any$ O O O $Promise<unknown>$ O $any$ O O O O $any$ O $number$ O O O $boolean$ O O $any$ O O O O O O O O $boolean$ O O $any$ O O O O O O O O $boolean$ O O O $boolean$ O O O O O O O O O $void$ O O O $number$ O O O O O O O $any[]$ O O O $boolean$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O $string$ O O O $boolean$ O O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $string$ O O O $string$ O O O $complex$ O O $ArrayConstructor$ O O O O $any[]$ O O O O $U[]$ O O $any$ O $number$ O O O O $string$ O O O $string$ O O O O O O O O O O O O O O O $Promise<unknown>$ O $TreeNode$ O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $number$ O O O O $void$ O O O $complex$ O $U[]$ O O $complex$ O O O O $ObjectConstructor$ O O O O O O $complex$ O O $boolean$ O $any$ O $any$ O O O O O O O O O O O O O O O O $void$ O $any$ O O O O $any[]$ O O O O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O $any$ O O O O $string$ O $TreeNode$ O O O $any$ O $any$ O $any$ O O O O O O $void$ O $string$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O $void$ O $any$ O O O $void$ O $any$ O O $any$ O $any$ O O O $void$ O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ 's' , 's' ] } ) export class _UNKNOWN_ { 0 = [ { title : 's' , className : 's' } , { title : 's' , className : 's' , hasChildren : true } ] ; 0 = [ { title : 's' , className : 's' } , { title : 's' , className : 's' , children : [ { title : 's' , className : 's' } ] } ] ; 0 : _UNKNOWN_ = { getChildren : ( ) => new Promise ( ( resolve , reject ) => { } ) } ; 0 : _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : ( node ) => `template` } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O O $Promise<unknown>$ O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O $any$ O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes = [ { _id : 's' , title : 's' , className : 's' , nodes : [ { _id : 's' , title : 's' , className : 's' } ] } , { _id : 's' , title : 's' , className : 's' } ] ; options : _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : ( node ) => node . data . className } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes = [ { name : 's' , children : [ { name : 's' , children : [ { name : 's' } , { name : 's' } , { name : 's' } ] } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' , children : [ ] } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' } , { name : 's' } , { name : 's' } , { name : 's' } , { name : 's' } ] } ] ; _UNKNOWN_ ( value , _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( ( node ) => _UNKNOWN_ ( value , node . data . name ) ) ; } } function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) { const _UNKNOWN_ = _UNKNOWN_ . toLowerCase ( ) ; const _UNKNOWN_ = _UNKNOWN_ . toLowerCase ( ) ; const _UNKNOWN_ = _UNKNOWN_ . length ; const _UNKNOWN_ = _UNKNOWN_ . length ; if ( _UNKNOWN_ > _UNKNOWN_ ) { return false ; } if ( _UNKNOWN_ === _UNKNOWN_ ) { return _UNKNOWN_ === _UNKNOWN_ ; } outer : for ( let i = 0 , j = 0 ; i < _UNKNOWN_ ; i ++ ) { const _UNKNOWN_ = _UNKNOWN_ . charCodeAt ( i ) ; while ( j < _UNKNOWN_ ) { if ( _UNKNOWN_ . charCodeAt ( j ++ ) === _UNKNOWN_ ) { continue outer ; } } return false ; } return true ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O O O $void$ O $string$ O $any$ O O $any$ O $any$ O O $TreeNode$ O O $boolean$ O $string$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O $string$ O $string$ O O O $string$ O $string$ O $string$ O O O O $string$ O $string$ O $string$ O O O O $number$ O $string$ O $number$ O O $number$ O $string$ O $number$ O O O $number$ O $number$ O O O O O O O O $number$ O $number$ O O O $string$ O $string$ O O $any$ O O O O $number$ O O O $number$ O O O $number$ O $number$ O $number$ O O O O $number$ O $string$ O $number$ O $number$ O O O O $number$ O $number$ O O O O $string$ O $number$ O $number$ O O O $number$ O O O $any$ O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes : any [ ] = [ ] ; 0 : any [ ] | null = null ; _UNKNOWN_ ( ) { this . nodes = [ { name : 's' } ] ; this . 0 = [ { name : 's' } ] ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any[]$ O O O O O O O O $any[]$ O O O O O O O O O $void$ O O O O O $any[]$ O O O $string$ O O O O O O O $any[]$ O O O $string$ O O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , template : `template` , encapsulation : ViewEncapsulation . None , styles : [ ] } ) export class _UNKNOWN_ { options = { _UNKNOWN_ : true } ; nodes = [ { name : 's' , children : [ { name : 's' } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' , children : [ ] } , { name : 's' , children : [ { name : 's' } ] } ] } ] ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $undefined[]$ O O O O O O O $any$ O $complex$ O O $boolean$ O O O O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; let id = 0 ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { options : _UNKNOWN_ = { getChildren : this . getChildren . bind ( this ) } ; nodes : any [ ] = [ ] ; _UNKNOWN_ = [ { name : 's' , hasChildren : true } , { name : 's' } ] ; constructor ( ) { this . nodes = [ { name : 's' , children : [ { name : 's' } ] } , { name : 's' , hasChildren : true } , { name : 's' } ] ; } getChildren ( node ) { const newNodes = this . _UNKNOWN_ . map ( ( c ) => Object . assign ( { } , c ) ) ; return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => resolve ( newNodes ) , 0 ) ; } ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O $number$ O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $Promise<unknown>$ O $any$ O O O O O $any[]$ O O O O O O O O $complex$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O O O O O O O O O $any[]$ O O O $string$ O O O $complex$ O O O $string$ O O O O O O O $string$ O O O $boolean$ O O O O O $string$ O O O O O O $Promise<unknown>$ O $any$ O O O $complex$ O O O $complex$ O $U[]$ O O $complex$ O O $ObjectConstructor$ O O O O O O $complex$ O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $number$ O O O O $void$ O $complex$ O O O O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; const getChildren = ( ) => new Promise ( ( resolve ) => { setTimeout ( ( ) => resolve ( [ { id : 0 , name : 's' , children : [ ] } , { id : 0 , name : 's' , children : [ { id : 0 , name : 's' } ] } ] ) , 0 ) ; } ) ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { state : _UNKNOWN_ = localStorage . _UNKNOWN_ && JSON . parse ( localStorage . _UNKNOWN_ ) ; options = { getChildren } ; nodes = [ { id : 0 , name : 's' , children : [ { id : 0 , name : 's' } , { id : 0 , name : 's' } ] } , { id : 0 , name : 's' , hasChildren : true } ] ; setState ( state ) { localStorage . _UNKNOWN_ = JSON . stringify ( state ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $Promise<unknown>$ O O O O O $PromiseConstructor$ O O $void$ O O O $number$ O O O O $void$ O O O $number$ O O O $string$ O O O $undefined[]$ O O O O O O $number$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O $Storage$ O $any$ O $JSON$ O $any$ O $Storage$ O $any$ O O $complex$ O O $Promise<unknown>$ O O $complex$ O O O $number$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O O O $number$ O O O $string$ O O O O O O O $number$ O O O $string$ O O O $boolean$ O O O O O $void$ O $any$ O O $Storage$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes = [ { name : 's' } , { name : 's' , children : [ { name : 's' } , { name : 's' , children : [ { name : 's' } , { name : 's' } ] } ] } ] ; options : _UNKNOWN_ = { _UNKNOWN_ : true } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O O O $any$ O $any$ O O $boolean$ O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { 0 } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { state : _UNKNOWN_ = { _UNKNOWN_ : { 0 : true , 0 : true } , _UNKNOWN_ : { } , _UNKNOWN_ : { } } ; options : _UNKNOWN_ = { _UNKNOWN_ : ( node ) => node . _UNKNOWN_ , _UNKNOWN_ : ( node ) => ( { ... node . data , id : 0 ( ) , name : `template` } ) } ; nodes = [ { id : 0 , name : 's' , children : [ { name : 's' } , { name : 's' } ] } , { name : 's' , id : 0 , children : [ { name : 's' , children : [ ] } , { name : 's' , children : [ { name : 's' } ] } ] } , { name : 's' } , { name : 's' , children : [ ] } , { name : 's' , children : null } ] ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O ${}$ O O O O ${}$ O O O O O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O O O O $complex$ O O O $number$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O $number$ O O O $complex$ O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O O O O O $string$ O O O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $null$ O O O O O O O
<s> import { Component , Input } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , styles : [ ] , template : `template` } ) export class _UNKNOWN_ { nodes : any [ ] ; options : _UNKNOWN_ = { _UNKNOWN_ : 0 , _UNKNOWN_ : true } ; constructor ( ) { this . nodes = new Array ( 0 ) . fill ( null ) . map ( ( item , i ) => ( { id : `template` , name : `template` , children : new Array ( 0 ) . fill ( null ) . map ( ( item , n ) => ( { id : `template` , name : `template` } ) ) } ) ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $undefined[]$ O O O O $string$ O O O O O O $any$ O $any[]$ O O O O O $any$ O $any$ O O $number$ O O O $boolean$ O O O O O O O O O O $any[]$ O O $ArrayConstructor$ O O O O $any[]$ O O O O $U[]$ O O $any$ O $number$ O O O O $string$ O O O $string$ O O O $complex$ O O $ArrayConstructor$ O O O O $any[]$ O O O O $U[]$ O O $any$ O $number$ O O O O $string$ O O O $string$ O O O O O O O O O O O O
<s> import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } ] ; @ NgModule ( { imports : [ RouterModule . forRoot ( routes , { useHash : true } ) ] , exports : [ RouterModule ] } ) export class AppRoutingModule { } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $boolean$ O O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class AppComponent { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { BrowserModule } from 's' ; import { FormsModule } from 's' ; import { CommonModule } from 's' ; import { NgModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { AppRoutingModule } from 's' ; import { AppComponent } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { declarations : [ AppComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ BrowserModule , FormsModule , _UNKNOWN_ , CommonModule , AppRoutingModule ] , providers : [ ] , bootstrap : [ AppComponent ] } ) export class AppModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $undefined[]$ O O O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { async , ComponentFixture , TestBed } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let component ; let fixture < _UNKNOWN_ > ; beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ _UNKNOWN_ ] } ) . compileComponents ( ) ; } ) ) ; beforeEach ( ( ) => { fixture = TestBed . createComponent ( _UNKNOWN_ ) ; component = fixture . componentInstance ; fixture . detectChanges ( ) ; } ) ; it ( 's' , ( ) => { expect ( component ) . toBeTruthy ( ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O $ComponentFixture$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O
<s> export const environment = { production : true } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> export const environment = { production : false } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; enableProdMode ( ) ; platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) . catch ( err => console . log ( err ) ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $Console$ O $void$ O $any$ O O O O
<s> import 's' ; import 's' ; </s>	O O O O O O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare const __karma__ ; declare const require ; __karma__ . loaded = function ( ) { } ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ; __karma__ . start ( ) ; </s>	O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O
<s> import { browser , element , by } from 's' ; export class _UNKNOWN_ { navigateTo ( ) { return browser . get ( 's' ) ; } getParagraphText ( ) { return element ( by . css ( 's' ) ) . getText ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let page ; beforeEach ( ( ) => { page = new _UNKNOWN_ ( ) ; } ) ; it ( 's' , ( ) => { page . navigateTo ( ) ; expect ( page . getParagraphText ( ) ) . toEqual ( 's' ) ; } ) ; } ) ; </s>	O O O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class AppComponent { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { TestBed , async } from 's' ; import { AppComponent } from 's' ; describe ( 's' , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ AppComponent ] , } ) . compileComponents ( ) ; } ) ) ; it ( 's' , async ( ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; const app = fixture . debugElement . componentInstance ; expect ( app ) . toBeTruthy ( ) ; } ) ) ; it ( `template` , async ( ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; const app = fixture . debugElement . componentInstance ; expect ( app . title ) . toEqual ( 's' ) ; } ) ) ; it ( 's' , async ( ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; fixture . detectChanges ( ) ; const compiled = fixture . debugElement . nativeElement ; expect ( compiled . querySelector ( 's' ) . textContent ) . toContain ( 's' ) ; } ) ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes = [ { name : 's' , children : [ { name : 's' } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' , children : [ ] } , { name : 's' , children : [ { name : 's' } ] } ] } , { name : 's' } , { name : 's' , children : [ ] } , { name : 's' , children : null } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O O O O O $string$ O O O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $null$ O O O O O O O
<s> import { Component , Input } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , KEYS , _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { mouse : { contextMenu : ( tree , node , $event ) => { $event . preventDefault ( ) ; alert ( `template` ) ; } , _UNKNOWN_ : ( tree , node , $event ) => { if ( node . hasChildren ) _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) ; } , click : ( tree , node , $event ) => { $event . shiftKey ? _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) : _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) } } , keys : { [ KEYS . ENTER ] : ( tree , node , $event ) => alert ( `template` ) } } ; @ Component ( { selector : 's' , styles : [ `template` ] , template : `template` } ) export class _UNKNOWN_ { nodes : any [ ] ; 0 = [ { name : 's' } , { name : 's' } ] ; constructor ( ) { } ngOnInit ( ) { setTimeout ( ( ) => { this . nodes = [ { expanded : true , name : 's' , subTitle : 's' , children : [ { name : 's' , subTitle : 's' , hasChildren : false } , { name : 's' , subTitle : 's' , hasChildren : false } ] } , { name : 's' , subTitle : 's' , children : [ { name : 's' , subTitle : 's' , hasChildren : false } , { name : 's' , subTitle : 's' , children : [ { uuid : 0 , name : 's' , subTitle : 's' , hasChildren : false } ] } ] } , { name : 's' , hasChildren : true } ] ; for ( let i = 0 ; i < 0 ; i ++ ) { this . nodes . push ( { name : `template` , subTitle : `template` , children : new Array ( 0 ) . fill ( null ) . map ( ( item , n ) => ( { name : `template` , subTitle : `template` , hasChildren : false } ) ) } ) ; } } , 0 ) ; } _UNKNOWN_ = [ { name : 's' , subTitle : 's' } , { name : 's' , subTitle : 's' } ] ; getChildren ( node ) { return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => resolve ( this . _UNKNOWN_ . map ( ( c ) => { return Object . assign ( { } , c , { hasChildren : node . level < 0 } ) ; } ) ) , 0 ) ; } ) ; } _UNKNOWN_ ( tree ) { this . nodes [ 0 ] . children . push ( { name : 's' } ) ; tree . _UNKNOWN_ . update ( ) ; } _UNKNOWN_ ( node ) { return node && node . children ? `template` : 's' ; } _UNKNOWN_ ( text , tree ) { tree . _UNKNOWN_ . _UNKNOWN_ ( text ) ; } _UNKNOWN_ ( tree ) { tree . _UNKNOWN_ . _UNKNOWN_ ( 0 ) . _UNKNOWN_ ( ) ; } _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , getChildren : this . getChildren . bind ( this ) , _UNKNOWN_ , _UNKNOWN_ : 0 , _UNKNOWN_ : true , _UNKNOWN_ : true } onEvent ( event ) { console . log ( event ) ; } go ( $event ) { $event . stopPropagation ( ) ; alert ( 's' ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { console . log ( _UNKNOWN_ . _UNKNOWN_ ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $complex$ O O $void$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $void$ O O O O O O $void$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $complex$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $void$ O O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O $any$ O $any[]$ O O O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O O O O $void$ O O O $number$ O O O O O O O $any[]$ O O O $boolean$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O $string$ O O O $boolean$ O O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $string$ O O O $string$ O O O $complex$ O O $ArrayConstructor$ O O O O $any[]$ O O O O $U[]$ O O $any$ O $number$ O O O O $string$ O O O $string$ O O O $false$ O O O O O O O O O O O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $Promise<unknown>$ O $any$ O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $number$ O O O O $void$ O O O $complex$ O $U[]$ O O $complex$ O O O O $ObjectConstructor$ O O O O O O $complex$ O O $boolean$ O $any$ O $any$ O O O O O O O O O O O O O O O O $void$ O $any$ O O O O $any[]$ O O O O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O $any$ O O O O $string$ O $TreeNode$ O O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O $complex$ O O $string$ O O O $string$ O O O $any$ O O O $Promise<unknown>$ O $any$ O O O O $any$ O $number$ O O O $boolean$ O O O $boolean$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O $void$ O $any$ O O $any$ O $any$ O O O $void$ O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { 0 = [ { title : 's' , className : 's' } , { title : 's' , className : 's' , hasChildren : true } ] ; 0 = [ { title : 's' , className : 's' } , { title : 's' , className : 's' , children : [ { title : 's' , className : 's' } ] } ] ; 0 : _UNKNOWN_ = { getChildren : ( ) => new Promise ( ( resolve , reject ) => { } ) } ; 0 : _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : ( node ) => `template` } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O O $Promise<unknown>$ O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O $any$ O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes = [ { name : 's' , children : [ { name : 's' , children : [ { name : 's' } , { name : 's' } , { name : 's' } ] } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' , children : [ ] } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' } , { name : 's' } , { name : 's' } , { name : 's' } , { name : 's' } ] } ] ; _UNKNOWN_ ( value , _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( ( node ) => _UNKNOWN_ ( value , node . data . name ) ) ; } } function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) { const _UNKNOWN_ = _UNKNOWN_ . toLowerCase ( ) ; const _UNKNOWN_ = _UNKNOWN_ . toLowerCase ( ) ; const _UNKNOWN_ = _UNKNOWN_ . length ; const _UNKNOWN_ = _UNKNOWN_ . length ; if ( _UNKNOWN_ > _UNKNOWN_ ) { return false ; } if ( _UNKNOWN_ === _UNKNOWN_ ) { return _UNKNOWN_ === _UNKNOWN_ ; } outer : for ( let i = 0 , j = 0 ; i < _UNKNOWN_ ; i ++ ) { const _UNKNOWN_ = _UNKNOWN_ . charCodeAt ( i ) ; while ( j < _UNKNOWN_ ) { if ( _UNKNOWN_ . charCodeAt ( j ++ ) === _UNKNOWN_ ) { continue outer ; } } return false ; } return true ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $boolean$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O $number$ O O O $number$ O O O $number$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $number$ O O O O $number$ O $any$ O O O O $any$ O $any$ O $number$ O O O $any$ O O O $any$ O O O O O O O O O O O O
<s> import { BrowserModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { HttpModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { Router , Route , RouterModule } from 's' ; import { AppComponent } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const routes : Route [ ] = [ { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } ] ; @ NgModule ( { declarations : [ AppComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ BrowserModule , FormsModule , HttpModule , _UNKNOWN_ , RouterModule . forRoot ( routes , { useHash : true } ) ] , providers : [ ] , bootstrap : [ AppComponent ] } ) export class AppModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any[]$ O $any$ O O O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any[]$ O O $boolean$ O O O O O O $undefined[]$ O O O O $complex$ O O $any$ O O O O O $any$ O O O
<s> export const environment = { production : true } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> export const environment = { production : false } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; if ( environment . production ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $complex$ O $boolean$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O O
<s> import 's' ; import 's' ; import 's' ; </s>	O O O O O O O O O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare var __karma__ ; declare var require ; __karma__ . loaded = function ( ) { } ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ; __karma__ . start ( ) ; </s>	O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O
<s> import { browser , element , by } from 's' ; export class 0 { navigateTo ( ) { return browser . get ( 's' ) ; } getParagraphText ( ) { return element ( by . css ( 's' ) ) . getText ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O
<s> import { 0 } from 's' ; describe ( 's' , ( ) => { let page ; beforeEach ( ( ) => { page = new 0 ( ) ; } ) ; it ( 's' , ( ) => { page . navigateTo ( ) ; expect ( page . getParagraphText ( ) ) . toEqual ( 's' ) ; } ) ; } ) ; </s>	O O O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O $any$ O O O O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $any$ O O O O $any$ O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes = [ { name : 's' , children : [ { name : 's' } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' , children : [ ] } , { name : 's' , children : [ { name : 's' } ] } ] } , { name : 's' } , { name : 's' , children : [ ] } , { name : 's' , children : null } ] ; } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O O O O O $string$ O O O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $null$ O O O O O O O
<s> import { Component , Input } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , KEYS , _UNKNOWN_ , _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { mouse : { contextMenu : ( tree , node , $event ) => { $event . preventDefault ( ) ; alert ( `template` ) ; } , _UNKNOWN_ : ( tree , node , $event ) => { if ( node . hasChildren ) _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) ; } , click : ( tree , node , $event ) => { $event . shiftKey ? _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) : _UNKNOWN_ . _UNKNOWN_ ( tree , node , $event ) } } , keys : { [ KEYS . ENTER ] : ( tree , node , $event ) => alert ( `template` ) } } ; @ Component ( { selector : 's' , styles : [ `template` ] , template : `template` } ) export class _UNKNOWN_ { nodes : any [ ] ; 0 = [ { name : 's' } , { name : 's' } ] ; constructor ( ) { } ngOnInit ( ) { setTimeout ( ( ) => { this . nodes = [ { expanded : true , name : 's' , subTitle : 's' , children : [ { name : 's' , subTitle : 's' , hasChildren : false } , { name : 's' , subTitle : 's' , hasChildren : false } ] } , { name : 's' , subTitle : 's' , children : [ { name : 's' , subTitle : 's' , uuid : 's' , hasChildren : false } , { name : 's' , subTitle : 's' , children : [ { uuid : 0 , name : 's' , subTitle : 's' , hasChildren : false } ] } ] } , { name : 's' , hasChildren : true } ] ; for ( let i = 0 ; i < 0 ; i ++ ) { this . nodes . push ( { name : `template` , subTitle : `template` , children : new Array ( ( i + 0 ) * 0 ) . fill ( null ) . map ( ( item , n ) => ( { name : `template` , subTitle : `template` , hasChildren : false } ) ) } ) ; } } , 0 ) ; } _UNKNOWN_ = [ { name : 's' , subTitle : 's' } , { name : 's' , subTitle : 's' } ] ; getChildren ( node ) { return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => resolve ( this . _UNKNOWN_ . map ( ( c ) => { return Object . assign ( { } , c , { hasChildren : node . level < 0 } ) ; } ) ) , 0 ) ; } ) ; } _UNKNOWN_ ( tree ) { this . nodes [ 0 ] . children . push ( { name : 's' } ) ; tree . _UNKNOWN_ . update ( ) ; } _UNKNOWN_ ( node ) { return node && node . children ? `template` : 's' ; } _UNKNOWN_ ( text , tree ) { tree . _UNKNOWN_ . _UNKNOWN_ ( text ) ; } _UNKNOWN_ ( tree ) { tree . _UNKNOWN_ . _UNKNOWN_ ( 0 ) . _UNKNOWN_ ( ) ; } _UNKNOWN_ : _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , getChildren : this . getChildren . bind ( this ) , _UNKNOWN_ , _UNKNOWN_ : 0 , _UNKNOWN_ : ( node ) => { return true ; } , _UNKNOWN_ : ( node ) => { return true ; } , _UNKNOWN_ : true , _UNKNOWN_ : true , _UNKNOWN_ : 0 , _UNKNOWN_ : 0 } onEvent ( event ) { console . log ( event ) ; } _UNKNOWN_ ( tree ) { } go ( $event ) { $event . stopPropagation ( ) ; alert ( 's' ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { console . log ( _UNKNOWN_ . _UNKNOWN_ ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $complex$ O O $void$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $void$ O O O O O O $void$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $complex$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $void$ O O O O O O O $any$ O O $string$ O O O $string[]$ O O O O O $string$ O O O O O O $any$ O $any[]$ O O O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O O O O $void$ O O O $number$ O O O O O O O $any[]$ O O O $boolean$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O $string$ O O O $boolean$ O O O O O O O O O $string$ O O O $boolean$ O O O O O O O O $number$ O O O $number$ O O O $number$ O O O O O $any[]$ O $number$ O O $string$ O O O $string$ O O O $complex$ O O $ArrayConstructor$ O O $number$ O O O O O O O $any[]$ O O O O $U[]$ O O $any$ O $number$ O O O O $string$ O O O $string$ O O O $false$ O O O O O O O O O O O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $Promise<unknown>$ O $any$ O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $number$ O O O O $void$ O O O $complex$ O $U[]$ O O $complex$ O O O O $ObjectConstructor$ O O O O O O $complex$ O O $boolean$ O $any$ O $any$ O O O O O O O O O O O O O O O O $void$ O $any$ O O O O $any[]$ O O O O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O $any$ O O O O $string$ O $TreeNode$ O O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $any$ O O O $Promise<unknown>$ O $any$ O O O O $any$ O $number$ O O O $boolean$ O O $any$ O O O O O O O O $boolean$ O O $any$ O O O O O O O O $boolean$ O O O $boolean$ O O O $number$ O O O $number$ O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O O O $void$ O $any$ O O O $void$ O $any$ O O $any$ O $any$ O O O $void$ O O O O O $void$ O $any$ O O $Console$ O $void$ O $any$ O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ 's' , 's' ] } ) export class _UNKNOWN_ { 0 = [ { title : 's' , className : 's' } , { title : 's' , className : 's' , hasChildren : true } ] ; 0 = [ { title : 's' , className : 's' } , { title : 's' , className : 's' , children : [ { title : 's' , className : 's' } ] } ] ; 0 : _UNKNOWN_ = { getChildren : ( ) => new Promise ( ( resolve , reject ) => { } ) } ; 0 : _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : ( node ) => `template` } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $boolean$ O O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O O $Promise<unknown>$ O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O $any$ O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ 's' , 's' ] } ) export class _UNKNOWN_ { 0 = [ { title : 's' , className : 's' } , { title : 's' , className : 's' } ] ; 0 : _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : ( node ) => node . data . className } ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes = [ { name : 's' , children : [ { name : 's' , children : [ { name : 's' } , { name : 's' } , { name : 's' } ] } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' , children : [ ] } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' } , { name : 's' } , { name : 's' } , { name : 's' } , { name : 's' } ] } ] ; _UNKNOWN_ ( value , _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( ( node ) => _UNKNOWN_ ( value , node . data . name ) ) ; } } function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) { const _UNKNOWN_ = _UNKNOWN_ . toLowerCase ( ) ; const _UNKNOWN_ = _UNKNOWN_ . toLowerCase ( ) ; const _UNKNOWN_ = _UNKNOWN_ . length ; const _UNKNOWN_ = _UNKNOWN_ . length ; if ( _UNKNOWN_ > _UNKNOWN_ ) { return false ; } if ( _UNKNOWN_ === _UNKNOWN_ ) { return _UNKNOWN_ === _UNKNOWN_ ; } outer : for ( let i = 0 , j = 0 ; i < _UNKNOWN_ ; i ++ ) { const _UNKNOWN_ = _UNKNOWN_ . charCodeAt ( i ) ; while ( j < _UNKNOWN_ ) { if ( _UNKNOWN_ . charCodeAt ( j ++ ) === _UNKNOWN_ ) { continue outer ; } } return false ; } return true ; } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $boolean$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O $number$ O O O $number$ O O O $number$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O $number$ O O O O $number$ O $any$ O O O O $any$ O $any$ O $number$ O O O $any$ O O O $any$ O O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes = [ ] ; 0 = null ; _UNKNOWN_ ( ) { this . nodes = [ { name : 's' } ] ; this . 0 = [ { name : 's' } ] ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any[]$ O O O O $any$ O O O $void$ O O O O O $any[]$ O O O $string$ O O O O O O O $any$ O O O $string$ O O O O O O O O
<s> import { Component , ViewEncapsulation } from 's' ; @ Component ( { selector : 's' , template : `template` , encapsulation : ViewEncapsulation . None , styles : [ ] } ) export class _UNKNOWN_ { options = { _UNKNOWN_ : true } ; nodes = [ { name : 's' , children : [ { name : 's' } , { name : 's' } ] } , { name : 's' , children : [ { name : 's' , children : [ ] } , { name : 's' , children : [ { name : 's' } ] } ] } ] ; } </s>	O O O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $undefined[]$ O O O O O O O $any$ O $complex$ O O $boolean$ O O O O $complex$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; let id = 0 ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { options : _UNKNOWN_ = { getChildren : this . getChildren . bind ( this ) } ; nodes = [ ] ; _UNKNOWN_ = [ { name : 's' , hasChildren : true } , { name : 's' } ] ; constructor ( ) { this . nodes = [ { name : 's' , children : [ { name : 's' } ] } , { name : 's' , hasChildren : true } , { name : 's' } ] ; } _UNKNOWN_ ( ) { this . nodes [ 0 ] . children . push ( { id : ++ id , name : `template` } ) ; this . nodes = [ ... this . nodes ] ; } getChildren ( node ) { const newNodes = this . _UNKNOWN_ . map ( ( c ) => Object . assign ( { } , c ) ) ; return new Promise ( ( resolve , reject ) => { setTimeout ( ( ) => resolve ( newNodes ) , 0 ) ; } ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $number$ O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $Promise<unknown>$ O $any$ O O O O O $any[]$ O O O O $complex$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O O O O O O O O O $any[]$ O O O $string$ O O O $complex$ O O O $string$ O O O O O O O $string$ O O O $boolean$ O O O O O $string$ O O O O O O $void$ O O O O O $any[]$ O O O O $any$ O $any$ O O $number$ O O $number$ O $string$ O O O O O O O $any[]$ O O O O O $any[]$ O O O $Promise<unknown>$ O $any$ O O O $complex$ O O O $complex$ O $U[]$ O O $complex$ O O $ObjectConstructor$ O O O O O O $complex$ O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $number$ O O O O $void$ O $complex$ O O O O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { state = localStorage . _UNKNOWN_ && JSON . parse ( localStorage . _UNKNOWN_ ) ; nodes = [ { id : 0 , name : 's' , children : [ { id : 0 , name : 's' } , { id : 0 , name : 's' } ] } , { id : 0 , name : 's' , children : [ { id : 0 , name : 's' , children : [ ] } , { id : 0 , name : 's' , children : [ { id : 0 , name : 's' } ] } ] } ] ; setState ( state ) { localStorage . _UNKNOWN_ = JSON . stringify ( state ) ; } } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $Storage$ O $any$ O $JSON$ O $any$ O $Storage$ O $any$ O O $complex$ O O O $number$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O O O $number$ O O O $string$ O O O O O O O $number$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O $undefined[]$ O O O O O O $number$ O O O $string$ O O O $complex$ O O O $number$ O O O $string$ O O O O O O O O O $void$ O $any$ O O $Storage$ O $any$ O $JSON$ O $complex$ O $any$ O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { nodes = [ { name : 's' , checked : true , } , { name : 's' , checked : false , children : [ { name : 's' , checked : false } , { name : 's' , checked : false , children : [ { name : 's' , checked : false } , { name : 's' , checked : false } ] } ] } ] ; _UNKNOWN_ : _UNKNOWN_ = { mouse : { click : ( tree , node ) => this . check ( node , ! node . data . checked ) } } ; options : _UNKNOWN_ = { _UNKNOWN_ : this . _UNKNOWN_ } ; public check ( node , checked ) { this . _UNKNOWN_ ( node , checked ) ; this . _UNKNOWN_ ( node . _UNKNOWN_ ) ; } public _UNKNOWN_ ( node , checked ) { node . data . checked = checked ; if ( node . children ) { node . children . forEach ( ( child ) => this . _UNKNOWN_ ( child , checked ) ) ; } } public _UNKNOWN_ ( node ) { if ( ! node ) { return ; } let _UNKNOWN_ = true ; let _UNKNOWN_ = true ; for ( const child of node . children ) { if ( ! child . data . checked || child . data . indeterminate ) { _UNKNOWN_ = false ; } if ( child . data . checked ) { _UNKNOWN_ = false ; } } if ( _UNKNOWN_ ) { node . data . checked = true ; node . data . indeterminate = false ; } else if ( _UNKNOWN_ ) { node . data . checked = false ; node . data . indeterminate = false ; } else { node . data . checked = true ; node . data . indeterminate = true ; } this . _UNKNOWN_ ( node . parent ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $complex$ O O O $string$ O O O $boolean$ O O O O O O $string$ O O O $boolean$ O O O $complex$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $boolean$ O O O $complex$ O O O $string$ O O O $boolean$ O O O O O $string$ O O O $boolean$ O O O O O O O O O $any$ O $any$ O O $complex$ O O $void$ O O $any$ O $any$ O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O $any$ O O O $void$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $void$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O O O $any$ O O O O O O $boolean$ O O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O O O O $any$ O $any$ O $any$ O O $boolean$ O O O O O O O $boolean$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $boolean$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import uuid from 's' ; @ Component ( { selector : 's' , template : `template` , styles : [ ] } ) export class _UNKNOWN_ { state : _UNKNOWN_ = { _UNKNOWN_ : { 0 : true , 0 : true } , _UNKNOWN_ : { } , _UNKNOWN_ : { } } ; options : _UNKNOWN_ = { _UNKNOWN_ : ( node ) => node . _UNKNOWN_ , _UNKNOWN_ : ( node ) => ( { ... node . data , id : uuid . 0 ( ) , name : `template` } ) } ; nodes = [ { id : 0 , name : 's' , children : [ { name : 's' } , { name : 's' } ] } , { name : 's' , id : 0 , children : [ { name : 's' , children : [ ] } , { name : 's' , children : [ { name : 's' } ] } ] } , { name : 's' } , { name : 's' , children : [ ] } , { name : 's' , children : null } ] ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O $undefined[]$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O ${}$ O O O O ${}$ O O O O O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O O O O $complex$ O O O $number$ O O O $string$ O O O $complex$ O O O $string$ O O O O O $string$ O O O O O O O $string$ O O O $number$ O O O $complex$ O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $complex$ O O O $string$ O O O O O O O O O $string$ O O O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O $null$ O O O O O O O
<s> import { NgModule } from 's' ; import { Routes , RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const routes = [ { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } ] ; @ NgModule ( { imports : [ RouterModule . forRoot ( routes , { useHash : true } ) ] , exports : [ RouterModule ] } ) export class AppRoutingModule { } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $Routes$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $boolean$ O O O O O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class AppComponent { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { BrowserModule } from 's' ; import { NgModule } from 's' ; import { FormsModule } from 's' ; import { HttpModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { AppRoutingModule } from 's' ; import { AppComponent } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { useStrict } from 's' ; import { _UNKNOWN_ } from 's' ; useStrict ( true ) ; @ NgModule ( { declarations : [ AppComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ BrowserModule , FormsModule , HttpModule , _UNKNOWN_ , AppRoutingModule ] , providers : [ ] , bootstrap : [ AppComponent ] } ) export class AppModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $undefined[]$ O O O O $complex$ O O $any$ O O O O O $any$ O O O
<s> export const environment = { production : true } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> export const environment = { production : false } ; </s>	O O O $complex$ O O $boolean$ O O O O O
<s> import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; import { environment } from 's' ; enableProdMode ( ) ; platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import { getTestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; declare var __karma__ ; declare var require ; __karma__ . loaded = function ( ) { } ; getTestBed ( ) . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; const context = require . context ( 's' , true , "s" ) ; context . keys ( ) . map ( context ) ; __karma__ . start ( ) ; </s>	O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O
<s> export const _UNKNOWN_ = { _UNKNOWN_ : 's' , activate : 's' , deactivate : 's' , select : 's' , deselect : 's' , focus : 's' , blur : 's' , initialized : 's' , updateData : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , event : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } ; </s>	O O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O
<s> import { Injectable } from 's' ; import { observable , computed , action , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = 0 ; @ Injectable ( ) export class _UNKNOWN_ { private _UNKNOWN_ : any ; @ observable _UNKNOWN_ = 0 ; @ observable x = 0 ; @ observable _UNKNOWN_ = null ; viewport = null ; @ computed get y ( ) { return this . _UNKNOWN_ * _UNKNOWN_ ; } @ computed get totalHeight ( ) { return this . _UNKNOWN_ . _UNKNOWN_ ? this . _UNKNOWN_ . _UNKNOWN_ . height : 0 ; } constructor ( private _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ = this ; this . _UNKNOWN_ = [ _UNKNOWN_ ( ( ) => this . _UNKNOWN_ ( ) ) ] ; } fireEvent ( event ) { this . _UNKNOWN_ . fireEvent ( event ) ; } init ( ) { const fn = this . _UNKNOWN_ . bind ( this ) ; fn ( ) ; this . _UNKNOWN_ = [ ... this . _UNKNOWN_ , _UNKNOWN_ ( ( ) => this . _UNKNOWN_ . roots , fn ) , _UNKNOWN_ ( ( ) => this . _UNKNOWN_ . _UNKNOWN_ , fn ) , _UNKNOWN_ ( ( ) => this . _UNKNOWN_ . _UNKNOWN_ , fn ) ] ; this . _UNKNOWN_ . subscribe ( _UNKNOWN_ . _UNKNOWN_ , fn ) ; } isEnabled ( ) { return this . _UNKNOWN_ . options . _UNKNOWN_ ; } @ action private _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; } @ action _UNKNOWN_ ( ) { this . _UNKNOWN_ . _UNKNOWN_ . height = this . _UNKNOWN_ ( this . _UNKNOWN_ . _UNKNOWN_ ( ) , 0 ) ; } private _UNKNOWN_ ( nodes , startPos ) { let position = startPos ; nodes . forEach ( ( node ) => { node . position = position ; position = this . _UNKNOWN_ ( node , position ) ; } ) ; return position ; } private _UNKNOWN_ ( node , startPos ) { let position = node . _UNKNOWN_ ( ) + startPos ; if ( node . children && node . isExpanded ) { position = this . _UNKNOWN_ ( node . _UNKNOWN_ , position ) ; } node . height = position - startPos ; return position ; } clear ( ) { this . _UNKNOWN_ . forEach ( ( d ) => d ( ) ) ; } @ action _UNKNOWN_ ( viewport ) { Object . assign ( this , { viewport , x : viewport . scrollLeft , _UNKNOWN_ : Math . round ( viewport . scrollTop / _UNKNOWN_ ) , _UNKNOWN_ : viewport . getBoundingClientRect ? viewport . getBoundingClientRect ( ) . height : 0 } ) ; } @ action scrollIntoView ( node , force , _UNKNOWN_ = true ) { if ( force || node . position < this . y || node . position + node . _UNKNOWN_ ( ) > this . y + this . _UNKNOWN_ ) { if ( this . viewport ) { this . viewport . scrollTop = _UNKNOWN_ ? node . position - this . _UNKNOWN_ / 0 : node . position ; this . _UNKNOWN_ ( Math . floor ( this . viewport . scrollTop / _UNKNOWN_ ) ) ; } } } _UNKNOWN_ ( nodes ) { if ( ! nodes ) return [ ] ; const _UNKNOWN_ = nodes . filter ( ( node ) => ! node . isHidden ) ; if ( ! this . isEnabled ( ) ) return _UNKNOWN_ ; if ( ! this . _UNKNOWN_ || ! _UNKNOWN_ . length ) return [ ] ; const firstIndex = _UNKNOWN_ ( _UNKNOWN_ , ( node ) => { return ( node . position + _UNKNOWN_ > this . y ) || ( node . position + node . height > this . y ) ; } ) ; const lastIndex = _UNKNOWN_ ( _UNKNOWN_ , ( node ) => { return node . position - _UNKNOWN_ > this . y + this . _UNKNOWN_ ; } , firstIndex ) ; const _UNKNOWN_ = [ ] ; for ( let i = firstIndex ; i <= lastIndex ; i ++ ) { _UNKNOWN_ . push ( _UNKNOWN_ [ i ] ) ; } return _UNKNOWN_ ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = Math . max ( 0 , this . totalHeight - this . _UNKNOWN_ ) ; if ( this . y < 0 ) this . _UNKNOWN_ ( 0 ) ; if ( this . y > _UNKNOWN_ ) this . _UNKNOWN_ ( _UNKNOWN_ / _UNKNOWN_ ) ; } } function _UNKNOWN_ ( nodes , condition , firstIndex = 0 ) { let index = firstIndex ; let toIndex = nodes . length - 0 ; while ( index !== toIndex ) { let _UNKNOWN_ = Math . floor ( ( index + toIndex ) / 0 ) ; if ( condition ( nodes [ _UNKNOWN_ ] ) ) { toIndex = _UNKNOWN_ ; } else { if ( index === _UNKNOWN_ ) index = toIndex ; else index = _UNKNOWN_ ; } } return index ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O O O O O O O O O O $any$ O O O O $any$ O O $any$ O O O O $any$ $number$ O O O O $any$ $number$ O O O O $any$ $any$ O O O $any$ O O O O $any$ O $number$ O O O O O O $number$ O O O O O $any$ O $number$ O O O O O O $any$ O $TreeNode$ O O O $any$ O $TreeNode$ O $number$ O O O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O O O O O O $void$ O O O O O O $void$ O $any$ O O O O $any$ O $void$ O $any$ O O O $void$ O O O O $any$ O O O $void$ O $any$ O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $TreeNode[]$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $void$ O $complex$ O $string$ O $any$ O O O $boolean$ O O O O O O $any$ O $any$ O $boolean$ O O O $any$ O $void$ O $any$ O O O O $number$ O $any$ O O O $any$ $void$ O O O O O $any$ O $TreeNode$ O $number$ O O O $any$ O O O $any$ O $TreeNode[]$ O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $void$ O O O O O $any$ O $any$ O O $any$ O O $any$ O O O O O O $any$ $void$ O $any$ O O $ObjectConstructor$ O O O O O O $any$ O $any$ O $any$ O $any$ O $number$ O $Math$ O $number$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O $any$ $void$ O $any$ O $any$ O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O $number$ O $any$ O $any$ O $any$ O $any$ O O O O O $number$ O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $boolean$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $void$ O $Math$ O $number$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O O O O O $boolean$ O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O O O $number$ O $number$ O $any$ O O $any$ O O O O O $any$ O $any$ O O O O O $number$ O O O $any$ O $any$ O $any$ O $any$ O O O $number$ O O O O O O $number$ O $number$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O O $number$ O O O $any$ O O O $number$ O O O $any[]$ O O O O O O O $number$ O $number$ O $number$ O $number$ O $number$ O O O $any[]$ O $number$ O $any$ O $number$ O O O O O $any[]$ O O $void$ O O O O $number$ O $Math$ O $number$ O O O O O $number$ O O O $any$ O O O O O O $number$ O O O O O $void$ O O O O O O O O $number$ O $number$ O O O $void$ O $number$ O O O O O O O $number$ O $any$ O $any$ O $number$ O O O O O $number$ O $number$ O O $number$ O $any$ O $any$ O O O O O $number$ O $number$ O O O $number$ O $Math$ O $number$ O O $number$ O $number$ O O O O O O O $any$ O $any$ O $number$ O O O O $number$ O $number$ O O O O O O $number$ O $number$ O $number$ O $number$ O O $number$ O $number$ O O O O $number$ O O O
<s> export type _UNKNOWN_ = string | number ; export type _UNKNOWN_ = { [ id ] : boolean } | { [ id ] : boolean } ; export declare type _UNKNOWN_ = any ; export interface _UNKNOWN_ { ( element , to : { parent : _UNKNOWN_ , index : number } , $event ? ) : boolean ; } export interface _UNKNOWN_ { ( node ) : number ; } export interface _UNKNOWN_ { ( node ) : boolean ; } export interface _UNKNOWN_ { _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? : _UNKNOWN_ ; } export interface _UNKNOWN_ { _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; getChildren ? : ( node ) => any ; _UNKNOWN_ ? : any ; _UNKNOWN_ ? : boolean | _UNKNOWN_ ; _UNKNOWN_ ? : boolean | _UNKNOWN_ ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : ( node ) => string ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : number | _UNKNOWN_ ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : number ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : ( node ) => any ; _UNKNOWN_ ? : boolean ; rootId ? : any ; _UNKNOWN_ ? : boolean ; } export interface _UNKNOWN_ { parent : _UNKNOWN_ ; _UNKNOWN_ : string ; children : _UNKNOWN_ [ ] ; data : any ; elementRef : any ; level : number ; path : string [ ] ; index : number ; id : _UNKNOWN_ ; isExpanded : boolean ; isActive : boolean ; isFocused : boolean ; _UNKNOWN_ : boolean ; _UNKNOWN_ : boolean ; hasChildren : boolean ; isRoot : boolean ; _UNKNOWN_ ( _UNKNOWN_ ) : _UNKNOWN_ ; _UNKNOWN_ ( _UNKNOWN_ ) : _UNKNOWN_ ; _UNKNOWN_ ( _UNKNOWN_ ) : _UNKNOWN_ ; _UNKNOWN_ ( _UNKNOWN_ ) : _UNKNOWN_ ; _UNKNOWN_ ( _UNKNOWN_ ) : _UNKNOWN_ ; _UNKNOWN_ ( _UNKNOWN_ ) : _UNKNOWN_ ; _UNKNOWN_ ( node ) : boolean ; _UNKNOWN_ ( ) : string ; getClass ( ) : string ; _UNKNOWN_ ( ) ; expand ( ) ; collapse ( ) ; _UNKNOWN_ ( ) ; _UNKNOWN_ ( multi ) ; focus ( ) ; blur ( ) ; hide ( ) ; show ( ) ; _UNKNOWN_ ( value ) ; scrollIntoView ( ) ; fireEvent ( event ) ; _UNKNOWN_ ( fn : ( node ) => any ) ; _UNKNOWN_ ( ) ; _UNKNOWN_ ( ) ; _UNKNOWN_ ( value , multi ? ) ; _UNKNOWN_ ( multi ) ; } export interface _UNKNOWN_ { roots : _UNKNOWN_ [ ] ; _UNKNOWN_ : _UNKNOWN_ ; options : _UNKNOWN_ ; isFocused : boolean ; _UNKNOWN_ : _UNKNOWN_ [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] ; _UNKNOWN_ ( ) : _UNKNOWN_ ; _UNKNOWN_ ( ) : _UNKNOWN_ ; _UNKNOWN_ ( node ) ; _UNKNOWN_ ( _UNKNOWN_ ? ) : _UNKNOWN_ ; _UNKNOWN_ ( _UNKNOWN_ ? ) : _UNKNOWN_ ; _UNKNOWN_ ( ) : boolean ; _UNKNOWN_ ( ) : _UNKNOWN_ [ ] ; _UNKNOWN_ ( path : any [ ] , startNode ? ) : _UNKNOWN_ ; _UNKNOWN_ ( id ) : _UNKNOWN_ ; _UNKNOWN_ ( predicate , startNode ? ) : _UNKNOWN_ ; _UNKNOWN_ ( value ) ; _UNKNOWN_ ( ) ; _UNKNOWN_ ( ) ; _UNKNOWN_ ( ) ; _UNKNOWN_ ( ) ; _UNKNOWN_ ( filter , _UNKNOWN_ ? ) ; clearFilter ( ) ; _UNKNOWN_ ( node , to : { parent : _UNKNOWN_ , index : number , _UNKNOWN_ : boolean } ) ; _UNKNOWN_ ( fn : ( node ) => any ) ; _UNKNOWN_ ( ) ; _UNKNOWN_ ( ) ; getState ( ) : _UNKNOWN_ ; setState ( state ) ; _UNKNOWN_ ( fn : ( state ) => any ) ; } export interface _UNKNOWN_ { _UNKNOWN_ ( ) : { node : _UNKNOWN_ , index : number } ; } </s>	O O O $any$ O O O O O O O $any$ O O O $string$ O O O O O O O $number$ O O O O O O O O $any$ O O O O O $any$ O O $any$ O $complex$ O O $any$ O $any$ O $number$ O O O O $any$ $any$ O O O O O O O $any$ O O $TreeNode$ O O O O O O O $any$ O O $TreeNode$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $complex$ O O $any$ O O O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $any$ O O O $TreeNode$ O O O O $any$ O O O O $complex$ O O O O $any$ O $complex$ O O O O $any$ O $number$ O O O O $string$ O O O $TreeNode$ O O O O $boolean$ O O O O $complex$ O O O O $any$ O $number$ O O O O $boolean$ O O O O $number$ O O O O $number$ O O O O $boolean$ O O O O $any$ O O O $TreeNode$ O O O O $boolean$ O O O O $any$ O O O O $boolean$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $number$ O O O $string[]$ O O O O O $number$ O O O $complex$ O $any$ O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $boolean$ O O $any$ O $any$ O $any$ O O $any$ O $boolean$ O $any$ O O O O $string$ O O O O O $string$ O O O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $boolean$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O $any$ O O O $any$ O O O $any$ O $boolean$ O $boolean$ $boolean$ O O $any$ O $boolean$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $boolean$ $boolean$ O O $any$ O $any$ O $boolean$ $boolean$ O O $any$ O $boolean$ O O O O O $any$ O O O $any$ O O O $any$ O $any[]$ O O O O O $any$ $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ $any$ O O $any$ O $any$ O $boolean$ O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $any$ O $boolean$ $boolean$ O O $any$ O O O $any$ O $any$ O $complex$ O O $any$ O $any$ O $number$ O O O $boolean$ O O O O O $any$ O $any$ O O $any$ O O O O O $any$ O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O O O $any$ O $complex$ O O O O $any$ O $any$ O $number$ O O O O O O
<s> import { Injectable , EventEmitter } from 's' ; import { observable , computed , action , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _ from 's' ; const { first , last , compact , find , includes , isString , isFunction } = _ ; @ Injectable ( ) export class _UNKNOWN_ implements _UNKNOWN_ { static _UNKNOWN_ = null ; options : _UNKNOWN_ = new _UNKNOWN_ ( ) ; nodes : any [ ] ; _UNKNOWN_ = Object . keys ( _UNKNOWN_ ) ; _UNKNOWN_ : _UNKNOWN_ ; @ observable roots : _UNKNOWN_ [ ] ; @ observable _UNKNOWN_ : _UNKNOWN_ = { } ; @ observable _UNKNOWN_ : _UNKNOWN_ = { } ; @ observable _UNKNOWN_ : _UNKNOWN_ = { } ; @ observable _UNKNOWN_ : _UNKNOWN_ = { } ; @ observable _UNKNOWN_ : _UNKNOWN_ = null ; @ observable _UNKNOWN_ : _UNKNOWN_ ; private _UNKNOWN_ = true ; private events : any ; fireEvent ( event ) { event . _UNKNOWN_ = this ; this . events [ event . eventName ] . emit ( event ) ; this . events . event . emit ( event ) ; } subscribe ( eventName , fn ) { this . events [ eventName ] . subscribe ( fn ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ [ 0 ] ; } _UNKNOWN_ ( ) : _UNKNOWN_ [ ] { return this . _UNKNOWN_ ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ . _UNKNOWN_ ; } _UNKNOWN_ ( _UNKNOWN_ = false ) { return first ( _UNKNOWN_ ? this . _UNKNOWN_ ( ) : this . roots ) ; } _UNKNOWN_ ( _UNKNOWN_ = false ) { return last ( _UNKNOWN_ ? this . _UNKNOWN_ ( ) : this . roots ) ; } get isFocused ( ) { return _UNKNOWN_ . _UNKNOWN_ === this ; } _UNKNOWN_ ( node ) { return this . _UNKNOWN_ === node ; } _UNKNOWN_ ( ) { return this . roots && this . roots . length === 0 ; } @ computed get _UNKNOWN_ ( ) { return this . _UNKNOWN_ ? this . _UNKNOWN_ ( this . _UNKNOWN_ ) : null ; } @ computed get _UNKNOWN_ ( ) { const nodes = Object . keys ( this . _UNKNOWN_ ) . filter ( ( id ) => this . _UNKNOWN_ [ id ] ) . map ( ( id ) => this . _UNKNOWN_ ( id ) ) ; return compact ( nodes ) ; } @ computed get _UNKNOWN_ ( ) { const nodes = Object . keys ( this . _UNKNOWN_ ) . filter ( ( id ) => this . _UNKNOWN_ [ id ] ) . map ( ( id ) => this . _UNKNOWN_ ( id ) ) ; return compact ( nodes ) ; } _UNKNOWN_ ( path : any [ ] , startNode = null ) { if ( ! path ) return null ; startNode = startNode || this . _UNKNOWN_ ; if ( path . length === 0 ) return startNode ; if ( ! startNode . children ) return null ; const _UNKNOWN_ = path . shift ( ) ; const childNode = find ( startNode . children , { id : _UNKNOWN_ } ) ; if ( ! childNode ) return null ; return this . _UNKNOWN_ ( path , childNode ) ; } _UNKNOWN_ ( id ) { const _UNKNOWN_ = id . toString ( ) ; return this . _UNKNOWN_ ( ( node ) => node . id . toString ( ) === _UNKNOWN_ ) ; } _UNKNOWN_ ( predicate , startNode = null ) { startNode = startNode || this . _UNKNOWN_ ; if ( ! startNode . children ) return null ; const found = find ( startNode . children , predicate ) ; if ( found ) { return found ; } else { for ( let child of startNode . children ) { const _UNKNOWN_ = this . _UNKNOWN_ ( predicate , child ) ; if ( _UNKNOWN_ ) return _UNKNOWN_ ; } } } isExpanded ( node ) { return this . _UNKNOWN_ [ node . id ] ; } isHidden ( node ) { return this . _UNKNOWN_ [ node . id ] ; } isActive ( node ) { return this . _UNKNOWN_ [ node . id ] ; } isSelected ( node ) { return this . _UNKNOWN_ [ node . id ] ; } @ action setData ( { nodes , options = null , events = null } : { nodes : any , options : any , events : any } ) { if ( options ) { this . options = new _UNKNOWN_ ( options ) ; } if ( events ) { this . events = events ; } if ( nodes ) { this . nodes = nodes ; } this . update ( ) ; } @ action update ( ) { let _UNKNOWN_ = { id : this . options . rootId , _UNKNOWN_ : true , [ this . options . _UNKNOWN_ ] : this . nodes } ; this . _UNKNOWN_ = new _UNKNOWN_ ( _UNKNOWN_ , null , this , 0 ) ; this . roots = this . _UNKNOWN_ . children ; if ( this . _UNKNOWN_ ) { if ( this . roots ) { this . _UNKNOWN_ = false ; this . _UNKNOWN_ ( ) ; } } else { this . fireEvent ( { eventName : _UNKNOWN_ . updateData } ) ; } } @ action _UNKNOWN_ ( node ) { this . _UNKNOWN_ = node ? node . id : null ; } @ action _UNKNOWN_ ( value ) { _UNKNOWN_ . _UNKNOWN_ = value ? this : null ; } @ action _UNKNOWN_ ( fn ) { this . roots . forEach ( ( root ) => root . _UNKNOWN_ ( fn ) ) ; } @ action _UNKNOWN_ ( ) { let previousNode = this . _UNKNOWN_ ( ) ; let _UNKNOWN_ = previousNode ? previousNode . _UNKNOWN_ ( true , true ) : this . _UNKNOWN_ ( true ) ; if ( _UNKNOWN_ ) _UNKNOWN_ . focus ( ) ; } @ action _UNKNOWN_ ( ) { let previousNode = this . _UNKNOWN_ ( ) ; let _UNKNOWN_ = previousNode ? previousNode . _UNKNOWN_ ( true ) : this . _UNKNOWN_ ( true ) ; if ( _UNKNOWN_ ) _UNKNOWN_ . focus ( ) ; } @ action _UNKNOWN_ ( ) { let previousNode = this . _UNKNOWN_ ( ) ; if ( previousNode && previousNode . _UNKNOWN_ && previousNode . hasChildren ) { previousNode . _UNKNOWN_ ( ) ; } else { let _UNKNOWN_ = previousNode ? previousNode . _UNKNOWN_ ( true ) : this . _UNKNOWN_ ( true ) ; if ( _UNKNOWN_ ) _UNKNOWN_ . focus ( ) ; } } @ action _UNKNOWN_ ( ) { let previousNode = this . _UNKNOWN_ ( ) ; if ( ! previousNode ) return ; if ( previousNode . isExpanded ) { previousNode . _UNKNOWN_ ( ) ; } else { let _UNKNOWN_ = previousNode . _UNKNOWN_ ; if ( _UNKNOWN_ ) _UNKNOWN_ . focus ( ) ; } } @ action _UNKNOWN_ ( node , value , multi = false ) { if ( multi ) { this . _UNKNOWN_ ( node , value ) ; } else { this . _UNKNOWN_ ( node , value ) ; } if ( value ) { node . focus ( ) ; this . fireEvent ( { eventName : _UNKNOWN_ . activate , node } ) ; } else { this . fireEvent ( { eventName : _UNKNOWN_ . deactivate , node } ) ; } } @ action _UNKNOWN_ ( node , value ) { this . _UNKNOWN_ = Object . assign ( { } , this . _UNKNOWN_ , { [ node . id ] : value } ) ; if ( value ) { node . focus ( ) ; this . fireEvent ( { eventName : _UNKNOWN_ . select , node } ) ; } else { this . fireEvent ( { eventName : _UNKNOWN_ . deselect , node } ) ; } } @ action _UNKNOWN_ ( node , value ) { this . _UNKNOWN_ = Object . assign ( { } , this . _UNKNOWN_ , { [ node . id ] : value } ) ; this . fireEvent ( { eventName : _UNKNOWN_ . _UNKNOWN_ , node , isExpanded : value } ) ; } @ action _UNKNOWN_ ( ) { this . roots . forEach ( ( root ) => root . _UNKNOWN_ ( ) ) ; } @ action _UNKNOWN_ ( ) { this . roots . forEach ( ( root ) => root . _UNKNOWN_ ( ) ) ; } @ action _UNKNOWN_ ( node , value ) { this . _UNKNOWN_ = Object . assign ( { } , this . _UNKNOWN_ , { [ node . id ] : value } ) ; } @ action _UNKNOWN_ ( _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ . reduce ( ( _UNKNOWN_ , id ) => Object . assign ( _UNKNOWN_ , { [ id ] : true } ) , { } ) ; } _UNKNOWN_ ( node , $event ) { const action = this . options . _UNKNOWN_ . keys [ $event . keyCode ] ; if ( action ) { $event . preventDefault ( ) ; action ( this , node , $event ) ; return true ; } else { return false ; } } @ action _UNKNOWN_ ( filter , _UNKNOWN_ = true ) { let _UNKNOWN_ ; if ( ! filter ) { return this . clearFilter ( ) ; } if ( isString ( filter ) ) { _UNKNOWN_ = ( node ) => node . _UNKNOWN_ . toLowerCase ( ) . indexOf ( filter . toLowerCase ( ) ) !== - 0 ; } else if ( isFunction ( filter ) ) { _UNKNOWN_ = filter ; } else { console . error ( 's' , filter ) ; console . error ( 's' ) ; return ; } const ids = { } ; this . roots . forEach ( ( node ) => this . _UNKNOWN_ ( ids , node , _UNKNOWN_ , _UNKNOWN_ ) ) ; this . _UNKNOWN_ = ids ; this . fireEvent ( { eventName : _UNKNOWN_ . _UNKNOWN_ } ) ; } @ action clearFilter ( ) { this . _UNKNOWN_ = { } ; this . fireEvent ( { eventName : _UNKNOWN_ . _UNKNOWN_ } ) ; } @ action _UNKNOWN_ ( node , to ) { const fromIndex = node . _UNKNOWN_ ( ) ; const _UNKNOWN_ = node . parent ; if ( ! this . _UNKNOWN_ ( node , fromIndex , to ) ) return ; const _UNKNOWN_ = _UNKNOWN_ . getField ( 's' ) ; if ( ! to . parent . getField ( 's' ) ) { to . parent . _UNKNOWN_ ( 's' , [ ] ) ; } const _UNKNOWN_ = to . parent . getField ( 's' ) ; const originalNode = _UNKNOWN_ . splice ( fromIndex , 0 ) [ 0 ] ; let toIndex = ( _UNKNOWN_ === to . parent && to . index > fromIndex ) ? to . index - 0 : to . index ; _UNKNOWN_ . splice ( toIndex , 0 , originalNode ) ; _UNKNOWN_ . _UNKNOWN_ . update ( ) ; if ( to . parent . _UNKNOWN_ !== _UNKNOWN_ . _UNKNOWN_ ) { to . parent . _UNKNOWN_ . update ( ) ; } this . fireEvent ( { eventName : _UNKNOWN_ . _UNKNOWN_ , node : originalNode , to : { parent : to . parent . data , index : toIndex } } ) ; } @ action _UNKNOWN_ ( node , to ) { const fromIndex = node . _UNKNOWN_ ( ) ; if ( ! this . _UNKNOWN_ ( node , fromIndex , to ) ) return ; if ( ! to . parent . getField ( 's' ) ) { to . parent . _UNKNOWN_ ( 's' , [ ] ) ; } const _UNKNOWN_ = to . parent . getField ( 's' ) ; const _UNKNOWN_ = this . options . _UNKNOWN_ ( node ) ; _UNKNOWN_ . splice ( to . index , 0 , _UNKNOWN_ ) ; node . _UNKNOWN_ . update ( ) ; if ( to . parent . _UNKNOWN_ !== node . _UNKNOWN_ ) { to . parent . _UNKNOWN_ . update ( ) ; } this . fireEvent ( { eventName : _UNKNOWN_ . _UNKNOWN_ , node : _UNKNOWN_ , to : { parent : to . parent . data , index : to . index } } ) ; } getState ( ) { return { _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ , _UNKNOWN_ : this . _UNKNOWN_ } ; } @ action setState ( state ) { if ( ! state ) return ; Object . assign ( this , { _UNKNOWN_ : state . _UNKNOWN_ || { } , _UNKNOWN_ : state . _UNKNOWN_ || { } , _UNKNOWN_ : state . _UNKNOWN_ || { } , _UNKNOWN_ : state . _UNKNOWN_ || { } , _UNKNOWN_ : state . _UNKNOWN_ } ) ; } _UNKNOWN_ ( fn ) { _UNKNOWN_ ( ( ) => fn ( this . getState ( ) ) ) ; } private _UNKNOWN_ ( node , fromIndex , to ) { if ( node . parent === to . parent && fromIndex === to . index ) { return false ; } return ! to . parent . _UNKNOWN_ ( node ) ; } private _UNKNOWN_ ( ids , node , _UNKNOWN_ , _UNKNOWN_ ) { let isVisible = _UNKNOWN_ ( node ) ; if ( node . children ) { node . children . forEach ( ( child ) => { if ( this . _UNKNOWN_ ( ids , child , _UNKNOWN_ , _UNKNOWN_ ) ) { isVisible = true ; } } ) ; } if ( ! isVisible ) { ids [ node . id ] = true ; } if ( _UNKNOWN_ && isVisible ) { node . _UNKNOWN_ ( ) ; } return isVisible ; } private _UNKNOWN_ ( startNode = null ) { startNode = startNode || this . _UNKNOWN_ ; if ( startNode . data [ this . options . _UNKNOWN_ ] ) { this . _UNKNOWN_ = Object . assign ( { } , this . _UNKNOWN_ , { [ startNode . id ] : true } ) ; } if ( startNode . children ) { startNode . children . forEach ( ( child ) => this . _UNKNOWN_ ( child ) ) ; } } private _UNKNOWN_ ( node , value ) { this . _UNKNOWN_ . filter ( ( activeNode ) => activeNode !== node ) . forEach ( ( activeNode ) => { this . fireEvent ( { eventName : _UNKNOWN_ . deactivate , node : activeNode } ) ; } ) ; if ( value ) { this . _UNKNOWN_ = { [ node . id ] : true } ; } else { this . _UNKNOWN_ = { } ; } } private _UNKNOWN_ ( node , value ) { this . _UNKNOWN_ = Object . assign ( { } , this . _UNKNOWN_ , { [ node . id ] : value } ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $complex$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any[]$ O O O O O $string[]$ O $ObjectConstructor$ O $complex$ O $complex$ O O $any$ O $any$ O O $any$ $TreeNode[]$ O $any$ O O O O $any$ $any$ O $any$ O O O O O $any$ $any$ O $any$ O O O O O $any$ $any$ O $any$ O O O O O $any$ $any$ O $any$ O O O O O $any$ $complex$ O $any$ O O O O $any$ $TreeNode$ O $any$ O O $boolean$ O O O O $any$ O O O $void$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O $TreeNode$ O O O O O O $any$ O O $TreeNode$ O O O O O O $any$ O O O O O $TreeNode[]$ O O O $any$ O O O O O O $any$ O O $TreeNode[]$ O O O O O O $TreeNode$ O $TreeNode[]$ O O $any$ O $boolean$ O O O O O $any$ O $boolean$ O O O $TreeNode[]$ O O O O O $TreeNode[]$ O O O $any$ O $boolean$ O O O O O $any$ O $boolean$ O O O $TreeNode[]$ O O O O O $TreeNode[]$ O O O O $boolean$ O O O O $any$ O $any$ O O O O $boolean$ O $any$ O O O O O $any$ O $any$ O O $boolean$ O O O O O O $TreeNode[]$ O O O $TreeNode[]$ O $number$ O O O O O $any$ O $any$ O O O O O O $complex$ O O O $any$ O O O $complex$ O O O O O O $any$ O $any$ O O O O $any[]$ O $ObjectConstructor$ O $complex$ O O O $any$ O O $complex$ O O $string$ O O O O $any$ O $string$ O O O $U[]$ O O $string$ O O O O $any$ O $string$ O O O O $any$ O $any[]$ O O O O $any$ O $any$ O O O O $any[]$ O $ObjectConstructor$ O $complex$ O O O $any$ O O $complex$ O O $string$ O O O O $any$ O $string$ O O O $U[]$ O O $string$ O O O O $any$ O $string$ O O O O $any$ O $any[]$ O O O $TreeNode$ O $any[]$ O O O O O $any$ O O O O O O O $any[]$ O O O O $any$ O $any$ O O O $TreeNode$ O O O $any[]$ O $number$ O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any[]$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O O O O $TreeNode$ O $any[]$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $TreeNode$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ $void$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O $any$ O O O $any$ O O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O $any[]$ O $any$ O O O O $void$ O O O O O $any$ $void$ O O O O $complex$ O O $any$ O O O $any$ O $any$ O $boolean$ O O O O O O $any$ O $string$ O O O O $any[]$ O O O O $TreeNode$ O O $any$ O $complex$ O O O O O O O O O O $TreeNode[]$ O O O $TreeNode$ O $TreeNode[]$ O O O O O $boolean$ O O O O O O $TreeNode[]$ O O O O $boolean$ O O O O O $void$ O O O O O O O O O $void$ O O $string$ O $complex$ O $string$ O O O O O O $any$ $void$ O $any$ O O O O $complex$ O $any$ O $any$ O $any$ O O O O O $any$ $void$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ $void$ O $any$ O O O O $TreeNode[]$ O $void$ O O $TreeNode$ O O $TreeNode$ O $void$ O $any$ O O O O O $any$ $void$ O O O O $TreeNode$ O O O $TreeNode$ O O O O $any$ O $TreeNode$ O $TreeNode$ O $any$ O O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ $void$ O O O O $TreeNode$ O O O $TreeNode$ O O O O $any$ O $TreeNode$ O $TreeNode$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ $void$ O O O O $TreeNode$ O O O $TreeNode$ O O O O O $TreeNode$ O $TreeNode$ O $boolean$ O $TreeNode$ O $boolean$ O O $TreeNode$ O $TreeNode$ O O O O O O O $any$ O $TreeNode$ O $TreeNode$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ $void$ O O O O $TreeNode$ O O O $TreeNode$ O O O O O O $TreeNode$ O O O O O $TreeNode$ O $any$ O O $TreeNode$ O $TreeNode$ O O O O O O O $TreeNode$ O $TreeNode$ O $TreeNode$ O O O $TreeNode$ O $TreeNode$ O $TreeNode$ O O O O O O $any$ $void$ O $any$ O $any$ O $boolean$ O O O O O O $boolean$ O O O O $void$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O $void$ O O $string$ O $complex$ O $string$ O $any$ O O O O O O O O $void$ O O $string$ O $complex$ O $string$ O $any$ O O O O O O $any$ $void$ O $any$ O $any$ O O O O $any$ O $ObjectConstructor$ O O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O $void$ O O $string$ O $complex$ O $string$ O $any$ O O O O O O O O $void$ O O $string$ O $complex$ O $string$ O $any$ O O O O O O $any$ $void$ O $any$ O $any$ O O O O $any$ O $ObjectConstructor$ O O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O O O $void$ O O $string$ O $complex$ O $string$ O $any$ O $any$ O $any$ O O O O O $any$ $void$ O O O O O $TreeNode[]$ O $void$ O O $TreeNode$ O O $TreeNode$ O $void$ O O O O O O $any$ $void$ O O O O O $TreeNode[]$ O $void$ O O $TreeNode$ O O $TreeNode$ O $void$ O O O O O O $any$ $void$ O $any$ O $any$ O O O O $any$ O $ObjectConstructor$ O O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O O O $any$ $void$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $ObjectConstructor$ O O O $any$ O O O $any$ O O O O O O O O O O O $boolean$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O O O O O O O O O $any$ $void$ O $any$ O $boolean$ O O O O O $any$ O O O O $any$ O O O O O $void$ O O O O O O $any$ O $any$ O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $Console$ O $void$ O O O $any$ O O $Console$ O $void$ O O O O O O O O ${}$ O O O O O O $TreeNode[]$ O $void$ O O $TreeNode$ O O O O $any$ O ${}$ O $TreeNode$ O $any$ O $boolean$ O O O O O $any$ O ${}$ O O O $void$ O O $string$ O $complex$ O $string$ O O O O O $any$ $void$ O O O O O $any$ O O O O O O $void$ O O $string$ O $complex$ O $string$ O O O O O $any$ $void$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $boolean$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O O $string$ O $complex$ O $string$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ $void$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $boolean$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O O $string$ O $complex$ O $string$ O $any$ O $any$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $complex$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $complex$ O O O $complex$ O O O O $any$ $void$ O $any$ O O O O O $any$ O O O $ObjectConstructor$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O $any$ O O O O $any$ O O O $complex$ O O O O O O O $boolean$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O $void$ O $any$ O O O O $any$ O $any$ O O O $TreeNode$ O O O $any$ O $any$ O O O $any$ O $string$ O O O O O $any$ O $ObjectConstructor$ O O O O O O O O $any$ O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $void$ O $any$ O O O O O O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O O $any$ O O O O O $void$ O O $string$ O $complex$ O $string$ O $any$ O $any$ O O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O $any$ O $ObjectConstructor$ O O O O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O O O O
<s> import { observable , computed , _UNKNOWN_ , _UNKNOWN_ , action } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _ from 's' ; const { first , last , some , every } = _ ; export class _UNKNOWN_ implements _UNKNOWN_ { @ computed get isHidden ( ) { return this . _UNKNOWN_ . isHidden ( this ) ; } ; @ computed get isExpanded ( ) { return this . _UNKNOWN_ . isExpanded ( this ) ; } ; @ computed get isActive ( ) { return this . _UNKNOWN_ . isActive ( this ) ; } ; @ computed get isFocused ( ) { return this . _UNKNOWN_ . _UNKNOWN_ ( this ) ; } ; @ computed get isSelected ( ) { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ . isSelected ( this ) ; } else { return some ( this . children , ( node ) => node . isSelected ) ; } } ; @ computed get isAllSelected ( ) { if ( this . _UNKNOWN_ ) { return this . isSelected ; } else { return every ( this . children , ( node ) => node . isAllSelected ) ; } } ; @ computed get _UNKNOWN_ ( ) { return this . isSelected && ! this . isAllSelected ; } @ observable children : _UNKNOWN_ [ ] ; @ observable index : number ; @ observable position = 0 ; @ observable height : number ; @ computed get level ( ) : number { return this . parent ? this . parent . level + 0 : 0 ; } @ computed get path ( ) : string [ ] { return this . parent ? [ ... this . parent . path , this . id ] : [ ] ; } get elementRef ( ) : any { throw `template` ; } private _UNKNOWN_ : any ; get originalNode ( ) { return this . _UNKNOWN_ ; } ; constructor ( public data , public parent , public _UNKNOWN_ , index ) { if ( this . id === undefined || this . id === null ) { this . id = uuid ( ) ; } this . index = index ; if ( this . getField ( 's' ) ) { this . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ ( ) ; } get hasChildren ( ) : boolean { return ! ! ( this . getField ( 's' ) || ( this . children && this . children . length > 0 ) ) ; } get _UNKNOWN_ ( ) : boolean { return ! this . isExpanded ; } get _UNKNOWN_ ( ) : boolean { return ! this . hasChildren ; } get isRoot ( ) : boolean { return this . parent . data . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . isRoot ? null : this . parent ; } get options ( ) : _UNKNOWN_ { return this . _UNKNOWN_ . options ; } fireEvent ( event ) { this . _UNKNOWN_ . fireEvent ( event ) ; } get _UNKNOWN_ ( ) { return this . getField ( 's' ) ; } get id ( ) { return this . getField ( 's' ) ; } set id ( value ) { this . _UNKNOWN_ ( 's' , value ) ; } getField ( key ) { return this . data [ this . options [ `template` ] ] ; } _UNKNOWN_ ( key , value ) { this . data [ this . options [ `template` ] ] = value ; } _UNKNOWN_ ( steps , _UNKNOWN_ = false ) { const siblings = this . _UNKNOWN_ ( _UNKNOWN_ ) ; const index = siblings . indexOf ( this ) ; return siblings . length > index + steps ? siblings [ index + steps ] : null ; } _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( + 0 , _UNKNOWN_ ) ; } _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( - 0 , _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } @ computed get _UNKNOWN_ ( ) { return ( this . children || [ ] ) . filter ( ( node ) => ! node . isHidden ) ; } _UNKNOWN_ ( _UNKNOWN_ = false ) { let children = _UNKNOWN_ ? this . _UNKNOWN_ : this . children ; return first ( children || [ ] ) ; } _UNKNOWN_ ( _UNKNOWN_ = false ) { let children = _UNKNOWN_ ? this . _UNKNOWN_ : this . children ; return last ( children || [ ] ) ; } _UNKNOWN_ ( _UNKNOWN_ = true , _UNKNOWN_ = false ) { return _UNKNOWN_ && this . isExpanded && this . _UNKNOWN_ ( _UNKNOWN_ ) || this . _UNKNOWN_ ( _UNKNOWN_ ) || this . parent && this . parent . _UNKNOWN_ ( false , _UNKNOWN_ ) ; } _UNKNOWN_ ( _UNKNOWN_ = false ) { let _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ ) ; if ( ! _UNKNOWN_ ) { return this . _UNKNOWN_ ; } return _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; } _UNKNOWN_ ( _UNKNOWN_ = false ) { const lastChild = this . _UNKNOWN_ ( _UNKNOWN_ ) ; return ( this . _UNKNOWN_ || ! lastChild ) ? this : lastChild . _UNKNOWN_ ( _UNKNOWN_ ) ; } private _UNKNOWN_ ( _UNKNOWN_ = false ) : any [ ] { const children = this . parent && ( _UNKNOWN_ ? this . parent . _UNKNOWN_ ( ) : this . parent . children ) ; return children || [ ] ; } private _UNKNOWN_ ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ( _UNKNOWN_ ) . indexOf ( this ) ; } _UNKNOWN_ ( node ) { if ( this === node ) return true ; else return this . parent && this . parent . _UNKNOWN_ ( node ) ; } _UNKNOWN_ ( ) { return this . options . _UNKNOWN_ * ( this . level - 0 ) + 's' ; } getClass ( ) { return [ this . options . _UNKNOWN_ ( this ) , `template` ] . join ( 's' ) ; } onDrop ( $event ) { this . _UNKNOWN_ ( 's' , $event . event , { from : $event . element , to : { parent : this , index : 0 , _UNKNOWN_ : true } } ) ; } _UNKNOWN_ = ( element , $event ? ) => { return this . options . _UNKNOWN_ ( element , { parent : this , index : 0 } , $event ) ; } _UNKNOWN_ ( ) { return this . options . _UNKNOWN_ ( this ) ; } _UNKNOWN_ ( ) { if ( ! this . options . getChildren ) { return Promise . resolve ( ) ; } return Promise . resolve ( this . options . getChildren ( this ) ) . then ( ( children ) => { if ( children ) { this . _UNKNOWN_ ( 's' , children ) ; this . _UNKNOWN_ ( ) ; this . children . forEach ( ( child ) => { if ( child . getField ( 's' ) && child . hasChildren ) { child . expand ( ) ; } } ) ; } } ) . then ( ( ) => { this . fireEvent ( { eventName : _UNKNOWN_ . _UNKNOWN_ , node : this } ) ; } ) ; } expand ( ) { if ( ! this . isExpanded ) { this . _UNKNOWN_ ( ) ; } return this ; } collapse ( ) { if ( this . isExpanded ) { this . _UNKNOWN_ ( ) ; } return this ; } _UNKNOWN_ ( fn : ( node ) => any ) { Promise . resolve ( fn ( this ) ) . then ( ( ) => { if ( this . children ) { this . children . forEach ( ( child ) => child . _UNKNOWN_ ( fn ) ) ; } } ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ( node ) => node . expand ( ) ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ( node ) => node . collapse ( ) ) ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . expand ( ) ; this . _UNKNOWN_ . _UNKNOWN_ ( ) ; } return this ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ! this . isExpanded ) ; return this ; } _UNKNOWN_ ( value ) { if ( this . hasChildren ) { this . _UNKNOWN_ . _UNKNOWN_ ( this , value ) ; } return this ; } ; _UNKNOWN_ ( ) { _UNKNOWN_ ( ( ) => this . isExpanded , ( isExpanded ) => { if ( ! this . children && this . hasChildren && isExpanded ) { this . _UNKNOWN_ ( ) ; } } , { _UNKNOWN_ : true } ) ; } _UNKNOWN_ ( value , multi = false ) { this . _UNKNOWN_ . _UNKNOWN_ ( this , value , multi ) ; if ( value ) { this . focus ( this . options . _UNKNOWN_ ) ; } return this ; } _UNKNOWN_ ( value ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . _UNKNOWN_ ( this , value ) ; } else { this . children . forEach ( ( child ) => child . _UNKNOWN_ ( value ) ) ; } return this ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ! this . isSelected ) ; return this ; } _UNKNOWN_ ( multi = false ) { this . _UNKNOWN_ ( ! this . isActive , multi ) ; return this ; } _UNKNOWN_ ( multi = false ) { this . _UNKNOWN_ ( true , multi ) . _UNKNOWN_ ( ) ; setTimeout ( this . scrollIntoView . bind ( this ) ) ; return this ; } scrollIntoView ( force = false ) { this . _UNKNOWN_ . _UNKNOWN_ . scrollIntoView ( this , force ) ; } focus ( scroll = true ) { let previousNode = this . _UNKNOWN_ . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . _UNKNOWN_ ( this ) ; if ( scroll ) { this . scrollIntoView ( ) ; } if ( previousNode ) { this . fireEvent ( { eventName : _UNKNOWN_ . blur , node : previousNode } ) ; } this . fireEvent ( { eventName : _UNKNOWN_ . focus , node : this } ) ; return this ; } blur ( ) { let previousNode = this . _UNKNOWN_ . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . _UNKNOWN_ ( null ) ; if ( previousNode ) { this . fireEvent ( { eventName : _UNKNOWN_ . blur , node : this } ) ; } return this ; } _UNKNOWN_ ( value ) { this . _UNKNOWN_ . _UNKNOWN_ ( this , value ) ; } hide ( ) { this . _UNKNOWN_ ( true ) ; } show ( ) { this . _UNKNOWN_ ( false ) ; } _UNKNOWN_ ( actionName , $event , data = null ) { this . _UNKNOWN_ . _UNKNOWN_ ( true ) ; const _UNKNOWN_ = this . options . _UNKNOWN_ . mouse ; const action = _UNKNOWN_ [ actionName ] ; if ( action ) { action ( this . _UNKNOWN_ , this , $event , data ) ; } } _UNKNOWN_ ( ) { return this . options . _UNKNOWN_ ( this ) ; } @ action _UNKNOWN_ ( ) { this . children = this . getField ( 's' ) . map ( ( c , index ) => new _UNKNOWN_ ( c , this , this . _UNKNOWN_ , index ) ) ; } } function uuid ( ) { return Math . floor ( Math . random ( ) * 0 ) ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $boolean$ O O O O O O $any$ O $boolean$ O O O O O O O $any$ O $any$ O O O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O O O O $any$ O O O $TreeNode[]$ O O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $boolean$ O O O O O $any$ O O O O O $any$ O O O $TreeNode[]$ O O $any$ O O $any$ O $any$ O O O O O O $any$ O $boolean$ O O O O O O $any$ O O O O $any$ O O O $any$ $TreeNode[]$ O $any$ O O O O $any$ $number$ O O O O $any$ $number$ O O O O $any$ $number$ O O O O $any$ O $number$ O O O O O O O O $TreeNode$ O O O $TreeNode$ O $number$ O O O O O O O $any$ O $string[]$ O O O O O O O O O O $TreeNode$ O O O O O $TreeNode$ O $string[]$ O O O $any$ O O O O O O O $any$ O O O O O O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $TreeNode$ O O $any$ O $number$ O O O O O O $any$ O $undefined$ O O O $any$ O O O O O O $any$ O $number$ O O O O O O $number$ O $number$ O O O O O $any$ O O O O O O O $void$ O O O O O O $void$ O O O O O $boolean$ O O O O O O O O O O O $any$ O O O O O O O $TreeNode[]$ O O O $TreeNode[]$ O $number$ O O O O O O O $boolean$ O O O O O O O O O $any$ O O O $boolean$ O O O O O O O O O $boolean$ O O O $boolean$ O O O O O O O O $TreeNode$ O $any$ O $any$ O O O $TreeNode$ O O O $any$ O O O O $boolean$ O O O O O $TreeNode$ O O O $any$ O O O $any$ O O O O $any$ O $any$ O O $void$ O $any$ O O O O $any$ O $void$ O $any$ O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $void$ O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O O O $void$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O $any$ O O $any$ O $any$ O $boolean$ O O O O O $any[]$ O O O $any[]$ O $boolean$ O O O $number$ O $any[]$ O $number$ O O O O O $any[]$ O $number$ O $number$ O $any$ O $any[]$ O $number$ O $any$ O O O O O $any$ O $boolean$ O O O O O O O $any$ O O O O $boolean$ O O O $any$ O $boolean$ O O O O O O O $any$ O O O O $boolean$ O O O $TreeNode[]$ O O O O O O $TreeNode[]$ O O O $any$ O $TreeNode[]$ O O O O O O O $TreeNode[]$ O O O O O $complex$ O O $TreeNode$ O O O $TreeNode$ O $any$ O O O $any$ O $boolean$ O O O O O $TreeNode[]$ O $boolean$ O O O $TreeNode[]$ O O O $TreeNode[]$ O O $any$ O $TreeNode[]$ O O O O O O $any$ O $boolean$ O O O O O $TreeNode[]$ O $boolean$ O O O $TreeNode[]$ O O O $TreeNode[]$ O O $any$ O $TreeNode[]$ O O O O O O $any$ O $boolean$ O O O $boolean$ O O O O O $boolean$ O O O $any$ O O O $any$ O $boolean$ O O O O $any$ O $boolean$ O O O O $TreeNode$ O O O $TreeNode$ O $any$ O O O $boolean$ O O O $any$ O $boolean$ O O O O O $any$ O O O $any$ O $boolean$ O O O O O $any$ O O O O O $TreeNode$ O O O $any$ O $any$ O $boolean$ O O O $any$ O $boolean$ O O O O O $any$ O O O $any$ O $boolean$ O O O O O O $boolean$ O O $any$ O O O O $any$ O $any$ O $boolean$ O O O O $any[]$ O $boolean$ O O O O O O O O O $TreeNode[]$ O O O $TreeNode$ O O $boolean$ O O O $TreeNode$ O $TreeNode[]$ O O O O O $TreeNode$ O $TreeNode[]$ O O O $TreeNode[]$ O O O O O O $number$ O $boolean$ O O O O O O O $any[]$ O $boolean$ O O $number$ O O O O O $any$ O $TreeNode$ O O O O O O $TreeNode$ O O O O O O O O $TreeNode$ O O O $TreeNode$ O $any$ O $TreeNode$ O O O $string$ O O O O O O $any$ O $number$ O O O O $number$ O O O O O O O $string$ O O O O O O O $any$ O $string$ O O O O O O O $string$ O O O O O $void$ O $any$ O O O O $void$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $complex$ O O $this$ O O O $number$ O O O $boolean$ O O O O O O O $boolean$ O O $any$ O $any$ O O O O O O O $any$ O $boolean$ O $any$ O O $this$ O O O $number$ O O O O $any$ O O O $boolean$ O O O O O O $any$ O $boolean$ O O O O O $Promise<void>$ O O O O O O O O $any$ O $any$ O O O $PromiseConstructor$ O $complex$ O O O O O $PromiseConstructor$ O $complex$ O O O $any$ O $any$ O O O O O O O O $any$ O O O O O $any$ O O O O $void$ O O O $any$ O O O O $void$ O O O O O $TreeNode[]$ O $void$ O O $TreeNode$ O O O O O $TreeNode$ O $any$ O O O O $TreeNode$ O $boolean$ O O $TreeNode$ O $TreeNode$ O O O O O O O O O O O O O O O O O O O $void$ O O $string$ O $complex$ O $string$ O $this$ O O O O O O O O O $this$ O O O O O O O O $any$ O O O O $this$ O O O O O O O O $this$ O O O O O O O $any$ O O O O $this$ O O O O O O O O $void$ O $any$ O O $any$ O O O O O $PromiseConstructor$ O $complex$ O $any$ O O O O O O O O O O O O O O O $TreeNode[]$ O O O O $TreeNode[]$ O $void$ O O $TreeNode$ O O $TreeNode$ O $void$ O $any$ O O O O O O O O $void$ O O O O O $void$ O O $any$ O O $any$ O $any$ O O O O O $void$ O O O O O $void$ O O $any$ O O $any$ O $any$ O O O O O $this$ O O O O O O O $TreeNode$ O O O O $TreeNode$ O $TreeNode$ O O O O O $TreeNode$ O $TreeNode$ O O O O O O O O $this$ O O O O O $this$ O O O O $any$ O O O O O O $this$ O $any$ O O O O O O $boolean$ O O O O $any$ O $void$ O O O $any$ O O O O O O O O $void$ O O O $any$ O O O O O O $any$ O O $any$ O O O O O O O O $TreeNode[]$ O O O $boolean$ O $any$ O O O O $Promise<void>$ O O O O O O O $boolean$ O O O O O O $this$ O $any$ O $boolean$ O O O O O O $any$ O $void$ O O O $any$ O $boolean$ O O O O $any$ O O O O $this$ O O O $any$ O $boolean$ O O O O O O O $this$ O $any$ O O O O O O $boolean$ O O O O $any$ O $void$ O O O $any$ O O O O O O O $TreeNode[]$ O $void$ O O $TreeNode$ O O $TreeNode$ O $TreeNode$ O $any$ O O O O O O O O $this$ O O O O O $this$ O O O O $any$ O O O O O O $this$ O $boolean$ O O O O O O $this$ O O O O $any$ O $boolean$ O O O O O O $this$ O $boolean$ O O O O O O $this$ O O O $boolean$ O O $this$ O O O $number$ O O O $void$ O $any$ O O O O O O O O O $void$ O $boolean$ O O O O O O $any$ O $any$ O $void$ O O O $boolean$ O O O $this$ O $boolean$ O O O O O $TreeNode$ O O O $any$ O $TreeNode$ O O O O O $any$ O $void$ O O O O O O $boolean$ O O O O $void$ O O O O O O $TreeNode$ O O O O $void$ O O $string$ O $complex$ O $string$ O $TreeNode$ O $TreeNode$ O O O O O O $void$ O O $string$ O $complex$ O $string$ O $this$ O O O O O O O O O $this$ O O O O $TreeNode$ O O O $any$ O $TreeNode$ O O O O O $any$ O $void$ O O O O O O $TreeNode$ O O O O $void$ O O $string$ O $complex$ O $string$ O $this$ O O O O O O O O O O $void$ O $any$ O O O O $any$ O $void$ O O O $any$ O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O $string$ O $any$ O $any$ O O O O O O $any$ O $void$ O O O O O O O O O $any$ O $any$ O O O O $any$ O O O $string$ O O O O $any$ O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $number$ O O O O O O $any$ O $number$ O O O O O O $any$ $void$ O O O O O $TreeNode[]$ O O O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $number$ O O O O $Math$ O $number$ O $Math$ O $number$ O O O O O O O O
<s> export const KEYS = { LEFT : 0 , _UNKNOWN_ : 0 , RIGHT : 0 , _UNKNOWN_ : 0 , ENTER : 0 , SPACE : 0 , _UNKNOWN_ : 0 } ; </s>	O O O $complex$ O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O $number$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { KEYS } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _ from 's' ; export interface _UNKNOWN_ { ( tree , node , $event , ... rest ) ; } export const _UNKNOWN_ = { _UNKNOWN_ : ( tree , node , $event ) => node && node . _UNKNOWN_ ( ) , _UNKNOWN_ : ( tree , node , $event ) => node && node . _UNKNOWN_ ( true ) , _UNKNOWN_ : ( tree , node , $event ) => node && node . _UNKNOWN_ ( ) , _UNKNOWN_ : ( tree , node , $event ) => node . _UNKNOWN_ ( true ) , _UNKNOWN_ : ( tree , node , $event ) => node . _UNKNOWN_ ( false ) , _UNKNOWN_ : ( tree , node , $event ) => node . focus ( ) , _UNKNOWN_ : ( tree , node , $event ) => node . hasChildren && node . _UNKNOWN_ ( ) , _UNKNOWN_ : ( tree , node , $event ) => node . expand ( ) , _UNKNOWN_ : ( tree , node , $event ) => node . collapse ( ) , _UNKNOWN_ : ( tree , node , $event ) => tree . _UNKNOWN_ ( ) , _UNKNOWN_ : ( tree , node , $event ) => tree . _UNKNOWN_ ( ) , _UNKNOWN_ : ( tree , node , $event ) => tree . _UNKNOWN_ ( ) , _UNKNOWN_ : ( tree , node , $event ) => tree . _UNKNOWN_ ( ) , _UNKNOWN_ : ( tree , node , $event , { from , to } : { from : any , to : any } ) => { if ( $event . ctrlKey ) { tree . _UNKNOWN_ ( from , to ) ; } else { tree . _UNKNOWN_ ( from , to ) ; } } } ; const _UNKNOWN_ = { mouse : { click : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : null , contextMenu : null , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , drop : _UNKNOWN_ . _UNKNOWN_ } , keys : { [ KEYS . RIGHT ] : _UNKNOWN_ . _UNKNOWN_ , [ KEYS . LEFT ] : _UNKNOWN_ . _UNKNOWN_ , [ KEYS . _UNKNOWN_ ] : _UNKNOWN_ . _UNKNOWN_ , [ KEYS . _UNKNOWN_ ] : _UNKNOWN_ . _UNKNOWN_ , [ KEYS . SPACE ] : _UNKNOWN_ . _UNKNOWN_ , [ KEYS . ENTER ] : _UNKNOWN_ . _UNKNOWN_ } } ; export interface _UNKNOWN_ { mouse ? : { click ? : _UNKNOWN_ , _UNKNOWN_ ? : _UNKNOWN_ , contextMenu ? : _UNKNOWN_ , _UNKNOWN_ ? : _UNKNOWN_ , _UNKNOWN_ ? : _UNKNOWN_ , _UNKNOWN_ ? : _UNKNOWN_ , drag ? : _UNKNOWN_ , _UNKNOWN_ ? : _UNKNOWN_ , _UNKNOWN_ ? : _UNKNOWN_ , _UNKNOWN_ ? : _UNKNOWN_ , _UNKNOWN_ ? : _UNKNOWN_ , drop ? : _UNKNOWN_ } ; keys ? : { [ key ] : _UNKNOWN_ } ; } export class _UNKNOWN_ { get _UNKNOWN_ ( ) : string { return this . options . _UNKNOWN_ || 's' ; } get _UNKNOWN_ ( ) : string { return this . options . _UNKNOWN_ || 's' ; } get _UNKNOWN_ ( ) : string { return this . options . _UNKNOWN_ || 's' ; } get _UNKNOWN_ ( ) : string { return this . options . _UNKNOWN_ || 's' ; } get _UNKNOWN_ ( ) : string { return this . options . _UNKNOWN_ || 's' ; } get getChildren ( ) : any { return this . options . getChildren ; } get _UNKNOWN_ ( ) : number { return this . options . _UNKNOWN_ || 0 ; } get _UNKNOWN_ ( ) : boolean { return this . options . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : boolean { return this . options . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : number { return this . options . _UNKNOWN_ || 0 ; } get _UNKNOWN_ ( ) : number { return this . options . _UNKNOWN_ || 0 ; } get _UNKNOWN_ ( ) : boolean { return this . options . _UNKNOWN_ === undefined ? true : this . options . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : boolean { return ! ! this . options . _UNKNOWN_ ; } get rootId ( ) : any { return this . options . rootId ; } get _UNKNOWN_ ( ) : boolean { return this . options . _UNKNOWN_ ; } _UNKNOWN_ : _UNKNOWN_ ; constructor ( private options = { } ) { this . _UNKNOWN_ = _ . _UNKNOWN_ ( { } , this . options . _UNKNOWN_ , _UNKNOWN_ ) ; if ( options . _UNKNOWN_ ) { this . _UNKNOWN_ . keys [ KEYS . RIGHT ] = < _UNKNOWN_ > _ . get ( options , [ 's' , 's' , KEYS . RIGHT ] ) || _UNKNOWN_ . _UNKNOWN_ ; this . _UNKNOWN_ . keys [ KEYS . LEFT ] = < _UNKNOWN_ > _ . get ( options , [ 's' , 's' , KEYS . LEFT ] ) || _UNKNOWN_ . _UNKNOWN_ ; } } _UNKNOWN_ ( node ) { if ( this . options . _UNKNOWN_ ) { return this . options . _UNKNOWN_ ( node ) ; } return _ . omit ( Object . assign ( { } , node . data ) , [ 's' ] ) ; } _UNKNOWN_ ( element , to , $event ? ) { if ( this . options . _UNKNOWN_ instanceof Function ) { return this . options . _UNKNOWN_ ( element , to , $event ) ; } else { return this . options . _UNKNOWN_ === undefined ? true : this . options . _UNKNOWN_ ; } } _UNKNOWN_ ( node ) { if ( this . options . _UNKNOWN_ instanceof Function ) { return this . options . _UNKNOWN_ ( node ) ; } else { return this . options . _UNKNOWN_ ; } } _UNKNOWN_ ( node ) { return this . options . _UNKNOWN_ ? this . options . _UNKNOWN_ ( node ) : 's' ; } _UNKNOWN_ ( node ) { if ( node . data . _UNKNOWN_ ) { return 0 ; } let _UNKNOWN_ = this . options . _UNKNOWN_ || 0 ; if ( typeof _UNKNOWN_ === 's' ) { _UNKNOWN_ = _UNKNOWN_ ( node ) ; } return _UNKNOWN_ + ( node . index === 0 ? 0 : 0 ) * this . _UNKNOWN_ ; } get _UNKNOWN_ ( ) : number { return _ . isNumber ( this . options . _UNKNOWN_ ) ? this . options . _UNKNOWN_ : 0 ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O $any$ O $TreeNode$ O $any$ O O $any[]$ O O O O O O O O $TreeNode$ O O $any$ O $TreeNode$ O $any$ O O $TreeNode$ O $TreeNode$ O $TreeNode$ O O O $TreeNode$ O O $any$ O $TreeNode$ O $any$ O O $TreeNode$ O $TreeNode$ O $TreeNode$ O O O O $TreeNode$ O O $any$ O $TreeNode$ O $any$ O O $TreeNode$ O $TreeNode$ O $TreeNode$ O O O $TreeNode$ O O $any$ O $TreeNode$ O $any$ O O $TreeNode$ O $TreeNode$ O O O O $TreeNode$ O O $any$ O $TreeNode$ O $any$ O O $TreeNode$ O $TreeNode$ O O O O $TreeNode$ O O $any$ O $TreeNode$ O $any$ O O $TreeNode$ O $TreeNode$ O O O $TreeNode$ O O $any$ O $TreeNode$ O $any$ O O $TreeNode$ O $boolean$ O $TreeNode$ O $TreeNode$ O O O $TreeNode$ O O $any$ O $TreeNode$ O $any$ O O $TreeNode$ O $TreeNode$ O O O $TreeNode$ O O $any$ O $TreeNode$ O $any$ O O $TreeNode$ O $TreeNode$ O O O $void$ O O $any$ O $TreeNode$ O $any$ O O $any$ O $void$ O O O $void$ O O $any$ O $TreeNode$ O $any$ O O $any$ O $void$ O O O $void$ O O $any$ O $TreeNode$ O $any$ O O $any$ O $void$ O O O $void$ O O $any$ O $TreeNode$ O $any$ O O $any$ O $void$ O O O $void$ O O $any$ O $TreeNode$ O $any$ O O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $void$ O $any$ O $any$ O O O O O $any$ O $void$ O $any$ O $any$ O O O O O O O $any$ O O $complex$ O O $TreeNode$ O O O $TreeNode$ O $null$ O O O $null$ O O O $TreeNode$ O O O $TreeNode$ O $TreeNode$ O O O $TreeNode$ O $void$ O O O $void$ O O $complex$ O O O $complex$ O $number$ O O O O $void$ O O $complex$ O $number$ O O O O $void$ O O $complex$ O $number$ O O O O $void$ O O $complex$ O $number$ O O O O $void$ O O $complex$ O $number$ O O O O $TreeNode$ O O $complex$ O $number$ O O O O $TreeNode$ O O O O O $any$ O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O $complex$ O O O O $number$ O O $any$ O O O O O $any$ O O $string$ O O O O O O O O $any$ O $string$ O O O O O $string$ O O O O O O O O $any$ O $string$ O O O O O $string$ O O O O O O O O $any$ O $string$ O O O O O $string$ O O O O O O O O $any$ O $string$ O O O O O $string$ O O O O O O O O $any$ O $string$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $number$ O O O O O O O O $any$ O $number$ O O O O O $boolean$ O O O O O O O O $any$ O $boolean$ O O O $boolean$ O O O O O O O O $any$ O $boolean$ O O O $number$ O O O O O O O O $any$ O $number$ O O O O O $number$ O O O O O O O O $any$ O $number$ O O O O O $boolean$ O O O O O O O O $any$ O $boolean$ O $undefined$ O O O O O $any$ O $boolean$ O O O $boolean$ O O O O O O O O O O $any$ O $boolean$ O O O $any$ O O O O O O O O $any$ O $any$ O O O $boolean$ O O O O O O O O $any$ O $boolean$ O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $boolean$ O O O O $any$ O $complex$ O $complex$ O $number$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $complex$ O $number$ O O O O O $void$ O O O $any$ O $complex$ O $complex$ O $number$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $complex$ O $number$ O O O O O $void$ O O O $any$ O $TreeNode$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $TreeNode$ O O O O $any$ O $any$ O $ObjectConstructor$ O O O O O O $TreeNode$ O $any$ O O O O O O O O $boolean$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $complex$ O $FunctionConstructor$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $boolean$ O $undefined$ O O O O O $any$ O $boolean$ O O O $boolean$ O $TreeNode$ O O O O O O $any$ O $complex$ O $FunctionConstructor$ O O O O O $any$ O $any$ O $TreeNode$ O O O O O O O O $any$ O $boolean$ O O O $string$ O $TreeNode$ O O O O O $any$ O $string$ O O O $any$ O $string$ O $TreeNode$ O O O O O $number$ O $TreeNode$ O O O O $TreeNode$ O $any$ O $any$ O O O O O O O $complex$ O O O $any$ O $complex$ O O O O O O $complex$ O O O O $complex$ O $any$ O $TreeNode$ O O O O $number$ O O $TreeNode$ O $number$ O O O O O O O O O O $number$ O O O $number$ O O O O O O $any$ O $any$ O O O $any$ O $number$ O O O O $any$ O $number$ O O O O O O
<s> import { Injectable } from 's' ; @ Injectable ( ) export class _UNKNOWN_ { _UNKNOWN_ : any = null ; set ( _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ ; } get ( ) { return this . _UNKNOWN_ ; } isDragging ( ) { return ! ! this . get ( ) ; } } </s>	O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O O $void$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O $any$ O O $boolean$ O O O O O O O O $any$ O O O O O O
<s> import { Component , Input , TemplateRef , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { encapsulation : ViewEncapsulation . None , selector : 's' , template : `template` , } ) export class LoadingComponent { @ Input ( ) template : TemplateRef < any > ; @ Input ( ) node : _UNKNOWN_ ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O $TreeNode$ O $any$ O O O
<s> import { Component , ElementRef , ViewEncapsulation , HostListener , AfterViewInit , OnInit , OnDestroy } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , styles : [ ] , providers : [ _UNKNOWN_ ] , template : `template` } ) export class _UNKNOWN_ implements AfterViewInit , OnInit , OnDestroy { constructor ( private elementRef , public _UNKNOWN_ ) { } ngOnInit ( ) { this . _UNKNOWN_ . init ( ) ; } ngAfterViewInit ( ) { setTimeout ( ( ) => { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . fireEvent ( { eventName : _UNKNOWN_ . initialized } ) ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . clear ( ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ . isEnabled ( ) && this . _UNKNOWN_ . totalHeight + 's' || 's' ; } @ HostListener ( 's' , [ 's' ] ) onScroll ( ) { this . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . _UNKNOWN_ ( this . elementRef . nativeElement ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O $any$ O O $string$ O O O $undefined[]$ O O O O $complex$ O O $any$ O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $ElementRef$ O O $any$ O O O $void$ O O O O O $any$ O $void$ O O O O $void$ O O O $number$ O O O O O O O $void$ O O O O O $any$ O $void$ O O $string$ O $complex$ O $string$ O O O O O O O $void$ O O O O O $any$ O $void$ O O O O $string$ O O O O O O $any$ O $boolean$ O O O O O $any$ O $number$ O O O O O O O $any$ O O O O O O O $void$ O O O O O $void$ O O O O $void$ O O O O O $any$ O $void$ O O O $any$ O $any$ O O O O O
<s> import { Component , Input , Output , OnChanges , EventEmitter , Renderer , ViewEncapsulation , ContentChild , TemplateRef , HostListener , ViewChild } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _ from 's' ; const { includes , pick } = _ ; @ Component ( { selector : 's' , providers : [ _UNKNOWN_ ] , styles : [ ] , template : `template` } ) export class _UNKNOWN_ implements OnChanges { _UNKNOWN_ : any [ ] ; _options : _UNKNOWN_ ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < any > ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < any > ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < any > ; @ ContentChild ( 's' ) _UNKNOWN_ : TemplateRef < any > ; @ ViewChild ( 's' ) _UNKNOWN_ : _UNKNOWN_ ; @ Input ( ) set nodes ( nodes : any [ ] ) { } ; @ Input ( ) set options ( options ) { } ; @ Input ( ) set focused ( value ) { this . _UNKNOWN_ . _UNKNOWN_ ( value ) ; } @ Input ( ) set state ( state ) { this . _UNKNOWN_ . setState ( state ) ; } @ Output ( ) _UNKNOWN_ ; @ Output ( ) activate ; @ Output ( ) deactivate ; @ Output ( ) select ; @ Output ( ) deselect ; @ Output ( ) focus ; @ Output ( ) blur ; @ Output ( ) updateData ; @ Output ( ) initialized ; @ Output ( ) _UNKNOWN_ ; @ Output ( ) _UNKNOWN_ ; @ Output ( ) _UNKNOWN_ ; @ Output ( ) _UNKNOWN_ ; @ Output ( ) event ; @ Output ( ) _UNKNOWN_ ; constructor ( public _UNKNOWN_ , public _UNKNOWN_ , private renderer ) { _UNKNOWN_ . _UNKNOWN_ . forEach ( ( name ) => this [ name ] = new EventEmitter ( ) ) ; _UNKNOWN_ . _UNKNOWN_ ( ( state ) => this . _UNKNOWN_ . emit ( state ) ) ; } @ HostListener ( 's' , [ 's' ] ) onKeydown ( $event ) { if ( ! this . _UNKNOWN_ . isFocused ) return ; if ( includes ( [ 's' , 's' ] , document . activeElement . tagName . toLowerCase ( ) ) ) return ; const _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , $event ) ; } @ HostListener ( 's' , [ 's' ] ) _UNKNOWN_ ( $event ) { const _UNKNOWN_ = this . renderer . _UNKNOWN_ ( $event . target , 's' , [ 's' ] ) ; if ( ! _UNKNOWN_ ) { this . _UNKNOWN_ . _UNKNOWN_ ( false ) ; } } ngOnChanges ( changes ) { this . _UNKNOWN_ . setData ( { options : changes . options && changes . options . currentValue , nodes : changes . nodes && changes . nodes . currentValue , events : pick ( this , this . _UNKNOWN_ . _UNKNOWN_ ) } ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . _UNKNOWN_ ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O $any$ O O $any$ O O $string$ O O O $complex$ O O $any$ O O $undefined[]$ O O O O $string$ O O O O O O $any$ O $any$ O $any[]$ O O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any[]$ O $any[]$ O O O O O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $boolean$ O $boolean$ O O O O $any$ O $void$ O $boolean$ O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $void$ O $any$ O O O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O O O $any$ O O $any$ O O $Renderer$ O O $any$ O $string[]$ O $void$ O O $string$ O O O O $string$ O O O $any$ O O O O $any$ O $void$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $void$ O $any$ O O O O O O O $any$ O $boolean$ O O O O O $any$ O O O O O O O $Document$ O $Element$ O $string$ O $string$ O O O O O O O $TreeNode$ O O O $any$ O $TreeNode$ O O O O O $any$ O $boolean$ O $TreeNode$ O $any$ O O O O $any$ O O O O O O O $void$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O O O $any$ O $void$ O O O O O O $void$ O $any$ O O O O $any$ O $void$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $string[]$ O O O O O $void$ O O O O O $any$ O $void$ O O O O O O
<s> import { Component , Input , ViewEncapsulation , TemplateRef } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , styles : [ ] , template : `template` } ) export class _UNKNOWN_ { @ Input ( ) node : _UNKNOWN_ ; @ Input ( ) index : number ; @ Input ( ) templates : any ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $undefined[]$ O O O O $string$ O O O O O O $any$ O O $any$ O O $TreeNode$ O $any$ O O $any$ O O $number$ O O O O $any$ O O $any$ O O O O O
<s> import { Component , Input , ViewEncapsulation , TemplateRef } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` , } ) export class _UNKNOWN_ { @ Input ( ) node : _UNKNOWN_ ; @ Input ( ) index : number ; @ Input ( ) template : TemplateRef < any > ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O O $any$ O O $TreeNode$ O $any$ O O $any$ O O $number$ O O O O $any$ O O $any$ O $any$ O O O O O O
<s> import { Component , Input , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , styles : [ ] , template : `template` } ) export class _UNKNOWN_ { @ Input ( ) node : _UNKNOWN_ ; @ Input ( ) dropIndex : number ; onDrop ( $event ) { this . node . _UNKNOWN_ ( 's' , $event . event , { from : $event . element , to : { parent : this . node , index : this . dropIndex } } ) ; } _UNKNOWN_ ( element , $event ) { return this . node . options . _UNKNOWN_ ( element , { parent : this . node , index : this . dropIndex } , $event ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $undefined[]$ O O O O $string$ O O O O O O $any$ O O $any$ O O $TreeNode$ O $any$ O O $any$ O O $number$ O O O $void$ O $any$ O O O O $TreeNode$ O $void$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $complex$ O O $TreeNode$ O O O $TreeNode$ O $number$ O O O $number$ O O O O O $boolean$ O $any$ O $any$ O O O O O $TreeNode$ O $any$ O $boolean$ O $any$ O O $TreeNode$ O O O $TreeNode$ O $number$ O O O $number$ O O $any$ O O O O O
<s> import { Component , Input , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , styles : [ ] , template : `template` } ) export class _UNKNOWN_ { @ Input ( ) node : _UNKNOWN_ ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $undefined[]$ O O O O $string$ O O O O O O $any$ O O $any$ O O $TreeNode$ O $any$ O O O
<s> import { Component , Input , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , styles : [ ] , template : `template` } ) export class _UNKNOWN_ { @ Input ( ) node : _UNKNOWN_ ; @ Input ( ) templates : any ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $undefined[]$ O O O O $string$ O O O O O O $any$ O O $any$ O O $TreeNode$ O $any$ O O $any$ O O $any$ O O O O O
<s> import { Component , Input , ViewEncapsulation , OnInit , OnDestroy } from 's' ; import { _UNKNOWN_ } from 's' ; import { observable , computed , action } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , template : `template` } ) export class _UNKNOWN_ implements OnInit , OnDestroy { @ Input ( ) get nodes ( ) { return this . _UNKNOWN_ ; } set nodes ( nodes ) { this . _UNKNOWN_ ( nodes ) ; } @ Input ( ) _UNKNOWN_ : _UNKNOWN_ ; @ observable _UNKNOWN_ ; private _UNKNOWN_ : _UNKNOWN_ ; @ Input ( ) templates ; @ observable _UNKNOWN_ : _UNKNOWN_ [ ] ; @ computed get marginTop ( ) : string { const _UNKNOWN_ = this . _UNKNOWN_ && this . _UNKNOWN_ . length && this . _UNKNOWN_ [ 0 ] ; const _UNKNOWN_ = _UNKNOWN_ ? _UNKNOWN_ . position - _UNKNOWN_ . parent . position - _UNKNOWN_ . parent . _UNKNOWN_ ( ) : 0 ; return `template` ; } _UNKNOWN_ = [ ] ; @ action _UNKNOWN_ ( nodes ) { this . _UNKNOWN_ = nodes ; } ngOnInit ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ; this . _UNKNOWN_ = [ _UNKNOWN_ ( ( ) => { return this . _UNKNOWN_ . _UNKNOWN_ ( this . nodes ) . map ( n => n . index ) ; } , ( _UNKNOWN_ ) => { this . _UNKNOWN_ = _UNKNOWN_ . map ( ( i ) => this . nodes [ i ] ) ; } , { _UNKNOWN_ : true , _UNKNOWN_ : true } ) , _UNKNOWN_ ( ( ) => this . nodes , ( nodes ) => { this . _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ( nodes ) ; } ) ] ; } ngOnDestroy ( ) { this . _UNKNOWN_ . forEach ( d => d ( ) ) ; } _UNKNOWN_ ( index , node ) { return node . id ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O O $void$ O $any$ O O O O $any$ O O $any$ O $any$ O O $any$ $any$ O O $any$ O $any$ O O $any$ O O $any$ O O $any$ $TreeNode[]$ O $any$ O O O O $any$ O $string$ O O O O O O $TreeNode$ O O O $TreeNode[]$ O O O $TreeNode[]$ O $number$ O O O $TreeNode[]$ O O O O O $number$ O $TreeNode$ O $TreeNode$ O $number$ O $TreeNode$ O $TreeNode$ O $number$ O $TreeNode$ O $TreeNode$ O $number$ O O O O O O O O O $any[]$ O O O O O $any$ $void$ O $any$ O O O O $any$ O $any$ O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O $any[]$ O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $TreeNode[]$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O $boolean$ O O O $boolean$ O O O O O $any$ O O O O O O $any$ O O $any$ O O O O O $TreeNode[]$ O O O $any$ O $any$ O $any$ O O O O O O O $void$ O O O O O $any[]$ O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O
<s> import { Component , Input , ViewEncapsulation , TemplateRef } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , styles : [ ] , template : `template` } ) export class _UNKNOWN_ { @ Input ( ) node : _UNKNOWN_ ; @ Input ( ) index : number ; @ Input ( ) templates : any ; constructor ( ) { } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $undefined[]$ O O O O $string$ O O O O O O $any$ O O $any$ O O $TreeNode$ O $any$ O O $any$ O O $number$ O O O O $any$ O O $any$ O O O O O O O O O O
<s> import { Component , Input , ViewEncapsulation } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , encapsulation : ViewEncapsulation . None , styles : [ ] , template : `template` } ) export class _UNKNOWN_ { @ Input ( ) node : _UNKNOWN_ ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $undefined[]$ O O O O $string$ O O O O O O $any$ O O $any$ O O $TreeNode$ O $any$ O O O
<s> import { Directive , Output , Input , EventEmitter , HostListener , Renderer , ElementRef } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = 's' ; const _UNKNOWN_ = 's' ; @ Directive ( { selector : 's' } ) export class _UNKNOWN_ { @ Output ( 's' ) _UNKNOWN_ = new EventEmitter ( ) ; @ Output ( 's' ) _UNKNOWN_ = new EventEmitter ( ) ; @ Output ( 's' ) _UNKNOWN_ = new EventEmitter ( ) ; @ Output ( 's' ) _UNKNOWN_ = new EventEmitter ( ) ; private _UNKNOWN_ = ( element , $event ) => true ; @ Input ( ) set _UNKNOWN_ ( _UNKNOWN_ ) { if ( _UNKNOWN_ instanceof Function ) { this . _UNKNOWN_ = _UNKNOWN_ ; } else this . _UNKNOWN_ = ( element , $event ) => _UNKNOWN_ ; } _UNKNOWN_ ( $event ) { return this . _UNKNOWN_ ( this . _UNKNOWN_ . get ( ) , $event ) ; } constructor ( private el , private renderer , private _UNKNOWN_ ) { } @ HostListener ( 's' , [ 's' ] ) onDragOver ( $event ) { if ( ! this . _UNKNOWN_ ( $event ) ) return this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . emit ( { event : $event , element : this . _UNKNOWN_ . get ( ) } ) ; $event . preventDefault ( ) ; this . addClass ( ) ; } @ HostListener ( 's' , [ 's' ] ) onDragEnter ( $event ) { if ( ! this . _UNKNOWN_ ( $event ) ) return ; this . _UNKNOWN_ . emit ( { event : $event , element : this . _UNKNOWN_ . get ( ) } ) ; } @ HostListener ( 's' , [ 's' ] ) onDragLeave ( $event ) { if ( ! this . _UNKNOWN_ ( $event ) ) return this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ . emit ( { event : $event , element : this . _UNKNOWN_ . get ( ) } ) ; this . removeClass ( ) ; } @ HostListener ( 's' , [ 's' ] ) onDrop ( $event ) { if ( ! this . _UNKNOWN_ ( $event ) ) return ; $event . preventDefault ( ) ; this . _UNKNOWN_ . emit ( { event : $event , element : this . _UNKNOWN_ . get ( ) } ) ; this . removeClass ( ) ; this . _UNKNOWN_ . set ( null ) ; } private addClass ( ) { this . renderer . setElementClass ( this . el . nativeElement , _UNKNOWN_ , true ) ; } private removeClass ( ) { this . renderer . setElementClass ( this . el . nativeElement , _UNKNOWN_ , false ) ; } private _UNKNOWN_ ( ) { this . renderer . setElementClass ( this . el . nativeElement , _UNKNOWN_ , true ) ; } private _UNKNOWN_ ( ) { this . renderer . setElementClass ( this . el . nativeElement , _UNKNOWN_ , false ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O O O O O O O $any$ O O $string$ O O O O O O $any$ O O $any$ O O O $any$ O O $any$ O O O O $any$ O O O $any$ O O $any$ O O O O $any$ O O O $any$ O O $any$ O O O O $any$ O O O $any$ O O $any$ O O O O $boolean$ O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $FunctionConstructor$ O O O O $boolean$ O $any$ O O O O O $boolean$ O O $any$ O $any$ O O $any$ O O $boolean$ O $any$ O O O O O $boolean$ O O O $any$ O $any$ O O O $any$ O O O O O O $ElementRef$ O O $Renderer$ O O $any$ O O O O $any$ O O O O O O O $void$ O $any$ O O O O O O O $boolean$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $void$ O O O O O $any$ O O O O O O O $void$ O $any$ O O O O O O O $boolean$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $void$ O $any$ O O O O O O O $boolean$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $void$ O O O O O $any$ O O O O O O O $void$ O $any$ O O O O O O O $boolean$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O $void$ O O O O O $any$ O $void$ O O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O
<s> import { Directive , Input , HostListener , Renderer , ElementRef , DoCheck } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = 's' ; @ Directive ( { selector : 's' } ) export class _UNKNOWN_ implements DoCheck { @ Input ( 's' ) _UNKNOWN_ ; @ Input ( ) _UNKNOWN_ ; constructor ( private el , private renderer , private _UNKNOWN_ ) { } ngDoCheck ( ) { this . renderer . _UNKNOWN_ ( this . el . nativeElement , 's' , this . _UNKNOWN_ ? 's' : 's' ) ; } @ HostListener ( 's' , [ 's' ] ) onDragStart ( ev ) { ev . dataTransfer . setData ( 's' , ev . target . id ) ; this . _UNKNOWN_ . set ( this . _UNKNOWN_ ) ; if ( this . _UNKNOWN_ . _UNKNOWN_ ) { this . _UNKNOWN_ . _UNKNOWN_ ( 's' , ev ) ; } } @ HostListener ( 's' , [ 's' ] ) onDrag ( ev ) { if ( this . _UNKNOWN_ . _UNKNOWN_ ) { this . _UNKNOWN_ . _UNKNOWN_ ( 's' , ev ) ; } } @ HostListener ( 's' ) onDragEnd ( ) { if ( this . _UNKNOWN_ . _UNKNOWN_ ) { this . _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; } this . _UNKNOWN_ . set ( null ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O O $any$ O O O $any$ O O $any$ O O $any$ O O O O $ElementRef$ O O $Renderer$ O O $any$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $void$ O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O O O O $void$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O O O $void$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $void$ O O O O O O O
<s> import { Directive , Input , HostListener , Renderer , ElementRef , DoCheck , TemplateRef , ViewContainerRef } from 's' ; const _UNKNOWN_ = 0 ; @ Directive ( { selector : 's' } ) export class _UNKNOWN_ { private _isOpen : boolean ; @ Input ( 's' ) _UNKNOWN_ : number ; @ Input ( 's' ) _UNKNOWN_ : number ; @ Input ( 's' ) isEnabled : boolean ; @ Input ( 's' ) set isOpen ( value ) { if ( value ) { this . _UNKNOWN_ ( ) ; if ( this . isEnabled && this . _isOpen === false ) { this . _UNKNOWN_ ( ) ; } } else { this . isEnabled ? this . _UNKNOWN_ ( ) : this . _UNKNOWN_ ( ) ; } this . _isOpen = ! ! value ; } ; private _UNKNOWN_ : any ; constructor ( private renderer , private templateRef < any > , private viewContainerRef ) { } private _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) return ; this . _UNKNOWN_ = this . viewContainerRef . createEmbeddedView ( this . templateRef ) . rootNodes [ 0 ] ; } private _UNKNOWN_ ( ) { this . viewContainerRef . clear ( ) ; this . _UNKNOWN_ = null ; } private _UNKNOWN_ ( ) { let delta = this . _UNKNOWN_ ; let ease = this . _UNKNOWN_ ; let maxHeight = 0 ; this . renderer . setElementStyle ( this . _UNKNOWN_ , 's' , `template` ) ; setTimeout ( ( ) => { const i = setInterval ( ( ) => { if ( ! this . _isOpen || ! this . _UNKNOWN_ ) return clearInterval ( i ) ; maxHeight += delta ; const _UNKNOWN_ = Math . round ( maxHeight ) ; this . renderer . setElementStyle ( this . _UNKNOWN_ , 's' , `template` ) ; const height = this . _UNKNOWN_ . getBoundingClientRect ? this . _UNKNOWN_ . getBoundingClientRect ( ) . height : 0 ; delta *= ease ; ease *= _UNKNOWN_ ; if ( height < _UNKNOWN_ ) { this . renderer . setElementStyle ( this . _UNKNOWN_ , 's' , null ) ; clearInterval ( i ) ; } } , 0 ) ; } ) ; } private _UNKNOWN_ ( ) { if ( ! this . _UNKNOWN_ ) return ; let delta = this . _UNKNOWN_ ; let ease = this . _UNKNOWN_ ; let height = this . _UNKNOWN_ . getBoundingClientRect ( ) . height ; const i = setInterval ( ( ) => { if ( this . _isOpen || ! this . _UNKNOWN_ ) return clearInterval ( i ) ; height -= delta ; this . renderer . setElementStyle ( this . _UNKNOWN_ , 's' , `template` ) ; delta *= ease ; ease *= _UNKNOWN_ ; if ( height <= 0 ) { this . viewContainerRef . clear ( ) ; this . _UNKNOWN_ = null ; clearInterval ( i ) ; } } , 0 ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O $string$ O O O O O O $any$ O O $boolean$ O O O O $any$ O O O $number$ O O O O $any$ O O O $number$ O O O O $any$ O O O $boolean$ O O O O $any$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O O O O $void$ O O O O O O O $boolean$ O O O $boolean$ O O O O O O $void$ O O O O O O O O O $boolean$ O O O $void$ O O O O O $void$ O O O O O O $boolean$ O O O $boolean$ O O O O $any$ O O O O O O $Renderer$ O O $TemplateRef$ O O O O O $ViewContainerRef$ O O O O $void$ O O O O O O O $any$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O $any$ O O O O O O $void$ O O O O O $any$ O $any$ O O O O O $any$ O O O O O $void$ O O O O $number$ O O O $number$ O O $number$ O O O $number$ O O $number$ O O O O O $any$ O $any$ O O O $any$ O O O O O O $number$ O O O O O O $number$ O $number$ O O O O O O O O O O $boolean$ O O O O $any$ O O $void$ O $number$ O O $number$ O $number$ O O $number$ O $Math$ O $number$ O $number$ O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O $number$ O $number$ O $number$ O O O O O $any$ O $number$ O O O O $any$ O $any$ O O O $any$ O O O O O O $void$ O $number$ O O O O O O O O O O O O O $void$ O O O O O O O O $any$ O O O O $number$ O O O $number$ O O $number$ O O O $number$ O O $any$ O O O $any$ O $any$ O O O $any$ O O $number$ O $number$ O O O O O O O O O $boolean$ O O O O $any$ O O $void$ O $number$ O O $any$ O $number$ O O O $any$ O $any$ O O O $any$ O O O O O O $number$ O $number$ O $number$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O $void$ O $number$ O O O O O O O O O O O
<s> if ( typeof Element !== 's' ) { if ( typeof Element . prototype . matches !== 's' ) { Element . prototype . matches = Element . prototype . _UNKNOWN_ || Element . prototype [ 's' ] || Element . prototype . _UNKNOWN_ || function matches ( selector ) { let element = this ; let elements = ( element . document || element . ownerDocument ) . querySelectorAll ( selector ) ; let index = 0 ; while ( elements [ index ] && elements [ index ] !== element ) { ++ index ; } return Boolean ( elements [ index ] ) ; } ; } if ( typeof Element . prototype [ 's' ] !== 's' ) { Element . prototype [ 's' ] = function closest ( selector ) { let element = this ; while ( element && element . nodeType === 0 ) { if ( element . matches ( selector ) ) { return element ; } element = element . parentNode ; } return null ; } ; } } </s>	O O O O $complex$ O O O O O O O $complex$ O $Element$ O $boolean$ O O O O $complex$ O $Element$ O $boolean$ O $complex$ O $Element$ O $any$ O $complex$ O $Element$ O O O O $complex$ O $Element$ O $boolean$ O O $boolean$ O $string$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $string$ O O O $number$ O O O O O $any$ O $number$ O O $any$ O $number$ O O $any$ O O O $number$ O O O $BooleanConstructor$ O $any$ O $number$ O O O O O O O O O $complex$ O $Element$ O O O O O O O $complex$ O $Element$ O O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O
<s> import 's' ; </s>	O O O O O
<s> import { NgModule } from 's' ; import { CommonModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { KEYS } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { LoadingComponent } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import 's' ; @ NgModule ( { declarations : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , LoadingComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , exports : [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , LoadingComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule , _UNKNOWN_ ] , providers : [ _UNKNOWN_ ] } ) export class _UNKNOWN_ { } export { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , KEYS , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , LoadingComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $complex$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O
<s> export function deprecated ( methodName , _UNKNOWN_ ) { console . warn ( `template` ) ; } </s>	O O O $void$ O $any$ O $any$ O O $Console$ O $void$ O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class AppComponent { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import 's' ; import { APP_BASE_HREF } from 's' ; import { getTestBed , TestBed , async } from 's' ; import { RouterTestingModule } from 's' ; import { AppComponent } from 's' ; import { By } from 's' ; import { expect } from 's' ; import { spy } from 's' ; describe ( `template` , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { imports : [ RouterTestingModule ] , declarations : [ AppComponent ] , providers : [ { provide : APP_BASE_HREF , useValue : 's' } ] } ) . compileComponents ( ) ; } ) ) ; afterEach ( ( ) => { getTestBed ( ) . resetTestingModule ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( AppComponent ) ; fixture . detectChanges ( ) ; const 0 = fixture . debugElement . query ( By . css ( 's' ) ) ; expect ( 0 . nativeElement . textContent ) . to . equal ( 's' ) ; } ) ; } ) ; </s>	O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O O $complex$ O O $any$ O O $complex$ O O O $any$ O $any$ O $string$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O O
<s> import 's' ; import { TestBed } from 's' ; import { BrowserDynamicTestingModule , platformBrowserDynamicTesting } from 's' ; TestBed . initTestEnvironment ( BrowserDynamicTestingModule , platformBrowserDynamicTesting ( ) ) ; </s>	O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { content : string ; _UNKNOWN_ ( ) { _UNKNOWN_ . call ( 's' , this . content ) ; this . content = null ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $void$ O O O $any$ O $any$ O O O O O $string$ O O O O $string$ O O O O O O
<s> export interface Todo { _id ? : string ; content ? : string ; } </s>	O O O $any$ O $string$ O O O O $string$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { Todo } from 's' ; export const _UNKNOWN_ = new _UNKNOWN_ . Collection < Todo > ( 's' ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O
<s> import { Component , OnInit , OnDestroy } from 's' ; import { Observable , Subscription } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Todo } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class _UNKNOWN_ implements OnInit , OnDestroy { _UNKNOWN_ : Observable < Todo [ ] > ; _UNKNOWN_ : Subscription ; ngOnInit ( ) { this . _UNKNOWN_ = _UNKNOWN_ . subscribe ( 's' ) . subscribe ( ( ) => { this . _UNKNOWN_ = _UNKNOWN_ . find ( ) ; } ) ; } ngOnDestroy ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } _UNKNOWN_ ( _id ) { _UNKNOWN_ . call ( 's' , _id ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $void$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O $void$ O $string$ O O $any$ O $any$ O O O $string$ O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { BrowserModule } from 's' ; import { FormsModule } from 's' ; import { RouterModule } from 's' ; import { AppComponent } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ BrowserModule , FormsModule , RouterModule . forRoot ( [ { path : 's' , component : _UNKNOWN_ } , { path : 's' , component : _UNKNOWN_ } , { path : 's' , redirectTo : 's' , pathMatch : 's' } , { path : 's' , component : _UNKNOWN_ } ] ) ] , declarations : [ AppComponent , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , bootstrap : [ AppComponent ] } ) export class AppModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $any$ O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import 's' ; import { getTestBed , TestBed , async } from 's' ; import { _UNKNOWN_ } from 's' ; import { By } from 's' ; import { expect } from 's' ; import { spy } from 's' ; describe ( `template` , ( ) => { beforeEach ( async ( ( ) => { TestBed . configureTestingModule ( { declarations : [ _UNKNOWN_ ] , } ) . compileComponents ( ) ; } ) ) ; afterEach ( ( ) => { getTestBed ( ) . resetTestingModule ( ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; fixture . detectChanges ( ) ; const a = fixture . debugElement . query ( By . css ( 's' ) ) ; expect ( a . nativeElement . textContent ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { const fixture = TestBed . createComponent ( _UNKNOWN_ ) ; fixture . detectChanges ( ) ; const _UNKNOWN_ = fixture . debugElement . query ( By . css ( 's' ) ) ; const { color } = getComputedStyle ( _UNKNOWN_ . nativeElement ) ; expect ( color ) . to . equal ( 's' ) ; } ) } ) ; </s>	O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $string$ O O $CSSStyleDeclaration$ O $any$ O $any$ O O $any$ O $string$ O O $any$ O $any$ O O O O O O O O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import 's' ; import 's' ; </s>	O O O O O O O O
<s> import 's' ; import { _UNKNOWN_ } from 's' ; import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; _UNKNOWN_ . _UNKNOWN_ ( ( ) => { if ( _UNKNOWN_ . isProduction ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ; } ) ; </s>	O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; _UNKNOWN_ . methods ( { _UNKNOWN_ ( content ) { _UNKNOWN_ . insert ( { content } ) ; } , _UNKNOWN_ ( _id ) { _UNKNOWN_ . remove ( { _id } ) } } ) </s>	O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O $void$ O $string$ O O $any$ O $any$ O O $string$ O O O O O $void$ O $string$ O O $any$ O $any$ O O $string$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; _UNKNOWN_ . publish ( 's' , function ( ) { return _UNKNOWN_ . find ( { } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O O
<s> import 's' ; import 's' </s>	O O O O O O O
<s> export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = [ "s" ] ; export interface Profile { name ? : string ; picture ? : string ; _UNKNOWN_ ? : string ; } export enum _UNKNOWN_ { _UNKNOWN_ = < any > 's' , _UNKNOWN_ = < any > 's' , _UNKNOWN_ = < any > 's' } export interface _UNKNOWN_ { _id ? : string ; title ? : string ; picture ? : string ; _UNKNOWN_ ? : Message ; _UNKNOWN_ ? : string [ ] ; } export interface Message { _id ? : string ; _UNKNOWN_ ? : string ; _UNKNOWN_ ? : string ; content ? : string ; createdAt ? : Date ; type ? : _UNKNOWN_ _UNKNOWN_ ? : string ; } export interface User extends _UNKNOWN_ . User { profile ? : Profile ; _UNKNOWN_ ? : string ; } export interface Location { lat : number ; lng : number ; zoom : number ; } export interface _UNKNOWN_ { _id ? : string ; complete ? : boolean ; extension ? : string ; name ? : string ; progress ? : number ; size ? : number ; store ? : string ; token ? : string ; type ? : string ; _UNKNOWN_ ? : Date ; _UNKNOWN_ ? : boolean ; url ? : string ; userId ? : string ; } </s>	O O O O O O O O O $string[]$ O O O O O O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O $Message$ O O $any$ O $string[]$ O O O O O O O O O $any$ O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $Date$ O O $DateConstructor$ O $any$ O O $any$ $string$ O O O O O O O $any$ O $any$ O $any$ O $Profile$ O O $any$ O $string$ O O O O O O O $any$ O $number$ O O O $number$ O O O $number$ O O O O O O $any$ O $string$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $number$ O O O O $number$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $Date$ O O $DateConstructor$ O $boolean$ O O O O $string$ O O O O $string$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { Message } from 's' ; export const _UNKNOWN_ = new _UNKNOWN_ . Collection < Message > ( 's' ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = new _UNKNOWN_ . Collection < _UNKNOWN_ > ( 's' ) ; _UNKNOWN_ . collection . after . remove ( function ( userId , doc ) { _UNKNOWN_ . collection . remove ( { _UNKNOWN_ : doc . _id } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ < T > extends _UNKNOWN_ . Collection < T > { _UNKNOWN_ ( selector ? : Object | string , platform ? ) : string ; } export const _UNKNOWN_ = new _UNKNOWN_ . Collection < _UNKNOWN_ > ( 's' ) as _UNKNOWN_ < _UNKNOWN_ > ; export const _UNKNOWN_ = new _UNKNOWN_ . store . _UNKNOWN_ ( { collection : _UNKNOWN_ . collection , name : 's' , filter : new _UNKNOWN_ . Filter ( { contentTypes : [ 's' ] } ) , permissions : new _UNKNOWN_ . _UNKNOWN_ ( { insert : _UNKNOWN_ , update : _UNKNOWN_ , remove : _UNKNOWN_ } ) , _UNKNOWN_ ( from , to ) { const transform = _UNKNOWN_ ( ) . resize ( 0 , 0 ) . min ( ) . crop ( ) . _UNKNOWN_ ( 's' , { quality : 0 } ) ; from . pipe ( transform ) . pipe ( to ) ; } } ) ; _UNKNOWN_ . _UNKNOWN_ = function ( selector , platform = "s" ) { const prefix = platform === "s" ? "s" : platform === "s" ? "s" : "s" ; const picture = this . findOne ( selector ) || { } ; return picture . url || prefix + _UNKNOWN_ ; } ; function _UNKNOWN_ ( userId ) { return _UNKNOWN_ . _UNKNOWN_ || ! ! userId ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $string$ O $complex$ O O $ObjectConstructor$ O O O $string$ $string$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $any$ O O $any$ O $any$ O O $string[]$ O O O O O O O $any$ O O $any$ O $any$ O O $boolean$ O $boolean$ O $boolean$ O $boolean$ O $boolean$ O $boolean$ O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O O O O $number$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O $string$ O O O $complex$ O $string$ O O O O O O O $string$ O O O O O $string$ O O O O O O O O $any$ O O O $any$ O $complex$ O O O O O O $any$ O $any$ O O O O O O O O $boolean$ O $string$ O O O $any$ O $any$ O O O $string$ O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { User } from 's' ; import { _UNKNOWN_ } from 's' ; export const Users = _UNKNOWN_ . _UNKNOWN_ < User > ( _UNKNOWN_ . users ) ; _UNKNOWN_ . users . after . update ( function ( userId , doc , fieldNames , modifier , options ) { if ( ! doc . profile ) return ; if ( ! this . previous . profile ) return ; if ( doc . profile . _UNKNOWN_ == this . previous . profile . _UNKNOWN_ ) return ; _UNKNOWN_ . collection . remove ( { _id : this . previous . profile . _UNKNOWN_ } ) ; } , { _UNKNOWN_ : true } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Users } from 's' ; declare const _UNKNOWN_ ; _UNKNOWN_ . _UNKNOWN_ ( ( ) => { if ( _UNKNOWN_ . settings ) { Object . assign ( _UNKNOWN_ . _options , _UNKNOWN_ . settings [ 's' ] ) ; _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ . settings [ 's' ] ; } const services = _UNKNOWN_ . settings . private . _UNKNOWN_ ; if ( services ) { for ( let service in services ) { _UNKNOWN_ . configurations . _UNKNOWN_ ( { service : service } , { $set : services [ service ] } ) ; } } if ( Users . collection . find ( ) . count ( ) > 0 ) { return ; } let picture = _UNKNOWN_ ( { name : 's' , url : 's' } ) ; _UNKNOWN_ . _UNKNOWN_ ( { phone : 's' , profile : { name : 's' , _UNKNOWN_ : picture . _id } } ) ; picture = _UNKNOWN_ ( { name : 's' , url : 's' } ) ; _UNKNOWN_ . _UNKNOWN_ ( { phone : 's' , profile : { name : 's' , _UNKNOWN_ : picture . _id } } ) ; picture = _UNKNOWN_ ( { name : 's' , url : 's' } ) ; _UNKNOWN_ . _UNKNOWN_ ( { phone : 's' , profile : { name : 's' , _UNKNOWN_ : picture . _id } } ) ; picture = _UNKNOWN_ ( { name : 's' , url : 's' } ) ; _UNKNOWN_ . _UNKNOWN_ ( { phone : 's' , profile : { name : 's' , _UNKNOWN_ : picture . _id } } ) ; picture = _UNKNOWN_ ( { name : 's' , url : 's' } ) ; _UNKNOWN_ . _UNKNOWN_ ( { phone : 's' , profile : { name : 's' , _UNKNOWN_ : picture . _id } } ) ; } ) ; function _UNKNOWN_ ( options : { name : string , url : string } ) { const description = { name : options . name } ; return _UNKNOWN_ . call ( 's' , options . url , description , 's' ) ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O $ObjectConstructor$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O $string$ O $any$ O O $any$ O $any$ O $any$ O O $string$ O $string$ O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O O $string$ O O O $string$ O $any$ O $string$ O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O O $string$ O O O $string$ O $any$ O $string$ O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O O $string$ O O O $string$ O $any$ O $string$ O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O O $string$ O O O $string$ O $any$ O $string$ O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O O $string$ O O O $string$ O $any$ O $string$ O O O O O O O O $any$ O $complex$ O O $string$ O O O $string$ O O O O O O $complex$ O O $string$ O $complex$ O $string$ O O O $any$ O $any$ O O O $complex$ O $string$ O $complex$ O O O O O O
<s> import fetch from 's' ; export interface _UNKNOWN_ { title : string ; text : string ; } export class _UNKNOWN_ { private key : string = _UNKNOWN_ . settings . private . _UNKNOWN_ . key ; _UNKNOWN_ ( notification , destination ) { const body = { notification : notification , to : destination } ; const options = { method : 's' , body : JSON . stringify ( body ) , headers : { "s" : "s" , _UNKNOWN_ : `template` } , } ; return fetch ( "s" , options ) ; } } export const _UNKNOWN_ = new _UNKNOWN_ ( ) ; </s>	O O $any$ O O O O O $any$ O $string$ O O O $string$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O $complex$ O O $any$ O $any$ O $string$ O $string$ O O O $complex$ O O $string$ O O O $string$ O $JSON$ O $complex$ O $complex$ O O $complex$ O O O O O O $string$ O O O O O O O $any$ O O O $complex$ O O O O O O $any$ O O $any$ O O O O
<s> import { Users } from "s" ; import { _UNKNOWN_ } from "s" ; export interface _UNKNOWN_ { name ? : string ; pictureUrl ? : string ; } ; export class _UNKNOWN_ { private _UNKNOWN_ : string = _UNKNOWN_ . settings . private . _UNKNOWN_ . _UNKNOWN_ . appId ; private _UNKNOWN_ : string = _UNKNOWN_ . settings . private . _UNKNOWN_ . _UNKNOWN_ . secret ; constructor ( ) { } async _UNKNOWN_ ( ) < string > { try { return ( await _UNKNOWN_ . api ( `template` ) ) . access_token ; } catch ( e ) { throw new _UNKNOWN_ . Error ( 's' , 's' ) ; } } async _UNKNOWN_ ( token ) < boolean > { try { return ( await _UNKNOWN_ . api ( `template` ) ) . data . _UNKNOWN_ ; } catch ( e ) { console . error ( e ) ; return false ; } } async _UNKNOWN_ ( token ) < string > { try { return ( await _UNKNOWN_ . api ( `template` ) ) . access_token ; } catch ( e ) { throw new _UNKNOWN_ . Error ( 's' , 's' ) ; } } async getAccessToken ( user ) < string > { try { const _UNKNOWN_ = await Users . findOne ( user ) . services . _UNKNOWN_ ; if ( _UNKNOWN_ . accessToken ) { return _UNKNOWN_ . accessToken ; } else { throw new Error ( ) ; } } catch ( e ) { throw new _UNKNOWN_ . Error ( 's' , 's' ) ; } } async _UNKNOWN_ ( accessToken , user ? ) < any > { try { const params = { limit : 0 } ; let _UNKNOWN_ : string [ ] = [ ] ; let result ; const fb = _UNKNOWN_ . _UNKNOWN_ ( accessToken ) ; do { result = await fb . api ( `template` , params ) ; _UNKNOWN_ = _UNKNOWN_ . concat ( result . data ) ; params . after = result . paging && result . paging . _UNKNOWN_ && result . paging . _UNKNOWN_ . after ; } while ( result . paging && result . paging . next ) ; return _UNKNOWN_ ; } catch ( e ) { console . error ( e ) ; throw new _UNKNOWN_ . Error ( 's' , 's' ) } } async _UNKNOWN_ ( accessToken , user ? ) < _UNKNOWN_ > { try { const params = { fields : 's' } ; let profile = { } ; const fb = _UNKNOWN_ . _UNKNOWN_ ( accessToken ) ; const result = await fb . api ( `template` , params ) ; profile . name = result . name ; profile . pictureUrl = result . picture . data . url ; return profile ; } catch ( e ) { console . error ( e ) ; throw new _UNKNOWN_ . Error ( 's' , 's' ) } } } export const _UNKNOWN_ = new _UNKNOWN_ ( ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $string$ O O O O $string$ O O O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $Promise$ O O O O O O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O $Promise$ O $string$ O O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $Console$ O $void$ O $any$ O O O O O O O O $Promise$ O $string$ O O O O O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O $Promise$ O $string$ O O O O O O O O $any$ O O $any$ O $any$ O $string$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $ErrorConstructor$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O $Promise$ O $string$ O $string$ $string$ O O O O O O O O $any$ O O $number$ O O O O O $string[]$ O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O O $any$ O $any$ O O O $any$ O O $string[]$ O $string[]$ O $complex$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $string[]$ O O O O $any$ O O $Console$ O $void$ O $any$ O O O O $any$ O $any$ O O O O O O O O $Promise$ O $string$ O $string$ $string$ O O $any$ O O O O O $any$ O O $string$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O O $any$ O $any$ O O O $any$ O O $any$ O $string$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O $Console$ O $void$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O $any$ O O $any$ O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , Profile } from 's' ; import { check , Match } from 's' ; import { Users } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; const _UNKNOWN_ = Match . _UNKNOWN_ ( ( str ) => { check ( str , String ) ; return str . length > 0 ; } ) ; _UNKNOWN_ . methods ( { _UNKNOWN_ ( _UNKNOWN_ ) { if ( ! this . userId ) { throw new _UNKNOWN_ . Error ( 's' , 's' ) ; } check ( _UNKNOWN_ , _UNKNOWN_ ) ; if ( _UNKNOWN_ === this . userId ) { throw new _UNKNOWN_ . Error ( 's' , 's' ) ; } const _UNKNOWN_ = ! ! _UNKNOWN_ . collection . find ( { _UNKNOWN_ : { _UNKNOWN_ : [ this . userId , _UNKNOWN_ ] } } ) . count ( ) ; if ( _UNKNOWN_ ) { throw new _UNKNOWN_ . Error ( 's' , 's' ) ; } const chat = { _UNKNOWN_ : [ this . userId , _UNKNOWN_ ] } ; _UNKNOWN_ . insert ( chat ) ; } , _UNKNOWN_ ( _UNKNOWN_ ) { if ( ! this . userId ) { throw new _UNKNOWN_ . Error ( 's' , 's' ) ; } check ( _UNKNOWN_ , _UNKNOWN_ ) ; const _UNKNOWN_ = ! ! _UNKNOWN_ . collection . find ( _UNKNOWN_ ) . count ( ) ; if ( ! _UNKNOWN_ ) { throw new _UNKNOWN_ . Error ( 's' , 's' ) ; } _UNKNOWN_ . remove ( _UNKNOWN_ ) ; } , _UNKNOWN_ ( profile ) { if ( ! this . userId ) throw new _UNKNOWN_ . Error ( 's' , 's' ) ; check ( profile , { name : _UNKNOWN_ , _UNKNOWN_ : Match . _UNKNOWN_ ( _UNKNOWN_ ) } ) ; _UNKNOWN_ . users . update ( this . userId , { $set : { profile } } ) ; } , _UNKNOWN_ ( type , _UNKNOWN_ , content ) { if ( ! this . userId ) throw new _UNKNOWN_ . Error ( 's' , 's' ) ; check ( type , Match . _UNKNOWN_ ( String , [ _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ ] ) ) ; check ( _UNKNOWN_ , _UNKNOWN_ ) ; check ( content , _UNKNOWN_ ) ; const _UNKNOWN_ = ! ! _UNKNOWN_ . collection . find ( _UNKNOWN_ ) . count ( ) ; if ( ! _UNKNOWN_ ) { throw new _UNKNOWN_ . Error ( 's' , 's' ) ; } const userId = this . userId ; const _UNKNOWN_ = Users . collection . findOne ( { _id : userId } ) . profile . name ; const _UNKNOWN_ = _UNKNOWN_ . collection . findOne ( { _id : _UNKNOWN_ } ) . _UNKNOWN_ ; const tokens : string [ ] = Users . collection . find ( { _id : { _UNKNOWN_ : _UNKNOWN_ , _UNKNOWN_ : [ userId ] } , _UNKNOWN_ : { _UNKNOWN_ : true } } ) . map ( ( el ) => el . _UNKNOWN_ ) ; for ( let token of tokens ) { console . log ( "s" ) ; _UNKNOWN_ . _UNKNOWN_ ( { "s" : `template` , "s" : content } , token ) ; } return { messageId : _UNKNOWN_ . collection . insert ( { _UNKNOWN_ : _UNKNOWN_ , _UNKNOWN_ : this . userId , content : content , createdAt : new Date ( ) , type : type } ) } ; } , _UNKNOWN_ ( ) { return _UNKNOWN_ . collection . find ( ) . count ( ) ; } , _UNKNOWN_ ( token ) { if ( ! this . userId ) throw new _UNKNOWN_ . Error ( 's' , 's' ) ; check ( token , _UNKNOWN_ ) ; Users . collection . update ( { _id : this . userId } , { $set : { "s" : token } } ) ; } , async _UNKNOWN_ ( ) < _UNKNOWN_ > { if ( ! this . userId ) throw new _UNKNOWN_ . Error ( 's' , 's' ) ; if ( ! Users . collection . findOne ( { 's' : this . userId } ) . services . _UNKNOWN_ ) { throw new _UNKNOWN_ . Error ( 's' , 's' ) ; } const accessToken = await _UNKNOWN_ . getAccessToken ( this . userId ) ; return await _UNKNOWN_ . _UNKNOWN_ ( accessToken ) ; } } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $StringConstructor$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O $void$ O $string$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $string$ O $any$ O O O O $string$ O O O $any$ O O O O $any$ O $any$ O O O O O O O O $boolean$ O O O $any$ O $any$ O $any$ O O $complex$ O O $any[]$ O O O O $any$ O $string$ O O O O O $any$ O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O O O $complex$ O O $any[]$ O O O O $any$ O $string$ O O O $any$ O $any$ O $complex$ O O O O $void$ O $string$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $string$ O $any$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $string$ O O O O $void$ O $Profile$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $Profile$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O $complex$ O O $Profile$ O O O O O O $complex$ O $any$ O $string$ O $string$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $StringConstructor$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $string$ O $any$ O O $any$ O $string$ O $any$ O O O $boolean$ O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O O O $boolean$ O O O O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $string$ O $string$ O O O $any$ O O $string[]$ O O O O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any[]$ O O $any$ O O O $complex$ O O $boolean$ O O O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O $string$ O $string[]$ O O $Console$ O $void$ O O O O $any$ O $any$ O O O O O O O O $string$ O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O $string$ O $string$ O $any$ O O O $any$ O $string$ O $string$ O $Date$ O O $DateConstructor$ O O O $any$ O $any$ O O O O O O $number$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $void$ O $string$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O $string$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O $complex$ O O O O $string$ O O O O O O O $Promise$ O O O $any$ O O O O O O O $any$ O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O $string$ O O $any$ O $Promise<string>$ O O O $any$ O O O O $any$ O $any$ O $string$ O O O O O O O
<s> import { User , Message , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { Users } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; _UNKNOWN_ . _UNKNOWN_ ( 's' , function ( pattern , contacts : string [ ] ) : _UNKNOWN_ < User > { if ( ! this . userId ) { return ; } let selector = { } ; var _UNKNOWN_ : string [ ] = [ ] ; if ( Users . collection . findOne ( { 's' : this . userId } ) . services . _UNKNOWN_ ) { const accessToken = ( < any > Promise ) . await ( _UNKNOWN_ . getAccessToken ( this . userId ) ) ; const _UNKNOWN_ = ( < any > Promise ) . await ( _UNKNOWN_ . _UNKNOWN_ ( accessToken ) ) ; _UNKNOWN_ = _UNKNOWN_ . map ( ( _UNKNOWN_ ) => _UNKNOWN_ . id ) ; } if ( pattern ) { selector = { 's' : { _UNKNOWN_ : pattern , $options : 's' } , _UNKNOWN_ : [ { 's' : { _UNKNOWN_ : contacts } } , { 's' : { _UNKNOWN_ : _UNKNOWN_ } } , { 's' : { _UNKNOWN_ : [ 's' , 's' , 's' , 's' , 's' ] } } ] } ; } else { selector = { _UNKNOWN_ : [ { 's' : { _UNKNOWN_ : contacts } } , { 's' : { _UNKNOWN_ : _UNKNOWN_ } } , { 's' : { _UNKNOWN_ : [ 's' , 's' , 's' , 's' , 's' ] } } ] } } return { find : ( ) => { return Users . collection . find ( selector , { fields : { profile : 0 } , limit : 0 } ) ; } , children : [ < 0 < User , _UNKNOWN_ > > { find : ( user ) => { return _UNKNOWN_ . collection . find ( user . profile . _UNKNOWN_ , { fields : { url : 0 } } ) ; } } ] } ; } ) ; _UNKNOWN_ . publish ( 's' , function ( _UNKNOWN_ , _UNKNOWN_ ) : _UNKNOWN_ . Cursor < Message > { if ( ! this . userId || ! _UNKNOWN_ ) { return ; } return _UNKNOWN_ . collection . find ( { _UNKNOWN_ } , { sort : { createdAt : - 0 } , limit : 0 * _UNKNOWN_ } ) ; } ) ; _UNKNOWN_ . _UNKNOWN_ ( 's' , function ( ) : _UNKNOWN_ < _UNKNOWN_ > { if ( ! this . userId ) { return ; } return { find : ( ) => { return _UNKNOWN_ . collection . find ( { _UNKNOWN_ : this . userId } ) ; } , children : [ < 0 < _UNKNOWN_ , Message > > { find : ( chat ) => { return _UNKNOWN_ . collection . find ( { _UNKNOWN_ : chat . _id } , { sort : { createdAt : - 0 } , limit : 0 } ) ; } } , < 0 < _UNKNOWN_ , User > > { find : ( chat ) => { return Users . collection . find ( { _id : { _UNKNOWN_ : chat . _UNKNOWN_ } } , { fields : { profile : 0 } } ) ; } , children : [ < 0 < _UNKNOWN_ , User , _UNKNOWN_ > > { find : ( user , chat ) => { return _UNKNOWN_ . collection . find ( user . profile . _UNKNOWN_ , { fields : { url : 0 } } ) ; } } ] } ] } ; } ) ; _UNKNOWN_ . publish ( 's' , function ( ) { if ( ! this . userId ) { return ; } const profile = Users . findOne ( this . userId ) . profile || { } ; return _UNKNOWN_ . collection . find ( { _id : profile . _UNKNOWN_ } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O $string$ O $string[]$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O ${}$ O O O O O $string[]$ O O O O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O $PromiseConstructor$ O O $any$ O $any$ O $Promise<string>$ O O O $any$ O O O O $any$ O O O O O $PromiseConstructor$ O O $any$ O $any$ O $Promise<any>$ O $any$ O O O $string[]$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O $string$ O O ${}$ O O O O O $string$ O $string$ O $string$ O O O O $complex$ O O O O O O $string[]$ O $string[]$ O O O O O O O $string[]$ O $string[]$ O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O ${}$ O O $complex$ O O O O O O $string[]$ O $string[]$ O O O O O O O $string[]$ O $string[]$ O O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O ${}$ O O $complex$ O O $number$ O O O O $number$ O O O O O O O $any[]$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $number$ O O O O O O O O O O O O O O $any$ O $any$ O O O O O $string$ O $number$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O $string$ O O O $complex$ O O $number$ O O O O O $number$ O O O $number$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O $any[]$ O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $complex$ O O $number$ O O O O O $number$ O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O O O $complex$ O O $number$ O O O O O O O O $any[]$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $number$ O O O O O O O O O O O O O O O O $any$ O $any$ O O O O O O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { constructor ( public _UNKNOWN_ , public _UNKNOWN_ , public params , public _UNKNOWN_ ) { } remove ( ) { const alert = this . _UNKNOWN_ . create ( { title : 's' , message : 's' , buttons : [ { text : 's' , role : 's' } , { text : 's' , handler : ( ) => { this . _UNKNOWN_ ( alert ) ; return false ; } } ] } ) ; this . _UNKNOWN_ . dismiss ( ) . then ( ( ) => { alert . present ( ) ; } ) ; } private _UNKNOWN_ ( alert ) { _UNKNOWN_ . call ( 's' , this . params . get ( 's' ) . _id ) . subscribe ( { next : ( ) => { alert . dismiss ( ) . then ( ( ) => { this . _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , { } , { animate : true } ) ; } ) ; } , error : ( e ) => { alert . dismiss ( ) . then ( ( ) => { if ( e ) { return this . handleError ( e ) ; } this . _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , { } , { animate : true } ) ; } ) ; } } ) ; } private handleError ( e ) { console . error ( e ) ; const alert = this . _UNKNOWN_ . create ( { title : 's' , message : e . message , buttons : [ 's' ] } ) ; alert . present ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $any$ O O $any$ O O $any$ O O O $void$ O O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $boolean$ O O O O O O O $void$ O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O O O $void$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O O $void$ O O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O O O O O $void$ O O $Error$ O O O $any$ O $any$ O O O $any$ O O O O O O O $Error$ O O O O O $void$ O $Error$ O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O O O O O O O O O $void$ O $Error$ O O $Console$ O $void$ O $Error$ O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O $Error$ O $string$ O $string[]$ O O O O O O O $any$ O $any$ O O O O O O
<s> import { Component , OnInit , OnDestroy } from 's' ; import { Platform , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Location } from 's' ; import { Observable , Subscription } from 's' ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = 0 ; const _UNKNOWN_ = 0 ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ implements OnInit , OnDestroy { lat : number = _UNKNOWN_ ; lng : number = _UNKNOWN_ ; zoom : number = _UNKNOWN_ ; _UNKNOWN_ : number = - 0 ; _UNKNOWN_ : Subscription ; constructor ( private platform , private _UNKNOWN_ , private _UNKNOWN_ ) { } ngOnInit ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ ( ) . _UNKNOWN_ ( Observable . interval ( _UNKNOWN_ ) . timeInterval ( ) ) . subscribe ( ( ) => { this . _UNKNOWN_ ( ) ; } ) ; } ngOnDestroy ( ) { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; } } _UNKNOWN_ ( _UNKNOWN_ ) { const _UNKNOWN_ = this . platform . height ( ) ; const _UNKNOWN_ = this . platform . width ( ) ; const _UNKNOWN_ = Math . min ( _UNKNOWN_ , _UNKNOWN_ ) ; const _UNKNOWN_ = _UNKNOWN_ / _UNKNOWN_ ; return ( ( Math . log ( _UNKNOWN_ / ( 0 * _UNKNOWN_ ) ) ) / Math . log ( 0 ) ) + 0 ; } _UNKNOWN_ ( ) { return Observable . fromPromise ( this . _UNKNOWN_ . _UNKNOWN_ ( ) . then ( ( position ) => { if ( this . lat && this . lng ) { this . _UNKNOWN_ = position . coords . _UNKNOWN_ ; this . lat = position . coords . latitude ; this . lng = position . coords . longitude ; this . zoom = this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } } ) ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . dismiss ( < Location > { lat : this . lat , lng : this . lng , zoom : this . zoom } ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $number$ O O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O O O $any$ O $any$ O O O O $Platform$ O O $any$ O O $any$ O O O $void$ O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O O $number$ O $number$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O $number$ O $Math$ O $number$ O $any$ O $any$ O O O $number$ O $number$ O $number$ O O O O $Math$ O $number$ O O O O O O $number$ O O O O $Math$ O $number$ O O O O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O $any$ O O O O O O O $number$ O O O $number$ O O O O $number$ O $any$ O $any$ O $any$ O O O $number$ O $any$ O $any$ O $any$ O O O $number$ O $any$ O $any$ O $any$ O O O $number$ O O O $number$ O O O $number$ O O O O O O O O $void$ O O O O O $any$ O $any$ O O $any$ O O $number$ O O O $number$ O $number$ O O O $number$ O $number$ O O O $number$ O O O O O O
<s> import { Injectable } from 's' ; import { Platform } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _ from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ { constructor ( private platform , private _UNKNOWN_ , private crop ) { } _UNKNOWN_ ( _UNKNOWN_ , crop ) < File > { if ( ! this . platform . is ( 's' ) ) { return new Promise ( ( resolve , reject ) => { if ( _UNKNOWN_ === true ) { reject ( new Error ( "s" ) ) ; } else { try { _UNKNOWN_ . _UNKNOWN_ ( ( file ) => { resolve ( file ) ; } ) ; } catch ( e ) { reject ( e ) ; } } } ) ; } return this . _UNKNOWN_ . _UNKNOWN_ ( < _UNKNOWN_ > { _UNKNOWN_ : 0 , quality : 0 , _UNKNOWN_ : true , _UNKNOWN_ : false , sourceType : _UNKNOWN_ ? 0 : 0 } ) . then ( ( _UNKNOWN_ ) => { return crop ? this . crop . crop ( _UNKNOWN_ , { quality : 0 } ) : _UNKNOWN_ ; } ) . then ( ( _UNKNOWN_ ) => { return this . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; } upload ( blob ) < any > { return new Promise ( ( resolve , reject ) => { const metadata = _ . pick ( blob , 's' , 's' , 's' ) ; if ( ! metadata . name ) { metadata . name = _UNKNOWN_ ; } const upload = new _UNKNOWN_ . _UNKNOWN_ ( { data : blob , file : metadata , store : _UNKNOWN_ , _UNKNOWN_ : resolve , onError : reject } ) ; upload . start ( ) ; } ) ; } _UNKNOWN_ ( url , options = { } ) < File > { return new Promise ( ( resolve , reject ) => { const image = document . createElement ( 's' ) ; image . onload = ( ) => { try { const _UNKNOWN_ = this . _UNKNOWN_ ( image , options ) ; const blob = this . _UNKNOWN_ ( _UNKNOWN_ ) ; const pathname = ( new URL ( url ) ) . pathname ; const filename = pathname . substring ( pathname . lastIndexOf ( 's' ) + 0 ) ; const file = new File ( [ blob ] , filename ) ; resolve ( file ) ; } catch ( e ) { reject ( e ) ; } } ; image . src = url ; } ) ; } _UNKNOWN_ ( image , { _UNKNOWN_ = 0 , _UNKNOWN_ = 0 } = { } ) { const canvas = document . createElement ( 's' ) ; var width = image . width , height = image . height ; if ( width > height ) { if ( width > _UNKNOWN_ ) { height *= _UNKNOWN_ / width ; width = _UNKNOWN_ ; } } else { if ( height > _UNKNOWN_ ) { width *= _UNKNOWN_ / height ; height = _UNKNOWN_ ; } } canvas . width = width ; canvas . height = height ; const context = canvas . getContext ( 's' ) ; context . _UNKNOWN_ ( image , 0 , 0 , width , height ) ; const _UNKNOWN_ = canvas . _UNKNOWN_ ( 's' ) ; return _UNKNOWN_ . replace ( "s" , 's' ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { const binary = _UNKNOWN_ ( _UNKNOWN_ ) ; const _UNKNOWN_ = Object . keys ( binary ) . map < number > ( Number ) . map < number > ( binary . charCodeAt . bind ( binary ) ) ; return new Blob ( [ new 0 ( _UNKNOWN_ ) ] , { type : 's' } ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $Platform$ O O $any$ O O $any$ O O O $Promise$ O $boolean$ O $boolean$ O O $complex$ O O O O O O O $any$ O $any$ O O O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O O $boolean$ O O O O $void$ O O $ErrorConstructor$ O O O O O O O O O O $any$ O $any$ O O $File$ O O O $void$ O $File$ O O O O O O O O $any$ O O $void$ O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O $number$ O O O $number$ O O O $boolean$ O O O $boolean$ O O O $number$ O $boolean$ O O O O O O O $any$ O O $any$ O O O O $boolean$ O O O $any$ O $any$ O $any$ O O $number$ O O O O O $any$ O O O O $any$ O O $any$ O O O O O O $any$ O $any$ O O O O O O $Promise$ O $File$ O O O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O $any$ O $any$ O $any$ O $File$ O O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O $File$ O $File$ O $any$ O $any$ O $any$ O $any$ O $void$ O $void$ O $void$ O $void$ O O O $any$ O $any$ O O O O O O O $Promise$ O $string$ O ${}$ O O O O O $complex$ O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O $HTMLImageElement$ O $Document$ O O O O O O $HTMLImageElement$ O $any$ O O O O O O O O $string$ O O O $string$ O $HTMLImageElement$ O ${}$ O O O $Blob$ O O O $Blob$ O $string$ O O O $string$ O O O $complex$ O $string$ O O O $string$ O O $string$ O $string$ O $string$ O $string$ O $number$ O O O O O O O O $File$ O O $complex$ O O $Blob$ O O $string$ O O $void$ O $File$ O O O O O $any$ O O $void$ O $any$ O O O O O $HTMLImageElement$ O $string$ O $string$ O O O O O $string$ O $HTMLImageElement$ O O $number$ O O O $number$ O O O O O O O O O $HTMLCanvasElement$ O $Document$ O O O O O O O $number$ O $HTMLImageElement$ O $number$ O $number$ O $HTMLImageElement$ O $number$ O O O $number$ O $number$ O O O O $number$ O $number$ O O $number$ O $number$ O $number$ O $number$ O $number$ O O O O O O O $number$ O $number$ O O $number$ O $number$ O $number$ O $number$ O $number$ O O O $HTMLCanvasElement$ O $number$ O $number$ O $HTMLCanvasElement$ O $number$ O $number$ O O O O $HTMLCanvasElement$ O O O O O O O O $complex$ O $HTMLImageElement$ O O O O O $number$ O $number$ O O O $string$ O $HTMLCanvasElement$ O $string$ O O O O O $string$ O $complex$ O O O O O O O $Blob$ O $any$ O O O $string$ O $string$ O $any$ O O O $number[]$ O $ObjectConstructor$ O $complex$ O $string$ O O $U[]$ O O O O $NumberConstructor$ O O $U[]$ O O O O $string$ O $number$ O $any$ O $string$ O O O O O $complex$ O O O O O $number[]$ O O O O $string$ O O O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ , ModalController , Platform , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { constructor ( private _UNKNOWN_ , private _UNKNOWN_ , private _UNKNOWN_ , private platform , private _UNKNOWN_ ) { } _UNKNOWN_ ( _UNKNOWN_ ) { if ( _UNKNOWN_ && ! this . platform . is ( 's' ) ) { return console . warn ( 's' ) ; } this . _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , false ) . then ( ( blob ) => { this . _UNKNOWN_ . dismiss ( { messageType : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : blob } ) ; } ) . catch ( ( e ) => { this . handleError ( e ) ; } ) ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = this . _UNKNOWN_ . create ( _UNKNOWN_ ) ; _UNKNOWN_ . onDidDismiss ( ( location ) => { if ( ! location ) { this . _UNKNOWN_ . dismiss ( ) ; return ; } this . _UNKNOWN_ . dismiss ( { messageType : _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ : location } ) ; } ) ; _UNKNOWN_ . present ( ) ; } handleError ( e ) { console . error ( e ) ; const alert = this . _UNKNOWN_ . create ( { title : 's' , message : e . message , buttons : [ 's' ] } ) ; alert . present ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $ModalController$ O O $any$ O O $Platform$ O O $any$ O O O $void$ O $boolean$ O O O O $boolean$ O O O O $any$ O $any$ O O O O O O $Console$ O $void$ O O O O O O O $any$ O $any$ O $boolean$ O O O O O O O $File$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $File$ O $File$ O O O O O O $complex$ O O $any$ O O O O O $void$ O $any$ O O O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $void$ O $Error$ O O $Console$ O $void$ O $Error$ O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O $Error$ O $string$ O $string[]$ O O O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { _UNKNOWN_ : string ; constructor ( private _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ . get ( 's' ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O O O O $any$ O O O O $string$ O O O $any$ O $any$ O O O O O O O
<s> import { Component , OnInit , OnDestroy , ElementRef } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , ModalController } from 's' ; import { _UNKNOWN_ , Message , _UNKNOWN_ , Location } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as moment from 's' ; import * as _ from 's' ; import { _UNKNOWN_ } from 's' ; import { Subscription , Observable , Subscriber } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ implements OnInit , OnDestroy { _UNKNOWN_ : _UNKNOWN_ ; title : string ; picture : string ; _UNKNOWN_ ; message : string = 's' ; _UNKNOWN_ : MutationObserver ; _UNKNOWN_ = 0 ; _UNKNOWN_ : string ; _UNKNOWN_ : boolean ; _UNKNOWN_ : Subscription ; _UNKNOWN_ : number = 0 ; constructor ( _UNKNOWN_ , private el , private _UNKNOWN_ , private _UNKNOWN_ , private modalCtrl ) { this . _UNKNOWN_ = < _UNKNOWN_ > _UNKNOWN_ . get ( 's' ) ; this . title = this . _UNKNOWN_ . title ; this . picture = this . _UNKNOWN_ . picture ; this . _UNKNOWN_ = _UNKNOWN_ . userId ( ) ; } private get _UNKNOWN_ ( ) : Element { return this . el . nativeElement . querySelector ( 's' ) ; } private get _UNKNOWN_ ( ) : Element { return this . _UNKNOWN_ . querySelector ( 's' ) ; } private get _UNKNOWN_ ( ) : Element { return this . _UNKNOWN_ . querySelector ( 's' ) ; } ngOnInit ( ) { this . _UNKNOWN_ = this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; _UNKNOWN_ . call ( 's' ) . subscribe ( ( _UNKNOWN_ ) => { Observable . fromEvent ( this . _UNKNOWN_ , 's' ) . takeUntil ( this . _UNKNOWN_ ( _UNKNOWN_ ) ) . filter ( ( ) => ! this . _UNKNOWN_ . scrollTop ) . filter ( ( ) => ! this . _UNKNOWN_ ) . forEach ( ( ) => this . _UNKNOWN_ ( ) ) ; } ) ; } ngOnDestroy ( ) { this . _UNKNOWN_ . disconnect ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; this . _UNKNOWN_ = this . _UNKNOWN_ . scrollHeight ; _UNKNOWN_ . subscribe ( 's' , this . _UNKNOWN_ . _id , ++ this . _UNKNOWN_ ) . subscribe ( ( ) => { if ( ! this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ ( ) ; } this . _UNKNOWN_ = false ; } ) ; } _UNKNOWN_ ( ) { return _UNKNOWN_ . _UNKNOWN_ ( ) . subscribe ( ( ) => { this . _UNKNOWN_ = this . _UNKNOWN_ ( ) ; } ) ; } _UNKNOWN_ < T > ( _UNKNOWN_ ) < T > { return Observable . create ( ( observer < T > ) => { _UNKNOWN_ . find ( ) . subscribe ( { next : ( messages ) => { if ( _UNKNOWN_ !== messages . length ) { return ; } observer . next ( ) ; observer . complete ( ) ; } , error : ( e ) => { observer . error ( e ) ; } } ) ; } ) ; } _UNKNOWN_ ( ) { const popover = this . _UNKNOWN_ . create ( _UNKNOWN_ , { chat : this . _UNKNOWN_ } , { cssClass : 's' } ) ; popover . present ( ) ; } _UNKNOWN_ ( ) { return _UNKNOWN_ . find ( { _UNKNOWN_ : this . _UNKNOWN_ . _id } , { sort : { createdAt : 0 } } ) . map ( ( messages : Message [ ] ) => { const format = 's' ; messages . forEach ( ( message ) => { message . _UNKNOWN_ = this . _UNKNOWN_ == message . _UNKNOWN_ ? 's' : 's' ; return message ; } ) ; const _UNKNOWN_ = _ . groupBy ( messages , ( message ) => { return moment ( message . createdAt ) . format ( format ) ; } ) ; return Object . keys ( _UNKNOWN_ ) . map ( ( timestamp ) => { return { timestamp : timestamp , messages : _UNKNOWN_ [ timestamp ] , today : moment ( ) . format ( format ) === timestamp } ; } ) ; } ) ; } _UNKNOWN_ ( ) { const _UNKNOWN_ = new MutationObserver ( this . _UNKNOWN_ . bind ( this ) ) ; _UNKNOWN_ . observe ( this . _UNKNOWN_ , { _UNKNOWN_ : true , _UNKNOWN_ : true } ) ; return _UNKNOWN_ ; } _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return ; } this . _UNKNOWN_ . scrollTop = this . _UNKNOWN_ . scrollHeight - this . _UNKNOWN_ ; this . _UNKNOWN_ = 0 ; } _UNKNOWN_ ( { keyCode } ) { if ( keyCode === 0 ) { this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( ) { if ( ! this . message ) { return ; } _UNKNOWN_ . call ( 's' , _UNKNOWN_ . _UNKNOWN_ , this . _UNKNOWN_ . _id , this . message ) . zone ( ) . subscribe ( ( ) => { this . message = 's' ; } ) ; } _UNKNOWN_ ( location ) { _UNKNOWN_ . call ( 's' , _UNKNOWN_ . _UNKNOWN_ , this . _UNKNOWN_ . _id , `template` ) . zone ( ) . subscribe ( ( ) => { this . message = 's' ; } ) ; } _UNKNOWN_ ( ) { const popover = this . _UNKNOWN_ . create ( _UNKNOWN_ , { chat : this . _UNKNOWN_ } , { cssClass : 's' } ) ; popover . onDidDismiss ( ( params ) => { if ( params ) { if ( params . messageType === _UNKNOWN_ . _UNKNOWN_ ) { const location = params . _UNKNOWN_ ; this . _UNKNOWN_ ( location ) ; } else if ( params . messageType === _UNKNOWN_ . _UNKNOWN_ ) { const blob = params . _UNKNOWN_ ; this . _UNKNOWN_ ( blob ) ; } } } ) ; popover . present ( ) ; } _UNKNOWN_ ( blob ) { this . _UNKNOWN_ . upload ( blob ) . then ( ( picture ) => { _UNKNOWN_ . call ( 's' , _UNKNOWN_ . _UNKNOWN_ , this . _UNKNOWN_ . _id , picture . url ) . zone ( ) . subscribe ( ) ; } ) ; } getLocation ( _UNKNOWN_ ) { const splitted = _UNKNOWN_ . split ( 's' ) . map ( Number ) ; return < Location > { lat : splitted [ 0 ] , lng : splitted [ 0 ] , zoom : Math . min ( splitted [ 0 ] || 0 , 0 ) } ; } _UNKNOWN_ ( { target } ) { const modal = this . modalCtrl . create ( _UNKNOWN_ , { _UNKNOWN_ : ( < HTMLImageElement > target ) . src } ) ; modal . present ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $any$ O $string$ O O O O O $MutationObserver$ O $complex$ O $number$ O O O $string$ O O O $boolean$ O O O $any$ O $any$ O $number$ O O O O O O O $any$ O O $ElementRef$ O O $any$ O O $any$ O O $ModalController$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O $Element$ O O O $complex$ O O O O $any$ O $any$ O $any$ O O O O O O O $Element$ O O O $complex$ O O O O $Element$ O O O O O O O O O $Element$ O O O $complex$ O O O O $Element$ O O O O O O O $void$ O O O O O $MutationObserver$ O O O $MutationObserver$ O O O O O $void$ O O O $any$ O $any$ O O O O $any$ O O $number$ O O O $any$ O $any$ O O O $Element$ O O O O $any$ O O O $any$ O $number$ O O O $any$ O O O O O O O $Element$ O $number$ O O $any$ O O O O O O O $boolean$ O O $any$ O O O O O O $void$ O O O O O O O O $void$ O O O O O $MutationObserver$ O $void$ O O O O $void$ O O O O O $boolean$ O O O O O $number$ O O O $Element$ O $number$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O $number$ O O $any$ O O O O O O O O O O $any$ O O O O $any$ O O O $any$ O O O O O O $boolean$ O O O O O O O $Subscription$ O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O O $Observable$ O $any$ O O $number$ O O $any$ O O O $any$ O $any$ O O $Subscriber$ O $any$ O O O O $any$ O $any$ O O O $any$ O O $void$ O O $any$ O O O O O $number$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $void$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O $string$ O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O $complex$ O O $number$ O O O O O O $any$ O O $any[]$ O $any$ O O O O O O O O O O $any[]$ O $void$ O O $any$ O O O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O $ObjectConstructor$ O $complex$ O $any$ O O $U[]$ O O $string$ O O O O O $string$ O $string$ O $any$ O $any$ O $string$ O O $boolean$ O $any$ O O O $any$ O O O O $string$ O O O O O O O O O $MutationObserver$ O O O O $MutationObserver$ O O $complex$ O O O $void$ O $any$ O O O O O $MutationObserver$ O $void$ O O O $Element$ O O $true$ O O O $true$ O O O O O O $MutationObserver$ O O $void$ O O O O O O O $boolean$ O O O O O O O $Element$ O $number$ O O O $Element$ O $number$ O O O $number$ O O O $number$ O O O O $void$ O O $number$ $KeyboardEvent$ O O O O $number$ O O O O O O $void$ O O O O O $void$ O O O O O O O O $string$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $string$ O O $any$ O O O $any$ O O O O O O O $string$ O O O O O O O $void$ O $Location$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O O O $string$ O O O O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O $string$ O O O O O $any$ O $any$ O O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $void$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $File$ O $any$ O $any$ O O O $void$ O $File$ O O O O O O O $any$ O $any$ O O O O $void$ O $File$ O O O O $any$ O $Promise<any>$ O $File$ O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O O $Location$ O $string$ O O O $number[]$ O $string$ O $complex$ O O O O $U[]$ O $NumberConstructor$ O O O O $any$ O O $number$ O $number[]$ O O O O $number$ O $number[]$ O O O O $number$ O $Math$ O $number$ O $number[]$ O O O O O O O O O O O $void$ O O $EventTarget$ $Event$ O O O $any$ O O O $any$ O $any$ O $any$ O O $string$ O O O $complex$ O $EventTarget$ O O $string$ O O O $any$ O $any$ O O O O O O
<s> import { Injectable } from 's' ; import { _UNKNOWN_ , Plugin , _UNKNOWN_ } from 's' ; @ Plugin ( { pluginName : 's' , plugin : 's' , _UNKNOWN_ : 's' , repo : 's' , platforms : [ 's' ] } ) @ Injectable ( ) export class _UNKNOWN_ extends _UNKNOWN_ { @ _UNKNOWN_ ( ) isSupported ( callback : ( supported ) => void , error : ( ) => void ) { return ; } @ _UNKNOWN_ ( { platforms : [ 's' ] } ) _UNKNOWN_ ( callback : ( msg ) => void , error : ( ) => void ) { return ; } @ _UNKNOWN_ ( { platforms : [ 's' ] } ) _UNKNOWN_ ( callback : ( ) => void , error : ( ) => void ) { return ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string[]$ O O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O O $void$ O $void$ O O $boolean$ O O O O $void$ O O O O O O O O O O O $any$ O O $string[]$ O O O O O O $void$ O $void$ O O $string$ O O O O $void$ O O O O O O O O O O O $any$ O O $string[]$ O O O O O O $void$ O $void$ O O O O O O $void$ O O O O O O O O O O O O
<s> import { Injectable } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Platform } from 's' ; import { _UNKNOWN_ } from 's' ; import { Contact , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import * as Bluebird from "s" ; import { _UNKNOWN_ } from "s" ; import { Observable } from "s" ; @ Injectable ( ) export class _UNKNOWN_ { constructor ( private platform , private _UNKNOWN_ , private _UNKNOWN_ , private contacts ) { Bluebird . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } async getNumber ( ) < string > { if ( ! this . platform . is ( 's' ) ) { throw new Error ( 's' ) } if ( ! ( await this . _UNKNOWN_ . _UNKNOWN_ ( ) ) ) { try { await this . _UNKNOWN_ . _UNKNOWN_ ( ) ; } catch ( e ) { throw new Error ( 's' ) ; } } return 's' + ( await this . _UNKNOWN_ . _UNKNOWN_ ( ) ) . phoneNumber ; } async _UNKNOWN_ ( ) < string > { if ( ! this . platform . is ( 's' ) ) { throw new Error ( 's' ) } try { await ( < any > this . _UNKNOWN_ ) . isSupported ( ) ; } catch ( e ) { throw new Error ( 's' ) ; } const _UNKNOWN_ = Observable . fromPromise ( ( < any > this . _UNKNOWN_ ) . _UNKNOWN_ ( ) ) . map ( ( msg ) => msg ) ; const _UNKNOWN_ = Observable . interval ( 0 ) . take ( 0 ) . map ( ( ) => { throw new Error ( 's' ) } ) ; try { var msg = await _UNKNOWN_ . takeUntil ( _UNKNOWN_ ) . toPromise ( ) ; } catch ( e ) { await ( < any > this . _UNKNOWN_ ) . _UNKNOWN_ ( ) ; throw e ; } await ( < any > this . _UNKNOWN_ ) . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ . includes ( msg . split ( "s" ) [ 0 ] ) ) { return msg . substr ( msg . length - 0 ) ; } else { throw new Error ( 's' ) } } _UNKNOWN_ ( ) < string [ ] > { const _UNKNOWN_ = ( ) : Promise < Contact [ ] > => { if ( ! this . platform . is ( 's' ) ) { return Promise . reject ( new Error ( 's' ) ) ; } const fields : _UNKNOWN_ [ ] = [ "s" ] ; const options = { filter : "s" , multiple : true , _UNKNOWN_ : [ "s" ] , _UNKNOWN_ : true } ; return this . contacts . find ( fields , options ) ; } ; const _UNKNOWN_ = ( phoneNumber ) : string => { const _UNKNOWN_ = phoneNumber . replace ( "s" , 's' ) ; if ( _UNKNOWN_ . charAt ( 0 ) === 's' ) { return _UNKNOWN_ ; } else if ( _UNKNOWN_ . substring ( 0 , 0 ) === "s" ) { return 's' + _UNKNOWN_ . slice ( 0 ) ; } else { const prefix = ( < any > _UNKNOWN_ . user ( ) ) . phone . number . substring ( 0 , 0 ) ; return prefix + _UNKNOWN_ ; } } ; return new Promise ( ( resolve , reject ) => { _UNKNOWN_ ( ) . then ( ( contacts : Contact [ ] ) => { const _UNKNOWN_ : string [ ] [ ] = contacts . map ( ( contact ) => { return contact . _UNKNOWN_ . filter ( ( phoneNumber ) => { return phoneNumber . type === "s" ; } ) . map ( ( phoneNumber ) => { return _UNKNOWN_ ( phoneNumber . value ) ; } ) . filter ( ( phoneNumber ) => { return phoneNumber . slice ( 0 ) . match ( "s" ) && phoneNumber . length >= 0 ; } ) ; } ) ; const _UNKNOWN_ : string [ ] = [ ] . concat ( ... _UNKNOWN_ ) ; const _UNKNOWN_ : string [ ] = [ ... new Set ( _UNKNOWN_ ) ] ; resolve ( _UNKNOWN_ ) ; } ) . catch ( ( e ) => { reject ( e ) ; } ) ; } ) ; } verify ( phoneNumber ) < void > { return new Promise < void > ( ( resolve , reject ) => { _UNKNOWN_ . _UNKNOWN_ ( phoneNumber , ( e ) => { if ( e ) { return reject ( e ) ; } resolve ( ) ; } ) ; } ) ; } login ( phoneNumber , code ) < void > { return new Promise < void > ( ( resolve , reject ) => { _UNKNOWN_ . _UNKNOWN_ ( phoneNumber , code , ( e ) => { if ( e ) { return reject ( e ) ; } resolve ( ) ; } ) ; } ) ; } _UNKNOWN_ ( ) < any > { return new Promise ( ( resolve , reject ) => { const options = { _UNKNOWN_ : [ 's' , 's' , 's' ] } ; ( < any > _UNKNOWN_ ) . _UNKNOWN_ ( options , ( error ) => { if ( error ) { reject ( new Error ( error . message ) ) ; } else { resolve ( ) ; } } ) ; } ) ; } logout ( ) < void > { return new Promise < void > ( ( resolve , reject ) => { _UNKNOWN_ . logout ( ( e ) => { if ( e ) { return reject ( e ) ; } resolve ( ) ; } ) ; } ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $Platform$ O O $any$ O O $any$ O O $Contacts$ O O $any$ O $any$ O O O $any$ O O O O $Promise$ O O O O O O O O O O O $any$ O $any$ O O O O O O O $ErrorConstructor$ O O O O O O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O $Promise$ O O O O O O O O O O O $any$ O $any$ O O O O O O O $ErrorConstructor$ O O O O O O O O O O O O O $any$ O O $any$ O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O O $any$ O O $string$ O O $string$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O O $ErrorConstructor$ O O O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O O O $any$ O O O O O O O O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $ErrorConstructor$ O O O O O $Promise$ O O O O O O O O O $Promise<any[]>$ O O O O $PromiseConstructor$ O $any$ O O O O O O O O O O $any$ O $any$ O O O O O O $PromiseConstructor$ O $Promise<T>$ O O $ErrorConstructor$ O O O O O O O $any[]$ O $any$ O O O O O O O O $any$ O O $string$ O O O $boolean$ O O O $string[]$ O O O O O $boolean$ O O O O O O O $any$ O $any$ O $any[]$ O $any$ O O O O O $string$ O O $string$ O O O O O O $string$ O $string$ O $complex$ O O O O O O O O $string$ O $string$ O O O O O O O O $string$ O O O O O $string$ O $string$ O O O O O O O O O O O O $string$ O $string$ O O O O O O O O $string$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $string$ O $string$ O O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O $Promise<any[]>$ O O O O O O $any[]$ O $any$ O O O O O O $string[][]$ O O O O O O O $any[]$ O $U[]$ O O $Contact$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O $any$ O O O O $string$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O O $string$ O $string$ O O O O $complex$ O O O O $string$ O $number$ O O O O O O O O O O $string[]$ O O O O O O O O $complex$ O O $string[][]$ O O O $string[]$ O O O O O O O O $SetConstructor$ O $string[]$ O O O $void$ O $string[]$ O O O O O $complex$ O O $Error$ O O O $void$ O $Error$ O O O O O O O O O $Promise$ O $string$ O O O O O O O $PromiseConstructor$ O O O O O $void$ O $void$ O O O $any$ O $any$ O $string$ O O $Error$ O O O O O $Error$ O O O $void$ O $Error$ O O O $void$ O O O O O O O O O O $Promise$ O $string$ O $string$ O O O O O O O $PromiseConstructor$ O O O O O $void$ O $void$ O O O $any$ O $any$ O $string$ O $string$ O O $Error$ O O O O O $Error$ O O O $void$ O $Error$ O O O $void$ O O O O O O O O O O $Promise$ O O O O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O $complex$ O O $string[]$ O O O O O O O O O O O O O O $any$ O O $any$ O $complex$ O O $Error$ O O O O O $Error$ O O $void$ O O $ErrorConstructor$ O $Error$ O $string$ O O O O O O $void$ O O O O O O O O O O O $Promise$ O O O O O O O O $PromiseConstructor$ O O O O O $void$ O $void$ O O O $any$ O $any$ O O $Error$ O O O O O $Error$ O O O $void$ O $Error$ O O O $void$ O O O O O O O O O O O O
<s> import { Component , OnInit } from 's' ; import { Profile } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , Platform } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ implements OnInit { picture : string ; profile : Profile ; constructor ( private _UNKNOWN_ , private _UNKNOWN_ , private _UNKNOWN_ , private platform ) { } ngOnInit ( ) { this . profile = ( ( { name = 's' , _UNKNOWN_ } = { } ) => ( { name , _UNKNOWN_ } ) ) ( _UNKNOWN_ . user ( ) . profile ) ; _UNKNOWN_ . subscribe ( 's' ) . subscribe ( ( ) => { let platform = this . platform . is ( 's' ) ? "s" : this . platform . is ( 's' ) ? "s" : "s" ; platform = this . platform . is ( 's' ) ? platform : "s" ; this . picture = _UNKNOWN_ . _UNKNOWN_ ( this . profile . _UNKNOWN_ , platform ) ; } ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . _UNKNOWN_ ( false , true ) . then ( ( blob ) => { this . _UNKNOWN_ ( blob ) ; } ) . catch ( ( e ) => { this . handleError ( e ) ; } ) ; } _UNKNOWN_ ( blob ) { this . _UNKNOWN_ . upload ( blob ) . then ( ( picture ) => { this . profile . _UNKNOWN_ = picture . _id ; this . picture = picture . url ; } ) . catch ( ( e ) => { this . handleError ( e ) ; } ) ; } _UNKNOWN_ ( ) { _UNKNOWN_ . call ( 's' , this . profile ) . subscribe ( { next : ( ) => { this . _UNKNOWN_ . push ( _UNKNOWN_ ) ; } , error : ( e ) => { this . handleError ( e ) ; } } ) ; } handleError ( e ) { console . error ( e ) ; const alert = this . _UNKNOWN_ . create ( { title : 's' , message : e . message , buttons : [ 's' ] } ) ; alert . present ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O O $any$ O O $any$ O O $any$ O O $Platform$ O O O $void$ O O O O O $any$ O O O O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O O $string$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O O O $string$ O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O O O $void$ O O O O O $any$ O $any$ O O O O O O O O O $File$ O O O O O $void$ O $File$ O O O O O $complex$ O O $any$ O O O O O $void$ O $any$ O O O O O O $void$ O $File$ O O O O $any$ O $Promise<any>$ O $File$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O $complex$ O O $any$ O O O O O $void$ O $any$ O O O O O O $void$ O O O $any$ O $any$ O O O O O $any$ O O $any$ O O $void$ O O O O O O O $any$ O $any$ O $any$ O O O O $void$ O O $Error$ O O O O O $void$ O $Error$ O O O O O O O $void$ O $Error$ O O $Console$ O $void$ O $Error$ O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O $Error$ O $string$ O $string[]$ O O O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from "s" ; import { Alert , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { Profile } from "s" ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ { constructor ( private _UNKNOWN_ , private _UNKNOWN_ , private _UNKNOWN_ ) { } cancel ( ) { const alert = this . _UNKNOWN_ . create ( { title : 's' , message : `template` , buttons : [ { text : 's' , role : 's' } , { text : 's' , handler : ( ) => { this . _UNKNOWN_ ( alert ) ; return false ; } } ] } ) ; alert . present ( ) ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . _UNKNOWN_ ( ) . then ( ( ) => { _UNKNOWN_ . call ( 's' ) . subscribe ( { next : ( _UNKNOWN_ ) => { const pathname = ( new URL ( _UNKNOWN_ . pictureUrl ) ) . pathname ; const filename = pathname . substring ( pathname . lastIndexOf ( 's' ) + 0 ) ; const description = { name : filename } ; let profile = { name : _UNKNOWN_ . name , _UNKNOWN_ : "s" } ; _UNKNOWN_ . call ( 's' , _UNKNOWN_ . pictureUrl , description , 's' ) . map ( ( value ) => profile . _UNKNOWN_ = ( < any > value ) . _id ) . switchMapTo ( _UNKNOWN_ . call ( 's' , profile ) ) . subscribe ( { next : ( ) => { this . _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , { } , { animate : true } ) ; } , error : ( e ) => { this . handleError ( e ) ; } } ) ; } , error : ( e ) => { this . handleError ( e ) ; } } ) ; } ) . catch ( ( e ) => { this . handleError ( e ) ; } ) ; } _UNKNOWN_ ( alert ) { alert . dismiss ( ) . then ( ( ) => { this . _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , { } , { animate : true } ) ; } ) . catch ( ( e ) => { this . handleError ( e ) ; } ) ; } handleError ( e ) { console . error ( e ) ; const alert = this . _UNKNOWN_ . create ( { title : 's' , message : e . message , buttons : [ 's' ] } ) ; alert . present ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $any$ O O $any$ O O O $void$ O O O O $Alert$ O O O $any$ O $any$ O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $boolean$ O O O O O O O $void$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O O $void$ O O O O O $any$ O $Promise<any>$ O O O O O O O O O $any$ O $any$ O O O O $any$ O O $void$ O O $any$ O O O O $string$ O O O $complex$ O $any$ O $any$ O O O $string$ O O $string$ O $string$ O $string$ O $string$ O $number$ O O O O O O O O $complex$ O O $string$ O $string$ O O O $Profile$ O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O O $any$ O $any$ O $complex$ O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O O $void$ O O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O O $void$ O O $Error$ O O O O O $void$ O $Error$ O O O O O O O O $void$ O O $Error$ O O O O O $void$ O $Error$ O O O O O O O O O $complex$ O O $any$ O O O O O $void$ O $any$ O O O O O O $void$ O $Alert$ O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O O O $any$ O O $any$ O O O O O $void$ O $any$ O O O O O O $void$ O $Error$ O O $Console$ O $void$ O $Error$ O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O $Error$ O $string$ O $string[]$ O O O O O O O $any$ O $any$ O O O O O O
<s> import { AfterContentInit , Component , OnInit } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ implements OnInit , AfterContentInit { private code : string = 's' ; private phone : string ; constructor ( private _UNKNOWN_ , private _UNKNOWN_ , private _UNKNOWN_ , private _UNKNOWN_ ) { } ngOnInit ( ) { this . phone = this . _UNKNOWN_ . get ( 's' ) ; } ngAfterContentInit ( ) { this . _UNKNOWN_ . _UNKNOWN_ ( ) . then ( ( code ) => { this . code = code ; this . verify ( ) ; } ) . catch ( ( e ) => { if ( e ) { console . error ( e . message ) ; } } ) ; } _UNKNOWN_ ( { keyCode } ) { if ( keyCode === 0 ) { this . verify ( ) ; } } verify ( ) { this . _UNKNOWN_ . login ( this . phone , this . code ) . then ( ( ) => { this . _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , { } , { animate : true } ) ; } ) . catch ( ( e ) => { this . handleError ( e ) ; } ) ; } handleError ( e ) { console . error ( e ) ; const alert = this . _UNKNOWN_ . create ( { title : 's' , message : e . message , buttons : [ 's' ] } ) ; alert . present ( ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O $string$ O O O O O O $string$ O O O O O O $any$ O O $any$ O O $any$ O O $any$ O O O $void$ O O O O O $string$ O O O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $Promise<string>$ O O O O O O $string$ O O O O O $string$ O $string$ O O O $void$ O O O O O O $complex$ O O $Error$ O O O O O $Error$ O O $Console$ O $void$ O $Error$ O $string$ O O O O O O O $void$ O O $number$ $KeyboardEvent$ O O O O $number$ O O O O O O $void$ O O O O O $void$ O O O O O $any$ O $Promise<void>$ O O O $string$ O O O $string$ O O O O O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O O O $complex$ O O $any$ O O O O O $void$ O $any$ O O O O O O $void$ O $Error$ O O $Console$ O $void$ O $Error$ O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O $Error$ O $string$ O $string[]$ O O O O O O O $any$ O $any$ O O O O O O
<s> import { Component , AfterContentInit } from 's' ; import { Alert , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ implements AfterContentInit { private phone = 's' ; constructor ( private _UNKNOWN_ , private _UNKNOWN_ , private _UNKNOWN_ ) { } ngAfterContentInit ( ) { this . _UNKNOWN_ . getNumber ( ) . then ( ( phone ) => this . phone = phone ) . catch ( ( e ) => console . error ( e . message ) ) ; } _UNKNOWN_ ( { keyCode } ) { if ( keyCode === 0 ) { this . login ( ) ; } } login ( phone = this . phone ) { const alert = this . _UNKNOWN_ . create ( { title : 's' , message : `template` , buttons : [ { text : 's' , role : 's' } , { text : 's' , handler : ( ) => { this . _UNKNOWN_ ( alert ) ; return false ; } } ] } ) ; alert . present ( ) ; } _UNKNOWN_ ( alert ) { alert . dismiss ( ) . then ( ( ) => { return this . _UNKNOWN_ . verify ( this . phone ) ; } ) . then ( ( ) => { this . _UNKNOWN_ . push ( _UNKNOWN_ , { phone : this . phone } ) ; } ) . catch ( ( e ) => { this . handleError ( e ) ; } ) ; } handleError ( e ) { console . error ( e ) ; const alert = this . _UNKNOWN_ . create ( { title : 's' , message : e . message , buttons : [ 's' ] } ) ; alert . present ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O $string$ O O O O O O $any$ O O $any$ O O $any$ O O O $void$ O O O O O $any$ O $Promise<string>$ O O O O O O $string$ O O O O $string$ O $string$ O O $complex$ O O $any$ O O $Console$ O $void$ O $any$ O $any$ O O O O $void$ O O $number$ $KeyboardEvent$ O O O O $number$ O O O O O O $void$ O O O O O $void$ O $string$ O O O $string$ O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $boolean$ O O O O O O O $void$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O O $void$ O $Alert$ O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O $string$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $any$ O O O O O $void$ O $any$ O O O O O O $void$ O $Error$ O O $Console$ O $void$ O $Error$ O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O $Error$ O $string$ O $string[]$ O O O O O O O $any$ O $any$ O O O O O O
<s> import { Component , Injectable } from 's' ; import { Alert , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , templateUrl : 's' } ) @ Injectable ( ) export class _UNKNOWN_ { constructor ( private _UNKNOWN_ , private _UNKNOWN_ , private _UNKNOWN_ , private _UNKNOWN_ ) { } _UNKNOWN_ ( ) { this . _UNKNOWN_ . dismiss ( ) . then ( ( ) => { this . _UNKNOWN_ . push ( _UNKNOWN_ ) ; } ) ; } logout ( ) { const alert = this . _UNKNOWN_ . create ( { title : 's' , message : 's' , buttons : [ { text : 's' , role : 's' } , { text : 's' , handler : ( ) => { this . _UNKNOWN_ ( alert ) ; return false ; } } ] } ) ; this . _UNKNOWN_ . dismiss ( ) . then ( ( ) => { alert . present ( ) ; } ) ; } _UNKNOWN_ ( alert ) { alert . dismiss ( ) . then ( ( ) => { return this . _UNKNOWN_ . logout ( ) ; } ) . then ( ( ) => { this . _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , { } , { animate : true } ) ; } ) . catch ( ( e ) => { this . handleError ( e ) ; } ) ; } handleError ( e ) { console . error ( e ) ; const alert = this . _UNKNOWN_ . create ( { title : 's' , message : e . message , buttons : [ 's' ] } ) ; alert . present ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O O O O $any$ O O O O $any$ O O $any$ O O $any$ O O $any$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O $void$ O O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $boolean$ O O O O O O O $void$ O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O O O $void$ O $Alert$ O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $Promise<void>$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O O O O O O O O $any$ O O $any$ O O O O O $void$ O $any$ O O O O O O $void$ O $Error$ O O $Console$ O $void$ O $Error$ O O O $any$ O O O $any$ O $any$ O O $string$ O O O $string$ O $Error$ O $string$ O $string[]$ O O O O O O O $any$ O $any$ O O O O O O
<s> import { Component , OnInit } from 's' ; import { _UNKNOWN_ , Users , _UNKNOWN_ } from 's' ; import { User } from 's' ; import { _UNKNOWN_ , Platform , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _ from 's' ; import { Observable , Subscription , BehaviorSubject } from 's' ; import { _UNKNOWN_ } from "s" ; @ Component ( { selector : 's' , templateUrl : 's' } ) export class _UNKNOWN_ implements OnInit { searchPattern : BehaviorSubject < any > ; _UNKNOWN_ : string ; users : Observable < User [ ] > ; _UNKNOWN_ : Subscription ; contacts : string [ ] = [ ] ; _UNKNOWN_ : Promise < void > ; constructor ( private _UNKNOWN_ , private _UNKNOWN_ , private platform , private _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ . userId ( ) ; this . searchPattern = new BehaviorSubject ( undefined ) ; } ngOnInit ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = this . _UNKNOWN_ . _UNKNOWN_ ( ) . then ( ( _UNKNOWN_ : string [ ] ) => { this . contacts = _UNKNOWN_ ; } ) . catch ( ( e ) => { console . error ( e . message ) ; } ) ; } _UNKNOWN_ ( newValue ) { this . searchPattern . next ( newValue ) ; } _UNKNOWN_ ( ) { this . searchPattern . asObservable ( ) . debounce ( ( ) => Observable . timer ( 0 ) ) . forEach ( ( ) => { if ( this . _UNKNOWN_ ) { this . _UNKNOWN_ . unsubscribe ( ) ; } this . _UNKNOWN_ . then ( ( ) => { this . _UNKNOWN_ = this . _UNKNOWN_ ( ) ; } ) ; } ) ; } _UNKNOWN_ ( user ) { _UNKNOWN_ . call ( 's' , user . _id ) . subscribe ( { next : ( ) => { this . _UNKNOWN_ . dismiss ( ) ; } , error : ( e ) => { this . _UNKNOWN_ . dismiss ( ) . then ( ( ) => { this . handleError ( e ) ; } ) ; } } ) ; } _UNKNOWN_ ( ) { const subscription = _UNKNOWN_ . subscribe ( 's' , this . searchPattern . getValue ( ) , this . contacts ) ; const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) ; return Observable . merge ( subscription , _UNKNOWN_ ) . subscribe ( ( ) => { this . users = this . _UNKNOWN_ ( ) ; } ) ; } _UNKNOWN_ ( ) < User [ ] > { return _UNKNOWN_ . find ( { _UNKNOWN_ : this . _UNKNOWN_ } , { fields : { _UNKNOWN_ : 0 } } ) . startWith ( [ ] ) . mergeMap ( ( _UNKNOWN_ ) => { const _UNKNOWN_ = _ . chain ( _UNKNOWN_ ) . map ( 's' ) . flatten ( ) . concat ( this . _UNKNOWN_ ) . value ( ) ; return Users . find ( { _id : { _UNKNOWN_ : _UNKNOWN_ } } ) . startWith ( [ ] ) ; } ) ; } handleError ( e ) { console . error ( e ) ; const alert = this . _UNKNOWN_ . create ( { buttons : [ 's' ] , message : e . message , title : 's' } ) ; alert . present ( ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { let platform = this . platform . is ( 's' ) ? "s" : this . platform . is ( 's' ) ? "s" : "s" ; platform = this . platform . is ( 's' ) ? platform : "s" ; return _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , platform ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $string[]$ O O O O O O O O $Promise<void>$ O $PromiseConstructor$ O O O O O O O $any$ O O $any$ O O $Platform$ O O $any$ O O O O $string$ O $any$ O $any$ O O O O O $any$ O O $any$ O $undefined$ O O O $void$ O O O O O $void$ O O O O O $Promise<void>$ O O O $any$ O $Promise<string[]>$ O O O O O O $string[]$ O O O O O O O O O $string[]$ O $string[]$ O O O O $complex$ O O $Error$ O O O $Console$ O $void$ O $Error$ O $string$ O O O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O O $void$ O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $Promise<void>$ O O O O O O O O O $any$ O O O $any$ O O O O O O O O O O $void$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O $void$ O O O O O O O $any$ O $any$ O O O O O $void$ O O $Error$ O O O O O $any$ O $any$ O O O $any$ O O O O O O O $void$ O $Error$ O O O O O O O O O O $Subscription$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $string[]$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O O $Observable$ O O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $complex$ O O $number$ O O O O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O $any$ O O O $string$ O O $any$ O O O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O $any$ O O O O O O O O O $void$ O $Error$ O O $Console$ O $void$ O $Error$ O O O $any$ O O O $any$ O $any$ O O $string[]$ O O O O O $string$ O $Error$ O $string$ O $string$ O O O O O $any$ O $any$ O O O O $string$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O O $any$ O $any$ O $any$ O $string$ O O O O O
<s> import { Component , OnInit } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , Users , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , Message } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , ModalController , _UNKNOWN_ , Platform } from 's' ; import { _UNKNOWN_ } from 's' ; import { Observable , Subscriber } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; @ Component ( { templateUrl : 's' } ) export class _UNKNOWN_ implements OnInit { _UNKNOWN_ ; _UNKNOWN_ : string ; constructor ( private _UNKNOWN_ , private _UNKNOWN_ , private modalCtrl , private _UNKNOWN_ , private platform , private _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ . userId ( ) ; } _UNKNOWN_ ( ) { const modal = this . modalCtrl . create ( _UNKNOWN_ ) ; modal . present ( ) ; } ngOnInit ( ) { _UNKNOWN_ . subscribe ( 's' ) . subscribe ( ( ) => { _UNKNOWN_ . _UNKNOWN_ ( ) . subscribe ( ( ) => { this . _UNKNOWN_ = this . _UNKNOWN_ ( ) ; } ) ; } ) ; if ( this . platform . is ( 's' ) ) { this . _UNKNOWN_ . getToken ( ) . then ( token => { console . log ( "s" ) ; _UNKNOWN_ . call ( 's' , token ) . subscribe ( { next : ( ) => console . log ( "s" ) , error => console . error ( 's' , err ) } ) ; } ) ; this . _UNKNOWN_ . _UNKNOWN_ ( ) . subscribe ( data => { if ( data . _UNKNOWN_ ) { console . log ( "s" ) ; } else { console . log ( "s" ) ; } } ) ; this . _UNKNOWN_ . _UNKNOWN_ ( ) . subscribe ( token => { console . log ( "s" ) ; _UNKNOWN_ . call ( 's' , token ) . subscribe ( { next : ( ) => console . log ( "s" ) , error => console . error ( 's' + err ) } ) ; } ) ; } } _UNKNOWN_ ( ) < _UNKNOWN_ [ ] > { return _UNKNOWN_ . find ( ) . map ( _UNKNOWN_ => { _UNKNOWN_ . forEach ( chat => { chat . title = 's' ; chat . picture = 's' ; const _UNKNOWN_ = chat . _UNKNOWN_ . find ( _UNKNOWN_ => _UNKNOWN_ !== this . _UNKNOWN_ ) ; const receiver = Users . findOne ( _UNKNOWN_ ) ; if ( receiver ) { chat . title = receiver . profile . name ; let platform = this . platform . is ( 's' ) ? "s" : this . platform . is ( 's' ) ? "s" : "s" ; platform = this . platform . is ( 's' ) ? platform : "s" ; chat . picture = _UNKNOWN_ . _UNKNOWN_ ( receiver . profile . _UNKNOWN_ , platform ) ; } this . _UNKNOWN_ ( chat . _id ) . subscribe ( ( message ) => { chat . _UNKNOWN_ = message ; } ) ; } ) ; return _UNKNOWN_ ; } ) ; } _UNKNOWN_ ( _UNKNOWN_ ) < Message > { return Observable . create ( ( observer < Message > ) => { const _UNKNOWN_ = ( ) => ! ! _UNKNOWN_ . findOne ( _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ ( ) . takeWhile ( _UNKNOWN_ ) . subscribe ( ( ) => { _UNKNOWN_ . find ( { _UNKNOWN_ } , { sort : { createdAt : - 0 } } ) . subscribe ( { next : ( messages ) => { if ( ! messages . length ) { return ; } const _UNKNOWN_ = messages [ 0 ] ; observer . next ( _UNKNOWN_ ) ; } , error : ( e ) => { observer . error ( e ) ; } , complete : ( ) => { observer . complete ( ) ; } } ) ; } ) ; } ) ; } showMessages ( chat ) { this . _UNKNOWN_ . push ( _UNKNOWN_ , { chat } ) ; } _UNKNOWN_ ( chat ) { _UNKNOWN_ . call ( 's' , chat . _id ) . subscribe ( { error : ( e ) => { if ( e ) { this . handleError ( e ) ; } } } ) ; } handleError ( e ) { console . error ( e ) ; const alert = this . _UNKNOWN_ . create ( { buttons : [ 's' ] , message : e . message , title : 's' } ) ; alert . present ( ) ; } _UNKNOWN_ ( ) { const popover = this . _UNKNOWN_ . create ( _UNKNOWN_ , { } , { cssClass : 's' } ) ; popover . present ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O O $any$ O O $ModalController$ O O $any$ O O $Platform$ O O $any$ O O O O $string$ O $any$ O $any$ O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $void$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O $any$ O O O O O O O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $Console$ O $void$ O O O O $any$ O $any$ O O O $any$ O O $any$ O O $void$ O O O O $Console$ O $void$ O O O O $any$ O $Console$ O $void$ O O O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O $Console$ O $void$ O O O O O O O $Console$ O $void$ O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $Console$ O $void$ O O O O $any$ O $any$ O O O $any$ O O $any$ O O $void$ O O O O $Console$ O $void$ O O O O $any$ O $Console$ O $void$ O O O $any$ O O O O O O O O O $Observable$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O $Observable$ O $string$ O O $any$ O O O $any$ O $any$ O O $Subscriber$ O $any$ O O O O O $boolean$ O O O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O O O $any$ O $boolean$ O O $any$ O O O O O $any$ O $any$ O O $string$ O O O $complex$ O O $number$ O O O O O O O $any$ O O $void$ O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $void$ O O $any$ O O O $any$ O $any$ O $any$ O O O O $void$ O O O O O $any$ O $any$ O O O O O O O O O O O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $void$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O $void$ O O $Error$ O O O O O $Error$ O O O O $void$ O $Error$ O O O O O O O O $void$ O $Error$ O O $Console$ O $void$ O $Error$ O O O $any$ O O O $any$ O $any$ O O $string[]$ O O O O O $string$ O $Error$ O $string$ O $string$ O O O O O $any$ O $any$ O O O O $void$ O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $string$ O O O O O $any$ O $any$ O O O O O O
<s> import { Component } from 's' ; import { Platform } from 's' ; import { StatusBar } from 's' ; import { SplashScreen } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { templateUrl : 's' } ) export class MyApp { _UNKNOWN_ : any ; constructor ( platform , statusBar , splashScreen ) { this . _UNKNOWN_ = _UNKNOWN_ . user ( ) ? _UNKNOWN_ : _UNKNOWN_ ; platform . ready ( ) . then ( ( ) => { if ( platform . is ( 's' ) ) { statusBar . _UNKNOWN_ ( ) ; splashScreen . hide ( ) ; } } ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O $any$ O O O O O $Platform$ O $StatusBar$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O
<s> import { BrowserModule } from 's' ; import { ErrorHandler , NgModule } from 's' ; import { IonicApp , IonicErrorHandler , IonicModule } from 's' ; import { SplashScreen } from 's' ; import { StatusBar } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { MyApp } from 's' ; @ NgModule ( { declarations : [ MyApp , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ BrowserModule , IonicModule . forRoot ( MyApp ) , _UNKNOWN_ , _UNKNOWN_ . forRoot ( { apiKey : 's' } ) ] , bootstrap : [ IonicApp ] , entryComponents : [ MyApp , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] , providers : [ StatusBar , SplashScreen , _UNKNOWN_ , { provide : ErrorHandler , useClass : IonicErrorHandler } , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ] } ) export class AppModule { } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $string$ O O O O O O $any[]$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O
<s> import 's' ; import { platformBrowserDynamic } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { AppModule } from 's' ; _UNKNOWN_ . _UNKNOWN_ ( ( ) => { const subscription = _UNKNOWN_ . _UNKNOWN_ ( ) . subscribe ( ( ) => { if ( _UNKNOWN_ . _UNKNOWN_ ( ) ) { return ; } setTimeout ( ( ) => subscription . unsubscribe ( ) ) ; platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ; } ) ; } ) ; </s>	O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O O O O O O $number$ O O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O O O O
<s> export interface _UNKNOWN_ { [ key ] : Array < string > } export const _UNKNOWN_ = < _UNKNOWN_ > { "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] } </s>	O O O $any$ O O $string$ O O $ArrayConstructor$ O O O O O O $any$ O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> const _UNKNOWN_ = ( str ) => str . split ( "s" ) . length ; export default [ { test : ( str ) => _UNKNOWN_ ( str ) > 0 && ! ( _UNKNOWN_ ( str ) < 0 && "s" . test ( str ) ) , comp : ( str ) => "s" + str , _UNKNOWN_ : ( str ) => "s" + str } , { test : ( str ) => _UNKNOWN_ ( str ) > 0 && "s" . test ( str ) , comp : ( str ) => "s" + str , _UNKNOWN_ : ( str ) => "s" + str } , { test : ( str ) => _UNKNOWN_ ( str ) > 0 && "s" . test ( str ) , comp : ( str ) => "s" + str , _UNKNOWN_ : ( str ) => "s" + str } , { test : ( str ) => "s" . test ( str ) , comp : ( str ) => str . replace ( "s" , "s" ) , _UNKNOWN_ : ( str ) => str . replace ( "s" , "s" ) , } , { test : ( str ) => "s" . test ( str ) , comp : ( str ) => str . replace ( "s" , "s" ) , _UNKNOWN_ : ( str ) => str . replace ( "s" , "s" ) , } , { test : ( str ) => "s" . test ( str ) , comp : ( str ) => str . replace ( "s" , "s" ) , _UNKNOWN_ : ( str ) => str . replace ( "s" , "s" ) , } , { test : ( str ) => true , comp : ( str ) => str + "s" , _UNKNOWN_ : ( str ) => str + "s" , } ] ; </s>	O O $number$ O O $string$ O O $string$ O $complex$ O O O O $number$ O O O O O $boolean$ O O $string$ O O $number$ O $string$ O O O O O O $number$ O $string$ O O O O O O $boolean$ O $string$ O O O $string$ O O $string$ O O O O $string$ O $string$ O O $string$ O O O O $string$ O O O $boolean$ O O $string$ O O $number$ O $string$ O O O O O O $boolean$ O $string$ O O $string$ O O $string$ O O O O $string$ O $string$ O O $string$ O O O O $string$ O O O $boolean$ O O $string$ O O $number$ O $string$ O O O O O O $boolean$ O $string$ O O $string$ O O $string$ O O O O $string$ O $string$ O O $string$ O O O O $string$ O O O $boolean$ O O $string$ O O O O $boolean$ O $string$ O O $string$ O O $string$ O O $string$ O $complex$ O O O O O O $string$ O O $string$ O O $string$ O $complex$ O O O O O O O O O $boolean$ O O $string$ O O O O $boolean$ O $string$ O O $string$ O O $string$ O O $string$ O $complex$ O O O O O O $string$ O O $string$ O O $string$ O $complex$ O O O O O O O O O $boolean$ O O $string$ O O O O $boolean$ O $string$ O O $string$ O O $string$ O O $string$ O $complex$ O O O O O O $string$ O O $string$ O O $string$ O $complex$ O O O O O O O O O $boolean$ O O $string$ O O O O $string$ O O $string$ O O $string$ O O O $string$ O O $string$ O O $string$ O O O O O O O
<s> import rules from "s" ; import { _UNKNOWN_ as _UNKNOWN_ } from "s" ; export const _UNKNOWN_ = function ( input ) : string { if ( _UNKNOWN_ [ input ] ) return _UNKNOWN_ [ input ] [ 0 ] ; for ( var i = 0 ; i < rules . length ; i ++ ) { if ( ! rules [ i ] . test ( input ) ) continue ; else return rules [ i ] . comp ( input ) ; } return "s" } ; export const _UNKNOWN_ = function ( input ) : string { if ( _UNKNOWN_ [ input ] ) return _UNKNOWN_ [ input ] [ 0 ] ; for ( var i = 0 ; i < rules . length ; i ++ ) { if ( ! rules [ i ] . test ( input ) ) continue ; else return rules [ i ] . _UNKNOWN_ ( input ) ; } return "s" } ; </s>	O O $complex$ O O O O O $any$ O $any$ O O O O O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $any$ O $string$ O O O O O O O O $number$ O O O $number$ O $complex$ O $number$ O $number$ O O O O O O $complex$ O $number$ O O $boolean$ O $string$ O O O O O O $complex$ O $number$ O O $string$ O $string$ O O O O O O O O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $any$ O $string$ O O O O O O O O $number$ O O O $number$ O $complex$ O $number$ O $number$ O O O O O O $complex$ O $number$ O O $boolean$ O $string$ O O O O O O $complex$ O $number$ O O $string$ O $string$ O O O O O O O O
<s> const rules = [ { test : "s" , transform : function ( _UNKNOWN_ , to ) : string { if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" || to === "s" ) return _UNKNOWN_ + 's' ; return _UNKNOWN_ ; } } , { test : "s" , transform : function ( _UNKNOWN_ , to ) : string { var base = _UNKNOWN_ . substr ( 0 , _UNKNOWN_ . length - 0 ) ; if ( to === "s" ) return base + 's' ; if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" || to === "s" ) return base + 's' ; return _UNKNOWN_ ; } } , { test : "s" , transform : function ( _UNKNOWN_ , to ) : string { var base = _UNKNOWN_ . substr ( 0 , _UNKNOWN_ . length - 0 ) ; if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" ) return base + 's' ; if ( to === "s" || to === "s" ) return base + 's' ; return _UNKNOWN_ ; } } , { test : "s" , transform : function ( _UNKNOWN_ , to ) : string { if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" ) return _UNKNOWN_ + _UNKNOWN_ [ _UNKNOWN_ . length - 0 ] + 's' ; if ( to === "s" || to === "s" ) return _UNKNOWN_ + _UNKNOWN_ [ _UNKNOWN_ . length - 0 ] + 's' ; return _UNKNOWN_ ; } } , { test : "s" , transform : function ( _UNKNOWN_ , to ) : string { if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" || to === "s" ) return _UNKNOWN_ + 's' ; return _UNKNOWN_ ; } } , { test : "s" , transform : function ( _UNKNOWN_ , to ) : string { if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" || to === "s" ) return _UNKNOWN_ + 's' ; return _UNKNOWN_ ; } } , { test : "s" , transform : function ( _UNKNOWN_ , to ) : string { if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" ) return _UNKNOWN_ . substr ( 0 , _UNKNOWN_ . length - 0 ) + 's' ; if ( to === "s" || to === "s" ) return _UNKNOWN_ + 's' ; return _UNKNOWN_ ; } } , { test : "s" , transform : function ( _UNKNOWN_ , to ) : string { if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" ) return _UNKNOWN_ . substr ( 0 , _UNKNOWN_ . length - 0 ) + 's' ; if ( to === "s" || to === "s" ) return _UNKNOWN_ + 's' ; return _UNKNOWN_ ; } } , { test : "s" , transform : function ( _UNKNOWN_ , to ) : string { if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" ) return _UNKNOWN_ + 's' ; if ( to === "s" || to === "s" ) return _UNKNOWN_ + 's' ; return _UNKNOWN_ ; } } ] ; function _UNKNOWN_ ( input , to ) { for ( let i = 0 ; i < rules . length ; i ++ ) { let rule = rules [ i ] ; if ( rule . test . test ( input ) ) return rule . transform ( input , to ) ; } return "s" ; } export { _UNKNOWN_ } ; </s>	O O $complex$ O O O $RegExp$ O O O $string$ O O O $string$ O $string$ O O O O O O $string$ O O O O $string$ O O O O O $string$ O O O O $string$ O O O O O $string$ O O O $string$ O O O O $string$ O O O O $string$ O O O O O $RegExp$ O O O $string$ O O O $string$ O $string$ O O O O O $string$ O $string$ O $string$ O O O $string$ O $number$ O O O O O O $string$ O O O O $string$ O O O O O $string$ O O O O $string$ O O O O O $string$ O O O $string$ O O O O $string$ O O O O $string$ O O O O O $RegExp$ O O O $string$ O O O $string$ O $string$ O O O O O $string$ O $string$ O $string$ O O O $string$ O $number$ O O O O O O $string$ O O O O $string$ O O O O O $string$ O O O O $string$ O O O O O $string$ O O O $string$ O O O O $string$ O O O O $string$ O O O O O $RegExp$ O O O $string$ O O O $string$ O $string$ O O O O O O $string$ O O O O $string$ O O O O O $string$ O O O O $string$ O $string$ O $string$ O $number$ O O O O O O O O $string$ O O O $string$ O O O O $string$ O $string$ O $string$ O $number$ O O O O O O O $string$ O O O O O $RegExp$ O O O $string$ O O O $string$ O $string$ O O O O O O $string$ O O O O $string$ O O O O O $string$ O O O O $string$ O O O O O $string$ O O O $string$ O O O O $string$ O O O O $string$ O O O O O $RegExp$ O O O $string$ O O O $string$ O $string$ O O O O O O $string$ O O O O $string$ O O O O O $string$ O O O O $string$ O O O O O $string$ O O O $string$ O O O O $string$ O O O O $string$ O O O O O $RegExp$ O O O $string$ O O O $string$ O $string$ O O O O O O $string$ O O O O $string$ O O O O O $string$ O O O O $string$ O $string$ O O O $string$ O $number$ O O O O O O O O $string$ O O O $string$ O O O O $string$ O O O O $string$ O O O O O $RegExp$ O O O $string$ O O O $string$ O $string$ O O O O O O $string$ O O O O $string$ O O O O O $string$ O O O O $string$ O $string$ O O O $string$ O $number$ O O O O O O O O $string$ O O O $string$ O O O O $string$ O O O O $string$ O O O O O $RegExp$ O O O $string$ O O O $string$ O $string$ O O O O O O $string$ O O O O $string$ O O O O O $string$ O O O O $string$ O O O O O $string$ O O O $string$ O O O O $string$ O O O O $string$ O O O O O O $string$ O $string$ O $string$ O O O O O $number$ O O O $number$ O $complex$ O $number$ O $number$ O O O O $complex$ O $complex$ O $number$ O O O O $complex$ O $RegExp$ O $boolean$ O $string$ O O O $complex$ O $string$ O $string$ O $string$ O O O O O O O O O $string$ O O O
<s> import * as list from "s" ; function _UNKNOWN_ ( verb ) { if ( verb . length < 0 ) return "s" ; verb = verb . substring ( 0 ) ; if ( list . lookup ( verb ) . length ) return verb ; else return _UNKNOWN_ ( verb ) ; } function _UNKNOWN_ ( original , _UNKNOWN_ , _UNKNOWN_ ) { let _UNKNOWN_ = original . substr ( 0 , original . indexOf ( _UNKNOWN_ ) + _UNKNOWN_ . length ) ; _UNKNOWN_ = original . split ( _UNKNOWN_ ) . join ( _UNKNOWN_ ) ; return _UNKNOWN_ ; } export { _UNKNOWN_ , _UNKNOWN_ } </s>	O O O O $any$ O O O O $string$ O $string$ O O O O $string$ O $number$ O O O O O O $string$ O $string$ O $string$ O O O O O O $any$ O $string[]$ O $string$ O O $number$ O O $string$ O O O $string$ O $string$ O O O O $string$ O $string$ O $string$ O $string$ O O O $string$ O $string$ O $string$ O O O $string$ O $number$ O $string$ O O $string$ O $number$ O O $string$ O $string$ O $complex$ O $string$ O O $string$ O $string$ O O O $string$ O O O O $string$ O $string$ O O
<s> import * as list from "s" ; import * as regex from "s" ; import * as _UNKNOWN_ from "s" ; import _UNKNOWN_ from "s" ; const index = [ "s" , "s" , "s" , "s" , "s" ] ; const _UNKNOWN_ = function ( input , to = "s" ) : string { let lookup = list . lookup ( input ) ; let toIndex = index . indexOf ( to ) ; if ( lookup [ toIndex ] ) return lookup [ toIndex ] ; else if ( list . _UNKNOWN_ [ input ] ) return regex . _UNKNOWN_ ( input , to ) ; let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( input ) ; if ( _UNKNOWN_ ) { let _UNKNOWN_ = list . lookup ( _UNKNOWN_ ) [ toIndex ] ; if ( _UNKNOWN_ ) return _UNKNOWN_ . _UNKNOWN_ ( input , _UNKNOWN_ , _UNKNOWN_ ) ; else if ( list . _UNKNOWN_ [ _UNKNOWN_ ] ) return _UNKNOWN_ . _UNKNOWN_ ( input , _UNKNOWN_ , regex . _UNKNOWN_ ( input , to ) ) ; } let _UNKNOWN_ = _UNKNOWN_ ( input ) ; if ( _UNKNOWN_ ) return list . lookup ( _UNKNOWN_ ) [ toIndex ] || regex . _UNKNOWN_ ( _UNKNOWN_ , to ) ; return regex . _UNKNOWN_ ( input , to ) ; } const _UNKNOWN_ = ( input ) : string => _UNKNOWN_ ( input , "s" ) ; const _UNKNOWN_ = ( input ) : string => _UNKNOWN_ ( input , "s" ) ; const _UNKNOWN_ = ( input ) : string => _UNKNOWN_ ( input , "s" ) ; const _UNKNOWN_ = ( input ) : string => _UNKNOWN_ ( input , "s" ) ; const _UNKNOWN_ = ( input ) : string => _UNKNOWN_ ( input , "s" ) ; export { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $string$ O O O O $string[]$ O O O O O O O O O O O O O O $string$ O O O $string$ O $string$ O O O O O O O $string[]$ O $any$ O $string[]$ O $string$ O O O $number$ O $string[]$ O $number$ O $string$ O O O O $string[]$ O $number$ O O O $string[]$ O $number$ O O O O O $any$ O $any$ O $string$ O O O $any$ O $string$ O $string$ O $string$ O O O $string$ O $any$ O $string$ O $string$ O O O O $string$ O O O $string$ O $any$ O $string[]$ O $string$ O O $number$ O O O O $string$ O O $any$ O $string$ O $string$ O $string$ O $string$ O O O O O $any$ O $any$ O $string$ O O O $any$ O $string$ O $string$ O $string$ O $any$ O $string$ O $string$ O $string$ O O O O O $string$ O $string$ O $string$ O O O O $string$ O O $any$ O $string[]$ O $string$ O O $number$ O O $any$ O $string$ O $string$ O $string$ O O O $any$ O $string$ O $string$ O $string$ O O O O $string$ O O $string$ O O O O $string$ O $string$ O O O O O $string$ O O $string$ O O O O $string$ O $string$ O O O O O $string$ O O $string$ O O O O $string$ O $string$ O O O O O $string$ O O $string$ O O O O $string$ O $string$ O O O O O $string$ O O $string$ O O O O $string$ O $string$ O O O O O O $string$ O $string$ O $string$ O $string$ O $string$ O $string$ O O O
<s> export default [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ; </s>	
<s> import _UNKNOWN_ from "s" ; function _UNKNOWN_ ( input ) { return ! ~ _UNKNOWN_ . indexOf ( input ) ; } function _UNKNOWN_ ( input ) { return ! _UNKNOWN_ ( input ) ; } export { _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O $string[]$ O O O O $Boolean$ O $string$ O O O O O $string[]$ O $number$ O $string$ O O O O $Boolean$ O $string$ O O O O $Boolean$ O $string$ O O O O O $Boolean$ O $Boolean$ O O O
<s> const _UNKNOWN_ = [ "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , ] ; const _UNKNOWN_ = [ "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , ] ; export { _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O $RegExp[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $RegExp[]$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $RegExp[]$ O $RegExp[]$ O O O
<s> export interface _UNKNOWN_ { [ key ] : Array < string > } const 0 = < _UNKNOWN_ > { "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" ] , "s" : [ "s" , "s" ] , "s" : [ "s" ] , } ; const 0 = < _UNKNOWN_ > { } ; for ( let entry in 0 ) { if ( ! 0 . hasOwnProperty ( entry ) ) continue ; 0 [ entry ] . forEach ( x => 0 [ x ] = [ entry ] ) ; } export { 0 , 0 } ; </s>	O O O $any$ O O $string$ O O $ArrayConstructor$ O O O O O $any$ O O $anyany$ O O $any$ O O O O O O O $string$ O $any$ O O O O O $any$ O $boolean$ O $string$ O O O O $any$ O $string$ O O $void$ O $string$ O $any$ O $string$ O O O $string$ O O O O O O $any$ O $any$ O O O
<s> import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as exceptions from "s" ; function _UNKNOWN_ ( input ) { input = input . split ( "s" ) [ 0 ] . toLowerCase ( ) . trim ( ) ; if ( _UNKNOWN_ . _UNKNOWN_ ( input ) ) return true ; else if ( exceptions . 0 [ input ] ) return true ; else if ( exceptions . 0 [ input ] ) return false ; for ( let i = 0 ; i < _UNKNOWN_ . _UNKNOWN_ . length ; i ++ ) { if ( _UNKNOWN_ . _UNKNOWN_ [ i ] . test ( input ) ) return true ; } for ( let i = 0 ; i < _UNKNOWN_ . _UNKNOWN_ . length ; i ++ ) { if ( _UNKNOWN_ . _UNKNOWN_ [ i ] . test ( input ) ) return false ; } return true ; } function _UNKNOWN_ ( input ) { input = input . split ( "s" ) [ 0 ] . toLowerCase ( ) . trim ( ) ; if ( _UNKNOWN_ . _UNKNOWN_ ( input ) ) return true ; return ! _UNKNOWN_ ( input ) ; } export { _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $Boolean$ O $string$ O O $string$ O $string$ O $complex$ O O O O O O O $string$ O O O $string$ O O O O O $any$ O $Boolean$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O $number$ O O O $number$ O $any$ O $RegExp[]$ O $number$ O $number$ O O O O O $any$ O $RegExp[]$ O $number$ O O $boolean$ O $string$ O O O O O O O O O $number$ O O O $number$ O $any$ O $RegExp[]$ O $number$ O $number$ O O O O O $any$ O $RegExp[]$ O $number$ O O $boolean$ O $string$ O O O O O O O O O O O $Boolean$ O $string$ O O $string$ O $string$ O $complex$ O O O O O O O $string$ O O O $string$ O O O O O $any$ O $Boolean$ O $string$ O O O O O O O $Boolean$ O $string$ O O O O O $Boolean$ O $Boolean$ O O O
<s> const _UNKNOWN_ = [ { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , ] ; const _UNKNOWN_ = [ { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } , { regexp : "s" , replacement : 's' } ] ; export { _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O $complex$ O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O O O $complex$ O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O $RegExp$ O O O $string$ O O O O O O O $complex$ O $complex$ O O O
<s> import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; export const _UNKNOWN_ = function ( input ) : string { if ( _UNKNOWN_ . _UNKNOWN_ ( input ) ) return input ; else if ( _UNKNOWN_ . 0 [ input ] ) return _UNKNOWN_ . 0 [ input ] [ 0 ] ; for ( let i = 0 ; i < _UNKNOWN_ . _UNKNOWN_ . length ; i ++ ) { var pattern = _UNKNOWN_ . _UNKNOWN_ [ i ] ; if ( pattern . regexp . test ( input ) ) return input . replace ( pattern . regexp , pattern . replacement ) ; } return input ; } export const _UNKNOWN_ = function ( input ) : string { if ( _UNKNOWN_ . _UNKNOWN_ ( input ) ) return input ; else if ( _UNKNOWN_ . 0 [ input ] ) return _UNKNOWN_ . 0 [ input ] [ 0 ] ; for ( let i = 0 ; i < _UNKNOWN_ . _UNKNOWN_ . length ; i ++ ) { var pattern = _UNKNOWN_ . _UNKNOWN_ [ i ] ; if ( pattern . regexp . test ( input ) ) return input . replace ( pattern . regexp , pattern . replacement ) ; } return input ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $string$ O O O $string$ O O O O O O $any$ O $Boolean$ O $string$ O O O $string$ O O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O $string$ O O O O O O O O $number$ O O O $number$ O $any$ O $complex$ O $number$ O $number$ O O O O $complex$ O $any$ O $complex$ O $number$ O O O O $complex$ O $RegExp$ O $boolean$ O $string$ O O O $string$ O $complex$ O $complex$ O $RegExp$ O $complex$ O $string$ O O O O $string$ O O O O $string$ O O O $string$ O O O O O O $any$ O $Boolean$ O $string$ O O O $string$ O O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O $string$ O O O O O O O O $number$ O O O $number$ O $any$ O $complex$ O $number$ O $number$ O O O O $complex$ O $any$ O $complex$ O $number$ O O O O $complex$ O $RegExp$ O $boolean$ O $string$ O O O $string$ O $complex$ O $complex$ O $RegExp$ O $complex$ O $string$ O O O O $string$ O O O
<s> import * as _UNKNOWN_ from "s" ; import * as verb from "s" ; import * as noun from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import _UNKNOWN_ from "s" ; export class _UNKNOWN_ { word : string ; constructor ( word ) { this . word = ( word || "s" ) . toLowerCase ( ) ; } public _UNKNOWN_ = ( ) : string => _UNKNOWN_ . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : string => _UNKNOWN_ . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( to ) : string => verb . _UNKNOWN_ ( this . word , to ) ; public _UNKNOWN_ = ( ) : string => verb . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : string => verb . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : string => verb . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : string => verb . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : string => verb . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : string => noun . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : string => noun . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : Boolean => _UNKNOWN_ . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : Boolean => _UNKNOWN_ . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : Boolean => _UNKNOWN_ . _UNKNOWN_ ( this . word ) ; public _UNKNOWN_ = ( ) : Boolean => _UNKNOWN_ . _UNKNOWN_ ( this . word ) ; } const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ; export { _UNKNOWN_ as _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $string[]$ O O O O O $any$ O $string$ O O O O O $string$ O O O O $string$ O O $string$ O O O O $string$ O O O O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O $string$ O O O O $any$ O $string$ O O O $string$ O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O $Boolean$ O O O O $BooleanConstructor$ O $any$ O $Boolean$ O O O $string$ O O O $Boolean$ O O O O $BooleanConstructor$ O $any$ O $Boolean$ O O O $string$ O O O $Boolean$ O O O O $BooleanConstructor$ O $any$ O $Boolean$ O O O $string$ O O O $Boolean$ O O O O $BooleanConstructor$ O $any$ O $Boolean$ O O O $string$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string[]$ O O O
<s> export default [ [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] , [ "s" , "s" , "s" ] ] </s>	
<s> const assert = require ( "s" ) ; import { _UNKNOWN_ } from "s" ; import list from "s" ; describe ( 's' , function ( ) { ( list as any ) . forEach ( ( entry ) => { describe ( entry [ 0 ] , function ( ) { it ( `template` , function ( ) { assert . equal ( new _UNKNOWN_ ( entry [ 0 ] ) . _UNKNOWN_ ( ) , entry [ 0 ] ) ; } ) ; it ( `template` , function ( ) { assert . equal ( new _UNKNOWN_ ( entry [ 0 ] ) . _UNKNOWN_ ( ) , entry [ 0 ] ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O $any$ O $any$ O O O O O O $any$ O O O O O $string[][]$ O O O $any$ O O O O O O O O $string[][]$ O O O O $any$ O O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $string$ O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $string$ O O O $any$ O O O O O O O O O O O O O O O O O O
<s> export default [ "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" , "s" ] ; </s>	
<s> export default [ [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] , [ "s" , "s" ] ] </s>	
<s> const assert = require ( "s" ) ; import { _UNKNOWN_ } from "s" ; import _UNKNOWN_ from "s" ; import _UNKNOWN_ from "s" ; import _UNKNOWN_ from "s" ; describe ( 's' , function ( ) { describe ( 's' , function ( ) { ( _UNKNOWN_ as any ) . forEach ( ( item ) => { it ( 's' + item + 's' , function ( ) { assert . equal ( new _UNKNOWN_ ( item ) . _UNKNOWN_ ( ) , false ) ; } ) ; it ( 's' + item + 's' , function ( ) { assert . equal ( new _UNKNOWN_ ( item ) . _UNKNOWN_ ( ) , true ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { ( _UNKNOWN_ as any ) . forEach ( ( item ) => { it ( 's' + item + 's' , function ( ) { assert . equal ( new _UNKNOWN_ ( item ) . _UNKNOWN_ ( ) , true ) ; } ) ; it ( 's' + item + 's' , function ( ) { assert . equal ( new _UNKNOWN_ ( item ) . _UNKNOWN_ ( ) , false ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { describe ( 's' , function ( ) { describe ( 's' , function ( ) { ( _UNKNOWN_ as any ) . forEach ( ( arr ) => { it ( 's' + arr [ 0 ] , function ( ) { assert . equal ( new _UNKNOWN_ ( arr [ 0 ] ) . _UNKNOWN_ ( ) , true ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { _UNKNOWN_ . forEach ( ( arr ) => { it ( 's' + arr [ 0 ] , function ( ) { assert . equal ( new _UNKNOWN_ ( arr [ 0 ] ) . _UNKNOWN_ ( ) , false ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { _UNKNOWN_ . forEach ( ( arr ) => { it ( 's' + arr [ 0 ] , function ( ) { assert . equal ( new _UNKNOWN_ ( arr [ 0 ] ) . _UNKNOWN_ ( ) , true ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { _UNKNOWN_ . forEach ( ( arr ) => { it ( 's' + arr [ 0 ] , function ( ) { assert . equal ( new _UNKNOWN_ ( arr [ 0 ] ) . _UNKNOWN_ ( ) , false ) ; } ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { describe ( 's' , function ( ) { _UNKNOWN_ . forEach ( ( arr ) => { it ( arr [ 0 ] , function ( ) { assert . equal ( new _UNKNOWN_ ( arr [ 0 ] ) . _UNKNOWN_ ( ) , arr [ 0 ] ) ; } ) ; } ) ; } ) ; describe ( 's' , function ( ) { _UNKNOWN_ . forEach ( ( arr ) => { it ( arr [ 0 ] , function ( ) { assert . equal ( new _UNKNOWN_ ( arr [ 0 ] ) . _UNKNOWN_ ( ) , arr [ 0 ] ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O $any$ O $any$ O O O O O O $any$ O O O O O $string[]$ O O O O $string[]$ O O O O $string[][]$ O O O $any$ O O O O O O O $any$ O O O O O O O O $string[]$ O O O O $any$ O O $any$ O O O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $Boolean$ O O O O O O O O O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $Boolean$ O O O O O O O O O O O O O O O $any$ O O O O O O O O $string[]$ O O O O $any$ O O $any$ O O O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $Boolean$ O O O O O O O O O $any$ O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $Boolean$ O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $string[][]$ O O O O $any$ O O $any$ O O O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $Boolean$ O O O O O O O O O O O O O O O $any$ O O O O O O O $string[][]$ O $void$ O O $string[]$ O O O $any$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O $any$ O $string[]$ O O O O O $Boolean$ O O O O O O O O O O O O O O O $any$ O O O O O O O $string[][]$ O $void$ O O $string[]$ O O O $any$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O $any$ O $string[]$ O O O O O $Boolean$ O O O O O O O O O O O O O O O $any$ O O O O O O O $string[][]$ O $void$ O O $string[]$ O O O $any$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O $any$ O $string[]$ O O O O O $Boolean$ O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $string[][]$ O $void$ O O $string[]$ O O O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O O $any$ O $string[]$ O O O O O $string$ O O O $string[]$ O O O O O O O O O O O O O O $any$ O O O O O O O $string[][]$ O $void$ O O $string[]$ O O O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O O $any$ O $string[]$ O O O O O $string$ O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O O
<s> const list : { [ key ] : string [ ] } = { "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] , "s" : [ "s" , "s" , "s" , "s" , "s" ] } ; export default list ; </s>	O O $complex$ O O O $stringcomplex$ O O
<s> const assert = require ( "s" ) ; import { _UNKNOWN_ } from "s" ; import _UNKNOWN_ from "s" ; function _UNKNOWN_ ( entry , expected ) { describe ( `template` , function ( ) { var result = [ new _UNKNOWN_ ( entry ) . _UNKNOWN_ ( "s" ) , new _UNKNOWN_ ( entry ) . _UNKNOWN_ ( "s" ) , new _UNKNOWN_ ( entry ) . _UNKNOWN_ ( "s" ) , new _UNKNOWN_ ( entry ) . _UNKNOWN_ ( "s" ) , new _UNKNOWN_ ( entry ) . _UNKNOWN_ ( "s" ) , ] ; it ( `template` , function ( ) { assert . equal ( result [ 0 ] , expected [ 0 ] ) ; } ) ; it ( `template` , function ( ) { assert . equal ( result [ 0 ] , expected [ 0 ] ) ; } ) ; it ( `template` , function ( ) { assert . equal ( result [ 0 ] , expected [ 0 ] ) ; } ) ; it ( `template` , function ( ) { assert . equal ( result [ 0 ] , expected [ 0 ] ) ; } ) ; it ( `template` , function ( ) { assert . equal ( result [ 0 ] , expected [ 0 ] ) ; } ) ; } ) ; } for ( var entry in _UNKNOWN_ ) { if ( _UNKNOWN_ . hasOwnProperty ( entry ) ) { _UNKNOWN_ ( entry , ( _UNKNOWN_ [ entry ] ) ) ; } } </s>	O O $any$ O $any$ O O O O O O $any$ O O O O O $complex$ O O O O $void$ O $any$ O $any$ O O $any$ O O O O O O O O $string[]$ O O O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O $any$ O O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string[]$ O O O O $any$ O O O O O O O O O O O O O O O $string$ O $complex$ O O O O $complex$ O $boolean$ O $string$ O O O $void$ O $string$ O O $complex$ O $string$ O O O O O O O
<s> import { camelCase , _UNKNOWN_ } from 's' const _UNKNOWN_ = { _UNKNOWN_ : true , camelCase : false } export type _UNKNOWN_ = { camelCase ? : boolean _UNKNOWN_ ? : boolean } export default class Options { public options : _UNKNOWN_ constructor ( options = { } ) { this . options = { ... _UNKNOWN_ , ... options } } _UNKNOWN_ ( _UNKNOWN_ ) { return this . options . camelCase ? _UNKNOWN_ ( camelCase ( _UNKNOWN_ ) ) : _UNKNOWN_ } _UNKNOWN_ ( columnName ) { return this . options . camelCase ? camelCase ( columnName ) : columnName } } </s>	O O O $any$ O $any$ O O O O $OptionValues$ O O $true$ O O O $false$ O O O O O $any$ O O $boolean$ O O O $boolean$ O O O O O O O $any$ O O $OptionValues$ O $any$ O O $OptionValues$ O O O O O O O $OptionValues$ O O O $OptionValues$ O O $OptionValues$ O O $any$ O $string$ O O O O O $OptionValues$ O $boolean$ O $any$ O $any$ O $string$ O O O $string$ O $any$ O $string$ O O O O O $OptionValues$ O $boolean$ O $any$ O $string$ O O $string$ O O O
<s> import Options from 's' export interface _UNKNOWN_ { _UNKNOWN_ : string , nullable : boolean , tsType ? : string } export interface _UNKNOWN_ { [ columnName ] : _UNKNOWN_ } export interface Database { connectionString : string query ( queryString ) : Promise < Object [ ] > _UNKNOWN_ ( ) : string _UNKNOWN_ ( schema ? ) : any _UNKNOWN_ ( tableName , _UNKNOWN_ ) : Promise < _UNKNOWN_ > _UNKNOWN_ ( tableName , _UNKNOWN_ , options ) : Promise < _UNKNOWN_ > _UNKNOWN_ ( _UNKNOWN_ ) : Promise < string [ ] > } </s>	O O $any$ O O O O $any$ O $string$ O O O $boolean$ O O O $string$ O O O O O O $any$ O O $string$ O O $any$ O O O $any$ O $string$ O O $Promise<Object[]>$ O $string$ O O $PromiseConstructor$ O $ObjectConstructor$ O O O $string$ O O O O $any$ O $string$ $string$ O O O $any$ O $string$ O $string$ O O $PromiseConstructor$ O $any$ O $any$ O $string$ O $string$ O $Options$ O O $PromiseConstructor$ O $any$ O $Promise<string[]>$ O $string$ O O $PromiseConstructor$ O O O O O O O
<s> import * as _ from 's' import { _UNKNOWN_ } from 's' import Options from 's' function _UNKNOWN_ ( name ) { const _UNKNOWN_ = [ 's' , 's' , 's' ] return _UNKNOWN_ . indexOf ( name ) !== - 0 } function normalizeName ( name , options ) { if ( _UNKNOWN_ ( name ) ) { return name + 's' } else { return name } } export function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , options ) { const tableName = options . _UNKNOWN_ ( _UNKNOWN_ ) let members = 's' Object . keys ( _UNKNOWN_ ) . map ( c => options . _UNKNOWN_ ( c ) ) . forEach ( ( columnName ) => { members += `template` } ) return `template` } export function _UNKNOWN_ ( _UNKNOWN_ , options ) { let _UNKNOWN_ = 's' for ( let _UNKNOWN_ in _UNKNOWN_ ) { const _UNKNOWN_ = options . _UNKNOWN_ ( _UNKNOWN_ ) _UNKNOWN_ += `template` _UNKNOWN_ += _UNKNOWN_ [ _UNKNOWN_ ] . map ( ( v ) => `template` ) . join ( 's' ) _UNKNOWN_ += 's' } return _UNKNOWN_ } export function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , options ) { const tableName = options . _UNKNOWN_ ( _UNKNOWN_ ) let fields = 's' Object . keys ( _UNKNOWN_ ) . forEach ( ( _UNKNOWN_ ) => { let type = _UNKNOWN_ [ _UNKNOWN_ ] . tsType let nullable = _UNKNOWN_ [ _UNKNOWN_ ] . nullable ? 's' : 's' const columnName = options . _UNKNOWN_ ( _UNKNOWN_ ) fields += `template` } ) return `template` } </s>	O O O O $any$ O O O O $any$ O O O O $any$ O O O $boolean$ O $string$ O O O $string[]$ O O O O O O O O O $string[]$ O $number$ O $string$ O O O O O O $string$ O $string$ O $Options$ O O O O $boolean$ O $string$ O O O O $string$ O O O O O O $string$ O O O O $string$ O $string$ O $any$ O $Options$ O O O $any$ O $Options$ O $any$ O $string$ O O $string$ O O $ObjectConstructor$ O $complex$ O $any$ O O $U[]$ O $string$ O $Options$ O $any$ O $string$ O O O $void$ O O $any$ O O O $string$ O O O O O O O O O $string$ O $any$ O $Options$ O O O $string$ O O O O O $string$ O $any$ O O O $any$ O $Options$ O $any$ O $string$ O $string$ O O $string$ O $any$ O $string$ O O $any$ O O $string$ O O O O O $any$ O O O $string$ O O O O $string$ O O O $string$ O $string$ O $any$ O $Options$ O O O $any$ O $Options$ O $any$ O $string$ O O $string$ O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O O $string$ O O O O $string$ O $any$ O $string$ O O $string$ O $string$ O $any$ O $string$ O O $boolean$ O O O O O $any$ O $Options$ O $any$ O $string$ O $string$ O O O O O O O O
<s> import * as _UNKNOWN_ from 's' import { mapValues } from 's' import { keys } from 's' import Options from 's' import { _UNKNOWN_ , Database } from 's' const _UNKNOWN_ = _UNKNOWN_ ( ) export class _UNKNOWN_ implements Database { private db : _UNKNOWN_ . _UNKNOWN_ < { } > constructor ( public connectionString ) { this . db = _UNKNOWN_ ( connectionString ) } private static _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ : string [ ] , options ) { return mapValues ( _UNKNOWN_ , column => { switch ( column . _UNKNOWN_ ) { case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : column . tsType = 's' return column case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : column . tsType = 's' return column case 's' : column . tsType = 's' return column case 's' : case 's' : column . tsType = 's' return column case 's' : case 's' : case 's' : column . tsType = 's' return column case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : column . tsType = 's' return column case 's' : column . tsType = 's' return column case 's' : case 's' : case 's' : case 's' : case 's' : column . tsType = 's' return column case 's' : case 's' : column . tsType = 's' return column case 's' : column . tsType = 's' return column default : if ( _UNKNOWN_ . indexOf ( column . _UNKNOWN_ ) !== - 0 ) { column . tsType = options . _UNKNOWN_ ( column . _UNKNOWN_ ) return column } else { console . log ( `template` ) column . tsType = 's' return column } } } ) } public query ( queryString ) { return this . db . query ( queryString ) } public async _UNKNOWN_ ( schema ? ) { type T = { name : string , value : any } let _UNKNOWN_ = { } let _UNKNOWN_ = schema ? _UNKNOWN_ . as . format ( `template` , schema ) : 's' await this . db . each < T > ( 's' + 's' + 's' + 's' + `template` + 's' , [ ] , ( item : T ) => { if ( ! _UNKNOWN_ [ item . name ] ) { _UNKNOWN_ [ item . name ] = [ ] } _UNKNOWN_ [ item . name ] . push ( item . value ) } ) return _UNKNOWN_ } public async _UNKNOWN_ ( tableName , _UNKNOWN_ ) { let _UNKNOWN_ = { } type T = { column_name : string , _UNKNOWN_ : string , is_nullable : string } await this . db . each < T > ( 's' + 's' + 's' , [ tableName , _UNKNOWN_ ] , ( _UNKNOWN_ : T ) => { _UNKNOWN_ [ _UNKNOWN_ . column_name ] = { _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ , nullable : _UNKNOWN_ . is_nullable === 's' } } ) return _UNKNOWN_ } public async _UNKNOWN_ ( tableName , _UNKNOWN_ , options ) { let _UNKNOWN_ = await this . _UNKNOWN_ ( ) let _UNKNOWN_ = keys ( _UNKNOWN_ ) return _UNKNOWN_ . _UNKNOWN_ ( await this . _UNKNOWN_ ( tableName , _UNKNOWN_ ) , _UNKNOWN_ , options ) } public async _UNKNOWN_ ( _UNKNOWN_ ) < string [ ] > { return await this . db . map < string > ( 's' + 's' + 's' + 's' , [ _UNKNOWN_ ] , ( _UNKNOWN_ : { table_name : string } ) => _UNKNOWN_ . table_name ) } _UNKNOWN_ ( ) { return 's' } } </s>	O O O O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $string$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string[]$ O O O O O $Options$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O $string[]$ O $number$ O $any$ O $any$ O O O O O O $any$ O $any$ O $Options$ O $any$ O $any$ O $any$ O O $any$ O O O $Console$ O $void$ O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $string$ O O O O O $any$ O $any$ O $string$ O O O O $Promise<any>$ O $string$ $string$ O O O $any$ O O $string$ O O O $any$ O O O O $any$ O O O O $any$ O $string$ O $any$ O $any$ O $any$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O $T$ O $any$ O O O O O O $any$ O $T$ O $string$ O O O $any$ O $T$ O $string$ O O O O O $any$ O $T$ O $string$ O O $any$ O $T$ O $any$ O O O O $any$ O O O $any$ O $string$ O $string$ O O O $any$ O O O O $any$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O O $string$ O $string$ O O O $T$ O $any$ O O O $any$ O $T$ O $string$ O O O $string$ O $T$ O $string$ O $boolean$ O $T$ O $string$ O O O O O O $any$ O O O $any$ O $string$ O $string$ O $Options$ O O O $any$ O O O O $Promise<any>$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $string$ O $string$ O O $any$ O $Options$ O O O O $Promise$ O $string$ O O O O O O O O O O O $any$ O $any$ O O O O O O O O O O O O O $string$ O O O $complex$ O O $string$ O O O O O $complex$ O $string$ O O $string$ O O O O O O O O
<s> import * as _UNKNOWN_ from 's' import { mapValues , keys , isEqual } from 's' import { parse as _UNKNOWN_ } from 's' import { _UNKNOWN_ , Database } from 's' import Options from 's' export class _UNKNOWN_ implements Database { private db : _UNKNOWN_ . _UNKNOWN_ private _UNKNOWN_ : string constructor ( public connectionString ) { this . db = _UNKNOWN_ . _UNKNOWN_ ( connectionString ) let url = _UNKNOWN_ ( connectionString , true ) if ( url && url . pathname ) { let database = url . pathname . substr ( 0 ) this . _UNKNOWN_ = database } else { this . _UNKNOWN_ = 's' } } private static _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ : string [ ] , options ) { if ( ! options ) throw new Error ( ) return mapValues ( _UNKNOWN_ , column => { switch ( column . _UNKNOWN_ ) { case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : column . tsType = 's' return column case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : column . tsType = 's' return column case 's' : column . tsType = 's' return column case 's' : column . tsType = 's' return column case 's' : case 's' : case 's' : column . tsType = 's' return column case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : case 's' : column . tsType = 's' return column default : if ( _UNKNOWN_ . indexOf ( column . _UNKNOWN_ ) !== - 0 ) { column . tsType = options . _UNKNOWN_ ( column . _UNKNOWN_ ) return column } else { console . log ( `template` ) column . tsType = 's' return column } } } ) } private static _UNKNOWN_ ( _UNKNOWN_ ) : string [ ] { return _UNKNOWN_ . replace ( "s" , 's' ) . split ( `template` ) } private static _UNKNOWN_ ( dataType , columnName ) { return `template` } public query ( queryString ) { return this . _UNKNOWN_ ( queryString ) } public async _UNKNOWN_ ( schema ? ) { let _UNKNOWN_ = { } let _UNKNOWN_ let params : string [ ] if ( schema ) { _UNKNOWN_ = `template` params = [ schema ] } else { _UNKNOWN_ = 's' params = [ ] } const _UNKNOWN_ = await this . _UNKNOWN_ ( 's' + 's' + `template` , params ) _UNKNOWN_ . forEach ( ( _UNKNOWN_ : { column_name : string , column_type : string , data_type : string } ) => { const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . data_type , _UNKNOWN_ . column_name ) const enumValues = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . column_type ) if ( _UNKNOWN_ [ _UNKNOWN_ ] && ! isEqual ( _UNKNOWN_ [ _UNKNOWN_ ] , enumValues ) ) { const errorMsg = `template` + `template` throw new Error ( errorMsg ) } _UNKNOWN_ [ _UNKNOWN_ ] = enumValues } ) return _UNKNOWN_ } public async _UNKNOWN_ ( tableName , _UNKNOWN_ ) { let _UNKNOWN_ = { } const _UNKNOWN_ = await this . _UNKNOWN_ ( 's' + 's' + 's' , [ tableName , _UNKNOWN_ ] ) _UNKNOWN_ . map ( ( _UNKNOWN_ : { column_name : string , data_type : string , is_nullable : string } ) => { const columnName = _UNKNOWN_ . column_name const dataType = _UNKNOWN_ . data_type _UNKNOWN_ [ columnName ] = { _UNKNOWN_ : "s" . test ( dataType ) ? _UNKNOWN_ . _UNKNOWN_ ( dataType , columnName ) : dataType , nullable : _UNKNOWN_ . is_nullable === 's' } } ) return _UNKNOWN_ } public async _UNKNOWN_ ( tableName , _UNKNOWN_ , options ) { const _UNKNOWN_ = await this . _UNKNOWN_ ( _UNKNOWN_ ) let _UNKNOWN_ = keys ( _UNKNOWN_ ) return _UNKNOWN_ . _UNKNOWN_ ( await this . _UNKNOWN_ ( tableName , _UNKNOWN_ ) , _UNKNOWN_ , options ) } public async _UNKNOWN_ ( _UNKNOWN_ ) < string [ ] > { const _UNKNOWN_ = await this . _UNKNOWN_ ( 's' + 's' + 's' + 's' , [ _UNKNOWN_ ] ) return _UNKNOWN_ . map ( ( _UNKNOWN_ : { table_name : string } ) => _UNKNOWN_ . table_name ) } public _UNKNOWN_ ( queryString , _UNKNOWN_ ? < string > ) < Object [ ] > { return new Promise ( ( resolve , reject ) => { this . db . query ( queryString , _UNKNOWN_ , ( error , results < Object > ) => { if ( error ) { return reject ( error ) } return resolve ( results ) } ) } ) } public _UNKNOWN_ ( ) { return this . _UNKNOWN_ } } </s>	O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O O $string$ O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O $any$ O O O O O $string$ O O O O O O $any$ O $any$ O $string[]$ O O O O O $Options$ O O O O O $Options$ O O O $ErrorConstructor$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O O O O $string[]$ O $number$ O $any$ O $any$ O O O O O O $any$ O $any$ O $Options$ O $any$ O $any$ O $any$ O O $any$ O O O $Console$ O $void$ O O O $any$ O $any$ O O O $any$ O O O O O O O $string[]$ O $string$ O O O O O O O $string$ O $complex$ O O O O O O $complex$ O O O O O O $string$ O $string$ O $string$ O O O O O O $Promise<Object[]>$ O $string$ O O O O O $Promise<Object[]>$ O $string$ O O O O $Promise<any>$ O $string$ $string$ O O O $any$ O O O O $string$ O $string[]$ O O O O O O $string$ O O $string$ O O $string[]$ O O $string$ O O O O $string$ O O $string[]$ O O O O O $Object[]$ O O O O $Promise<Object[]>$ O O O O O O O $string[]$ O $Object[]$ O $void$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O O O $string$ O $any$ O $string$ O $complex$ O $string$ O $complex$ O $string$ O O $string[]$ O $any$ O $string[]$ O $complex$ O $string$ O O O $any$ O $string$ O O O $any$ O $any$ O $string$ O O $string[]$ O O O O $string$ O O O O O O $ErrorConstructor$ O $string$ O O $any$ O $string$ O O $string[]$ O O O $any$ O O O $any$ O $string$ O $string$ O O O $any$ O O O O $Object[]$ O O O O $Promise<Object[]>$ O O O O O O O O $string$ O $string$ O O $Object[]$ O $U[]$ O O $complex$ O O $string$ O O O $string$ O O O $string$ O O O O O O O $string$ O $complex$ O $string$ O $string$ O $complex$ O $string$ $any$ O $string$ O O O $string$ O O O $boolean$ O $string$ O O $any$ O $string$ O $string$ O $string$ O O $string$ O $boolean$ O $complex$ O $string$ O O O O O O $any$ O O O $any$ O $string$ O $string$ O $Options$ O O O $any$ O O O O $Promise<any>$ O $string$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $string$ O $string$ O O $any$ O $Options$ O O O O $Promise$ O $string$ O O O O O O O O $Object[]$ O O O O $Promise<Object[]>$ O O O O O O O O O O $string$ O O O $Object[]$ O $U[]$ O O $complex$ O O $string$ O O O O O $complex$ O $string$ O O O $Promise$ O $string$ O $string[]$ $Array$ O O O O O $ObjectConstructor$ O O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O O $any$ O $any$ O $string$ O $string[]$ O O $Error$ O $Array$ O $ObjectConstructor$ O O O O O O $Error$ O O O $void$ O $Error$ O O O $void$ O $Object[]$ O O O O O O O $string$ O O O O O O $string$ O O O
<s> import { Database } from 's' import { _UNKNOWN_ } from 's' import { _UNKNOWN_ } from 's' enum _UNKNOWN_ { _UNKNOWN_ = 0 , _UNKNOWN_ = 0 , _UNKNOWN_ = 0 } function _UNKNOWN_ ( connection ) { if ( "s" . test ( connection ) ) { return _UNKNOWN_ . _UNKNOWN_ } else if ( "s" . test ( connection ) ) { return _UNKNOWN_ . _UNKNOWN_ } else { return _UNKNOWN_ . _UNKNOWN_ } } export function _UNKNOWN_ ( connection ) { switch ( _UNKNOWN_ ( connection ) ) { case _UNKNOWN_ . _UNKNOWN_ : return new _UNKNOWN_ ( connection ) case _UNKNOWN_ . _UNKNOWN_ : return new _UNKNOWN_ ( connection ) default : throw new Error ( `template` ) } } export { Database } from 's' </s>	O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O O $any$ O $string$ O O O O O O $boolean$ O $string$ O O O O $any$ O $any$ O O O O O O $boolean$ O $string$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $Database$ O $string$ O O O O $any$ O $string$ O O O O $any$ O $any$ O O O $any$ O $string$ O O $any$ O $any$ O O O $any$ O $string$ O O O O O $ErrorConstructor$ O O O O O O O $any$ O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' import { _UNKNOWN_ , Database } from 's' import Options , { _UNKNOWN_ } from 's' import { _UNKNOWN_ , Options as _UNKNOWN_ } from 's' const _UNKNOWN_ = require ( 's' ) . version function getTime ( ) { let _UNKNOWN_ = ( value ) => `template` . slice ( - 0 ) let time = new Date ( ) const _UNKNOWN_ = time . getFullYear ( ) const _UNKNOWN_ = _UNKNOWN_ ( time . getMonth ( ) + 0 ) const dd = _UNKNOWN_ ( time . getDate ( ) ) const _UNKNOWN_ = _UNKNOWN_ ( time . getHours ( ) ) const mm = _UNKNOWN_ ( time . getMinutes ( ) ) const ss = _UNKNOWN_ ( time . getSeconds ( ) ) return `template` } function _UNKNOWN_ ( db , _UNKNOWN_ : string [ ] , schema : string | null , options ) { let commands = [ 's' , 's' , 's' , db . connectionString . replace ( "s" , 's' ) ] if ( options . camelCase ) commands . push ( 's' ) if ( _UNKNOWN_ . length > 0 ) { _UNKNOWN_ . forEach ( ( t ) => { commands . push ( 's' , t ) } ) } if ( schema ) { commands . push ( 's' , schema ) } return `template` } export async function _UNKNOWN_ ( db : Database | string , table , schema , options = new Options ( ) ) { if ( typeof db === 's' ) { db = _UNKNOWN_ ( db ) } let interfaces = 's' let _UNKNOWN_ = await db . _UNKNOWN_ ( table , schema , options ) interfaces += _UNKNOWN_ ( table , _UNKNOWN_ , options ) interfaces += _UNKNOWN_ ( table , _UNKNOWN_ , options ) return interfaces } export async function _UNKNOWN_ ( db : Database | string , _UNKNOWN_ : string [ ] = [ ] , schema : string | null = null , options = { } ) < string > { if ( typeof db === 's' ) { db = _UNKNOWN_ ( db ) } if ( ! schema ) { schema = db . _UNKNOWN_ ( ) } if ( _UNKNOWN_ . length === 0 ) { _UNKNOWN_ = await db . _UNKNOWN_ ( schema ) } const optionsObject = new Options ( options ) const _UNKNOWN_ = _UNKNOWN_ ( await db . _UNKNOWN_ ( schema ) , optionsObject ) const _UNKNOWN_ = _UNKNOWN_ . map ( ( table ) => _UNKNOWN_ ( db , table , schema as string , optionsObject ) ) const interfaces = await Promise . all ( _UNKNOWN_ ) . then ( _UNKNOWN_ => _UNKNOWN_ . join ( 's' ) ) let output = 's' if ( optionsObject . options . _UNKNOWN_ ) { output += _UNKNOWN_ ( db , _UNKNOWN_ , schema , options ) } output += _UNKNOWN_ output += interfaces const _UNKNOWN_ = { replace : false , verify : false , tsconfig : true , tslint : true , _UNKNOWN_ : true , _UNKNOWN_ : true , vscode : false , _UNKNOWN_ : null , _UNKNOWN_ : null , _UNKNOWN_ : null , _UNKNOWN_ : null } const _UNKNOWN_ = await _UNKNOWN_ ( 's' , output , _UNKNOWN_ ) return _UNKNOWN_ . dest } export { Database , _UNKNOWN_ } from 's' export { Options , _UNKNOWN_ } </s>	O O O $string$ O $string$ O $string$ O O O O O $Database$ O $any$ O O O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $string$ O O O O $string$ O O $number$ O O O O $string$ O O O O O $Date$ O O $DateConstructor$ O O O $number$ O $Date$ O $number$ O O O $string$ O $string$ O $Date$ O $number$ O O O O O O $string$ O $string$ O $Date$ O $number$ O O O O $string$ O $string$ O $Date$ O $number$ O O O O $string$ O $string$ O $Date$ O $number$ O O O O $string$ O $string$ O $Date$ O $number$ O O O O O O O $string$ O $Database$ O $string[]$ O O O O O $string$ O O O O O $OptionValues$ O O O $string[]$ O O O O O O O O $Database$ O $string$ O $complex$ O O O O O O O O $OptionValues$ O $boolean$ O $string[]$ O $number$ O O O O O $string[]$ O $number$ O O O O $string[]$ O $void$ O O $string$ O O O $string[]$ O $number$ O O O $string$ O O O O O O $string$ O O $string[]$ O $number$ O O O $string$ O O O O O O O O $Promise<string>$ O $complex$ O $any$ O O O $string$ O $string$ O $Options$ O O $any$ O O O O O O O $complex$ O O O O $complex$ O $Database$ O $string$ O O O $string$ O O O $any$ O O $Database$ O $any$ O $string$ O $string$ O $Options$ O $string$ O $string$ O $string$ O $any$ O $Options$ O $string$ O $string$ O $string$ O $any$ O $Options$ O O $string$ O O O O $Promise$ O $complex$ O $any$ O O O $string[]$ O O O O O O O O $string$ O O O O O O O $OptionValues$ O O O O O O O O O O O $complex$ O O O O $complex$ O $Database$ O $string$ O O O O O $string$ O O $string$ O $Database$ O $string$ O O O O O $string[]$ O $number$ O O O O $string[]$ O O $Database$ O $Promise<string[]>$ O $string$ O O O $Options$ O O $any$ O $OptionValues$ O O $string$ O $string$ O O $Database$ O $any$ O $string$ O O $Options$ O O $Promise<string>[]$ O $string[]$ O $U[]$ O O $string$ O O $Promise<string>$ O $complex$ O $string$ O $string$ O O O $Options$ O O O $string$ O O $PromiseConstructor$ O O O $Promise<string>[]$ O O O O $string[]$ O $string[]$ O $string$ O O O O O $string$ O O O O $Options$ O $OptionValues$ O $boolean$ O O $string$ O $string$ O $Database$ O $string[]$ O $string$ O $OptionValues$ O O $string$ O $string$ $string$ O $string$ O $any$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $null$ O O O $null$ O O O $null$ O O O $null$ O O O O $any$ O O $any$ O O O $string$ O $any$ O O $any$ O $any$ O O O $any$ O $Database$ O O O O O $any$ O $any$ O O
<s> import * as yargs from 's' import * as fs from 's' import { _UNKNOWN_ , _UNKNOWN_ } from 's' import Options from 's' interface _UNKNOWN_ { conn : string , table : string [ ] | string , schema : string , output : string , camelCase : boolean , _UNKNOWN_ : boolean , } let argv = yargs . usage ( 's' ) . global ( 's' ) . default ( 's' , 's' ) . config ( ) . env ( 's' ) . command ( 's' , 's' ) . _UNKNOWN_ ( 0 ) . example ( 's' , 's' ) . _UNKNOWN_ ( 's' ) . alias ( 's' , 's' ) . _UNKNOWN_ ( 's' , 0 ) . describe ( 's' , 's' ) . alias ( 's' , 's' ) . _UNKNOWN_ ( 's' , 0 ) . describe ( 's' , 's' ) . alias ( 's' , 's' ) . _UNKNOWN_ ( 's' , 0 ) . describe ( 's' , 's' ) . alias ( 's' , 's' ) . describe ( 's' , 's' ) . describe ( 's' , 's' ) . _UNKNOWN_ ( 's' ) . _UNKNOWN_ ( 's' , 0 ) . alias ( 's' , 's' ) . describe ( 's' , 's' ) . help ( 's' ) . alias ( 's' , 's' ) . argv ; ( async ( ) => { try { if ( ! Array . isArray ( argv . table ) ) { if ( ! argv . table ) { argv . table = [ ] } else { argv . table = [ argv . table ] } } let _UNKNOWN_ = await _UNKNOWN_ ( argv . conn , argv . table , argv . schema , { camelCase : argv . camelCase , _UNKNOWN_ : ! argv . _UNKNOWN_ } ) fs . writeFileSync ( argv . output , _UNKNOWN_ ) } catch ( e ) { console . error ( e ) process . exit ( 0 ) } } ) ( ) . then ( ( ) => { process . exit ( ) } ) . catch ( ( e ) => { console . warn ( e ) process . exit ( 0 ) } ) </s>	O O O O $any$ O O O O O $any$ O O O O $Promise<string>$ O $Database$ O O O O $any$ O O O $any$ O $string$ O O O $complex$ O O O O O O O $string$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O O O $any$ O O O $any$ O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O $any$ O O O O O O O O O O O O $ArrayConstructor$ O $complex$ O $any$ O $complex$ O O O O O O $any$ O $string$ O O $any$ O $complex$ O O O O O O $any$ O $complex$ O O $any$ O $string$ O O O O $string$ O O $Promise<string>$ O $any$ O $string$ O $any$ O $string[]$ O $any$ O $string$ O O $boolean$ O $any$ O $boolean$ O $boolean$ O O $any$ O $boolean$ O O $any$ O $any$ O $any$ O $string$ O $string$ O O O O $any$ O O $Console$ O $void$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O $any$ O $any$ O O O O O $complex$ O O $any$ O O O $Console$ O $void$ O $any$ O $any$ O $any$ O O O O O O
<s> export type _UNKNOWN_ = 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' ; export namespace _UNKNOWN_ { export type _UNKNOWN_ = string ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = boolean ; export type _UNKNOWN_ = boolean | null ; export type _UNKNOWN_ = Date ; export type _UNKNOWN_ = Date | null ; export type _UNKNOWN_ = Date ; export type _UNKNOWN_ = Date | null ; export type _UNKNOWN_ = Date ; export type _UNKNOWN_ = Buffer ; export type _UNKNOWN_ = Buffer | null ; export type _UNKNOWN_ = Buffer ; export type _UNKNOWN_ = Buffer | null ; export type _UNKNOWN_ = Buffer ; export type _UNKNOWN_ = Buffer | null ; export type _UNKNOWN_ = Buffer ; export type _UNKNOWN_ = Buffer | null ; export type _UNKNOWN_ = Buffer ; export type _UNKNOWN_ = Buffer | null ; export type _UNKNOWN_ = Buffer ; export type _UNKNOWN_ = Buffer | null ; export type _UNKNOWN_ = Buffer ; export type _UNKNOWN_ = Buffer | null ; export type _UNKNOWN_ = _UNKNOWN_ ; export type _UNKNOWN_ = _UNKNOWN_ | null ; export type _UNKNOWN_ = _UNKNOWN_ ; export type _UNKNOWN_ = _UNKNOWN_ | null ; } export interface users {} export namespace _UNKNOWN_ { export type _UNKNOWN_ = _UNKNOWN_ ; export type _UNKNOWN_ = _UNKNOWN_ | null ; export type _UNKNOWN_ = _UNKNOWN_ ; export type _UNKNOWN_ = _UNKNOWN_ | null ; } export interface _UNKNOWN_ { _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; } export namespace _UNKNOWN_ { export type _UNKNOWN_ = number ; export type _UNKNOWN_ = string ; } export interface _UNKNOWN_ { number : _UNKNOWN_ . _UNKNOWN_ ; string : _UNKNOWN_ . _UNKNOWN_ ; } </s>	O O O $any$ O O O O O O O O O $any$ O O O O O O O O O $any$ O O O O O O O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O $DateConstructor$ O O O $any$ O $DateConstructor$ O O O O O $any$ O $DateConstructor$ O O O $any$ O $DateConstructor$ O O O O O $any$ O $DateConstructor$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O $any$ O O O O O O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O O O
<s> export type _UNKNOWN_ = 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' | 's' | 's' ; export namespace _UNKNOWN_ { export type email = string ; export type id = number ; export type _UNKNOWN_ = string ; export type _UNKNOWN_ = Date ; export type displayName = string ; export type _UNKNOWN_ = boolean ; export type description = string ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = boolean ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type languages = string | null ; export type status = _UNKNOWN_ ; export type _UNKNOWN_ = Date | null ; export type _UNKNOWN_ = boolean ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = boolean ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = _UNKNOWN_ ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = boolean ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = Object | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = Array < boolean > | null ; export type _UNKNOWN_ = Array < string > | null ; export type 0 = Array < number > | null ; export type 0 = Array < number > | null ; export type 0 = Array < number > | null ; export type _UNKNOWN_ = Array < string > | null ; export type _UNKNOWN_ = Array < string > | null ; export type _UNKNOWN_ = Array < string > | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = Object | null ; export type _UNKNOWN_ = Date | null ; export type _UNKNOWN_ = any | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = Array < Object > | null ; export type _UNKNOWN_ = Array < Object > | null ; export type _UNKNOWN_ = Array < Date > | null ; } export interface Users { email : _UNKNOWN_ . email ; id : _UNKNOWN_ . id ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; displayName : _UNKNOWN_ . displayName ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; description : _UNKNOWN_ . description ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; languages : _UNKNOWN_ . languages ; status : _UNKNOWN_ . statusnumber : _UNKNOWN_ . _UNKNOWN_ ; string} </s>	O O O $any$ O O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $DateConstructor$ O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $DateConstructor$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $ObjectConstructor$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $ObjectConstructor$ O O O O O $any$ O $DateConstructor$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $ArrayConstructor$ O $ObjectConstructor$ O O O O O O $any$ O $ArrayConstructor$ O $ObjectConstructor$ O O O O O O $any$ O $ArrayConstructor$ O $DateConstructor$ O O O O O O O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $string$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $Object$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $boolean[]$ O $any$ O $any$ O $string[]$ O $any$ O $any$ O $number[]$ O $any$ O $any$ O $number[]$ O $any$ O $any$ O $number[]$ O $any$ O $any$ O $string[]$ O $any$ O $any$ O $string[]$ O $any$ O $any$ O $string[]$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $Object$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $Object[]$ O $any$ O $any$ O $Object[]$ O $any$ O $any$ O $Date[]$ O $any$ O $any$ O O O
<s> export type _UNKNOWN_ = 's' | 's' | 's' ; export type _UNKNOWN_ = 's' | 's' | 's' | 's' | 's' ; export namespace _UNKNOWN_ { export type email = string ; export type id = number ; export type _UNKNOWN_ = string ; export type _UNKNOWN_ = Date ; export type _UNKNOWN_ = string ; export type _UNKNOWN_ = boolean ; export type description = string ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = boolean ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type languages = string | null ; export type status = _UNKNOWN_ ; export type _UNKNOWN_ = Date | null ; export type _UNKNOWN_ = boolean ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = boolean ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = _UNKNOWN_ ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = number ; export type _UNKNOWN_ = boolean ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = Object | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = Array < boolean > | null ; export type _UNKNOWN_ = Array < string > | null ; export type 0 = Array < number > | null ; export type 0 = Array < number > | null ; export type 0 = Array < number > | null ; export type _UNKNOWN_ = Array < string > | null ; export type _UNKNOWN_ = Array < string > | null ; export type _UNKNOWN_ = Array < string > | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = number | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = Object | null ; export type _UNKNOWN_ = Date | null ; export type _UNKNOWN_ = any | null ; export type _UNKNOWN_ = string | null ; export type _UNKNOWN_ = Array < Object > | null ; export type _UNKNOWN_ = Array < Object > | null ; export type _UNKNOWN_ = Array < Date > | null ; } export interface users { email : _UNKNOWN_ . email ; id : _UNKNOWN_ . id ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; description : _UNKNOWN_ . description ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; languages : _UNKNOWN_ . languages ; status : _UNKNOWN_ . status ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; number : _UNKNOWN_ . _UNKNOWN_ ; string : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; 0 : _UNKNOWN_ . 0 ; 0 : _UNKNOWN_ . 0 ; 0 : _UNKNOWN_ . 0 ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; } </s>	O O O $any$ O O O O O O O O O $any$ O O O O O O O O O O O O O $any$ O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $DateConstructor$ O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $DateConstructor$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $ObjectConstructor$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O $ArrayConstructor$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $ObjectConstructor$ O O O O O $any$ O $DateConstructor$ O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $ArrayConstructor$ O $ObjectConstructor$ O O O O O O $any$ O $ArrayConstructor$ O $ObjectConstructor$ O O O O O O $any$ O $ArrayConstructor$ O $DateConstructor$ O O O O O O O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $string$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $Object$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $boolean[]$ O $any$ O $any$ O $string[]$ O $any$ O $any$ O $number[]$ O $any$ O $any$ O $number[]$ O $any$ O $any$ O $number[]$ O $any$ O $any$ O $string[]$ O $any$ O $any$ O $string[]$ O $any$ O $any$ O $string[]$ O $any$ O $any$ O $number$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $Object$ O $any$ O $any$ O $Date$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $Object[]$ O $any$ O $any$ O $Object[]$ O $any$ O $any$ O $Date[]$ O $any$ O $any$ O O O
<s> import * as _UNKNOWN_ from 's' ; import * as _UNKNOWN_ from 's' const _UNKNOWN_ = _UNKNOWN_ ( ) const db = _UNKNOWN_ ( 's' ) ; ( async ( ) => { let _UNKNOWN_ : { email : _UNKNOWN_ . users [ 's' ] _UNKNOWN_ : _UNKNOWN_ . users [ 's' ] } = await db . query ( 's' ) ; console . log ( _UNKNOWN_ ) } ) ( ) </s>	O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O O $complex$ O O $string$ O $any$ O $any$ O O O $string$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $Console$ O $void$ O $complex$ O O O O O O
<s> import { spawnSync } from 's' import * as assert from 's' describe ( 's' , ( ) => { describe ( 's' , ( ) => { before ( async function ( ) { if ( ! process . env . _UNKNOWN_ ) { return this . skip ( ) } } ) it ( 's' , ( ) => { let { status , stdout , stderr } = spawnSync ( 's' , [ 's' , 's' , 's' , process . env . _UNKNOWN_ , 's' , 's' ] , { encoding : 's' } ) console . log ( 's' , stdout , stderr ) assert . equal ( 0 , status ) } ) } ) describe ( 's' , ( ) => { before ( async function ( ) { if ( ! process . env . _UNKNOWN_ ) { return this . skip ( ) } } ) it ( 's' , ( ) => { let { status } = spawnSync ( 's' , [ 's' , 's' , 's' , process . env . _UNKNOWN_ , 's' , 's' , 's' , 's' ] ) assert . equal ( 0 , status ) } ) } ) } ) </s>	O O O $any$ O O O O O O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O $string$ O O O O $Console$ O $void$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O
<s> import * as fs from 's' import { _UNKNOWN_ , Database } from 's' import Options from 's' import * as ts from 's' ; const diff = require ( 's' ) interface _UNKNOWN_ { value : string count ? : number added ? : boolean removed ? : boolean } export function compile ( fileNames : string [ ] , options : ts . CompilerOptions ) { let program = ts . createProgram ( fileNames , options ) let _UNKNOWN_ = program . emit ( ) let exitCode = _UNKNOWN_ . emitSkipped ? 0 : 0 return exitCode === 0 } export async function compare ( _UNKNOWN_ , outputFile ) < boolean > { let _UNKNOWN_ = await fs . readFile ( _UNKNOWN_ , { encoding : 's' } ) let actual = await fs . readFile ( outputFile , { encoding : 's' } ) let diffs = diff . _UNKNOWN_ ( _UNKNOWN_ , actual , { _UNKNOWN_ : true , _UNKNOWN_ : true } ) const _UNKNOWN_ = diffs . filter ( ( d ) => d . added || d . removed ) if ( _UNKNOWN_ . length > 0 ) { console . error ( `template` ) _UNKNOWN_ . forEach ( ( d , i ) => { const t = d . added ? 's' : d . removed ? 's' : 's' console . error ( `template` ) } ) return false } else { return true } } export async function _UNKNOWN_ ( db , file ) { let query = await fs . readFile ( file , { encoding : 's' } ) return await db . query ( query ) } export async function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , outputFile , db ) { await _UNKNOWN_ ( db , _UNKNOWN_ ) const config = require ( _UNKNOWN_ ) let _UNKNOWN_ = await _UNKNOWN_ ( db , config . _UNKNOWN_ , config . schema , { camelCase : config . camelCase , _UNKNOWN_ : config . _UNKNOWN_ } ) await fs . writeFile ( outputFile , _UNKNOWN_ ) } </s>	O O O O $any$ O O O O $Promise<string>$ O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $string$ O O $number$ O O O $boolean$ O O O $boolean$ O O O O O O $boolean$ O $string[]$ O O O O O $CompilerOptions$ O $any$ O $any$ O O O $Program$ O $any$ O $complex$ O $string[]$ O $CompilerOptions$ O O $EmitResult$ O $Program$ O $EmitResult$ O O O $number$ O $EmitResult$ O $boolean$ O O O O O $number$ O O O O O O $Promise$ O $string$ O $string$ O O O O O O $any$ O O $any$ O $any$ O $string$ O O $string$ O O O O O $any$ O O $any$ O $any$ O $string$ O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $boolean$ O $any$ O $boolean$ O O O $any$ O $any$ O O O O $Console$ O $void$ O O O $any$ O $any$ O O $any$ O $number$ O O O O O O $any$ O $boolean$ O O O $any$ O $boolean$ O O O O $Console$ O $void$ O O O O O O O O O O O O O O O O O $Promise<Object[]>$ O $Database$ O $string$ O O O $any$ O O $any$ O $any$ O $string$ O O $string$ O O O O O O $Database$ O $Promise<Object[]>$ O $any$ O O O O O $Promise<void>$ O $string$ O $string$ O $string$ O $Database$ O O O $Promise<Object[]>$ O $Database$ O $string$ O O $any$ O $any$ O $string$ O O $string$ O O $Promise<string>$ O $Database$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $string$ O $string$ O O O
<s> import * as ts from 's' import { compile } from 's' describe ( 's' , ( ) => { it ( 's' , ( ) => { compile ( [ 's' ] , { _UNKNOWN_ : true , _UNKNOWN_ : true , target : ts . ScriptTarget . 0 , module : ts . ModuleKind . _UNKNOWN_ } ) } ) } ) </s>	O O O O $any$ O O O O $boolean$ O O O $any$ O O O O O O O $any$ O O O O O O O $boolean$ O O O O O O $true$ O O O $true$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O
<s> import * as assert from 's' import { Database , _UNKNOWN_ } from 's' import { _UNKNOWN_ , compare , _UNKNOWN_ } from 's' describe ( 's' , ( ) => { describe ( 's' , ( ) => { let db before ( async function ( ) { if ( ! process . env . _UNKNOWN_ ) { return this . skip ( ) } db = _UNKNOWN_ ( process . env . _UNKNOWN_ ) await _UNKNOWN_ ( db , 's' ) } ) it ( 's' , async ( ) => { const _UNKNOWN_ = 's' const outputFile = 's' const _UNKNOWN_ = 's' const config = 's' await _UNKNOWN_ ( _UNKNOWN_ , config , outputFile , db ) return assert ( await compare ( _UNKNOWN_ , outputFile ) ) } ) it ( 's' , async ( ) => { const _UNKNOWN_ = 's' const outputFile = 's' const _UNKNOWN_ = 's' const config = 's' await _UNKNOWN_ ( _UNKNOWN_ , config , outputFile , db ) return assert ( await compare ( _UNKNOWN_ , outputFile ) ) } ) } ) describe ( 's' , ( ) => { let db before ( async function ( ) { if ( ! process . env . _UNKNOWN_ ) { return this . skip ( ) } db = _UNKNOWN_ ( `template` ) await _UNKNOWN_ ( db , 's' ) } ) it ( 's' , async ( ) => { const _UNKNOWN_ = 's' const outputFile = 's' const _UNKNOWN_ = 's' const config = 's' await _UNKNOWN_ ( _UNKNOWN_ , config , outputFile , db ) return assert ( await compare ( _UNKNOWN_ , outputFile ) ) } ) it ( 's' , async ( ) => { const _UNKNOWN_ = 's' const outputFile = 's' const config = 's' try { await _UNKNOWN_ ( _UNKNOWN_ , config , outputFile , db ) } catch ( e ) { assert . equal ( e . message , 's' ) } } ) } ) } ) </s>	O O O O $any$ O O O O $any$ O $Database$ O O O O O $Promise<void>$ O $Promise<boolean>$ O $Promise<Object[]>$ O O O $any$ O O O O O O O $any$ O O O O O O O O $Database$ $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $Database$ O $Database$ O $any$ O $any$ O $any$ O O $Promise<Object[]>$ O $Database$ O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O $any$ O O O $Promise<void>$ O O O $any$ O O O $Database$ O O $any$ O O $Promise<boolean>$ O O O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O $any$ O O O $Promise<void>$ O O O $any$ O O O $Database$ O O $any$ O O $Promise<boolean>$ O O O O O O O O O O $any$ O O O O O O O O $Database$ $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $Database$ O $Database$ O O O O $Promise<Object[]>$ O $Database$ O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O $any$ O O O $Promise<void>$ O O O $any$ O O O $Database$ O O $any$ O O $Promise<boolean>$ O O O O O O O O $any$ O O O O O O O O O O O O O O O O O $any$ O O O O O $Promise<void>$ O O O $any$ O O O $Database$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import * as assert from 's' import * as sinon from 's' import * as Index from 's' import * as _UNKNOWN_ from 's' import { Database } from 's' import Options , { _UNKNOWN_ } from 's' const options = { } describe ( 's' , ( ) => { const _UNKNOWN_ = sinon . sandbox . create ( ) const db = { _UNKNOWN_ : _UNKNOWN_ . stub ( ) , _UNKNOWN_ : _UNKNOWN_ . stub ( ) , query : _UNKNOWN_ . stub ( ) , _UNKNOWN_ : _UNKNOWN_ . stub ( ) , _UNKNOWN_ : _UNKNOWN_ . stub ( ) , _UNKNOWN_ : _UNKNOWN_ . stub ( ) , connectionString : 's' } as Database const _UNKNOWN_ = _UNKNOWN_ as any const _UNKNOWN_ = db as any before ( ( ) => { _UNKNOWN_ . stub ( _UNKNOWN_ , 's' ) _UNKNOWN_ . stub ( _UNKNOWN_ , 's' ) _UNKNOWN_ . stub ( _UNKNOWN_ , 's' ) } ) beforeEach ( ( ) => { _UNKNOWN_ . reset ( ) } ) after ( ( ) => { _UNKNOWN_ . restore ( ) } ) describe ( 's' , ( ) => { it ( 's' , async ( ) => { _UNKNOWN_ . _UNKNOWN_ . returns ( Promise . resolve ( 's' ) ) await Index . _UNKNOWN_ ( db , 's' , 's' , new Options ( options ) ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args , [ 's' , 's' , new Options ( options ) ] ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args , [ 's' , 's' , new Options ( options ) ] ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args , [ 's' , 's' , new Options ( options ) ] ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . _UNKNOWN_ . returns ( Promise . resolve ( 's' ) ) _UNKNOWN_ . _UNKNOWN_ . returns ( 's' ) _UNKNOWN_ . _UNKNOWN_ . returns ( 's' ) const _UNKNOWN_ = await Index . _UNKNOWN_ ( db , 's' , 's' , new Options ( options ) ) assert . equal ( _UNKNOWN_ , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , async ( ) => { _UNKNOWN_ . _UNKNOWN_ . returns ( Promise . resolve ( [ 's' ] ) ) _UNKNOWN_ . _UNKNOWN_ . returns ( Promise . resolve ( 's' ) ) _UNKNOWN_ . _UNKNOWN_ . returns ( 's' ) _UNKNOWN_ . _UNKNOWN_ . returns ( 's' ) const _UNKNOWN_ = await Index . _UNKNOWN_ ( db , [ ] , 's' , options ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args [ 0 ] , 's' ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args [ 0 ] , 's' ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args [ 0 ] , 's' ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args [ 0 ] , 's' ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . _UNKNOWN_ . returns ( Promise . resolve ( [ 's' ] ) ) _UNKNOWN_ . _UNKNOWN_ . returns ( Promise . resolve ( 's' ) ) _UNKNOWN_ . _UNKNOWN_ . returns ( 's' ) _UNKNOWN_ . _UNKNOWN_ . returns ( 's' ) const _UNKNOWN_ = await Index . _UNKNOWN_ ( db , [ 's' ] , null , options ) assert ( ! _UNKNOWN_ . _UNKNOWN_ . called ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args [ 0 ] , 's' ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args [ 0 ] , 's' ) } ) } ) } ) </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O $any$ O O O O $OptionValues$ O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $Database$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $string$ O O O O $any$ O $any$ O $any$ O O O $any$ O $Database$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O $any$ O $Promise<string>$ O $Database$ O O O O O O $any$ O $OptionValues$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $OptionValues$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $OptionValues$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $OptionValues$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $string$ O O $any$ O $Promise<string>$ O $Database$ O O O O O O $any$ O $OptionValues$ O O $any$ O $any$ O $string$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $string$ O O $any$ O $Promise<string>$ O $Database$ O O O O O O $OptionValues$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $string$ O O $any$ O $Promise<string>$ O $Database$ O O O O O O O $OptionValues$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O O
<s> import * as assert from 's' import { _UNKNOWN_ } from 's' describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { try { _UNKNOWN_ ( 's' ) } catch ( e ) { assert . equal ( e . message , 's' ) } } ) it ( 's' , ( ) => { const db = _UNKNOWN_ ( 's' ) assert . equal ( db . constructor . name , 's' ) } ) it ( 's' , ( ) => { const db = _UNKNOWN_ ( 's' ) assert . equal ( db . constructor . name , 's' ) } ) } ) } ) </s>	O O O O $any$ O O O O $Database$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $Database$ O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $Database$ O $Database$ O O O $any$ O $any$ O $Database$ O $Function$ O $string$ O O O O O $any$ O O O O O O O O $Database$ O $Database$ O O O $any$ O $any$ O $Database$ O $Function$ O $string$ O O O O O O O O O O
<s> import * as assert from 's' import * as sinon from 's' import * as _UNKNOWN_ from 's' import { _UNKNOWN_ } from 's' import { _UNKNOWN_ } from 's' import Options from 's' const options = new Options ( { } ) const _UNKNOWN_ = _UNKNOWN_ as any describe ( 's' , ( ) => { let db const sandbox = sinon . sandbox . create ( ) before ( ( ) => { sandbox . stub ( _UNKNOWN_ , 's' ) sandbox . stub ( _UNKNOWN_ . prototype , 's' ) db = new _UNKNOWN_ ( 's' ) } ) beforeEach ( ( ) => { sandbox . reset ( ) } ) after ( ( ) => { sandbox . restore ( ) } ) describe ( 's' , ( ) => { it ( 's' , async ( ) => { await db . query ( 's' ) assert . deepEqual ( _UNKNOWN_ . prototype . _UNKNOWN_ . getCall ( 0 ) . args , [ 's' ] ) } ) } ) describe ( 's' , ( ) => { before ( ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . restore ( ) } ) after ( ( ) => { sandbox . stub ( _UNKNOWN_ . prototype , 's' ) } ) it ( 's' , async ( ) => { ( _UNKNOWN_ . _UNKNOWN_ as any ) . returns ( { query : function query ( queryString , params < any > , cb ) { cb ( 's' ) } } ) const _UNKNOWN_ = new _UNKNOWN_ ( 's' ) try { _UNKNOWN_ . query ( 's' ) } catch ( e ) { assert . equal ( e , 's' ) } } ) it ( 's' , async ( ) => { ( _UNKNOWN_ . _UNKNOWN_ as any ) . returns ( { query : function query ( queryString , params < any > , cb ) { cb ( null , [ ] ) } } ) const _UNKNOWN_ = new _UNKNOWN_ ( 's' ) const results = await _UNKNOWN_ . query ( 's' ) assert . deepEqual ( results , [ ] ) } ) } ) describe ( 's' , ( ) => { it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( [ ] ) ) await db . _UNKNOWN_ ( 's' ) assert . deepEqual ( _UNKNOWN_ . prototype . _UNKNOWN_ . getCall ( 0 ) . args , [ 's' + 's' + 's' , [ 's' ] ] ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( [ ] ) ) await db . _UNKNOWN_ ( ) assert . deepEqual ( _UNKNOWN_ . prototype . _UNKNOWN_ . getCall ( 0 ) . args , [ 's' + 's' + 's' , [ ] ] ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( [ { column_name : 's' , column_type : 's' , data_type : 's' } , { column_name : 's' , column_type : 's' , data_type : 's' } ] ) ) const _UNKNOWN_ = await db . _UNKNOWN_ ( 's' ) assert . deepEqual ( _UNKNOWN_ , { 0 : [ 's' ] , 0 : [ 's' ] } ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( [ { column_name : 's' , column_type : 's' , data_type : 's' } , { column_name : 's' , column_type : 's' , data_type : 's' } ] ) ) const _UNKNOWN_ = await db . _UNKNOWN_ ( 's' ) assert . deepEqual ( _UNKNOWN_ , { 0 : [ 's' , 's' ] } ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( [ { column_name : 's' , column_type : 's' , data_type : 's' } , { column_name : 's' , column_type : 's' , data_type : 's' } ] ) ) try { await db . _UNKNOWN_ ( 's' ) } catch ( e ) { assert . equal ( e . message , 's' ) } } ) } ) describe ( 's' , ( ) => { it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( [ ] ) ) await db . _UNKNOWN_ ( 's' , 's' ) assert . deepEqual ( _UNKNOWN_ . prototype . _UNKNOWN_ . getCall ( 0 ) . args , [ 's' + 's' + 's' , [ 's' , 's' ] ] ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( [ { column_name : 's' , data_type : 's' , is_nullable : 's' } , { column_name : 's' , data_type : 's' , is_nullable : 's' } , { column_name : 's' , data_type : 's' , is_nullable : 's' } ] ) ) const _UNKNOWN_ = await db . _UNKNOWN_ ( 's' , 's' ) assert . deepEqual ( _UNKNOWN_ , { 0 : { _UNKNOWN_ : 's' , nullable : false } , 0 : { _UNKNOWN_ : 's' , nullable : true } , 0 : { _UNKNOWN_ : 's' , nullable : true } } ) } ) } ) describe ( 's' , ( ) => { const _UNKNOWN_ = sinon . sandbox . create ( ) before ( ( ) => { _UNKNOWN_ . stub ( _UNKNOWN_ . prototype , 's' ) _UNKNOWN_ . stub ( _UNKNOWN_ . prototype , 's' ) _UNKNOWN_ . stub ( _UNKNOWN_ , 's' ) } ) beforeEach ( ( ) => { _UNKNOWN_ . reset ( ) } ) after ( ( ) => { _UNKNOWN_ . restore ( ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( { 0 : [ ] , 0 : [ ] } ) ) _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( { } ) ) await db . _UNKNOWN_ ( 's' , 's' , options ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args [ 0 ] , [ 's' , 's' ] ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( { } ) ) _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( { table : { _UNKNOWN_ : 's' , nullable : false } } ) ) await db . _UNKNOWN_ ( 's' , 's' , options ) assert . deepEqual ( _UNKNOWN_ . prototype . _UNKNOWN_ . getCall ( 0 ) . args , [ 's' , 's' ] ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args [ 0 ] , { table : { _UNKNOWN_ : 's' , nullable : false } } ) } ) } ) describe ( 's' , ( ) => { it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( [ ] ) ) await db . _UNKNOWN_ ( 's' ) assert . deepEqual ( _UNKNOWN_ . prototype . _UNKNOWN_ . getCall ( 0 ) . args , [ 's' + 's' + 's' + 's' , [ 's' ] ] ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . prototype . _UNKNOWN_ . returns ( Promise . resolve ( [ { table_name : 's' } , { table_name : 's' } ] ) ) const _UNKNOWN_ = await db . _UNKNOWN_ ( 's' ) assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' ] ) } ) } ) describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ 's' ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ 's' ] , options ) . column . tsType , 's' ) } ) } ) } ) } ) </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O O O $Options$ O O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O O $any$ O $Promise<Object[]>$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O O $void$ O O $void$ O $string$ O $Array$ O O O O $Function$ O O $Function$ O O O O O O O $any$ O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O O $void$ O O $void$ O $string$ O $Array$ O O O O $Function$ O O $Function$ O O O O O O O O O O $any$ O O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O O $any$ O $Promise<any>$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O O $any$ O $Promise<any>$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O $any$ O O $any$ O $Promise<any>$ O O O $any$ O $any$ O $any$ O O $string[]$ O O O O O $string[]$ O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O $any$ O O $any$ O $Promise<any>$ O O O $any$ O $any$ O $any$ O O $string[]$ O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O O O $any$ O $Promise<any>$ O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $complex$ O O $string$ O O O $boolean$ O O O O $complex$ O O $string$ O O O $boolean$ O O O O $complex$ O O $string$ O O O $boolean$ O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O $undefined[]$ O O O O $undefined[]$ O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O O $any$ O $any$ O O O O O $Options$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O $complex$ O O $string$ O O O $false$ O O O O O O O $any$ O $any$ O O O O O $Options$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $complex$ O O $string$ O O O $boolean$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O O $any$ O $Promise<string[]>$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O $string$ O O O O O $string$ O O O O O O O $string[]$ O O $any$ O $Promise<string[]>$ O O O $any$ O $any$ O $string[]$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Options$ O O $any$ O $any$ O O O O O O O O O O O O
<s> import * as assert from 's' import * as sinon from 's' import * as _UNKNOWN_ from 's' import * as _UNKNOWN_ from 's' import { _UNKNOWN_ } from 's' import Options from 's' const options = new Options ( { } ) const _UNKNOWN_ = _UNKNOWN_ ( ) describe ( 's' , ( ) => { const sandbox = sinon . sandbox . create ( ) const db = { query : sandbox . stub ( ) , each : sandbox . stub ( ) , map : sandbox . stub ( ) } let _UNKNOWN_ let _UNKNOWN_ before ( ( ) => { const _UNKNOWN_ = ( ) => db _UNKNOWN_ . as = _UNKNOWN_ . as const _UNKNOWN_ = _UNKNOWN_ ( 's' , { 's' : ( ) => _UNKNOWN_ } ) _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ _UNKNOWN_ = new _UNKNOWN_ ( ) } ) beforeEach ( ( ) => { sandbox . reset ( ) } ) after ( ( ) => { sandbox . restore ( ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { _UNKNOWN_ . query ( 's' ) assert . equal ( db . query . getCall ( 0 ) . args [ 0 ] , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { _UNKNOWN_ . _UNKNOWN_ ( 's' ) assert . equal ( db . each . getCall ( 0 ) . args [ 0 ] , 's' + 's' + 's' + 's' + 's' ) assert . deepEqual ( db . each . getCall ( 0 ) . args [ 0 ] , [ ] ) } ) it ( 's' , ( ) => { _UNKNOWN_ . _UNKNOWN_ ( ) assert . equal ( db . each . getCall ( 0 ) . args [ 0 ] , 's' + 's' + 's' + 's' ) assert . deepEqual ( db . each . getCall ( 0 ) . args [ 0 ] , [ ] ) } ) it ( 's' , async ( ) => { let _UNKNOWN_ = await _UNKNOWN_ . _UNKNOWN_ ( ) const callback = db . each . getCall ( 0 ) . args [ 0 ] const _UNKNOWN_ = [ { name : 's' , value : 's' } , { name : 's' , value : 's' } ] _UNKNOWN_ . forEach ( callback ) assert . deepEqual ( _UNKNOWN_ , { name : [ 's' , 's' ] } ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { _UNKNOWN_ . _UNKNOWN_ ( 's' , 's' ) assert . equal ( db . each . getCall ( 0 ) . args [ 0 ] , 's' + 's' + 's' ) assert . deepEqual ( db . each . getCall ( 0 ) . args [ 0 ] , [ 's' , 's' ] ) } ) it ( 's' , async ( ) => { let _UNKNOWN_ = await _UNKNOWN_ . _UNKNOWN_ ( ) const callback = db . each . getCall ( 0 ) . args [ 0 ] const _UNKNOWN_ = [ { column_name : 's' , _UNKNOWN_ : 's' , is_nullable : 's' } , { column_name : 's' , _UNKNOWN_ : 's' , is_nullable : 's' } ] _UNKNOWN_ . forEach ( callback ) assert . deepEqual ( _UNKNOWN_ , { 0 : { _UNKNOWN_ : 's' , nullable : true } , 0 : { _UNKNOWN_ : 's' , nullable : false } } ) } ) } ) describe ( 's' , ( ) => { const _UNKNOWN_ = sinon . sandbox . create ( ) before ( ( ) => { _UNKNOWN_ . stub ( _UNKNOWN_ , 's' ) _UNKNOWN_ . stub ( _UNKNOWN_ , 's' ) _UNKNOWN_ . stub ( _UNKNOWN_ , 's' ) } ) beforeEach ( ( ) => { _UNKNOWN_ . reset ( ) } ) after ( ( ) => { _UNKNOWN_ . restore ( ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . _UNKNOWN_ . returns ( Promise . resolve ( { 0 : [ ] , 0 : [ ] } ) ) _UNKNOWN_ . _UNKNOWN_ . returns ( Promise . resolve ( { } ) ) await _UNKNOWN_ . _UNKNOWN_ ( 's' , 's' ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args [ 0 ] , [ 's' , 's' ] ) } ) it ( 's' , async ( ) => { _UNKNOWN_ . _UNKNOWN_ . returns ( Promise . resolve ( { } ) ) _UNKNOWN_ . _UNKNOWN_ . returns ( Promise . resolve ( { table : { _UNKNOWN_ : 's' , nullable : false } } ) ) await _UNKNOWN_ . _UNKNOWN_ ( 's' , 's' ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args , [ 's' , 's' ] ) assert . deepEqual ( _UNKNOWN_ . _UNKNOWN_ . getCall ( 0 ) . args [ 0 ] , { table : { _UNKNOWN_ : 's' , nullable : false } } ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { _UNKNOWN_ . _UNKNOWN_ ( 's' ) assert . equal ( db . map . getCall ( 0 ) . args [ 0 ] , 's' + 's' + 's' + 's' ) assert . deepEqual ( db . map . getCall ( 0 ) . args [ 0 ] , [ 's' ] ) } ) it ( 's' , async ( ) => { await _UNKNOWN_ . _UNKNOWN_ ( ) const callback = db . map . getCall ( 0 ) . args [ 0 ] const _UNKNOWN_ = [ { table_name : 's' } , { table_name : 's' } ] const _UNKNOWN_ = _UNKNOWN_ . map ( callback ) assert . deepEqual ( _UNKNOWN_ , [ 's' , 's' ] ) } ) } ) describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ 's' ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ 's' ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ 's' ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ 's' ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ 's' ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ 's' ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ 's' ] , options ) . column . tsType , 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const td = { column : { _UNKNOWN_ : 's' , nullable : false } } assert . equal ( _UNKNOWN_ . _UNKNOWN_ ( td , [ 's' ] , options ) . column . tsType , 's' ) } ) } ) } ) } ) </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O O $Options$ O O $any$ O O O O O $any$ O $any$ O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ $any$ O O O O O O $any$ O O O O $complex$ $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O $any$ O $any$ O $any$ $any$ O O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O $complex$ O $void$ O $any$ O $any$ O $any$ O $any$ O O $string[]$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O $complex$ O $void$ O $any$ O $any$ O $any$ O $any$ O O $complex$ O O $string$ O O O $boolean$ O O O O $complex$ O O $string$ O O O $boolean$ O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O $undefined[]$ O O O O $undefined[]$ O O O O O O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O O O O $any$ O $any$ O $any$ O $PromiseConstructor$ O $complex$ O O $complex$ O O $string$ O O O $false$ O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O $complex$ O O $string$ O O O $boolean$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O $complex$ O O O $string$ O O O O O $string$ O O O O O $unknown[]$ O $complex$ O $U[]$ O $any$ O $any$ O $any$ O $unknown[]$ O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Options$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O O $complex$ O O $string$ O O O $false$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Options$ O O $any$ O $any$ O O O O O O O O O O O O
<s> import * as assert from 's' import * as _UNKNOWN_ from 's' import Options from 's' const options = new Options ( { } ) describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( 's' , { } , options ) assert . equal ( _UNKNOWN_ , 's' + 's' + 's' + 's' + 's' ) } ) it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( 's' , { } , options ) assert . equal ( _UNKNOWN_ , 's' + 's' + 's' + 's' + 's' ) } ) it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( 's' , { 0 : { _UNKNOWN_ : 's' , nullable : false } , 0 : { _UNKNOWN_ : 's' , nullable : false } } , options ) assert . equal ( _UNKNOWN_ , 's' + 's' + 's' + 's' + 's' + 's' + 's' ) } ) it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( 's' , { string : { _UNKNOWN_ : 's' , nullable : false } , number : { _UNKNOWN_ : 's' , nullable : false } , package : { _UNKNOWN_ : 's' , nullable : false } } , options ) assert . equal ( _UNKNOWN_ , 's' + 's' + 's' + 's' + 's' + 's' + 's' + 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const enumType = _UNKNOWN_ . _UNKNOWN_ ( { } , options ) assert . equal ( enumType , 's' ) } ) it ( 's' , ( ) => { const enumType = _UNKNOWN_ . _UNKNOWN_ ( { 0 : [ 's' , 's' , 's' , 's' ] , 0 : [ 's' , 's' , 's' , 's' ] } , options ) assert . equal ( enumType , 's' + 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const enumType = _UNKNOWN_ . _UNKNOWN_ ( { } , options ) assert . equal ( enumType , 's' ) } ) it ( 's' , ( ) => { const enumType = _UNKNOWN_ . _UNKNOWN_ ( { 0 : [ 's' , 's' , 's' , 's' ] , 0 : [ 's' , 's' , 's' , 's' ] } , options ) assert . equal ( enumType , 's' + 's' ) } ) } ) describe ( 's' , ( ) => { it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( 's' , { } , options ) assert . equal ( _UNKNOWN_ , 's' + 's' + 's' + 's' + 's' + 's' ) } ) it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( 's' , { 0 : { _UNKNOWN_ : 's' , nullable : false , tsType : 's' } , 0 : { _UNKNOWN_ : 's' , nullable : false , tsType : 's' } } , options ) assert . equal ( _UNKNOWN_ , 's' + 's' + 's' + 's' + 's' + 's' + 's' ) } ) it ( 's' , ( ) => { const _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( 's' , { 0 : { _UNKNOWN_ : 's' , nullable : true , tsType : 's' } , 0 : { _UNKNOWN_ : 's' , nullable : true , tsType : 's' } } , options ) assert . equal ( _UNKNOWN_ , 's' + 's' + 's' + 's' + 's' + 's' + 's' ) } ) } ) } ) </s>	O O O O $any$ O O O O O $any$ O O O $any$ O O O $Options$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O O O $Options$ O $any$ O $any$ O $string$ O O O O O O O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O O O $Options$ O $any$ O $any$ O $string$ O O O O O O O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O $complex$ O O $string$ O O O $false$ O O O O $complex$ O O $string$ O O O $false$ O O O O O $Options$ O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O $complex$ O O $string$ O O O $false$ O O O O $complex$ O O $string$ O O O $false$ O O O O $complex$ O O $string$ O O O $false$ O O O O O $Options$ O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O $Options$ O $any$ O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O $string[]$ O O O O O O O O O O O $string[]$ O O O O O O O O O O O O $Options$ O $any$ O $any$ O $string$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O $Options$ O $any$ O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O $string[]$ O O O O O O O O O O O $string[]$ O O O O O O O O O O O O $Options$ O $any$ O $any$ O $string$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O O O $Options$ O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O $complex$ O O $string$ O O O $false$ O O O $string$ O O O O $complex$ O O $string$ O O O $false$ O O O $string$ O O O O O $Options$ O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O $complex$ O O $string$ O O O $true$ O O O $string$ O O O O $complex$ O O $string$ O O O $true$ O O O $string$ O O O O O $Options$ O $any$ O $any$ O $string$ O O O O O O O O O O O O O O O O O O O O O O
<s> import 's' ; import 's' ; import 's' ; </s>	O O O O O O O O O O O
<s> export enum STORAGE { local , session } </s>	O O O $any$ O $any$ O $any$ O O
<s> import { STORAGE } from 's' ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = 's' ; export const _UNKNOWN_ = false ; export const _UNKNOWN_ = { [ STORAGE . local ] : 's' , [ STORAGE . session ] : 's' , } ; </s>	O O O $any$ O O O O O O O O O O O O O O O O O O $false$ O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O
<s> export interface _UNKNOWN_ { getItem : ( key ) => string ; setItem : ( key , value ) => void ; removeItem : ( key ) => void ; } </s>	O O O $any$ O $string$ O O $string$ O O O O $void$ O O $string$ O $string$ O O O O $void$ O O $string$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; let _UNKNOWN_ = _UNKNOWN_ ; let _UNKNOWN_ = _UNKNOWN_ ; let _UNKNOWN_ = _UNKNOWN_ ; export function _UNKNOWN_ ( _UNKNOWN_ ) { return _UNKNOWN_ . indexOf ( _UNKNOWN_ + _UNKNOWN_ ) === 0 ; } export class _UNKNOWN_ { static _UNKNOWN_ ( _UNKNOWN_ ) { return _UNKNOWN_ . indexOf ( _UNKNOWN_ + _UNKNOWN_ ) === 0 ; } static _UNKNOWN_ ( storage ) < string > { return Object . keys ( storage ) . filter ( _UNKNOWN_ ) ; } static _UNKNOWN_ ( raw ) { if ( typeof raw !== 's' ) throw Error ( 's' ) ; return `template` ; } static _UNKNOWN_ ( raw ) { let key = raw . toString ( ) ; return _UNKNOWN_ ? key : key . toLowerCase ( ) ; } static _UNKNOWN_ ( key = _UNKNOWN_ ) { _UNKNOWN_ = key ; } static _UNKNOWN_ ( enable = _UNKNOWN_ ) { _UNKNOWN_ = enable ; } static _UNKNOWN_ ( separator = _UNKNOWN_ ) { _UNKNOWN_ = separator ; } } </s>	O O O $any$ O O O O O O O O $false$ O O O O O O O $string$ O O O O $string$ O O O O $boolean$ O $false$ O O O $boolean$ O $string$ O O O $string$ O $number$ O $string$ O $string$ O O O O O O O $any$ O O $boolean$ O $string$ O O O $string$ O $number$ O $string$ O $string$ O O O O O O $Array$ O $any$ O O O O O O $ObjectConstructor$ O $complex$ O $any$ O O $complex$ O $boolean$ O O O O $string$ O $string$ O O O O O $string$ O O O O $ErrorConstructor$ O O O O O O O O O $string$ O $string$ O O O $string$ O $string$ O $string$ O O O O $boolean$ O $string$ O $string$ O $string$ O O O O O $void$ O $string$ O O O O $string$ O $string$ O O O $void$ O $boolean$ O $false$ O O $boolean$ O $boolean$ O O O $void$ O $string$ O O O O $string$ O $string$ O O O O
<s> import { STORAGE } from 's' ; import { EventEmitter } from 's' ; import { Observable } from 's' ; export class _UNKNOWN_ { static observers : Object = { } ; static _UNKNOWN_ : EventEmitter < boolean > = new EventEmitter ( ) ; static _UNKNOWN_ : Observable < boolean > = _UNKNOWN_ . _UNKNOWN_ . asObservable ( ) ; static observe ( _UNKNOWN_ , _UNKNOWN_ ) < any > { let _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; if ( _UNKNOWN_ in this . observers ) return this . observers [ _UNKNOWN_ ] ; return this . observers [ _UNKNOWN_ ] = new EventEmitter ( ) ; } static emit ( _UNKNOWN_ , _UNKNOWN_ , value ) { let _UNKNOWN_ = this . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; if ( _UNKNOWN_ in this . observers ) this . observers [ _UNKNOWN_ ] . emit ( value ) ; } static _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) { return _UNKNOWN_ + 's' + _UNKNOWN_ ; } static _UNKNOWN_ ( ) { _UNKNOWN_ . _UNKNOWN_ . emit ( true ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $Object$ O $ObjectConstructor$ O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $EventEmitter$ O $any$ O $string$ O O O O O O $string$ O O O $string$ O $any$ O $string$ O O O O $string$ O O O $Object$ O O O O $Object$ O $string$ O O O O O $Object$ O $string$ O O O $any$ O O O O O $void$ O $any$ O $string$ O $any$ O O O $string$ O O O $string$ O $any$ O $string$ O O O O $string$ O O O $Object$ O O O $Object$ O $string$ O O $any$ O $any$ O O O O $string$ O $any$ O $string$ O O O $any$ O O O $string$ O O O $void$ O O O $any$ O $any$ O $any$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; export class _UNKNOWN_ { static _UNKNOWN_ = [ 's' , 's' , 's' , 's' ] ; static _UNKNOWN_ = { } ; static _UNKNOWN_ ( field ) { return ! ! ~ _UNKNOWN_ . _UNKNOWN_ . indexOf ( field ) ; } static _UNKNOWN_ ( _UNKNOWN_ ) { if ( ! this . _UNKNOWN_ [ _UNKNOWN_ ] ) this . _UNKNOWN_ [ _UNKNOWN_ ] = _UNKNOWN_ . _UNKNOWN_ ( ) ; return this . _UNKNOWN_ [ _UNKNOWN_ ] ; } static _UNKNOWN_ ( ) { let storage = < _UNKNOWN_ > { } ; Object . _UNKNOWN_ ( storage , { setItem : { writable : false , enumerable : false , configurable : false , value : function ( key , value ) { if ( ! _UNKNOWN_ . _UNKNOWN_ ( key ) ) this [ key ] = value ; } , } , getItem : { writable : false , enumerable : false , configurable : false , value : function ( key ) { return ! _UNKNOWN_ . _UNKNOWN_ ( key ) ? this [ key ] || null : null ; } , } , removeItem : { writable : false , enumerable : false , configurable : false , value : function ( key ) { if ( ! _UNKNOWN_ . _UNKNOWN_ ( key ) ) delete this [ key ] ; } , } , length : { enumerable : false , configurable : false , get ( ) { return Object . keys ( this ) . length ; } } } ) ; return storage ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O $string[]$ O O O O O O O O O O O O ${}$ O O O O O $boolean$ O $any$ O O O O O O $any$ O $string[]$ O $number$ O $any$ O O O O $any$ O $any$ O O O O O O O ${}$ O $any$ O O O O ${}$ O $any$ O O $any$ O $any$ O O O O O O ${}$ O $any$ O O O O $any$ O O O O $any$ O O $any$ O O O O $ObjectConstructor$ O $any$ O $any$ O O $complex$ O O $false$ O O O $false$ O O O $false$ O O O $void$ O O O $any$ O $any$ O O O O O $any$ O $boolean$ O $any$ O O O O $any$ O O $any$ O O O O O $complex$ O O $false$ O O O $false$ O O O $false$ O O O $any$ O O O $any$ O O O O $any$ O $boolean$ O $any$ O O O O $any$ O O O O O O O O O O $complex$ O O $false$ O O O $false$ O O O $false$ O O O $void$ O O O $any$ O O O O O $any$ O $boolean$ O $any$ O O O O O $any$ O O O O O O $complex$ O O $false$ O O O $false$ O O O $number$ O O O O $ObjectConstructor$ O $complex$ O O O O $number$ O O O O O O O $any$ O O O O
<s> import { _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { [ STORAGE . local ] : { } , [ STORAGE . session ] : { } } ; const _UNKNOWN_ = { [ STORAGE . local ] : null , [ STORAGE . session ] : null } ; export class _UNKNOWN_ { static store ( _UNKNOWN_ , _UNKNOWN_ , value ) { this . _UNKNOWN_ ( _UNKNOWN_ ) . setItem ( _UNKNOWN_ , JSON . stringify ( value ) ) ; _UNKNOWN_ [ _UNKNOWN_ ] [ _UNKNOWN_ ] = value ; _UNKNOWN_ . emit ( _UNKNOWN_ , _UNKNOWN_ , value ) ; } static _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) { if ( _UNKNOWN_ in _UNKNOWN_ [ _UNKNOWN_ ] ) return _UNKNOWN_ [ _UNKNOWN_ ] [ _UNKNOWN_ ] ; let value = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; if ( value !== null ) _UNKNOWN_ [ _UNKNOWN_ ] [ _UNKNOWN_ ] = value ; return value ; } static _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) { let data = null ; try { data = JSON . parse ( this . _UNKNOWN_ ( _UNKNOWN_ ) . getItem ( _UNKNOWN_ ) ) ; } catch ( err ) { console . warn ( `template` ) ; } return data ; } static refresh ( _UNKNOWN_ , _UNKNOWN_ ) { if ( ! _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) return ; let value = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; if ( value === null ) { delete _UNKNOWN_ [ _UNKNOWN_ ] [ _UNKNOWN_ ] ; _UNKNOWN_ . emit ( _UNKNOWN_ , _UNKNOWN_ , null ) ; } else if ( value !== _UNKNOWN_ [ _UNKNOWN_ ] [ _UNKNOWN_ ] ) { _UNKNOWN_ [ _UNKNOWN_ ] [ _UNKNOWN_ ] = value ; _UNKNOWN_ . emit ( _UNKNOWN_ , _UNKNOWN_ , value ) ; } } static _UNKNOWN_ ( _UNKNOWN_ ) { Object . keys ( _UNKNOWN_ [ _UNKNOWN_ ] ) . forEach ( ( _UNKNOWN_ ) => _UNKNOWN_ . refresh ( _UNKNOWN_ , _UNKNOWN_ ) ) ; } static clearAll ( _UNKNOWN_ ) { let storage = this . _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ ( storage ) . forEach ( ( _UNKNOWN_ ) => { storage . removeItem ( _UNKNOWN_ ) ; delete _UNKNOWN_ [ _UNKNOWN_ ] [ _UNKNOWN_ ] ; _UNKNOWN_ . emit ( _UNKNOWN_ , _UNKNOWN_ , null ) ; } ) ; } static clear ( _UNKNOWN_ , _UNKNOWN_ ) { this . _UNKNOWN_ ( _UNKNOWN_ ) . removeItem ( _UNKNOWN_ ) ; delete _UNKNOWN_ [ _UNKNOWN_ ] [ _UNKNOWN_ ] ; _UNKNOWN_ . emit ( _UNKNOWN_ , _UNKNOWN_ , null ) ; } static _UNKNOWN_ ( _UNKNOWN_ ) { if ( this . _UNKNOWN_ ( _UNKNOWN_ ) ) return this . _UNKNOWN_ ( _UNKNOWN_ ) ; else return _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; } static _UNKNOWN_ ( _UNKNOWN_ ) { let storage ; switch ( _UNKNOWN_ ) { case STORAGE . local : storage = localStorage ; break ; case STORAGE . session : storage = sessionStorage ; break ; default : throw Error ( 's' ) ; } return storage ; } static _UNKNOWN_ ( _UNKNOWN_ ) { if ( typeof _UNKNOWN_ [ _UNKNOWN_ ] === 's' ) return _UNKNOWN_ [ _UNKNOWN_ ] ; let isAvailable = true , storage ; try { storage = this . _UNKNOWN_ ( _UNKNOWN_ ) ; if ( typeof storage === 's' ) { storage . setItem ( 's' , 's' ) ; storage . removeItem ( 's' ) ; } else isAvailable = false ; } catch ( e ) { isAvailable = false ; } if ( ! isAvailable ) console . warn ( `template` ) ; return _UNKNOWN_ [ _UNKNOWN_ ] = isAvailable ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O $void$ O $any$ O $string$ O $any$ O O O O $any$ O $any$ O O $void$ O $string$ O $JSON$ O $complex$ O $any$ O O O O O $any$ O O $string$ O O $any$ O $any$ O $void$ O $any$ O $string$ O $any$ O O O O $string$ O $any$ O $string$ O O O O $string$ O O O $any$ O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O $any$ O O O O O $any$ O O $string$ O O $any$ O O $any$ O O O $any$ O $any$ O $string$ O O O $any$ O O O O O $any$ O $JSON$ O $any$ O O O $any$ O $any$ O O $string$ O $string$ O O O O O O $any$ O O $Console$ O $void$ O O O O O O $any$ O O O $void$ O $any$ O $string$ O O O O O $any$ O $boolean$ O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O $any$ O O O O O O O $any$ O O $string$ O O $any$ O $void$ O $any$ O $string$ O O O O O O O O $any$ O O O $any$ O O $string$ O O O O O $any$ O O $string$ O O $any$ O $any$ O $void$ O $any$ O $string$ O $any$ O O O O O $void$ O $any$ O O $ObjectConstructor$ O $complex$ O O O $any$ O O O $void$ O O $string$ O O $any$ O $void$ O $any$ O $string$ O O O O O $void$ O $any$ O O O $any$ O O O $any$ O $any$ O O $any$ O $string[]$ O $any$ O O $void$ O O $string$ O O O $any$ O $void$ O $string$ O O O O O $any$ O O $string$ O O $any$ O $void$ O $any$ O $string$ O O O O O O O O O $void$ O $any$ O $string$ O O O O $any$ O $any$ O O $void$ O $string$ O O O O O $any$ O O $string$ O O $any$ O $void$ O $any$ O $string$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $Storage$ O O O O $any$ O $any$ O $any$ O $Storage$ O O O O O O $ErrorConstructor$ O O O O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O $boolean$ O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $boolean$ O O O O O O $any$ O O $boolean$ O O O O O O O $boolean$ O $Console$ O $void$ O O O O O O O $any$ O O $boolean$ O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O
<s> import { EventEmitter } from 's' ; export interface _UNKNOWN_ { store ( key , value ) : void ; _UNKNOWN_ ( key ) : any ; clear ( key ? ) : void ; observe ( key ) : EventEmitter < any > ; } </s>	O O O $any$ O O O O O O $any$ O $void$ O $string$ O $any$ O O O O $any$ O $string$ O O O O $void$ O $string$ $string$ O O O O $any$ O $string$ O O $any$ O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { prefix ? : string ; separator ? : string ; caseSensitive ? : boolean ; } export class _UNKNOWN_ implements _UNKNOWN_ { prefix : string = _UNKNOWN_ ; separator : string = _UNKNOWN_ ; caseSensitive : boolean = _UNKNOWN_ ; constructor ( config ? ) { if ( config && config . prefix !== undefined ) { this . prefix = config . prefix ; } if ( config && config . separator !== undefined ) { this . separator = config . separator ; } if ( config && config . caseSensitive !== undefined ) { this . caseSensitive = config . caseSensitive ; } } } </s>	O O O O O $false$ O O O O O O O O $any$ O $string$ O O O O $string$ O O O O $boolean$ O O O O O O O $any$ O $any$ O $string$ O O O O O $string$ O O O O O $boolean$ O O O $false$ O O O $any$ $any$ O O O O $any$ O $any$ O $string$ O $undefined$ O O O O $string$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O $undefined$ O O O O $string$ O $any$ O $string$ O O O O $any$ O $any$ O $boolean$ O $undefined$ O O O O $boolean$ O $any$ O $boolean$ O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O
<s> import { EventEmitter } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; export class _UNKNOWN_ implements _UNKNOWN_ { constructor ( private _UNKNOWN_ = null ) { this . _UNKNOWN_ = _UNKNOWN_ ; } public store ( raw , value ) { let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( raw ) ; _UNKNOWN_ . store ( this . _UNKNOWN_ , _UNKNOWN_ , value ) ; } public _UNKNOWN_ ( raw ) { let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( raw ) ; return _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ , _UNKNOWN_ ) ; } public clear ( raw ? ) { if ( raw ) _UNKNOWN_ . clear ( this . _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ ( raw ) ) ; else _UNKNOWN_ . clearAll ( this . _UNKNOWN_ ) ; } public observe ( raw ) < any > { let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( raw ) ; return _UNKNOWN_ . observe ( this . _UNKNOWN_ , _UNKNOWN_ ) ; } public _UNKNOWN_ ( ) { return _UNKNOWN_ . _UNKNOWN_ ( this . _UNKNOWN_ ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O O $void$ O $string$ O $any$ O O O $string$ O $any$ O $string$ O $string$ O O $any$ O $void$ O O O $any$ O $string$ O $any$ O O O O $any$ O $string$ O O O $string$ O $any$ O $string$ O $string$ O O O $any$ O $string$ O O O $any$ O $string$ O O O O $void$ O $string$ $string$ O O O O $string$ O $any$ O $void$ O O O $any$ O $any$ O $string$ O $string$ O O O O $any$ O $void$ O O O $any$ O O O O $EventEmitter$ O $string$ O O O O O O $string$ O $any$ O $string$ O $string$ O O O $any$ O $any$ O O O $any$ O $string$ O O O O $boolean$ O O O O $any$ O $any$ O O O $any$ O O O O O
<s> import { Injectable } from 's' ; import { _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; import { _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ extends _UNKNOWN_ implements _UNKNOWN_ { constructor ( ) { super ( STORAGE . local ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O
<s> import { Injectable } from 's' ; import { _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; import { _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ extends _UNKNOWN_ implements _UNKNOWN_ { constructor ( ) { super ( STORAGE . session ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; import { _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , defaultValue = null ) { return function ( _UNKNOWN_ , raw ) { _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , raw , defaultValue ) ; } ; } export function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , raw , defaultValue ? ) { let key = _UNKNOWN_ || raw ; Object . defineProperty ( _UNKNOWN_ , raw , { get : function ( ) { let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( key ) ; return _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } , set : function ( value ) { let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( key ) ; this [ _UNKNOWN_ ] = value ; _UNKNOWN_ . store ( _UNKNOWN_ , _UNKNOWN_ , value ) ; } } ) ; if ( _UNKNOWN_ [ raw ] === null && defaultValue !== undefined ) { let sub = _UNKNOWN_ . _UNKNOWN_ . subscribe ( ( ) => { _UNKNOWN_ [ raw ] = defaultValue ; sub . unsubscribe ( ) ; } ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $void$ O $string$ O $any$ O $any$ O O O O O O O $Object$ O $string$ O O $void$ O $string$ O $any$ O $Object$ O $string$ O $any$ O O O O O O O $void$ O $string$ O $any$ O $Object$ O $string$ O $any$ $any$ O O O $string$ O $string$ O $string$ O $ObjectConstructor$ O $any$ O $Object$ O $string$ O O $string$ O O O O O O $string$ O $any$ O $string$ O $string$ O O O $any$ O $string$ O $any$ O $string$ O O O O $void$ O O O $any$ O O O $string$ O $any$ O $string$ O $string$ O O O O $string$ O O $any$ O $any$ O $void$ O $any$ O $string$ O $any$ O O O O O O O O $Object$ O $string$ O O O O $any$ O $undefined$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $Object$ O $string$ O O $any$ O $any$ O $any$ O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; export function _UNKNOWN_ ( _UNKNOWN_ ? , defaultValue ? ) { return function ( _UNKNOWN_ , raw ) { _UNKNOWN_ ( _UNKNOWN_ , STORAGE . local , _UNKNOWN_ , raw , defaultValue ) ; } ; } </s>	O O O $void$ O O O O O O $any$ O O O O O O $void$ O $string$ $string$ O $any$ $any$ O O O O O $Object$ O $string$ O O $void$ O $string$ O $any$ O $any$ O $Object$ O $string$ O $any$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; export function _UNKNOWN_ ( _UNKNOWN_ ? , defaultValue ? ) { return function ( _UNKNOWN_ , raw ) { _UNKNOWN_ ( _UNKNOWN_ , STORAGE . session , _UNKNOWN_ , raw , defaultValue ) ; } ; } </s>	O O O $void$ O O O O O O $any$ O O O O O O $void$ O $string$ $string$ O $any$ $any$ O O O O O $Object$ O $string$ O O $void$ O $string$ O $any$ O $any$ O $Object$ O $string$ O $any$ O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O
<s> import { Inject , InjectionToken , ModuleWithProviders , NgModule , NgZone , Optional } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export const _UNKNOWN_ = new InjectionToken ( 's' ) ; @ NgModule ( { declarations : [ ] , providers : [ _UNKNOWN_ , _UNKNOWN_ ] , imports : [ ] } ) export class 0 { static forRoot ( config ? ) { return { ngModule : 0 , providers : [ { provide : _UNKNOWN_ , useValue : config } , { provide : _UNKNOWN_ , useFactory : _UNKNOWN_ , deps : [ _UNKNOWN_ ] } ] } ; } constructor ( private ngZone , @ Optional ( ) @ Inject ( _UNKNOWN_ ) config ) { if ( config ) { _UNKNOWN_ . _UNKNOWN_ ( config . prefix ) ; _UNKNOWN_ . _UNKNOWN_ ( config . separator ) ; _UNKNOWN_ . _UNKNOWN_ ( config . caseSensitive ) ; } this . _UNKNOWN_ ( ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; } private _UNKNOWN_ ( ) { if ( typeof window !== 's' ) { window . addEventListener ( 's' , ( event ) => this . ngZone . run ( ( ) => { let storage = window . sessionStorage === event . _UNKNOWN_ ? STORAGE . session : STORAGE . local ; if ( event . key === null ) _UNKNOWN_ . _UNKNOWN_ ( storage ) ; else _UNKNOWN_ . refresh ( storage , event . key ) ; } ) ) ; } } } export function _UNKNOWN_ ( config ) { return new _UNKNOWN_ ( config ) ; } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $false$ O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O O O O O O O O O O O O O O O $any$ O O $any$ O O O O O $any$ O O $undefined[]$ O O O O $complex$ O O $any$ O $any$ O O $undefined[]$ O O O O O O O $any$ O O $ModuleWithProviders$ O $any$ $any$ O O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any[]$ O O $any$ O O O O O O O O O $NgZone$ O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $void$ O $any$ O $string$ O O $any$ O $void$ O $any$ O $string$ O O $any$ O $void$ O $any$ O $boolean$ O O O O O $void$ O O O $any$ O $void$ O O O O O $void$ O O O O O O $complex$ O O O O $complex$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $complex$ O $Storage$ O $any$ O $Storage$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $string$ O O O $any$ O $void$ O $any$ O O O $any$ O $void$ O $any$ O $any$ O $string$ O O O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { Component } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class App { } </s>	O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O O
<s> import { Component , OnInit } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { FormBuilder , FormGroup , Validators } from 's' ; @ Component ( { selector : 's' , template : `template` , } ) export class _UNKNOWN_ implements OnInit { form : FormGroup ; @ _UNKNOWN_ ( 's' ) public _UNKNOWN_ ; @ _UNKNOWN_ ( 's' , 's' ) public _UNKNOWN_ ; constructor ( private fb , private _UNKNOWN_ ) { } ngOnInit ( ) { this . form = this . fb . group ( { text : this . fb . control ( this . _UNKNOWN_ . _UNKNOWN_ ( 's' ) , Validators . required ) } ) ; this . _UNKNOWN_ . observe ( 's' ) . subscribe ( ( data ) => console . log ( 's' , data ) ) ; } submit ( value , valid ) { this . _UNKNOWN_ . store ( 's' , value . text ) ; } clear ( ) { this . _UNKNOWN_ . clear ( ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $void$ O $void$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $void$ O O O O $any$ O O $void$ O O O O O O $any$ O O O O $FormBuilder$ O O $any$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O O $Console$ O $void$ O O O $any$ O O O O $void$ O $any$ O $any$ O O O O $any$ O $void$ O O O $any$ O $any$ O O O $void$ O O O O O $any$ O $void$ O O O O O O
<s> import { Component } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) export class _UNKNOWN_ { @ _UNKNOWN_ ( 's' ) public _UNKNOWN_ ; @ _UNKNOWN_ ( 's' ) public _UNKNOWN_ ; } </s>	O O O $any$ O O O O O O $void$ O $void$ O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O O $void$ O O O O $any$ O O $void$ O O O O $any$ O O O
<s> import { NgModule } from 's' ; import { BrowserModule } from 's' ; import { FormsModule , ReactiveFormsModule } from 's' ; import { 0 } from 's' ; import { App } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { CommonModule } from 's' ; @ NgModule ( { declarations : [ App , _UNKNOWN_ , _UNKNOWN_ ] , imports : [ CommonModule , BrowserModule , FormsModule , ReactiveFormsModule , 0 . forRoot ( { separator : 's' , prefix : 's' , caseSensitive : true } ) , ] , bootstrap : [ App ] , } ) export class AppModule { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O $true$ O O O O O O O $complex$ O O $any$ O O O O O O $any$ O O O
<s> import 's' ; import { platformBrowserDynamic } from 's' ; import { AppModule } from 's' ; platformBrowserDynamic ( ) . bootstrapModule ( AppModule ) ; </s>	O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O
<s> import { TestBed } from 's' ; import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) class TestComponent { @ _UNKNOWN_ ( ) 0 = 's' ; @ _UNKNOWN_ ( 's' ) key ; @ _UNKNOWN_ ( 's' , 's' ) _UNKNOWN_ ; } describe ( 's' , ( ) => { let component , _UNKNOWN_ ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComponent ] , providers : [ { provide : _UNKNOWN_ , useClass : _UNKNOWN_ } , ] } ) ; let fixture = TestBed . createComponent ( TestComponent ) ; component = fixture . componentInstance ; _UNKNOWN_ . _UNKNOWN_ ( ) ; _UNKNOWN_ = fixture . debugElement . injector . get ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { expect ( component . _UNKNOWN_ ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { component . _UNKNOWN_ = 's' ; expect ( component . _UNKNOWN_ ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { expect ( component . 0 ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { expect ( component . 0 ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { let value = 's' ; _UNKNOWN_ . store ( 's' , value ) ; expect ( component . 0 ) . toEqual ( value ) ; } ) ; it ( 's' , ( ) => { let value = 's' ; component . 0 = value ; expect ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) ) . toEqual ( value ) ; } ) ; it ( 's' , ( ) => { let value = 's' ; _UNKNOWN_ . store ( 's' , value ) ; expect ( component . key ) . toEqual ( value ) ; } ) ; it ( 's' , ( ) => { let value = 's' ; component . key = value ; expect ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) ) . toEqual ( value ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $void$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O O $void$ O O $string$ O O O O $void$ O O O $any$ O O $void$ O O O O O $any$ O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $void$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O O O $string$ O O $any$ O $any$ O $any$ O O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O O O O O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O O O $string$ O O $any$ O $any$ O $any$ O O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O O O O O $any$ O $string$ O O O O O O O O O
<s> import { TestBed } from 's' ; import { Component } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { selector : 's' , template : `template` } ) class TestComponent { @ _UNKNOWN_ ( ) 0 = 's' ; @ _UNKNOWN_ ( 's' ) key ; @ _UNKNOWN_ ( 's' , 's' ) _UNKNOWN_ ; } describe ( 's' , ( ) => { let component , _UNKNOWN_ ; beforeEach ( ( ) => { TestBed . configureTestingModule ( { declarations : [ TestComponent ] , providers : [ { provide : _UNKNOWN_ , useClass : _UNKNOWN_ } , ] } ) ; let fixture = TestBed . createComponent ( TestComponent ) ; component = fixture . componentInstance ; _UNKNOWN_ . _UNKNOWN_ ( ) ; _UNKNOWN_ = fixture . debugElement . injector . get ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { expect ( component . _UNKNOWN_ ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { component . _UNKNOWN_ = 's' ; expect ( component . _UNKNOWN_ ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { expect ( component . 0 ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { let value = 's' ; _UNKNOWN_ . store ( 's' , value ) ; expect ( component . 0 ) . toEqual ( value ) ; } ) ; it ( 's' , ( ) => { let value = 's' ; component . 0 = value ; expect ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) ) . toEqual ( value ) ; } ) ; it ( 's' , ( ) => { let value = 's' ; _UNKNOWN_ . store ( 's' , value ) ; expect ( component . key ) . toEqual ( value ) ; } ) ; it ( 's' , ( ) => { let value = 's' ; component . key = value ; expect ( _UNKNOWN_ . _UNKNOWN_ ( 's' ) ) . toEqual ( value ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $void$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O O $void$ O O $string$ O O O O $void$ O O O $any$ O O $void$ O O O O O $any$ O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $void$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O O O $string$ O O $any$ O $any$ O $any$ O O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O O O O O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O O O $string$ O O $any$ O $any$ O $any$ O O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O O O O O $any$ O $string$ O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ , _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) . not . toEqual ( `template` ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) . toEqual ( `template` ) ; } ) ; afterAll ( ( ) => { _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ , _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) . not . toEqual ( `template` ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) . toEqual ( `template` ) ; } ) ; afterAll ( ( ) => { _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ ; _UNKNOWN_ = 's' ; expect ( _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) . toEqual ( `template` ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ ; _UNKNOWN_ = null ; expect ( ( ) => _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) . toThrow ( ) ; _UNKNOWN_ = undefined ; expect ( ( ) => _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) . toThrow ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ ; _UNKNOWN_ . _UNKNOWN_ ( true ) ; _UNKNOWN_ = 's' ; expect ( _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) . toEqual ( `template` ) ; _UNKNOWN_ . _UNKNOWN_ ( false ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) . toBeTruthy ( ) ; } ) ; } ) ; describe ( 's' , ( ) => { beforeAll ( ( ) => { sessionStorage . clear ( ) ; localStorage . clear ( ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => _UNKNOWN_ . _UNKNOWN_ ( sessionStorage ) ) . not . toThrow ( ) ; expect ( ( ) => _UNKNOWN_ . _UNKNOWN_ ( localStorage ) ) . not . toThrow ( ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( sessionStorage ) ; expect ( _UNKNOWN_ instanceof Array ) . toBe ( true ) ; expect ( _UNKNOWN_ . length ) . toEqual ( 0 ) ; _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( localStorage ) ; expect ( _UNKNOWN_ instanceof Array ) . toBe ( true ) ; expect ( _UNKNOWN_ . length ) . toEqual ( 0 ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = [ _UNKNOWN_ . _UNKNOWN_ ( 's' ) , _UNKNOWN_ . _UNKNOWN_ ( 's' ) ] , _UNKNOWN_ ; localStorage . clear ( ) ; sessionStorage . clear ( ) ; _UNKNOWN_ . forEach ( ( key ) => sessionStorage . setItem ( key , key ) ) ; _UNKNOWN_ . forEach ( ( key ) => localStorage . setItem ( key , key ) ) ; _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( localStorage ) ; expect ( _UNKNOWN_ . length ) . toEqual ( _UNKNOWN_ . length ) ; _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( sessionStorage ) ; expect ( _UNKNOWN_ . length ) . toEqual ( _UNKNOWN_ . length ) ; localStorage . clear ( ) ; sessionStorage . clear ( ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $string$ O O O $any$ O O O $any$ O $void$ O $string$ O O $any$ O $any$ O $string$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $string$ O $any$ O O O $any$ O O O O O O O $any$ O O O O O $any$ O $void$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $string$ O O O $any$ O O O $any$ O $void$ O $string$ O O $any$ O $any$ O $string$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $string$ O $any$ O O O $any$ O O O O O O O $any$ O O O O O $any$ O $void$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $string$ O $any$ O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $string$ O $any$ O O O $any$ O O O $any$ O $undefined$ O $any$ O O O O $any$ O $string$ O $any$ O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $void$ O O O O $any$ O O O $any$ O $any$ O $string$ O $any$ O O O $any$ O O O O $any$ O $void$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O $any$ O $any$ O $boolean$ O $string$ O O O $any$ O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $Storage$ O $void$ O O O $Storage$ O $void$ O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O $string[]$ O $Storage$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $string[]$ O $Storage$ O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $string[]$ O $Storage$ O O $any$ O $any$ O $ArrayConstructor$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $string[]$ O $Storage$ O O $any$ O $any$ O $ArrayConstructor$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O O $string[]$ O O $any$ O $string$ O O O O $any$ O $string$ O O O O O $any$ O $Storage$ O $void$ O O O $Storage$ O $void$ O O O $string[]$ O $void$ O O $string$ O O $Storage$ O $void$ O $string$ O $string$ O O O $string[]$ O $void$ O O $string$ O O $Storage$ O $void$ O $string$ O $string$ O O O $any$ O $any$ O $string[]$ O $Storage$ O O $any$ O $any$ O $any$ O O $any$ O $string[]$ O $number$ O O $any$ O $any$ O $string[]$ O $Storage$ O O $any$ O $any$ O $any$ O O $any$ O $string[]$ O $number$ O O $Storage$ O $void$ O O O $Storage$ O $void$ O O O O O O O O O O O O O
<s> import { EventEmitter } from 's' ; import { _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { let event = _UNKNOWN_ . observe ( STORAGE . local , 's' ) ; it ( 's' , ( ) => { expect ( event instanceof EventEmitter ) . toBe ( true ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . observe ( STORAGE . local , 's' ) === event ) . toBe ( true ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . observe ( STORAGE . local , 's' ) !== event ) . toBe ( true ) ; } ) ; } ) ; describe ( 's' , ( ) => { let event = _UNKNOWN_ . observe ( STORAGE . local , 's' ) ; it ( 's' , ( done ) => { let result = 's' ; event . subscribe ( ( data ) => { expect ( data ) . toEqual ( result ) ; done ( ) ; } ) ; event . emit ( 's' ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ = 's' ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . local , _UNKNOWN_ ) ) . toEqual ( `template` ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O O O $string$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $string$ O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { STORAGE } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { let value = 's' ; _UNKNOWN_ . store ( STORAGE . session , 's' , value ) ; expect ( sessionStorage . getItem ( 's' ) ) . toEqual ( JSON . stringify ( value ) ) ; } ) ; it ( 's' , ( ) => { let value = 's' ; _UNKNOWN_ . store ( STORAGE . local , 's' , value ) ; expect ( localStorage . getItem ( 's' ) ) . toEqual ( JSON . stringify ( value ) ) ; } ) ; it ( 's' , ( done ) => { let event = _UNKNOWN_ . observe ( STORAGE . local , 's' ) , value = 's' ; event . subscribe ( ( data ) => { expect ( data ) . toEqual ( value ) ; done ( ) ; } ) ; _UNKNOWN_ . store ( STORAGE . local , 's' , value ) ; } ) ; } ) ; describe ( 's' , ( ) => { beforeAll ( ( ) => { sessionStorage . clear ( ) ; localStorage . clear ( ) ; } ) ; it ( 's' , ( ) => { let value = 's' , key = 's' ; localStorage . setItem ( key , JSON . stringify ( value ) ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . local , key ) ) . toEqual ( value ) ; } ) ; it ( 's' , ( ) => { let value = 's' , key = 's' ; sessionStorage . setItem ( key , JSON . stringify ( value ) ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . session , key ) ) . toEqual ( value ) ; } ) ; it ( 's' , ( ) => { let value = 's' , key = 's' ; sessionStorage . setItem ( key , JSON . stringify ( 's' ) ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . session , key ) ) . toEqual ( value ) ; } ) ; } ) ; describe ( 's' , ( ) => { let 0 = _UNKNOWN_ . _UNKNOWN_ ( 's' ) , 0 = _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; beforeAll ( ( ) => { _UNKNOWN_ . store ( STORAGE . session , 0 , 's' ) ; _UNKNOWN_ . store ( STORAGE . session , 0 , 's' ) ; _UNKNOWN_ . store ( STORAGE . local , 0 , 's' ) ; _UNKNOWN_ . store ( STORAGE . local , 0 , 's' ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . session , 0 ) ) . toEqual ( 's' ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . session , 0 ) ) . toEqual ( 's' ) ; _UNKNOWN_ . clearAll ( STORAGE . session ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . session , 0 ) ) . toEqual ( null ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . session , 0 ) ) . toEqual ( null ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . local , 0 ) ) . toEqual ( 's' ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . local , 0 ) ) . toEqual ( 's' ) ; _UNKNOWN_ . clearAll ( STORAGE . local ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . local , 0 ) ) . toEqual ( null ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . local , 0 ) ) . toEqual ( null ) ; } ) ; } ) ; describe ( 's' , ( ) => { let 0 = _UNKNOWN_ . _UNKNOWN_ ( 's' ) ; beforeAll ( ( ) => { _UNKNOWN_ . store ( STORAGE . session , 0 , 's' ) ; _UNKNOWN_ . store ( STORAGE . local , 0 , 's' ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . session , 0 ) ) . toEqual ( 's' ) ; _UNKNOWN_ . clearAll ( STORAGE . session ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . session , 0 ) ) . toEqual ( null ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . local , 0 ) ) . toEqual ( 's' ) ; _UNKNOWN_ . clearAll ( STORAGE . local ) ; expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . local , 0 ) ) . toEqual ( null ) ; } ) ; it ( 's' , ( done ) => { let event = _UNKNOWN_ . observe ( STORAGE . local , 0 ) , result = null ; event . subscribe ( ( data ) => { expect ( data ) . toEqual ( result ) ; done ( ) ; } ) ; event . emit ( null ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . local ) === localStorage ) . toBe ( true ) ; } ) ; it ( 's' , ( ) => { expect ( _UNKNOWN_ . _UNKNOWN_ ( STORAGE . session ) === sessionStorage ) . toBe ( true ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $void$ O $any$ O $any$ O O O $string$ O O $any$ O $Storage$ O $string$ O O O O O $any$ O $JSON$ O $complex$ O $string$ O O O O O O $any$ O O O O O O O O $string$ O O O $any$ O $void$ O $any$ O $any$ O O O $string$ O O $any$ O $Storage$ O $string$ O O O O O $any$ O $JSON$ O $complex$ O $string$ O O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $string$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $string$ O O $any$ O O O O O O $any$ O $void$ O $any$ O $any$ O O O $string$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O $Storage$ O $void$ O O O $Storage$ O $void$ O O O O O O $any$ O O O O O O O O $string$ O O O $string$ O O O $Storage$ O $void$ O $string$ O $JSON$ O $complex$ O $string$ O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O O O $string$ O O O $Storage$ O $void$ O $string$ O $JSON$ O $complex$ O $string$ O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O O O $string$ O O O $Storage$ O $void$ O $string$ O $JSON$ O $complex$ O O O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O $string$ O $any$ O $string$ O O O O $any$ O O O O O $any$ O $void$ O $any$ O $any$ O $string$ O O O O $any$ O $void$ O $any$ O $any$ O $string$ O O O O $any$ O $void$ O $any$ O $any$ O $string$ O O O O $any$ O $void$ O $any$ O $any$ O $string$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O $void$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O $void$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O O O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O O $any$ O O O O O $any$ O $void$ O $any$ O $any$ O $string$ O O O O $any$ O $void$ O $any$ O $any$ O $string$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O $void$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O $void$ O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $Storage$ O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $Storage$ O O $any$ O O O O O O O O O O O O O O
<s> export interface _UNKNOWN_ { src : string ; inject : string | boolean ; _UNKNOWN_ ? : boolean ; _UNKNOWN_ ? : string [ ] | string ; env ? : string [ ] | string ; } export interface _UNKNOWN_ { _UNKNOWN_ : string ; _UNKNOWN_ : string ; [ key ] : string ; } export interface _UNKNOWN_ { name : string ; path ? : string ; _UNKNOWN_ ? : any ; } </s>	O O O $any$ O $string$ O O O $complex$ O O O O O $boolean$ O O O O $complex$ O O O O O O O O $complex$ O O O O O O O O O O O $any$ O $string$ O O O $string$ O O O O $string$ O O O O O O O $any$ O $string$ O O O $string$ O O O O $any$ O O O O O O
<s> import { join } from 's' ; import * as slash from 's' ; import { argv } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; export const _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } ; export class _UNKNOWN_ { PORT = argv [ 's' ] || 0 ; _UNKNOWN_ = join ( __dirname , 's' ) ; _UNKNOWN_ = _UNKNOWN_ ( ) ; DEBUG = argv [ 's' ] || false ; _UNKNOWN_ = argv [ 's' ] || 0 ; _UNKNOWN_ = argv [ 's' ] || 0 ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = argv [ 's' ] || 's' ; _UNKNOWN_ = slash ( join ( 's' , this . _UNKNOWN_ , 's' ) ) ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ = false ; _UNKNOWN_ = 0 ; _UNKNOWN_ = argv [ 's' ] || 's' ; _UNKNOWN_ = argv [ 's' ] || 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ = `template` + 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ = `template` ; 0 = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ = 's' ; _UNKNOWN_ = join ( process . cwd ( ) , this . _UNKNOWN_ , 's' , 's' ) ; _UNKNOWN_ = join ( process . cwd ( ) , this . _UNKNOWN_ , 's' , 's' ) ; _UNKNOWN_ = join ( process . cwd ( ) , this . _UNKNOWN_ , 's' , 's' ) ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ = `template` ; 0 = `template` ; _UNKNOWN_ = `template` ; _UNKNOWN_ = this . _UNKNOWN_ === _UNKNOWN_ . _UNKNOWN_ ? this . _UNKNOWN_ : this . _UNKNOWN_ ; _UNKNOWN_ = `template` ; _UNKNOWN_ = `template` ; VERSION = appVersion ( ) ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = [ 's' , 's' ] . indexOf ( `template` . toLowerCase ( ) ) !== - 0 || argv [ 's' ] || false ; _UNKNOWN_ = ! ! process . env . _UNKNOWN_ ; _UNKNOWN_ : string [ ] = [ ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ { src : 's' , inject : 's' } , { src : 's' , inject : 's' } , { src : 's' , inject : 's' , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ } , { src : 's' , inject : 's' } , { src : 's' , inject : 's' , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ } , { src : 's' , inject : 's' , _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ } , ] ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; _UNKNOWN_ : string [ ] = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , ] ; _UNKNOWN_ : string [ ] = [ 's' ] ; _UNKNOWN_ : any [ ] = [ ] ; get _UNKNOWN_ ( ) : _UNKNOWN_ [ ] { return _UNKNOWN_ ( this . _UNKNOWN_ . filter ( _UNKNOWN_ . bind ( null , this . _UNKNOWN_ ) ) ) . concat ( this . _UNKNOWN_ . filter ( _UNKNOWN_ . bind ( null , this . _UNKNOWN_ ) ) ) ; } _UNKNOWN_ : any = { _UNKNOWN_ : true , paths : { [ this . _UNKNOWN_ ] : `template` , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' } , packages : { } } ; _UNKNOWN_ : any = this . _UNKNOWN_ ; _UNKNOWN_ : any = { _UNKNOWN_ : true , base : this . _UNKNOWN_ , _UNKNOWN_ : [ join ( 's' , 's' , 's' ) , join ( 's' , 's' , 's' , 's' ) ] , paths : { [ join ( this . _UNKNOWN_ , 's' ) ] : `template` , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' , 's' : 's' } , packages : { 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } , 's' : { main : 's' , _UNKNOWN_ : 's' } } } ; _UNKNOWN_ = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' ] ; _UNKNOWN_ : [ string , string ] [ ] = [ ] ; _UNKNOWN_ : any [ ] = [ ] ; _UNKNOWN_ : any = { } ; _UNKNOWN_ = ( ) => { return Date . now ( ) . toString ( ) ; } private get _UNKNOWN_ ( ) : _UNKNOWN_ [ ] { return [ { src : `template` , inject : true , _UNKNOWN_ : false } , ... this . _UNKNOWN_ , ] ; } private get _UNKNOWN_ ( ) : any { let defaults = { 's' : { middleware : [ require ( 's' ) ( { index : `template` } ) , ... this . _UNKNOWN_ ] , port : this . PORT , startPath : this . _UNKNOWN_ , open : argv [ 's' ] ? false : true , _UNKNOWN_ : false , server : { baseDir : `template` , routes : { [ `template` ] : this . _UNKNOWN_ , [ `template` ] : this . _UNKNOWN_ , [ `template` ] : 's' , [ `template` ] : this . _UNKNOWN_ } } } , 's' : join ( this . _UNKNOWN_ , this . _UNKNOWN_ , 's' ) , 's' : { includePaths : [ 's' ] } , 's' : { targetFile : `template` , options : { _UNKNOWN_ : false } } } ; this . _UNKNOWN_ ( defaults , this . _UNKNOWN_ ) ; return defaults ; } _UNKNOWN_ ( ) { return { _UNKNOWN_ : { 's' : [ 's' ] } , reporters : [ 's' , 's' , 's' ] , _UNKNOWN_ : { dir : this . _UNKNOWN_ + 's' , reporters : [ { type : 's' , _UNKNOWN_ : 's' , file : 's' } , { type : 's' , _UNKNOWN_ : 's' } ] } , _UNKNOWN_ : { reports : { html : this . _UNKNOWN_ } } } ; } _UNKNOWN_ ( target , source ) { const deepExtend = require ( 's' ) ; deepExtend ( target , source ) ; } _UNKNOWN_ ( _UNKNOWN_ ) { if ( this . _UNKNOWN_ [ _UNKNOWN_ ] ) { return this . _UNKNOWN_ [ _UNKNOWN_ ] ; } return null ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ === _UNKNOWN_ . _UNKNOWN_ && this . _UNKNOWN_ ? 's' : 's' ; } _UNKNOWN_ ( pack ) { if ( pack . path ) { this . _UNKNOWN_ . paths [ pack . name ] = pack . path ; this . _UNKNOWN_ . paths [ pack . name ] = pack . path ; } if ( pack . _UNKNOWN_ ) { this . _UNKNOWN_ . packages [ pack . name ] = pack . _UNKNOWN_ ; this . _UNKNOWN_ . packages [ pack . name ] = pack . _UNKNOWN_ ; } } _UNKNOWN_ ( _UNKNOWN_ : _UNKNOWN_ [ ] ) { _UNKNOWN_ . forEach ( ( pack ) => { this . _UNKNOWN_ ( pack ) ; } ) ; } _UNKNOWN_ ( ) { let _UNKNOWN_ = { } ; this . _UNKNOWN_ . map ( _UNKNOWN_ => { _UNKNOWN_ = Object . assign ( _UNKNOWN_ , _UNKNOWN_ ) ; } ) ; return _UNKNOWN_ ; } } export function _UNKNOWN_ ( deps : _UNKNOWN_ [ ] ) { deps . filter ( ( d ) => ! "s" . test ( d . src ) ) . forEach ( ( d ) => d . src = require . resolve ( d . src ) ) ; return deps ; } function _UNKNOWN_ ( type , d ) { const t = d . _UNKNOWN_ || d . env ; d . _UNKNOWN_ = t ; if ( ! t ) { d . _UNKNOWN_ = Object . keys ( _UNKNOWN_ ) . map ( k => _UNKNOWN_ [ k ] ) ; } if ( ! ( d . _UNKNOWN_ instanceof Array ) ) { ( < any > d ) . env = [ d . _UNKNOWN_ ] ; } return d . _UNKNOWN_ . indexOf ( type ) >= 0 ; } function appVersion ( ) : number | string { var pkg = require ( 's' ) ; return pkg . version ; } function _UNKNOWN_ ( ) { let type = ( argv [ 's' ] || argv [ 's' ] || 's' ) . toLowerCase ( ) ; let base : string [ ] = argv [ 's' ] ; let _UNKNOWN_ = ! ! base . filter ( o => o . indexOf ( _UNKNOWN_ . _UNKNOWN_ ) >= 0 ) . pop ( ) ; if ( ( base && _UNKNOWN_ ) || type === _UNKNOWN_ . _UNKNOWN_ ) { return _UNKNOWN_ . _UNKNOWN_ ; } else { return _UNKNOWN_ . _UNKNOWN_ ; } } </s>	O O O $any$ O O O O O O O $string$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $string$ O $string$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $string$ O O O $string$ O O O $any$ O $any$ O O O O O O $string$ O $string$ O $any$ O O O O O $any$ O O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $number$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O $any$ O $string$ O O O $string$ O O O $string$ O $string$ O O O $string$ O O O $complex$ O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $any$ O O O O O O O $number$ O O O $string$ O O O O O O O $any$ O O O O O O $boolean$ O O O $any$ O $any$ O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O $any$ O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O $any$ O $string$ O O O O $any$ O $any$ O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O $string[]$ O O O O O O O O O $any[]$ O O O O O O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O $complex$ O $boolean$ O $any$ O O O O O $string$ O O O O $complex$ O O O $any$ O $complex$ O $boolean$ O $any$ O O O O O $string$ O O O O O $any$ O O O O $boolean$ O O O O O O O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O ${}$ O O O O O $any$ O O O O O $any$ O $any$ O O O O $boolean$ O O O $any$ O O O $any$ O $any[]$ O O $any$ O O O O O O O O $any$ O O O O O O O O O O O $complex$ O O O $any$ O O O $string$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O O $string$ O O O $string$ O O O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O $complex$ O O O O O O O O O O O O $any[]$ O O O O O O O O $any$ O O O O O O $string$ O O O O O O $DateConstructor$ O $number$ O O O $string$ O O O O O O $any$ O O O $any$ O O O O O O $string$ O O O $true$ O O O $false$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O $any[]$ O O $any$ O O O O O $string$ O O O O O O O O $any[]$ O O $any$ O O O $any$ O $any$ O O O $any$ O $boolean$ O $any$ O O O O O O O O $boolean$ O O O $complex$ O O $string$ O O O $complex$ O O O O O O O O $string$ O O O O O O O $string$ O O O O O O O O O O O O O $string$ O O O O O O $any$ O O O $any$ O O O $string$ O O O O O O O $string[]$ O O O O O O O O O $string$ O O O $complex$ O O $boolean$ O O O O O O O O $void$ O $complex$ O O O $any$ O O O $complex$ O O $any$ O O O O O $complex$ O O O O O O O O O $string[]$ O O O O O O O O O $complex$ O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $string$ O O O O O O $any$ O $string$ O O O O O O $any$ O $string$ O O O O O O O $complex$ O O O O O O $string$ O $any$ O $string$ O O O $any$ O O O O O O $void$ O $any$ O O O O $any$ O $string$ O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O $string$ O O O $any$ O $any$ O $any$ O $string$ O O $any$ O $string$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O O O $void$ O $any$ O $any$ O O O O $any$ O $void$ O O $any$ O O O O O $void$ O $any$ O O O O O O ${}$ O O O O ${}$ O O O O O O $any[]$ O $U[]$ O $any$ O O ${}$ O $ObjectConstructor$ O O O ${}$ O $any$ O O O O O O ${}$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $complex$ O O $any$ O O O O O $boolean$ O $any$ O $string$ O O O $void$ O O $any$ O O $any$ O $string$ O $any$ O $any$ O $any$ O $string$ O O O O $any$ O O O $boolean$ O $string$ O $any$ O O O $complex$ O $any$ O $complex$ O $any$ O $complex$ O $any$ O $complex$ O $complex$ O O O O $complex$ O O $any$ O $complex$ O $ObjectConstructor$ O $complex$ O $any$ O O $U[]$ O $string$ O $any$ O $string$ O O O O O O O O $any$ O $complex$ O $ArrayConstructor$ O O O O O O O $any$ O O $any$ O O $any$ O $string$ O O O O $any$ O $complex$ O $number)$ O $string$ O O O O O O $complex$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $string$ O O O O $any$ O O $any$ O O O O $any$ O O O O O O O $any$ O O O O $string[]$ O O O O O $any$ O O O O O $boolean$ O O O $string[]$ O $complex$ O $string$ O $string$ O $number$ O $any$ O $string$ O O O O O $string$ O O O O O O $string[]$ O $boolean$ O O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O $any$ O $string$ O O O O
<s> import { argv } from 's' ; import { _UNKNOWN_ } from 's' ; import * as path from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = 's' ; _UNKNOWN_ = `template` ; _UNKNOWN_ = `template` ; _UNKNOWN_ = { _UNKNOWN_ : 's' , } ; _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; constructor ( ) { super ( ) ; this . _UNKNOWN_ = true ; if ( argv && argv . _ ) { if ( argv [ 's' ] ) { this . _UNKNOWN_ = true ; if ( argv [ 's' ] ) { this . _UNKNOWN_ = true ; } } else if ( argv [ 's' ] ) { this . _UNKNOWN_ = true ; } } let bootstrap = 's' ; if ( this . _UNKNOWN_ ) { bootstrap = 's' ; } if ( argv [ 's' ] ) { this . _UNKNOWN_ . _UNKNOWN_ = argv [ 's' ] ; } this . _UNKNOWN_ = argv [ 's' ] ? ( argv [ 's' ] + 's' ) : 's' ; this . _UNKNOWN_ = `template` ; this . _UNKNOWN_ = `template` ; this . _UNKNOWN_ = `template` ; this . _UNKNOWN_ = `template` ; this . _UNKNOWN_ = 's' ; this . _UNKNOWN_ = this . _UNKNOWN_ ? 's' : 's' ; let _UNKNOWN_ : _UNKNOWN_ [ ] = [ { name : 's' , path : 's' , _UNKNOWN_ : { main : 's' , _UNKNOWN_ : 's' } } , { name : 's' , _UNKNOWN_ : { main : 's' , _UNKNOWN_ : 's' } } , { name : 's' , _UNKNOWN_ : { main : 's' , _UNKNOWN_ : 's' } } , { name : 's' , _UNKNOWN_ : { main : 's' , _UNKNOWN_ : 's' } } , { name : 's' , path : 's' } , { name : 's' , _UNKNOWN_ : { main : 's' , _UNKNOWN_ : 's' } } , { name : 's' , _UNKNOWN_ : { main : 's' , _UNKNOWN_ : 's' } } , { name : 's' , _UNKNOWN_ : { main : 's' , _UNKNOWN_ : 's' } } , { name : 's' , _UNKNOWN_ : { main : 's' , _UNKNOWN_ : 's' } } , { name : 's' , path : 's' } , { name : 's' , path : 's' } ] ; this . _UNKNOWN_ = [ ... this . _UNKNOWN_ , ... _UNKNOWN_ , ] ; this . _UNKNOWN_ ( _UNKNOWN_ ) ; this . _UNKNOWN_ [ 's' ] = { includePaths : [ 's' , 's' , 's' ] } ; this . _UNKNOWN_ [ 's' ] = { includePaths : [ this . _UNKNOWN_ , 's' , 's' ] . map ( ( dir ) => path . resolve ( this . _UNKNOWN_ , dir ) ) , } ; this . _UNKNOWN_ . paths [ this . _UNKNOWN_ ] = `template` ; delete this . _UNKNOWN_ [ 's' ] ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O O O $any$ O $any$ O O O O O O O O O O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $boolean$ O O O O O $any$ O O O O O O O $boolean$ O O O O O O O O $any$ O O O O O O O $boolean$ O O O O O O $string$ O O O O O O O $boolean$ O O $string$ O O O O O O $any$ O O O O O O O $complex$ O $string$ O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $any$ O O O $boolean$ O O O O O O $any$ O $any$ O O O O O $string$ O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $complex$ O O $string$ O O O $string$ O O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O $any$ O O O O O $any$ O O $any$ O O O O O $void$ O $any$ O O O O $any$ O O O O O $string[]$ O O O O O O O O O O O O $any$ O O O O O $any[]$ O O O O $string$ O O O O O O $U[]$ O O $string$ O O $any$ O $any$ O O O $string$ O $string$ O O O O O O O $any$ O $any$ O O O $string$ O O O O O O O $any$ O O O O O O O
<s> import { join } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ = join ( process . cwd ( ) , this . _UNKNOWN_ , 's' , 's' ) ; constructor ( ) { super ( ) ; this . _UNKNOWN_ = [ ... this . _UNKNOWN_ , ] ; this . _UNKNOWN_ = [ ] ; this . _UNKNOWN_ = [ ... this . _UNKNOWN_ , ] ; this . _UNKNOWN_ = [ ... this . _UNKNOWN_ , ] ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O O O O O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O $string[]$ O O O O O $string[]$ O O O O O $any[]$ O O O O O $any[]$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; const config = new _UNKNOWN_ ( ) ; export default config ; </s>	O O O $any$ O O O O O $any$ O O $any$ O O O O O $any$ O O
<s> export function _UNKNOWN_ ( ) { } </s>	O O O $void$ O O O O O
<s> import * as _UNKNOWN_ from 's' ; import Config from 's' ; class _UNKNOWN_ { private _files : string [ ] = [ ] ; private _UNKNOWN_ = true ; get _UNKNOWN_ ( ) { return this . _files . slice ( ) ; } get pristine ( ) { return this . _UNKNOWN_ ; } addFile ( file ) { this . _UNKNOWN_ = false ; this . _files . push ( file ) ; } _UNKNOWN_ ( files : string [ ] ) { files . forEach ( f => this . addFile ( f ) ) ; } clear ( ) { this . _files = [ ] ; } } export let _UNKNOWN_ = new _UNKNOWN_ ( ) ; let runServer = ( ) => { _UNKNOWN_ . init ( Config . _UNKNOWN_ ( 's' ) ) ; } ; let listen = ( ) => { runServer ( ) ; } ; let changed = ( files ) => { if ( ! ( files instanceof Array ) ) { files = [ files ] ; } _UNKNOWN_ . reload ( files ) ; } ; export { listen , changed } ; </s>	O O O O $any$ O O O O $any$ O O O O $any$ O O $string[]$ O O O O O O O O O $boolean$ O O O O $string[]$ O O O O O O $string[]$ O $string[]$ O O O O O $boolean$ O O O O O O $boolean$ O O $void$ O $string$ O O O O $boolean$ O O O O O $string[]$ O $number$ O $string$ O O O $void$ O $string[]$ O O O O O O $string[]$ O $void$ O $string$ O O O $void$ O $string$ O O O O $void$ O O O O O $string[]$ O O O O O O O O $any$ O O $any$ O O O O $void$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O O O O $void$ O O O O O O $void$ O O $any$ O O O O O O O $any$ O $ArrayConstructor$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O O $void$ O $void$ O O O
<s> import * as express from 's' ; import { Application } from 's' ; import * as http from 's' ; import * as fallback from 's' ; import * as _UNKNOWN_ from 's' ; import { resolve } from 's' ; import * as _UNKNOWN_ from 's' ; import Config from 's' ; export class _UNKNOWN_ { protected _UNKNOWN_ : number = Config . PORT ; protected _UNKNOWN_ : number = Config . _UNKNOWN_ ; protected _UNKNOWN_ : number = Config . _UNKNOWN_ ; protected _UNKNOWN_ : string = Config . _UNKNOWN_ ; protected _UNKNOWN_ : string = Config . _UNKNOWN_ ; protected _UNKNOWN_ : string = Config . _UNKNOWN_ ; protected _UNKNOWN_ : string = Config . _UNKNOWN_ ; protected _UNKNOWN_ : string = Config . _UNKNOWN_ ; protected httpServer : http . Server ; constructor ( protected app ) { } public startServer ( ) { console . info ( this . _UNKNOWN_ ) ; } public _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; _UNKNOWN_ . listen ( ) ; this . startServer ( ) ; } public _UNKNOWN_ ( e ) { this . startServer ( ) ; let fileName = e . path ; _UNKNOWN_ . changed ( fileName ) ; } public _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; this . app . use ( this . _UNKNOWN_ , express . static ( resolve ( process . cwd ( ) , this . _UNKNOWN_ ) ) ) ; this . app . listen ( this . _UNKNOWN_ , ( ) => _UNKNOWN_ ( 's' + this . _UNKNOWN_ + this . _UNKNOWN_ ) ) ; this . startServer ( ) ; } public _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; this . app . use ( this . _UNKNOWN_ , express . static ( resolve ( process . cwd ( ) , this . _UNKNOWN_ ) ) ) ; this . app . listen ( this . _UNKNOWN_ , ( ) => _UNKNOWN_ ( 's' + this . _UNKNOWN_ + this . _UNKNOWN_ ) ) ; this . startServer ( ) ; } public _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; let root = resolve ( process . cwd ( ) , this . _UNKNOWN_ ) ; for ( let proxy of Config . _UNKNOWN_ ) { this . app . use ( proxy ) ; } this . app . use ( this . _UNKNOWN_ , express . static ( root ) ) ; this . app . use ( fallback ( 's' , { root } ) ) ; this . httpServer = this . app . listen ( this . _UNKNOWN_ , ( ) => _UNKNOWN_ ( 's' + this . _UNKNOWN_ + this . _UNKNOWN_ ) ) ; this . startServer ( ) ; } protected _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; } protected _UNKNOWN_ ( ) { } public getApp ( ) { return this . app ; } public _UNKNOWN_ ( ) : http . Server { return this . httpServer ; } } </s>	O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $void$ O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O O $any$ O O $number$ O O O $any$ O $any$ O O $number$ O O O $any$ O $any$ O O $number$ O O O $any$ O $any$ O O $string$ O O O $any$ O $any$ O O $string$ O O O $any$ O $string$ O O $string$ O O O $any$ O $string$ O O $string$ O O O $any$ O $string$ O O $string$ O O O $any$ O $string$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O $void$ O O O $Console$ O $void$ O O O $string$ O O O O $void$ O O O O O $void$ O O O $any$ O $void$ O O O O O $void$ O O O O O $void$ O $any$ O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $void$ O $any$ O O O O $void$ O O O O O $void$ O O O O O $any$ O $any$ O O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O $any$ O $any$ O O O $number$ O O O O $void$ O O O O O $number$ O O O $string$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $any$ O $any$ O O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O $any$ O $any$ O O O $number$ O O O O $void$ O O O O O $number$ O O O $string$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $string$ O O O O O $any$ O $any$ O $any[]$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $string$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O O O $number$ O O O O $void$ O O O O O $number$ O O O $string$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O O
<s> import * as express from 's' ; import { Application } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ extends _UNKNOWN_ { public startServer ( ) { super . startServer ( ) ; } } let app = express ( ) ; let _UNKNOWN_ = new _UNKNOWN_ ( app ) ; export default _UNKNOWN_ ; export function _UNKNOWN_ ( ) { _UNKNOWN_ . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( e ) { _UNKNOWN_ . _UNKNOWN_ ( e ) ; } export function _UNKNOWN_ ( ) { _UNKNOWN_ . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( ) { _UNKNOWN_ . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( ) { _UNKNOWN_ . _UNKNOWN_ ( ) ; } </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O $void$ O O O O O $void$ O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O $void$ O O O $any$ O $void$ O O O O O O $void$ O $any$ O O $any$ O $void$ O $any$ O O O O O $void$ O O O $any$ O $void$ O O O O O O $void$ O O O $any$ O $void$ O O O O O O $void$ O O O $any$ O $void$ O O O O O
<s> export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O
<s> import * as util from 's' ; import { relative , normalize } from 's' ; import * as rimraf from 's' ; import Config from 's' ; export function clean ( paths : string | string [ ] ) : ( done : ( ) => void ) => void { return done => { let _UNKNOWN_ : string [ ] ; if ( paths instanceof Array ) { _UNKNOWN_ = paths ; } else { _UNKNOWN_ = [ < string > paths ] ; } let promises = _UNKNOWN_ . map ( p => { return new Promise ( resolve => { const relativePath = relative ( Config . _UNKNOWN_ , p ) ; if ( relativePath . startsWith ( 's' ) ) { util . log ( util . colors . _UNKNOWN_ . white ( `template` ) ) ; process . exit ( 0 ) ; } else { rimraf ( p , e => { if ( e ) { util . log ( 's' , e ) ; } else { util . log ( 's' , util . colors . yellow ( p || 's' ) ) ; } resolve ( ) ; } ) ; } } ) ; } ) ; Promise . all ( promises ) . then ( ( ) => ( done || ( ( ) => 0 ) ) ( ) ) . catch ( e => util . log ( util . colors . red ( `template` ) ) ) ; } ; } </s>	O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O O O O O $void$ O $complex$ O O O O O O O O O $void$ O O O O O O O O O O $void$ O O O $string[]$ O O O O O O O $complex$ O $ArrayConstructor$ O O $string[]$ O $string[]$ O O O O $string[]$ O O O O O $string$ O O O O $any$ O $string[]$ O $U[]$ O $string$ O O O O $PromiseConstructor$ O $void$ O O O $string$ O $any$ O $any$ O $any$ O $string$ O O O O $string$ O $boolean$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $string$ O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O O O O O $void$ O O O O O O O O O O O O O $PromiseConstructor$ O O O $any$ O O O O O O O O $void$ O O O O O O O O O O O O $complex$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O
<s> export abstract class Task { _UNKNOWN_ ( files : string [ ] ) { return true ; } abstract run ( done ? , files ? : string [ ] ) : any | Promise < any > | void ; } </s>	O O O O $any$ O $boolean$ O $string[]$ O O O O O O O O O O O $any$ O $any$ $any$ O $string[]$ O O O O O O O O O $PromiseConstructor$ O O O O O O O O
<s> import { existsSync , lstatSync , readFileSync , readdirSync } from 's' ; import * as _UNKNOWN_ from 's' ; import * as gulp from 's' ; import * as util from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import * as _UNKNOWN_ from 's' ; import { _UNKNOWN_ } from 's' ; import { Task } from 's' ; export function _UNKNOWN_ ( path ) { util . log ( 's' , util . colors . yellow ( path ) ) ; _UNKNOWN_ ( path , _UNKNOWN_ => _UNKNOWN_ ( _UNKNOWN_ , path ) ) ; } function _UNKNOWN_ ( tasks ) { return Object . keys ( tasks ) . map ( ( taskName ) => { if ( ! tasks [ taskName ] || ! Array . isArray ( tasks [ taskName ] ) || tasks [ taskName ] . some ( ( t ) => typeof t !== 's' ) ) { return taskName ; } return null ; } ) . filter ( ( taskName ) => ! ! taskName ) ; } function _UNKNOWN_ ( tasks ) { Object . keys ( tasks ) . forEach ( ( t ) => { gulp . task ( t , ( done ) => _UNKNOWN_ . apply ( null , [ ... tasks [ t ] , done ] ) ) ; } ) ; } function _UNKNOWN_ ( invalid : string [ ] , file ) { let error = `template` ; if ( invalid . length === 0 ) { error += 's' ; } else { error += 's' ; } error += `template` ; return error ; } export function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) { let _UNKNOWN_ ; let _UNKNOWN_ ; try { _UNKNOWN_ = JSON . parse ( readFileSync ( _UNKNOWN_ ) . toString ( ) ) ; _UNKNOWN_ = JSON . parse ( readFileSync ( _UNKNOWN_ ) . toString ( ) ) ; } catch ( e ) { util . log ( 's' + e . toString ( ) ) ; return ; } [ [ _UNKNOWN_ , _UNKNOWN_ ] , [ _UNKNOWN_ , _UNKNOWN_ ] ] . forEach ( ( [ tasks , file ] : [ string , string ] ) => { const invalid = _UNKNOWN_ ( tasks ) ; if ( invalid . length ) { const errorMessage = _UNKNOWN_ ( invalid , file ) ; util . log ( util . colors . red ( errorMessage ) ) ; process . exit ( 0 ) ; } } ) ; const _UNKNOWN_ = Object . assign ( { } , _UNKNOWN_ , _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ ) ; } function _UNKNOWN_ ( task , taskName ) { if ( task instanceof Task ) { return task ; } if ( task . prototype && task . prototype instanceof Task ) { return new task ( ) ; } if ( typeof task === 's' ) { return new class _UNKNOWN_ extends Task { run ( done ) { if ( task . length > 0 ) { return task ( done ) ; } const _UNKNOWN_ = task ( ) ; if ( _UNKNOWN_ ( _UNKNOWN_ ) ) { return _UNKNOWN_ ; } done ( ) ; } } ; } throw new Error ( taskName + 's' + 's' ) ; } function _UNKNOWN_ ( _UNKNOWN_ , path ) { const _UNKNOWN_ = join ( path , _UNKNOWN_ ) ; util . log ( 's' , util . colors . yellow ( _UNKNOWN_ ( _UNKNOWN_ ) ) ) ; gulp . task ( _UNKNOWN_ , ( done ) => { const task = _UNKNOWN_ ( require ( _UNKNOWN_ ) , _UNKNOWN_ ) ; if ( _UNKNOWN_ . pristine || task . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ ) ) { const result = task . run ( done , _UNKNOWN_ . _UNKNOWN_ ) ; if ( result && typeof result . catch === 's' ) { result . catch ( ( e ) => { util . log ( `template` , e ) ; } ) ; } return result ; } else { done ( ) ; } } ) ; } function _UNKNOWN_ ( root , cb : ( _UNKNOWN_ ) => void ) { if ( ! existsSync ( root ) ) { return ; } walk ( root ) ; function walk ( path ) { let files = readdirSync ( path ) ; for ( let i = 0 ; i < files . length ; i += 0 ) { let file = files [ i ] ; let _UNKNOWN_ = join ( path , file ) ; if ( lstatSync ( _UNKNOWN_ ) . isFile ( ) && "s" . test ( file ) ) { let _UNKNOWN_ = file . replace ( "s" , 's' ) ; cb ( _UNKNOWN_ ) ; } } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O O $any$ O O O O O O O $string$ O O O O O $any$ O O O O O O $any$ O O O O O O $void$ O $string$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O O $void$ O $string$ O $string$ O $void$ O $string$ O $string$ O O O O O $string[]$ O $any$ O O O $ObjectConstructor$ O $complex$ O $any$ O O $U[]$ O O $string$ O O O O O O $any$ O $string$ O O O $ArrayConstructor$ O $complex$ O $any$ O $string$ O O O $any$ O $string$ O O $any$ O O $any$ O O O $any$ O O O O O O $string$ O O O O O O O O $complex$ O O $string$ O O O O $string$ O O O O $void$ O $any$ O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O O $string$ O O O $any$ O $any$ O $string$ O O $any$ O O $any$ O $any$ O O O O O $any$ O $string$ O O $any$ O O O O O O O O O $string$ O $string[]$ O O O O O $string$ O O O $string$ O O O O O $string[]$ O $number$ O O O O $string$ O O O O O O $string$ O O O O $string$ O O O O $string$ O O O O $void$ O $string$ O $string$ O O O $any$ O O $any$ O O O $any$ O $JSON$ O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $JSON$ O $any$ O $any$ O $string$ O O $any$ O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O $any$ O $string$ O O O $any$ O $string$ O O O $void$ O O O $string$ O $string$ O O O O O O O O O O O $string[]$ O $string[]$ O $string$ O O O O $string[]$ O $number$ O O O $string$ O $string$ O $string[]$ O $string$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O O O O O O O $any$ O $ObjectConstructor$ O O O O O O $any$ O $any$ O O $void$ O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O O $Task$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $boolean$ O $any$ O O O O $any$ O O $any$ O O O O O O O O O $ErrorConstructor$ O $string$ O O O O O O O O $void$ O $string$ O $string$ O O O $any$ O $any$ O $string$ O $string$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O $any$ O O O O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $boolean$ O $any$ O $any$ O $any$ O $string[]$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string[]$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O O O O O O $void$ O $string$ O $void$ O O $string$ O O O O O O O O $any$ O $string$ O O O O O O $void$ O $string$ O O O $void$ O $string$ O O O $any$ O $any$ O $string$ O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $number$ O O O $any$ O $any$ O $string$ O $any$ O O O O $any$ O $any$ O O $any$ O O O O O $boolean$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O O O O O
<s> import * as util from 's' ; import { argv } from 's' ; import { join } from 's' ; import Config from 's' ; export class _UNKNOWN_ { private _UNKNOWN_ = false ; private _UNKNOWN_ = true ; _UNKNOWN_ ( ) { this . _UNKNOWN_ = true ; return this ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ = false ; return this ; } build ( ) { const _UNKNOWN_ = argv [ 's' ] || argv [ 's' ] || 's' ; const configPath = Config . _UNKNOWN_ ( 's' ) ; const _UNKNOWN_ = this . getConfig ( configPath , _UNKNOWN_ ) ; const baseConfig = this . getConfig ( configPath , 's' ) ; if ( ! _UNKNOWN_ ) { throw new Error ( _UNKNOWN_ + 's' ) ; } const _UNKNOWN_ = Object . assign ( { } , baseConfig , _UNKNOWN_ ) ; let locals = Object . assign ( { } , Config , { _UNKNOWN_ : this . _UNKNOWN_ ? JSON . stringify ( _UNKNOWN_ ) : _UNKNOWN_ } ) ; if ( this . _UNKNOWN_ ) { Object . assign ( locals , { _UNKNOWN_ : JSON . stringify ( Config . _UNKNOWN_ ) } ) ; } return locals ; } private getConfig ( path , env ) { const configPath = join ( path , env ) ; let config ; try { config = JSON . parse ( JSON . stringify ( require ( configPath ) ) ) ; } catch ( e ) { config = null ; util . log ( util . colors . red ( e . message ) ) ; } return config ; } } </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O $boolean$ O O O O $boolean$ O O O $this$ O O O O O $boolean$ O O O O O O O $this$ O O O O O $boolean$ O O O O O O O $complex$ O O O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O O $any$ O O O O $ErrorConstructor$ O $any$ O O O O O O $any$ O $ObjectConstructor$ O O O O O O $any$ O $any$ O O O $complex$ O $ObjectConstructor$ O O O O O O $any$ O O $any$ O O O $boolean$ O $JSON$ O $complex$ O $any$ O O $any$ O O O O O O O $boolean$ O O $ObjectConstructor$ O O O $complex$ O O $string$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O $complex$ O O O $any$ O $string$ O $string$ O O O $any$ O $any$ O $string$ O $string$ O O O $any$ O O O $any$ O $JSON$ O $any$ O $JSON$ O $complex$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O
<s> import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import ts = require ( 's' ) ; import Config from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; let _UNKNOWN_ = { } ; export function _UNKNOWN_ ( options : ts . Settings = { } , _UNKNOWN_ = Config . _UNKNOWN_ , projectName = Config . _UNKNOWN_ ) { let _UNKNOWN_ = JSON . stringify ( options ) ; if ( ! _UNKNOWN_ [ _UNKNOWN_ ] ) { let config = Object . assign ( { typescript : require ( 's' ) } , options ) ; _UNKNOWN_ [ _UNKNOWN_ ] = plugins . typescript . createProject ( join ( _UNKNOWN_ , projectName ) , config ) ; } return _UNKNOWN_ [ _UNKNOWN_ ] ; } </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O O O $string$ O $JSON$ O $complex$ O $any$ O O O O O $any$ O $string$ O O O O $any$ O $ObjectConstructor$ O O O O $any$ O $any$ O O O O O $any$ O O $any$ O $string$ O O $any$ O $any$ O $any$ O $any$ O $string$ O $string$ O O $any$ O O O O $any$ O $string$ O O O O
<s> import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import * as _UNKNOWN_ from 's' ; import Config from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export function watch ( _UNKNOWN_ , root = Config . _UNKNOWN_ ) { return function ( ) { let paths : string [ ] = [ join ( root , 's' ) ] . concat ( Config . _UNKNOWN_ . map ( ( p ) => { return 's' + p ; } ) ) ; if ( Config . _UNKNOWN_ ) { paths = paths . concat ( Config . _UNKNOWN_ . map ( ( p ) => { return join ( p , 's' ) ; } ) ) ; } plugins . watch ( paths , ( e ) => { _UNKNOWN_ . addFile ( e . path ) ; setTimeout ( ( ) => { _UNKNOWN_ ( _UNKNOWN_ , ( ) => { _UNKNOWN_ . clear ( ) ; _UNKNOWN_ ( e ) ; } ) ; } , 0 ) ; } ) ; } ; } </s>	O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O O $any$ O O O O O O $void$ O O O O O $any$ O O O O $any$ O O O O O $void$ O $string$ O $string$ O $any$ O $string$ O O O O O O O O $string[]$ O O O O O O $any$ O $string$ O O O O O $complex$ O $any$ O $string[]$ O $U[]$ O O $string$ O O O O O O $string$ O O O O O O O $any$ O $string[]$ O O $string[]$ O $string[]$ O $complex$ O $any$ O $string[]$ O $U[]$ O O $string$ O O O O $any$ O $string$ O O O O O O O O O $any$ O $any$ O $string[]$ O O $any$ O O O $any$ O $void$ O $any$ O $any$ O O $number$ O O O O O $any$ O $string$ O O O O O $any$ O $void$ O O O $void$ O $any$ O O O O O O O O O O O O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O
<s> import * as gulp from 's' ; import * as util from 's' ; import * as _UNKNOWN_ from 's' ; import Config from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; _UNKNOWN_ ( Config . _UNKNOWN_ ) ; _UNKNOWN_ ( Config . _UNKNOWN_ ) ; _UNKNOWN_ ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) ; let _UNKNOWN_ = true ; gulp . task ( 's' , ( done ) => { if ( _UNKNOWN_ ) { _UNKNOWN_ = false ; _UNKNOWN_ ( 's' , 's' , 's' , done ) ; } else { util . log ( 's' ) ; done ( ) ; } } ) ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O $void$ O $void$ O O O O $void$ O $any$ O $any$ O O $void$ O $any$ O $any$ O O $void$ O $any$ O $any$ O $any$ O $any$ O O O $boolean$ O O O $any$ O $any$ O O O O $any$ O O O O O $boolean$ O O $boolean$ O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { enableProdMode } from 's' ; enableProdMode ( ) ; _UNKNOWN_ ( ) . _UNKNOWN_ ( _UNKNOWN_ ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O
<s> import { NativeScriptModule } from 's' ; import { NativeScriptFormsModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { NativeScriptRouterModule } from 's' ; import { Http } from 's' ; import { NgModule , CUSTOM_ELEMENTS_SCHEMA , NO_ERRORS_SCHEMA } from 's' ; import { TranslateLoader } from 's' ; import { TranslateHttpLoader } from 's' ; import { AppComponent } from 's' ; import { AboutComponent } from 's' ; import { HomeComponent } from 's' ; import { routes } from 's' ; import { CoreModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , LogLevel } from 's' ; @ NgModule ( { imports : [ _UNKNOWN_ , CoreModule , _UNKNOWN_ . forRoot ( [ { provide : TranslateLoader , deps : [ Http ] , useFactory : ( _UNKNOWN_ ) } ] ) , _UNKNOWN_ , NativeScriptModule , NativeScriptFormsModule , _UNKNOWN_ , NativeScriptRouterModule , ] , declarations : [ AppComponent , HomeComponent , AboutComponent ] , schemas : [ NO_ERRORS_SCHEMA , CUSTOM_ELEMENTS_SCHEMA ] , exports : [ _UNKNOWN_ , AppComponent , _UNKNOWN_ , CoreModule , _UNKNOWN_ , NativeScriptModule , NativeScriptFormsModule , _UNKNOWN_ , NativeScriptRouterModule , ] } ) export class _UNKNOWN_ { } export function _UNKNOWN_ ( ) { return console ; } export function _UNKNOWN_ ( service ) { return new _UNKNOWN_ ( service , { _UNKNOWN_ : LogLevel . Debug } ) ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any[]$ O O $any$ O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $Console$ O O O O $Console$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O
<s> import * as dialogs from 's' ; import { device } from 's' ; import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ implements _UNKNOWN_ { public get navigator ( ) : any { return { language : device . language , userAgent : 's' } ; } public get location ( ) : any { return { host : 's' } ; } public alert ( msg ) < any > { return dialogs . alert ( msg ) ; } public confirm ( msg ) < any > { return dialogs . confirm ( msg ) ; } } </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O O O O O O O $string$ O O O O O O $Promise$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O $Promise$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import * as app from 's' ; import { device , isAndroid } from 's' ; import { Color } from 's' ; declare var android ; declare var _UNKNOWN_ ; export class _UNKNOWN_ { public static _UNKNOWN_ ( title ) { var _UNKNOWN_ = _UNKNOWN_ ( ) . currentPage . _UNKNOWN_ ; _UNKNOWN_ . title = title ; } public static _UNKNOWN_ ( button ) { _UNKNOWN_ ( ) . currentPage . _UNKNOWN_ . _UNKNOWN_ . addItem ( button ) ; } public static _UNKNOWN_ ( ) { if ( _UNKNOWN_ ( ) . ios ) { _UNKNOWN_ ( ) . ios . controller . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( true , false ) ; } } public static _UNKNOWN_ ( ) { var _UNKNOWN_ = _UNKNOWN_ ( ) . currentPage . _UNKNOWN_ ; var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ . getItems ( ) ; _UNKNOWN_ . forEach ( ( item ) => { _UNKNOWN_ . _UNKNOWN_ . removeItem ( item ) ; } ) ; } public static _UNKNOWN_ ( style : number | string ) { if ( _UNKNOWN_ ( ) . ios ) { let _UNKNOWN_ = _UNKNOWN_ ( ) . ios . controller . _UNKNOWN_ ; _UNKNOWN_ . _UNKNOWN_ = style ; } else if ( isAndroid ) { if ( app . android && device . sdkVersion >= 's' ) { try { let _UNKNOWN_ = < any > android . view . _UNKNOWN_ . _UNKNOWN_ ; let win ; if ( app . android . _UNKNOWN_ ) { win = app . android . _UNKNOWN_ . getWindow ( ) ; } else { win = app . android . _UNKNOWN_ . getWindow ( ) ; } win . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ ) ; win . _UNKNOWN_ ( new Color ( < string > style || 's' ) . android ) ; } catch ( err ) { console . log ( err ) ; } } } } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O O O $void$ O $string$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O $void$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $void$ O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O $complex$ O O O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O $complex$ O O O O $any$ O O O O O $any$ O O $Console$ O $void$ O $any$ O O O O O O O O
<s> import { Injectable } from 's' ; import { Router } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; import { isAndroid , _UNKNOWN_ } from 's' ; if ( _UNKNOWN_ ) { } import { Store } from 's' ; import { TranslateService } from 's' ; import { AppService } from 's' ; import { Config } from 's' ; import { LogService , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; declare var android ; @ Injectable ( ) export class _UNKNOWN_ extends AppService { _UNKNOWN_ = _UNKNOWN_ ; constructor ( public analytics , public log , public store < any > , public router , public _UNKNOWN_ , public translate , public window ) { super ( analytics , log ) ; this . log . debug ( 's' ) ; store . dispatch ( new _UNKNOWN_ . _UNKNOWN_ ( window . navigator . language . substr ( 0 , 0 ) ) ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ? 0 : 's' ) ; _UNKNOWN_ . on ( _UNKNOWN_ . _UNKNOWN_ , ( eventData : _UNKNOWN_ . _UNKNOWN_ ) => { this . log . info ( 's' ) ; } ) ; _UNKNOWN_ . on ( _UNKNOWN_ . _UNKNOWN_ , ( eventData : _UNKNOWN_ . _UNKNOWN_ ) => { this . log . info ( 's' ) ; } ) ; _UNKNOWN_ . on ( _UNKNOWN_ . _UNKNOWN_ , ( eventData : _UNKNOWN_ . _UNKNOWN_ ) => { this . log . info ( 's' ) ; } ) ; _UNKNOWN_ . on ( _UNKNOWN_ . _UNKNOWN_ , ( eventData : _UNKNOWN_ . _UNKNOWN_ ) => { this . log . warn ( 's' ) ; } ) ; _UNKNOWN_ . on ( _UNKNOWN_ . _UNKNOWN_ , ( eventData ) => { this . log . info ( 's' ) ; this . unsubscribeAll ( ) ; } ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; } protected _UNKNOWN_ ( err , platform : 's' | 's' ) { this . log . info ( `template` ) ; const _UNKNOWN_ = { message : err . message , android : platform === 's' , ios : platform === 's' , stackTrace : err . stackTrace , _UNKNOWN_ : err . _UNKNOWN_ , } ; for ( const key of Object . keys ( _UNKNOWN_ ) ) { if ( _UNKNOWN_ [ key ] ) { console . log ( `template` ) ; } } } private unsubscribeAll ( ) { _UNKNOWN_ . off ( _UNKNOWN_ . _UNKNOWN_ ) ; _UNKNOWN_ . off ( _UNKNOWN_ . _UNKNOWN_ ) ; _UNKNOWN_ . off ( _UNKNOWN_ . _UNKNOWN_ ) ; _UNKNOWN_ . off ( _UNKNOWN_ . _UNKNOWN_ ) ; _UNKNOWN_ . off ( _UNKNOWN_ . _UNKNOWN_ ) ; _UNKNOWN_ . off ( _UNKNOWN_ . _UNKNOWN_ ) ; } private _UNKNOWN_ ( ) { if ( ! isAndroid ) { return ; } this . _UNKNOWN_ . android . on ( this . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ , ( args ) => { const states = this . _UNKNOWN_ . _UNKNOWN_ ( ) ; this . log . info ( `template` ) ; } ) ; this . _UNKNOWN_ . android . on ( this . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ , ( args ) => { if ( args . activity . _UNKNOWN_ ( ) . _UNKNOWN_ ( ) === android . content . _UNKNOWN_ . _UNKNOWN_ ) { const _UNKNOWN_ = args . activity . _UNKNOWN_ ( ) . getData ( ) ; console . log ( `template` ) ; } } ) ; this . _UNKNOWN_ . on ( this . _UNKNOWN_ . _UNKNOWN_ , ( err ) => { this . _UNKNOWN_ ( err . android , 's' ) ; } ) ; } private _UNKNOWN_ ( ) { if ( ! _UNKNOWN_ ) { return ; } this . _UNKNOWN_ . on ( this . _UNKNOWN_ . _UNKNOWN_ , ( err ) => { this . _UNKNOWN_ ( err . ios , 's' ) ; } ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $LogService$ O O $Store$ O O O O O $Router$ O O $any$ O O $TranslateService$ O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $void$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O O O O O $void$ O O O O O O O O $void$ O O O O O $void$ O O O O O $void$ O $any$ O O O O O O O O O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $boolean$ O O O O O $boolean$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $string$ O $ObjectConstructor$ O $complex$ O $any$ O O O O O $any$ O $string$ O O O $Console$ O $void$ O O O O O O O O $void$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O $Console$ O $void$ O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O $void$ O $any$ O $any$ O O O O O O O O O $void$ O O O O O O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O $void$ O $any$ O $any$ O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; require ( 's' ) ; export class _UNKNOWN_ extends _UNKNOWN_ { } </s>	O O O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O
<s> import { Injectable } from 's' ; import { 0 , 0 } from 's' ; @ Injectable ( ) export class 0 extends 0 { constructor ( 0 ) { super ( 0 ) ; 0 . pageTrack . subscribe ( ( x ) => this . pageTrack ( x . path , x . location ) ) ; 0 . eventTrack . subscribe ( ( x ) => this . eventTrack ( x . action , x . properties ) ) ; 0 . setUserProperties . subscribe ( ( x ) => this . setUserProperties ( x ) ) ; 0 . setUserPropertiesOnce . subscribe ( ( x ) => this . setUserProperties ( x ) ) ; } public pageTrack ( path , location ) { } public eventTrack ( action , properties ) { } public setUserProperties ( properties ) { } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $Angulartics2$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $void$ O $any$ O O O O O $void$ O $string$ O $any$ O O O O $void$ O $string$ O $any$ O O O O $void$ O $any$ O O O O O
<s> import { 0 , 0 } from 's' ; import { _UNKNOWN_ } from 's' ; import { 0 } from 's' ; export const _UNKNOWN_ < any > = [ 0 , { provide : 0 , useClass : 0 } , _UNKNOWN_ ] ; </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $Array$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O
<s> import { NativeScriptRouterModule , _UNKNOWN_ as _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { NgModule , CUSTOM_ELEMENTS_SCHEMA , NO_ERRORS_SCHEMA } from 's' ; import { StoreModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , AppService } from 's' ; import { AppComponent } from 's' ; import { routes } from 's' ; import { CoreModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Config , _UNKNOWN_ } from 's' ; import { Page } from 's' ; Config . _UNKNOWN_ = Page ; Config . _UNKNOWN_ = Config . _UNKNOWN_ . _UNKNOWN_ ; Config . DEBUG . 0 = true ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( languages ) { let _UNKNOWN_ = [ ] ; for ( let lang of languages ) { let item = new _UNKNOWN_ ( ) ; item . title = lang . title ; ( < any > item ) . code = lang . code ; _UNKNOWN_ . push ( item ) ; } return _UNKNOWN_ ; } @ NgModule ( { imports : [ CoreModule . forRoot ( [ { provide : _UNKNOWN_ , useClass : _UNKNOWN_ } , { provide : _UNKNOWN_ , useClass : _UNKNOWN_ } , { provide : _UNKNOWN_ , useFactory : ( _UNKNOWN_ ) } , { provide : _UNKNOWN_ , multi : true , deps : [ _UNKNOWN_ ] , useFactory : ( _UNKNOWN_ ) } ] ) , _UNKNOWN_ , NativeScriptRouterModule . forRoot ( < any > routes ) , StoreModule . _UNKNOWN_ ( _UNKNOWN_ ) , _UNKNOWN_ . run ( _UNKNOWN_ ) , _UNKNOWN_ . run ( _UNKNOWN_ ) ] , providers : [ _UNKNOWN_ , { provide : _UNKNOWN_ , useClass : _UNKNOWN_ } , { provide : AppService , useClass : _UNKNOWN_ } , { provide : _UNKNOWN_ , useValue : Config . _UNKNOWN_ ( ) } , { provide : _UNKNOWN_ , deps : [ _UNKNOWN_ ] , useFactory : ( _UNKNOWN_ ) } ] , schemas : [ NO_ERRORS_SCHEMA , CUSTOM_ELEMENTS_SCHEMA ] , bootstrap : [ AppComponent ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $Console$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any[]$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any[]$ O $any$ O O O $any[]$ O O O O O O O $any$ O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $any[]$ O $number$ O $any$ O O O O $any[]$ O O O $any$ O O $any[]$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $Console$ O O $Console$ O O O O $any$ O $any$ O $boolean$ O O O $any[]$ O O $any$ O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $complex$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any[]$ O O $any$ O O $any[]$ O O $any[]$ O O O O $any[]$ O O $any$ O $any$ O O $any[]$ O O $any$ O O O O O $any$ O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; _UNKNOWN_ ( ) . bootstrapModule ( _UNKNOWN_ ) ; </s>	O O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O
<s> import { t } from 's' ; import { _UNKNOWN_ } from 's' ; export function main ( ) { t . describe ( 's' , ( ) => { t . it ( 's' , ( ) => { t . e ( _UNKNOWN_ . _UNKNOWN_ ) . toBeDefined ( ) ; t . e ( _UNKNOWN_ . _UNKNOWN_ ) . toBeDefined ( ) ; t . e ( _UNKNOWN_ . _UNKNOWN_ ) . toBeDefined ( ) ; t . e ( _UNKNOWN_ . _UNKNOWN_ ) . toBeDefined ( ) ; } ) ; } ) ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $void$ O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $void$ O O $any$ O O O $any$ O $any$ O $any$ O $void$ O O $any$ O O O $any$ O $any$ O $any$ O $void$ O O $any$ O O O $any$ O $any$ O $any$ O $void$ O O $any$ O O O O O O O O O O O
<s> require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; if ( global . _UNKNOWN_ ) { global . _UNKNOWN_ = function ( name , dir ) { if ( name === 's' ) { return require ( 's' ) ; } else if ( name === 's' ) { return require ( 's' ) ; } else if ( name === 's' ) { return require ( 's' ) ; } } ; } </s>	O $any$ O O O O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O O O O O O O O $any$ O O O O O $any$ O O O O O O O O $any$ O O O O O $any$ O O O O O O O O O
<s> require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; require ( 's' ) ; </s>	O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O
<s> import { async , fakeAsync , inject , tick } from 's' ; export interface _UNKNOWN_ { _UNKNOWN_ : Function ; afterEach : Function ; describe : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; async ( fn ) : Function ; fakeAsync ( fn ) : Function ; be ( fn ) : void ; beforeEach ( fn ) : void ; e ( actual ) : jasmine . _UNKNOWN_ ; expect ( actual ) : jasmine . _UNKNOWN_ ; fail ( e ? ) : void ; inject ( tokens < any > , fn ) : Function ; it ( name , fn , _UNKNOWN_ ? ) : void ; _UNKNOWN_ ( name , fn , _UNKNOWN_ ? ) : void ; xit ( name , fn , _UNKNOWN_ ? ) : void ; pending ( reason ? ) : void ; spyOn ( object , method ) : jasmine . Spy ; tick ( delay ? ) : void ; } export const 0 = { _UNKNOWN_ : afterEach , afterEach : afterEach , describe : describe , _UNKNOWN_ : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , async : async , fakeAsync : fakeAsync , be : beforeEach , beforeEach : beforeEach , e : expect , expect : expect , fail : fail , inject : inject , it : it , _UNKNOWN_ : _UNKNOWN_ , xit : xit , pending : pending , spyOn : spyOn , tick : tick } ; </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $Function$ O O $FunctionConstructor$ O $Function$ O $Function$ O O $FunctionConstructor$ O $void$ O $Function$ O O O O $void$ O $Function$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $void$ O $any$ $any$ O O O O $Function$ O $Array$ O O O O $Function$ O O $FunctionConstructor$ O $void$ O $string$ O $Function$ O $number$ $number$ O O O O $void$ O $string$ O $Function$ O $number$ $number$ O O O O $void$ O $string$ O $Function$ O $number$ $number$ O O O O $void$ O $string$ $string$ O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O $void$ O $number$ $number$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O
<s> declare var browser , element , by ; export function _UNKNOWN_ ( selector , index , milliseconds ) { element ( by . css ( selector ) ) . all ( by . tagName ( 's' ) ) . then ( function ( options ) { options [ index ] . click ( ) ; } ) ; if ( typeof milliseconds !== 's' ) { browser . sleep ( milliseconds ) ; } } export function _UNKNOWN_ ( selector , item , milliseconds ) { element ( by . css ( selector ) ) . sendKeys ( item ) ; if ( typeof milliseconds !== 's' ) { browser . sleep ( milliseconds ) ; } } export function _UNKNOWN_ ( selector , milliseconds ) { element ( by . css ( selector ) ) . all ( by . tagName ( 's' ) ) . then ( function ( options ) { var _UNKNOWN_ = Math . floor ( ( Math . random ( ) * options . length ) ) ; options [ _UNKNOWN_ ] . click ( ) ; return options [ _UNKNOWN_ ] . getText ( ) . then ( function ( text ) { return text ; } ) ; } ) ; if ( typeof milliseconds !== 's' ) { browser . sleep ( milliseconds ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O $void$ O $string$ O $number$ O $number$ O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O $number$ O O $any$ O O O O O O O O O $number$ O O O O $any$ O $any$ O $number$ O O O O O O $void$ O $string$ O $string$ O $number$ O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O $number$ O O O O $any$ O $any$ O $number$ O O O O O O $void$ O $string$ O $number$ O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O $number$ O $Math$ O $number$ O O $Math$ O $number$ O O O $any$ O $any$ O O O $any$ O $number$ O O $any$ O O O O $any$ O $number$ O O $any$ O O O $any$ O O O $string$ O O O $string$ O O O O O O O O O O $number$ O O O O $any$ O $any$ O $number$ O O O O O
<s> import { 0 , _UNKNOWN_ } from 's' ; export const t = 0 ; export * from 's' ; export * from 's' ; </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O
<s> export interface _UNKNOWN_ { API ? : string ; ENV ? : string ; } export interface _UNKNOWN_ { _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; } export class Config { public static _UNKNOWN_ : any ; public static DEBUG = { 0 : false , 0 : false , 0 : false , 0 : false } ; public static _UNKNOWN_ : _UNKNOWN_ = { _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' , _UNKNOWN_ : 's' } ; public static _UNKNOWN_ : string = Config . _UNKNOWN_ . _UNKNOWN_ ; public static _UNKNOWN_ ( ) { return Config . _UNKNOWN_ === Config . _UNKNOWN_ . _UNKNOWN_ ; } public static _UNKNOWN_ ( ) { return Config . _UNKNOWN_ === Config . _UNKNOWN_ . _UNKNOWN_ ; } public static _UNKNOWN_ ( ) { return Config . _UNKNOWN_ === Config . _UNKNOWN_ . _UNKNOWN_ ; } public static _UNKNOWN_ ( ) { return Config . _UNKNOWN_ === Config . _UNKNOWN_ . _UNKNOWN_ ; } public static _UNKNOWN_ ( ) { try { return JSON . parse ( 's' ) ; } catch ( exp ) { return { } ; } } public static _UNKNOWN_ ( ) { return [ { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } ] ; } public static _UNKNOWN_ ( ) { for ( let key in Config . DEBUG ) { if ( Config . DEBUG [ key ] ) { return true ; } } return false ; } public static RESET ( ) { for ( let key in Config . DEBUG ) { Config . DEBUG [ key ] = false ; } } } </s>	O O O $any$ O $string$ O O O O $string$ O O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O O O $any$ O O O O O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $string$ O O O $any$ O $any$ O $string$ O O O $boolean$ O O O O $any$ O $string$ O $any$ O $any$ O $string$ O O O O $boolean$ O O O O $any$ O $string$ O $any$ O $any$ O $string$ O O O O $boolean$ O O O O $any$ O $string$ O $any$ O $any$ O $string$ O O O O $boolean$ O O O O $any$ O $string$ O $any$ O $any$ O $string$ O O O O $any$ O O O O O O $JSON$ O $any$ O O O O O O O $any$ O O O O O O O O O O $complex$ O O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O O $boolean$ O O O O O O $string$ O $any$ O O O O O O $any$ O O O $string$ O O O O O O O O O O O O O O $void$ O O O O O O $string$ O $any$ O O O O $any$ O O O $string$ O O O O O O O O
<s> let _UNKNOWN_ : { [ label ] : boolean } = { } ; export function type < T > ( label : T | 's' ) : T { if ( _UNKNOWN_ [ < string > label ] ) { throw new Error ( `template` ) ; } _UNKNOWN_ [ < string > label ] = true ; return < T > label ; } </s>	O O $complex$ O O O $string$ O O O O O O O O O O $T$ O $any$ O O O O $any$ O O O O $any$ O O O $complex$ O O O O O O O O O O $ErrorConstructor$ O O O O O $complex$ O O O O O O O O O O O $any$ O O O O O
<s> export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O
<s> export interface _UNKNOWN_ { log ( m ) : void ; debug ( m ) : void ; error ( m ) : void ; warn ( m ) : void ; info ( m ) : void ; } </s>	O O O $any$ O $void$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O O O O O O
<s> export interface _UNKNOWN_ { code : string ; title : string ; } </s>	O O O $any$ O $string$ O O O $string$ O O O O O
<s> export interface _UNKNOWN_ { setItem ( key , value ) : void ; getItem ( key ) : any ; removeItem ( key ) : void ; } export enum _UNKNOWN_ { USERNAME } </s>	O O O $any$ O $void$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $void$ O $any$ O O O O O O O $any$ O $any$ O O
<s> export interface _UNKNOWN_ { navigator : any ; location : any ; alert ( msg ) : void ; confirm ( msg ) : void ; } </s>	O O O $any$ O $any$ O O O $any$ O O O $void$ O $string$ O O O O $void$ O $string$ O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O
<s> import { Injectable } from 's' ; import { _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ implements _UNKNOWN_ { public log ( m ) { return ; } public debug ( m ) { return ; } public error ( m ) { return ; } public warn ( m ) { return ; } public info ( m ) { return ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O $void$ O $any$ O O O O O O $void$ O $any$ O O O O O O $void$ O $any$ O O O O O O $void$ O $any$ O O O O O O $void$ O $any$ O O O O O O O
<s> export enum LogLevel { Debug = 0 , Info = 0 , Warning = 0 , Error = 0 } export interface _UNKNOWN_ { message : string | Object ; level : LogLevel ; } export abstract class _UNKNOWN_ { _UNKNOWN_ : LogLevel ; } export abstract class _UNKNOWN_ { abstract log ( event ) < any > ; } export abstract class _UNKNOWN_ implements _UNKNOWN_ { constructor ( protected options ) { } log ( event ) < any > { if ( event . level >= this . options . _UNKNOWN_ ) { return this . _UNKNOWN_ ( event ) ; } return Promise . resolve ( ) ; } protected abstract _UNKNOWN_ ( event ) < any > ; } </s>	O O O $any$ O $any$ O O O $LogLevel.Info$ O O O $LogLevel.Warning$ O O O $LogLevel.Error$ O O O O O $any$ O $complex$ O O O $ObjectConstructor$ O $LogLevel$ O $any$ O O O O O $any$ O $LogLevel$ O $any$ O O O O O $any$ O O $Promise$ O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O O O $Promise$ O $any$ O O O O O O O $any$ O $LogLevel$ O O O $any$ O $LogLevel$ O O O O O $Promise<any>$ O $any$ O O O O $PromiseConstructor$ O $complex$ O O O O O O $Promise$ O $any$ O O O O O O O
<s> import { Injectable , Inject , forwardRef } from 's' ; import * as _ from 's' ; import { Config } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , LogLevel } from 's' ; @ Injectable ( ) export class LogService { constructor ( @ Inject ( _UNKNOWN_ ) private targets : _UNKNOWN_ [ ] ) { } public debug ( ... msg ) { if ( Config . DEBUG . 0 ) { return Promise . all ( _ . map ( this . targets , logger => this . logEvent ( logger , msg , LogLevel . Debug ) ) ) ; } return Promise . resolve ( ) ; } public error ( ... err ) { if ( Config . DEBUG . 0 || Config . DEBUG . 0 ) { return Promise . all ( _ . map ( this . targets , logger => this . logEvent ( logger , err , LogLevel . Error ) ) ) ; } return Promise . resolve ( ) ; } public warn ( ... err ) { if ( Config . DEBUG . 0 || Config . DEBUG . 0 ) { return Promise . all ( _ . map ( this . targets , logger => this . logEvent ( logger , err , LogLevel . Warning ) ) ) ; } return Promise . resolve ( ) ; } public info ( ... err ) { if ( Config . DEBUG . 0 || Config . DEBUG . 0 ) { return Promise . all ( _ . map ( this . targets , logger => this . logEvent ( logger , err , LogLevel . Info ) ) ) ; } return Promise . resolve ( ) ; } private logEvent ( target , message : string | Object , level ) { return target . log ( { level : level , message : message } ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $complex$ O O $any[]$ O O O O $any$ O O O $boolean$ O O O $PromiseConstructor$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $Promise<any>$ O $any$ O $any[]$ O $any$ O $any$ O O O O O O $PromiseConstructor$ O $complex$ O O O O O $complex$ O O $any[]$ O O O O $any$ O O O $boolean$ O $any$ O O O $boolean$ O O O $PromiseConstructor$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $Promise<any>$ O $any$ O $any[]$ O $any$ O $LogLevel.Error$ O O O O O O $PromiseConstructor$ O $complex$ O O O O O $complex$ O O $any[]$ O O O O $any$ O O O $boolean$ O $any$ O O O $boolean$ O O O $PromiseConstructor$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $Promise<any>$ O $any$ O $any[]$ O $any$ O $LogLevel.Warning$ O O O O O O $PromiseConstructor$ O $complex$ O O O O O $complex$ O O $any[]$ O O O O $any$ O O O $boolean$ O $any$ O O O $boolean$ O O O $PromiseConstructor$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $Promise<any>$ O $any$ O $any[]$ O $any$ O $LogLevel.Info$ O O O O O O $PromiseConstructor$ O $complex$ O O O O O $Promise<any>$ O $any$ O $complex$ O O O $ObjectConstructor$ O $LogLevel$ O O O $any$ O $Promise<any>$ O O $LogLevel$ O $LogLevel$ O $complex$ O $complex$ O O O O O O
<s> import { Injectable } from 's' ; import { LocationStrategy } from 's' ; import { Router , _UNKNOWN_ , _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ ? : boolean ; animated ? : boolean ; transition ? : { name ? : string ; instance ? : any ; duration ? : number ; curve ? : any ; } ; } export interface _UNKNOWN_ { navigate ( commands < any > , _UNKNOWN_ ? ) : Promise < boolean > ; navigateByUrl ( url : string | _UNKNOWN_ , options ? ) : Promise < boolean > ; back ( ) : void ; } @ Injectable ( ) export class _UNKNOWN_ implements _UNKNOWN_ { constructor ( public router , private _UNKNOWN_ ) { } public navigate ( commands < any > , _UNKNOWN_ ? ) < boolean > { return this . router . navigate ( commands , _UNKNOWN_ ) ; } public navigateByUrl ( url : string | _UNKNOWN_ , options ? ) < boolean > { return this . router . navigateByUrl ( url ) ; } public back ( ) { this . _UNKNOWN_ . back ( ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $boolean$ O O O O $boolean$ O O O O $complex$ O O O $string$ O O O O $any$ O O O O $number$ O O O O $any$ O O O O O O O O O $any$ O $Promise<boolean>$ O $Array$ O O O O $any$ $any$ O O $PromiseConstructor$ O O O O $Promise<boolean>$ O $any$ O O O $any$ O $any$ $any$ O O $PromiseConstructor$ O O O O $void$ O O O O O O O $any$ O O O O $any$ O $any$ O O O O $Router$ O O $any$ O O O O $Promise$ O $Array$ O O O O $any$ $any$ O O O O O O O O $any$ O $any$ O $any[]$ O $any$ O O O O $Promise$ O $any$ O O O $any$ O $any$ $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $void$ O O O O O $any$ O $any$ O O O O O O
<s> import { Injectable } from 's' ; import { _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ implements _UNKNOWN_ { public navigator : any = { } ; public location : any = { } ; public alert ( msg ) { return ; } public confirm ( msg ) { return ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O O $void$ O $string$ O O O O O O $void$ O $string$ O O O O O O O
<s> import { Injectable , Inject } from 's' ; import * as _ from 's' ; import { 0 , 0 } from 's' ; export interface _UNKNOWN_ { category ? : string ; label ? : string ; value ? : number ; } export interface _UNKNOWN_ { track ( action , properties ) : void ; } @ Injectable ( ) export class _UNKNOWN_ implements _UNKNOWN_ { constructor ( private 0 , private segment ) { this . _UNKNOWN_ ( false ) ; } public track ( action , properties ) { if ( ! this . _UNKNOWN_ ( ) ) { this . segment . eventTrack ( action , properties ) ; } } public pageTrack ( path , location ) { if ( ! this . _UNKNOWN_ ( ) ) { this . segment . pageTrack ( path , location ) ; } } public identify ( properties ) { if ( ! this . _UNKNOWN_ ( ) ) { this . segment . setUserProperties ( properties ) ; } } public _UNKNOWN_ ( enable ? ) { if ( typeof enable !== 's' ) { this . 0 . _UNKNOWN_ ( enable ) ; } return this . 0 . settings . _UNKNOWN_ ; } } export class Analytics implements _UNKNOWN_ { public category : string ; constructor ( @ Inject ( _UNKNOWN_ ) public analytics ) { } track ( action , properties ) { this . analytics . track ( action , _ . extend ( properties , { category : this . category } ) ) ; } } </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $string$ O O O O $string$ O O O O $number$ O O O O O O O $any$ O $void$ O $string$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O $Angulartics2$ O O $any$ O O O O $boolean$ O O O O O O $void$ O $string$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O $any$ O $string$ O $any$ O O O O O $void$ O $string$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O $any$ O $string$ O $any$ O O O O O $void$ O $any$ O O O O O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O O O $boolean$ O $boolean$ $boolean$ O O O O O $boolean$ O O O O O O $any$ O $any$ O $boolean$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O $string$ O O O O O O $any$ O $any$ O O $any$ O O O $void$ O $string$ O $any$ O O O O $any$ O $void$ O $string$ O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O O O O O
<s> import { Injectable } from 's' ; import { _UNKNOWN_ } from 's' ; import { LogService } from 's' ; import { Config } from 's' ; @ Injectable ( ) export class AppService { constructor ( public analytics , public log ) { this . log . debug ( `template` ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O $LogService$ O O O O $LogService$ O $complex$ O O O O O O O
<s> import { Injectable } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ implements _UNKNOWN_ { setItem ( key , value ) { localStorage . setItem ( 's' + key , value === null ? null : JSON . stringify ( value ) ) ; } getItem ( key ) { const value = localStorage . getItem ( 's' + key ) ; return value === null ? null : JSON . parse ( value ) ; } removeItem ( key ) { localStorage . removeItem ( 's' + key ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $void$ O $any$ O $any$ O O $Storage$ O $void$ O O O $any$ O $any$ O O O O O $JSON$ O $complex$ O $any$ O O O O $any$ O $any$ O O O $string$ O $Storage$ O $string$ O O O $any$ O O O $string$ O O O O O $JSON$ O $any$ O $string$ O O O $void$ O $any$ O O $Storage$ O $void$ O O O $any$ O O O O O
<s> import { Injectable , Provider } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , LogLevel , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( private console , options ) { super ( options ) ; } _UNKNOWN_ ( event ) { switch ( event . level ) { case LogLevel . Debug : this . console . log ( event . message ) ; break ; case LogLevel . Info : this . console . info ( event . message ) ; break ; case LogLevel . Warning : this . console . warn ( event . message ) ; break ; case LogLevel . Error : this . console . error ( event . message ) ; break ; } return Promise . resolve ( ) ; } } export function _UNKNOWN_ ( level , _UNKNOWN_ ) { return new _UNKNOWN_ ( _UNKNOWN_ , { _UNKNOWN_ : level } ) ; } export function _UNKNOWN_ ( logLevel ) { return { provide : _UNKNOWN_ , deps : [ _UNKNOWN_ ] , multi : true , useFactory : ( c ) => new _UNKNOWN_ ( c , { _UNKNOWN_ : logLevel } ) } ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O $Promise<void>$ O $any$ O O O O $any$ O $LogLevel$ O O O $any$ O $any$ O O O $any$ O $void$ O $any$ O $complex$ O O O O O $any$ O $LogLevel.Info$ O O O $any$ O $void$ O $any$ O $complex$ O O O O O $any$ O $LogLevel.Warning$ O O O $any$ O $void$ O $any$ O $complex$ O O O O O $any$ O $LogLevel.Error$ O O O $any$ O $void$ O $any$ O $complex$ O O O O O O $PromiseConstructor$ O $complex$ O O O O O O O $any$ O $LogLevel$ O $any$ O O O O $any$ O $any$ O O $LogLevel$ O $LogLevel$ O O O O O O $Provider$ O $LogLevel$ O O O O $any$ O $any$ O $complex$ O O $any$ O O $boolean$ O O O $any$ O O $any$ O O O $any$ O $any$ O O $LogLevel$ O $LogLevel$ O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { LogService } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { AppService } from 's' ; import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ : any [ ] = [ _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , LogService , AppService , _UNKNOWN_ , ] ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import { Directive , ElementRef , Renderer } from 's' ; import { _UNKNOWN_ } from 's' ; @ Directive ( { selector : 's' } ) export class _UNKNOWN_ { constructor ( private el , private renderer , private win ) { let _UNKNOWN_ = 's' ; let agent = win . navigator . userAgent . toLowerCase ( ) ; if ( agent . indexOf ( 's' ) > - 0 ) { _UNKNOWN_ = 's' ; } else if ( agent . indexOf ( 's' ) > - 0 ) { _UNKNOWN_ = 's' ; } renderer . setElementClass ( el . nativeElement , _UNKNOWN_ , true ) ; } } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O O O O $ElementRef$ O O $Renderer$ O O $any$ O O O $string$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O $string$ O O O O O O O $any$ O $any$ O O O O O O O O $string$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ : any [ ] = [ _UNKNOWN_ ] ; export * from 's' ; </s>	O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O O O O O O O O
<s> import { Component } from 's' ; @ Component ( { moduleId : module . id , selector : 's' , templateUrl : 's' , styleUrls : [ 's' , ] , } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O O O
<s> import { Component } from 's' ; import { LogService } from 's' ; @ Component ( { moduleId : module . id , selector : 's' , templateUrl : 's' , styleUrls : [ 's' , ] , } ) export class ToolbarComponent { constructor ( private log ) { } public _UNKNOWN_ ( e ) { this . log . debug ( 's' ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O O O O $LogService$ O O O O $void$ O $any$ O O O O $LogService$ O $complex$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { ToolbarComponent } from 's' ; export const _UNKNOWN_ : any [ ] = [ _UNKNOWN_ , ToolbarComponent ] ; export * from 's' ; export * from 's' ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O $any$ O O O O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ < any > = [ _UNKNOWN_ ] ; export * from 's' ; </s>	O O O $any$ O O O O O O $Array$ O O O O O $any$ O O O O O O O O
<s> import { NgModule } from 's' ; import { 0 , 0 } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ 0 . forRoot ( [ 0 ] ) ] , providers : [ ... _UNKNOWN_ ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any[]$ O O O O O $any$ O O $any[]$ O O $any$ O $any$ O O $any$ O O O O $any[]$ O O O $any[]$ O O O O O $any$ O O O
<s> export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O
<s> import { Action } from 's' ; import { type } from 's' ; export namespace _UNKNOWN_ { export const _UNKNOWN_ = 's' ; export interface _UNKNOWN_ { _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; ADD : string ; _UNKNOWN_ : string ; } export const ActionTypes = { _UNKNOWN_ : type ( `template` ) , _UNKNOWN_ : type ( `template` ) , _UNKNOWN_ : type ( `template` ) , ADD : type ( `template` ) , _UNKNOWN_ : type ( `template` ) } ; export class _UNKNOWN_ implements Action { type = ActionTypes . _UNKNOWN_ ; payload : string = null ; } export class _UNKNOWN_ implements Action { type = ActionTypes . _UNKNOWN_ ; constructor ( public payload < string > ) { } } export class _UNKNOWN_ implements Action { type = ActionTypes . _UNKNOWN_ ; payload : string = null ; } export class _UNKNOWN_ implements Action { type = ActionTypes . ADD ; constructor ( public payload ) { } } export class _UNKNOWN_ implements Action { type = ActionTypes . _UNKNOWN_ ; constructor ( public payload ) { } } export type Actions = _UNKNOWN_ | _UNKNOWN_ | _UNKNOWN_ | _UNKNOWN_ | _UNKNOWN_ ; } </s>	O O O $any$ O O O O O O $T$ O O O O O O $any$ O O O $string$ O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O O $string$ O $T$ O O O O $string$ O $T$ O O O O $string$ O $T$ O O O O $string$ O $T$ O O O O $string$ O $T$ O O O O O O O $any$ O $any$ O $string$ O $any$ O $string$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O $any$ O $string$ O O O O $Array$ O O O O O O O O O $any$ O $any$ O $string$ O $any$ O $string$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O $any$ O $string$ O O O O $string$ O O O O O O $any$ O $any$ O $string$ O $any$ O $string$ O O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { Injectable } from 's' ; import { Http } from 's' ; import { Observable } from 's' ; import { Config } from 's' ; import { Analytics , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ extends Analytics { constructor ( public analytics , private http ) { super ( analytics ) ; this . category = _UNKNOWN_ . _UNKNOWN_ ; } _UNKNOWN_ ( ) < Array < string > > { return this . http . get ( `template` ) . map ( res => res . json ( ) ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O O $Http$ O O O O $any$ O O O O $string$ O $any$ O $string$ O O $Observable$ O O O $ArrayConstructor$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ : any [ ] = [ _UNKNOWN_ ] ; export * from 's' ; </s>	O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O O O O O O O O
<s> import { Injectable } from 's' ; import { Store , Action } from 's' ; import { _UNKNOWN_ , Actions } from 's' ; import { Observable } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ { @ _UNKNOWN_ ( ) _UNKNOWN_ : Observable < Action > = this . _UNKNOWN_ . ofType ( _UNKNOWN_ . ActionTypes . _UNKNOWN_ ) . startWith ( new _UNKNOWN_ . _UNKNOWN_ ) . switchMap ( ( ) => this . _UNKNOWN_ . _UNKNOWN_ ( ) ) . map ( payload => { let names = payload ; return new _UNKNOWN_ . _UNKNOWN_ ( names ) ; } ) . catch ( ( ) => Observable . of ( new _UNKNOWN_ . _UNKNOWN_ ( ) ) ) ; @ _UNKNOWN_ ( ) _UNKNOWN_ : Observable < Action > = this . _UNKNOWN_ . ofType ( _UNKNOWN_ . ActionTypes . ADD ) . map ( action => { let name = action . payload ; this . _UNKNOWN_ . track ( _UNKNOWN_ . ActionTypes . _UNKNOWN_ , { label : name } ) ; return new _UNKNOWN_ . _UNKNOWN_ ( name ) ; } ) ; constructor ( private store < any > , private _UNKNOWN_ , private _UNKNOWN_ ) { } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O $any$ O $string$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $Store$ O O O O O $Actions$ O O $any$ O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { Observable } from 's' ; export interface _UNKNOWN_ { names : Array < string > ; } export const _UNKNOWN_ = { names : < Array < string > > [ ] } ; export function _UNKNOWN_ ( state$ < _UNKNOWN_ > ) { return state$ . select ( state => state . names ) ; } </s>	O O O $any$ O O O O O O $any$ O $string[]$ O $ArrayConstructor$ O O O O O O O $any$ O O $string[]$ O O $ArrayConstructor$ O O O O O O O O O O $any$ O $Observable$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export function reducer ( state = _UNKNOWN_ , action : _UNKNOWN_ . Actions ) { switch ( action . type ) { case _UNKNOWN_ . ActionTypes . _UNKNOWN_ : return ( < any > Object ) . assign ( { } , state , { names : action . payload } ) ; case _UNKNOWN_ . ActionTypes . _UNKNOWN_ : return ( < any > Object ) . assign ( { } , state , { names : [ ... state . names , action . payload ] } ) ; default : return state ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $Actions$ O $any$ O $any$ O O O O $Actions$ O $string$ O O O $any$ O $any$ O $string$ O O O O O O $ObjectConstructor$ O O $any$ O O O O $any$ O O $complex$ O $Actions$ O $complex$ O O O O $any$ O $any$ O $string$ O O O O O O $ObjectConstructor$ O O $any$ O O O O $any$ O O $complex$ O O O $any$ O $string[]$ O $Actions$ O $complex$ O O O O O O O $any$ O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { Observable } from 's' ; import 's' ; declare var window ; export class _UNKNOWN_ { public static on ( name ) < any > { return Observable . fromEvent ( window , name ) ; } } </s>	O O O $any$ O O O O O O O O O $any$ O O O $any$ O O O $Observable$ O $string$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export class _UNKNOWN_ { public static _UNKNOWN_ ( ) < _UNKNOWN_ > { return [ { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } ] ; } } </s>	O O O $any$ O O O O O O $any$ O O O $Array$ O O O $any$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O
<s> export const _UNKNOWN_ = 's' ; </s>	O O O $string$ O O O O
<s> import { Action } from 's' ; import { type } from 's' ; import { _UNKNOWN_ } from 's' ; export interface _UNKNOWN_ { _UNKNOWN_ : string ; _UNKNOWN_ : string ; _UNKNOWN_ : string ; } export const ActionTypes = { _UNKNOWN_ : type ( `template` ) , _UNKNOWN_ : type ( `template` ) , _UNKNOWN_ : type ( `template` ) } ; export class _UNKNOWN_ implements Action { type = ActionTypes . _UNKNOWN_ ; constructor ( public payload ) { } } export class _UNKNOWN_ implements Action { type = ActionTypes . _UNKNOWN_ ; constructor ( public payload ) { } } export class _UNKNOWN_ implements Action { type = ActionTypes . _UNKNOWN_ ; constructor ( public payload ) { } } export type Actions = _UNKNOWN_ | _UNKNOWN_ | _UNKNOWN_ ; </s>	O O O $any$ O O O O O O $T$ O O O O O O $string$ O O O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O O $string$ O $T$ O O O O $string$ O $T$ O O O O $string$ O $T$ O O O O O O O $any$ O $any$ O $string$ O $any$ O $string$ O O O O $string$ O O O O O O $any$ O $any$ O $string$ O $any$ O $string$ O O O O $string$ O O O O O O $any$ O $any$ O $string$ O $any$ O $string$ O O O O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { Component , Inject } from 's' ; import { Store } from 's' ; import { Config , _UNKNOWN_ , LogService } from 's' ; import { IAppState } from 's' ; import { _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Component ( { moduleId : module . id , selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] , } ) export class _UNKNOWN_ { public lang : string ; public _UNKNOWN_ : Array < _UNKNOWN_ > ; constructor ( private store < IAppState > , private log , @ Inject ( _UNKNOWN_ ) private languages , @ Inject ( _UNKNOWN_ ) private _UNKNOWN_ ) { store . take ( 0 ) . subscribe ( ( s ) => { this . lang = s && s . 0 ? s . 0 . lang : 's' ; } ) ; if ( Config . _UNKNOWN_ ( ) ) { _UNKNOWN_ . on ( 's' ) . subscribe ( ( e ) => { this . _UNKNOWN_ ( { target : { value : e . detail . value } } ) ; } ) ; } } _UNKNOWN_ ( e ) { let lang = this . _UNKNOWN_ [ 0 ] . code ; if ( Config . _UNKNOWN_ ( ) ) { if ( e ) { lang = this . _UNKNOWN_ [ e . newIndex ] . code ; } } else if ( e && e . target ) { lang = e . target . value ; } this . log . debug ( `template` ) ; this . store . dispatch ( new _UNKNOWN_ . _UNKNOWN_ ( lang ) ) ; } ngOnInit ( ) { this . _UNKNOWN_ = this . languages ; if ( Config . _UNKNOWN_ ( ) && this . _UNKNOWN_ ) { this . _UNKNOWN_ = this . _UNKNOWN_ ; } } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O $any$ O O $string$ O O O O $any$ O $ArrayConstructor$ O $any$ O O O O O $Store$ O $any$ O O O $LogService$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $boolean$ O O O O $any$ O $any$ O O O O $any$ O O $any$ O O O O O $void$ O O $complex$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O $any$ O O O $string$ O O O $any$ O O O O $string$ O O O $any$ O $boolean$ O O O O O O $any$ O O $string$ O O O $any$ O $any$ O $any$ O O $string$ O O O O O O $any$ O $any$ O $any$ O O $string$ O $any$ O $any$ O $any$ O O O O $LogService$ O $complex$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O $void$ O O O O O $any$ O O O $any$ O O O $any$ O $boolean$ O O O O O $any$ O O O O $any$ O O O $any$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ : any [ ] = [ _UNKNOWN_ ] ; export * from 's' ; </s>	O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O O O O O O O O
<s> import { NgModule , ModuleWithProviders , Optional , SkipSelf , CUSTOM_ELEMENTS_SCHEMA , NO_ERRORS_SCHEMA } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { HttpModule , Http } from 's' ; import { TranslateModule , TranslateLoader } from 's' ; import { TranslateHttpLoader } from 's' ; import { Config } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( http ) { return new TranslateHttpLoader ( http , `template` , 's' ) ; } @ NgModule ( { imports : [ CommonModule , HttpModule , FormsModule , TranslateModule . forRoot ( [ { provide : TranslateLoader , deps : [ Http ] , useFactory : ( _UNKNOWN_ ) } ] ) , ] , declarations : [ ... _UNKNOWN_ ] , providers : [ ... _UNKNOWN_ , ] , exports : [ ... _UNKNOWN_ , TranslateModule ] , schemas : [ NO_ERRORS_SCHEMA , CUSTOM_ELEMENTS_SCHEMA ] } ) export class _UNKNOWN_ { static forRoot ( _UNKNOWN_ < any > ) { return { ngModule : _UNKNOWN_ , providers : _UNKNOWN_ } ; } constructor ( @ Optional ( ) @ SkipSelf ( ) parentModule ) { if ( parentModule ) { throw new Error ( 's' ) ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O O O O O O $any[]$ O O O O O O $any$ O $Http$ O O O O $any$ O $any$ O O O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any[]$ O O $any$ O O $any$ O O $any$ O O O O O O O $any[]$ O O O $any[]$ O O $any[]$ O O O $any[]$ O O O $any[]$ O O O $any[]$ O $any$ O O $any[]$ O O $any$ O $any$ O O O O O $any$ O O $ModuleWithProviders$ O $Array$ O O O O O O O $any$ O $any$ O $any[]$ O $any[]$ O O O O O O $any$ O O O $any$ O O $any$ O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O
<s> import { NgModule , Optional , SkipSelf , NO_ERRORS_SCHEMA , CUSTOM_ELEMENTS_SCHEMA } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { HttpModule } from 's' ; import { RouterModule } from 's' ; import { SharedModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ NgModule ( { imports : [ SharedModule , _UNKNOWN_ , ] , providers : [ ... _UNKNOWN_ ] , schemas : [ NO_ERRORS_SCHEMA , CUSTOM_ELEMENTS_SCHEMA ] , exports : [ SharedModule ] } ) export class _UNKNOWN_ { constructor ( @ Optional ( ) @ SkipSelf ( ) parentModule ) { if ( parentModule ) { throw new Error ( 's' ) ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O O O O O $any$ O O $complex$ O O $any$ O $any$ O O O $any[]$ O O O $any[]$ O O $any[]$ O O $any$ O $any$ O O $complex$ O O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O O $any$ O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import { Observable } from 's' ; import { ActionReducer } from 's' ; import 's' ; import { compose } from 's' ; import { _UNKNOWN_ } from 's' ; import { combineReducers } from 's' ; import * as _UNKNOWN_ from 's' ; import * as _UNKNOWN_ from 's' ; export interface IAppState { 0 : _UNKNOWN_ . _UNKNOWN_ ; sample : _UNKNOWN_ . _UNKNOWN_ ; } const reducers = { 0 : _UNKNOWN_ . reducer , sample : _UNKNOWN_ . reducer } ; const _UNKNOWN_ < IAppState > = compose ( _UNKNOWN_ , combineReducers ) ( reducers ) ; const _UNKNOWN_ < IAppState > = combineReducers ( reducers ) ; export function _UNKNOWN_ ( state , action ) { if ( String ( 's' ) === 's' ) { return _UNKNOWN_ ( state , action ) ; } else { return _UNKNOWN_ ( state , action ) ; } } export function _UNKNOWN_ ( state$ < IAppState > ) < _UNKNOWN_ . _UNKNOWN_ > { return state$ . select ( s => s . 0 ) ; } export function _UNKNOWN_ ( state$ < IAppState > ) < _UNKNOWN_ . _UNKNOWN_ > { return state$ . select ( s => s . sample ) ; } export const _UNKNOWN_ = compose ( _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ ) ; export const _UNKNOWN_ = compose ( _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $ActionReducer$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $ActionReducer$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $StringConstructor$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $Observable$ O $Observable$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $Observable$ O $Observable$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O
<s> import { Observable } from 's' ; export interface _UNKNOWN_ { lang : string ; } export const initialState = { lang : 's' } ; export function _UNKNOWN_ ( state$ < _UNKNOWN_ > ) { return state$ . select ( state => state . lang ) ; } </s>	O O O $any$ O O O O O O $any$ O $string$ O O O O O O $any$ O O $string$ O O O O O O $any$ O $Observable$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { Injectable , InjectionToken } from 's' ; import { Store } from 's' ; import { TranslateService } from 's' ; import { Analytics , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { IAppState } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , initialState } from 's' ; import { _UNKNOWN_ } from 's' ; export const _UNKNOWN_ < Array < _UNKNOWN_ > > = new InjectionToken ( 's' ) ; export const _UNKNOWN_ < Array < any > > = new InjectionToken ( 's' ) ; export const LanguageProviders = [ { provide : _UNKNOWN_ , useValue : [ ] } , { provide : _UNKNOWN_ , useValue : null } ] ; @ Injectable ( ) export class _UNKNOWN_ extends Analytics { constructor ( public analytics , private translate , private win , private store < IAppState > ) { super ( analytics ) ; this . category = _UNKNOWN_ ; translate . _UNKNOWN_ ( initialState . lang ) ; let _UNKNOWN_ = win . navigator . language . split ( 's' ) [ 0 ] ; store . select ( s => s . 0 ) . subscribe ( ( state ) => { this . translate . use ( state . lang ) ; } ) ; this . store . dispatch ( new _UNKNOWN_ ( _UNKNOWN_ ) ) ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $string$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $ArrayConstructor$ O $any$ O O O O $any$ O O O O O O $any$ O $ArrayConstructor$ O O O O O O $any$ O O O O O O $complex$ O O O $any$ O $any$ O $undefined[]$ O O O O O O $any$ O $any$ O $null$ O O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O O $TranslateService$ O O $any$ O O $Store$ O $any$ O O O O O $any$ O O O O $string$ O $string$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O
<s> import { LanguageProviders , _UNKNOWN_ } from 's' ; export const _UNKNOWN_ : any [ ] = [ ... LanguageProviders , _UNKNOWN_ , ] ; export * from 's' ; </s>	O O O $complex$ O $any$ O O O O O O $any[]$ O O O O O O O $complex$ O $any$ O O O O O O O O O
<s> import { Injectable , Inject } from 's' ; import { Store , Action } from 's' ; import { _UNKNOWN_ , Actions } from 's' ; import { includes , map } from 's' ; import { Observable } from 's' ; import 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import * as _UNKNOWN_ from 's' ; @ Injectable ( ) export class _UNKNOWN_ { @ _UNKNOWN_ ( ) _UNKNOWN_ : Observable < Action > = this . _UNKNOWN_ . ofType ( _UNKNOWN_ . ActionTypes . _UNKNOWN_ ) . map ( action => { let lang = action . payload ; if ( includes ( map ( this . languages , 's' ) , lang ) ) { let _UNKNOWN_ = new _UNKNOWN_ . _UNKNOWN_ ( lang ) ; this . _UNKNOWN_ . track ( _UNKNOWN_ . type , { label : _UNKNOWN_ . payload } ) ; return new _UNKNOWN_ . _UNKNOWN_ ( lang ) ; } else { return new _UNKNOWN_ . _UNKNOWN_ ( lang ) ; } } ) ; constructor ( private store < any > , private _UNKNOWN_ , private _UNKNOWN_ , @ Inject ( _UNKNOWN_ ) private languages ) { } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $void$ O $any$ O $string$ O O $string$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O $Store$ O O O O O $Actions$ O O $any$ O O $any$ O $any$ O O $any$ O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { _UNKNOWN_ , initialState } from 's' ; import { Actions , ActionTypes } from 's' ; export function reducer ( state = initialState , action ) { switch ( action . type ) { case ActionTypes . _UNKNOWN_ : if ( state . lang !== action . payload ) return ( < any > Object ) . assign ( { } , state , { lang : action . payload } ) ; return state ; default : return state ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $Actions$ O O O O $Actions$ O $string$ O O O $any$ O $string$ O O O $any$ O $string$ O $Actions$ O $string$ O O O O O O $ObjectConstructor$ O O $any$ O O O O $any$ O O $string$ O $Actions$ O $string$ O O O O $any$ O O O O $any$ O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import { NgModule , NO_ERRORS_SCHEMA , CUSTOM_ELEMENTS_SCHEMA } from 's' ; import { CommonModule } from 's' ; import { HttpModule } from 's' ; import { FormsModule } from 's' ; import { RouterModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const SHARED_MODULES : any [ ] = [ CommonModule , HttpModule , FormsModule , RouterModule , _UNKNOWN_ ] ; @ NgModule ( { imports : [ ... SHARED_MODULES ] , declarations : [ ... _UNKNOWN_ ] , schemas : [ NO_ERRORS_SCHEMA , CUSTOM_ELEMENTS_SCHEMA , ] , exports : [ ... SHARED_MODULES , ... _UNKNOWN_ , ] } ) export class SharedModule { } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O O O O O $any[]$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any[]$ O O O $any[]$ O O $any[]$ O O O $any[]$ O O $any[]$ O O $any$ O $any$ O O O $any[]$ O O O $any[]$ O O $any[]$ O O O O O O $any$ O O O
<s> export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O
<s> import { NgModule , ModuleWithProviders , Optional , SkipSelf } from 's' ; import { CommonModule } from 's' ; import { FormsModule } from 's' ; import { RouterModule } from 's' ; import { HttpModule } from 's' ; import { SharedModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { Config } from 's' ; interface _UNKNOWN_ { window ? : any ; console ? : any ; } @ NgModule ( { imports : [ SharedModule ] , declarations : [ ... _UNKNOWN_ ] , exports : [ ... _UNKNOWN_ ] , providers : [ ... _UNKNOWN_ , ] } ) export class CoreModule { static forRoot ( _UNKNOWN_ < any > ) { return { ngModule : CoreModule , providers : _UNKNOWN_ } ; } constructor ( @ Optional ( ) @ SkipSelf ( ) parentModule ) { if ( parentModule ) { throw new Error ( 's' ) ; } } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O O O O O O $any[]$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O $complex$ O O $any$ O O $any[]$ O O O $any[]$ O O $any[]$ O O O $any[]$ O O $any[]$ O O O $any[]$ O O O O O O $any$ O O $ModuleWithProviders$ O $Array$ O O O O O O O $any$ O $any$ O $any[]$ O $any[]$ O O O O O O $any$ O O O $any$ O O $any$ O O O O $any$ O O O O $ErrorConstructor$ O O O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import { Injector , Component } from 's' ; import { Config } from 's' ; @ Component ( { moduleId : module . id , selector : 's' , templateUrl : 's' , styleUrls : [ 's' , ] , } ) export class AboutComponent { private _page : any ; private get page ( ) { if ( Config . _UNKNOWN_ ) { if ( ! this . _page ) { this . _page = this . injector . get ( Config . _UNKNOWN_ ) ; } return this . _page ; } } constructor ( private injector ) { } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string[]$ O O O O O O O O O O $any$ O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $Injector$ O O O O O
<s> import { Component } from 's' ; import { TestBed } from 's' ; import { t } from 's' ; import { AboutComponent } from 's' ; const _UNKNOWN_ = ( ) => { TestBed . configureTestingModule ( { declarations : [ AboutComponent , TestComponent ] } ) ; } ; export function main ( ) { t . describe ( 's' , ( ) => { t . be ( _UNKNOWN_ ) ; t . it ( 's' , t . async ( ( ) => { TestBed . compileComponents ( ) . then ( ( ) => { let fixture = TestBed . createComponent ( TestComponent ) ; fixture . detectChanges ( ) ; let _UNKNOWN_ = fixture . debugElement . children [ 0 ] . nativeElement ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) [ 0 ] . textContent ) . toEqual ( 's' ) ; } ) ; } ) ) ; } ) ; } @ Component ( { selector : 's' , template : 's' } ) class TestComponent { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O O O O $void$ O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O $void$ O O $any$ O $void$ O O O $any$ O $Function$ O O O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O O O
<s> import { AboutComponent } from 's' ; export const _UNKNOWN_ < any > = [ { path : 's' , component : AboutComponent } ] ; </s>	O O O $any$ O O O O O O $Array$ O O O O O O $string$ O O O $any$ O $any$ O O O O
<s> export class _UNKNOWN_ { public navigator : any = { language : 's' , userAgent : 's' } ; public location : any = { } ; public alert ( msg ) { return ; } public confirm ( msg ) { return ; } } export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( ) { super ( ) ; this . navigator . language = 's' ; } } export class _UNKNOWN_ extends _UNKNOWN_ { constructor ( ) { super ( ) ; this . navigator . language = undefined ; } } </s>	O O O $any$ O O $any$ O O O O $string$ O O O $string$ O O O O O $any$ O O O O O O O $void$ O $string$ O O O O O O $void$ O $string$ O O O O O O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O $undefined$ O O O O
<s> import { Injectable } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; @ Injectable ( ) export class _UNKNOWN_ implements _UNKNOWN_ { navigate ( commands < any > , _UNKNOWN_ ? ) < boolean > { return Promise . resolve ( true ) ; } navigateByUrl ( url : string | _UNKNOWN_ , options ? ) < boolean > { return Promise . resolve ( true ) ; } back ( ) { return ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $Promise$ O $Array$ O O O O $any$ $any$ O O O O O O $PromiseConstructor$ O $complex$ O O O O O $Promise$ O $any$ O O O $any$ O $any$ $any$ O O O O O O $PromiseConstructor$ O $complex$ O O O O O $void$ O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , LogService , _UNKNOWN_ , _UNKNOWN_ , LogLevel , _UNKNOWN_ , AppService } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( options ? ) < any > { let providers = [ { provide : _UNKNOWN_ , useValue : console } , { provide : _UNKNOWN_ , useValue : localStorage } , { provide : _UNKNOWN_ , useClass : ( options && options . window ) || _UNKNOWN_ } , { provide : _UNKNOWN_ , deps : [ _UNKNOWN_ ] , useFactory : ( c ) => new _UNKNOWN_ ( c , { _UNKNOWN_ : LogLevel . Debug } ) , multi : true } , LogService , _UNKNOWN_ , { provide : _UNKNOWN_ , useClass : _UNKNOWN_ } , AppService ] ; return providers ; } </s>	O O O $any[]$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $Array$ O $any$ $any$ O O O O O O $complex$ O O O $any$ O $any$ O $Console$ O $Console$ O O O $any$ O $any$ O $Storage$ O $Storage$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $complex$ O O $any$ O O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $boolean$ O O O O $any$ O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O O O
<s> import { ReflectiveInjector } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , Http } from 's' ; import { MockBackend } from 's' ; let providers < any > = [ _UNKNOWN_ , MockBackend , { provide : Http , useFactory : function ( backend , defaultOptions ) { return new Http ( backend , defaultOptions ) ; } , deps : [ MockBackend , _UNKNOWN_ ] } ] ; export function _UNKNOWN_ ( _UNKNOWN_ ? < any > ) { if ( _UNKNOWN_ ) { providers = providers . concat ( _UNKNOWN_ ) ; } return ReflectiveInjector . _UNKNOWN_ ( providers ) ; } export function _UNKNOWN_ ( ) < any > { return providers ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O $Array$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any[]$ O O $any$ O $any$ O O O O O O $any$ O $any[]$ $Array$ O O O O O O O $any[]$ O O $any[]$ O $any[]$ O $complex$ O $any[]$ O O O O $any$ O $any$ O $any[]$ O O O O O $Array$ O O O O O O O $any[]$ O O O
<s> import { Location , LocationStrategy , APP_BASE_HREF } from 's' ; import { SpyLocation , _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( ) < any > { return [ { provide : Location , useClass : SpyLocation } , { provide : LocationStrategy , useClass : _UNKNOWN_ } , { provide : APP_BASE_HREF , useValue : 's' } ] ; } </s>	O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $Array$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $string$ O O O O O O O
<s> export * from 's' ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O
<s> import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; import 's' ; </s>	O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import 's' ; import { Component , OnInit } from 's' ; import { _UNKNOWN_ } from 's' ; import { LogService , AppService } from 's' ; import { Config } from 's' ; @ Component ( { moduleId : module . id , selector : 's' , templateUrl : 's' } ) export class AppComponent { constructor ( public analytics , public log , private appService ) { log . debug ( `template` ) ; } } </s>	O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O O O O $any$ O O O O $any$ O O $LogService$ O O $AppService$ O O $LogService$ O $complex$ O O O O O O O
<s> import { Component , ElementRef , ViewChild , OnInit } from 's' ; import { Store } from 's' ; import { Observable } from 's' ; import { _UNKNOWN_ , Config } from 's' ; import { IAppState , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; @ Component ( { moduleId : module . id , selector : 's' , templateUrl : 's' , styleUrls : [ 's' ] } ) export class HomeComponent implements OnInit { public _UNKNOWN_ : Observable < any > ; public newName : string ; constructor ( private store < IAppState > , public _UNKNOWN_ ) { } ngOnInit ( ) { this . _UNKNOWN_ = this . store . let ( _UNKNOWN_ ) ; this . newName = 's' ; } _UNKNOWN_ ( ) { this . store . dispatch ( new _UNKNOWN_ . _UNKNOWN_ ( this . newName ) ) ; this . newName = 's' ; return false ; } _UNKNOWN_ ( ) { this . _UNKNOWN_ . navigate ( [ 's' ] , { transition : { duration : 0 , name : 's' , } } ) ; } } </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O $string$ O O O $string[]$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $string$ O O O O O O $Store$ O $any$ O O O $any$ O O O $void$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $string$ O O O O $boolean$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O $string$ O O O O O $string$ O O O O O O O $void$ O O O O O $any$ O $Promise<boolean>$ O O O O O O $complex$ O O $number$ O O O $string$ O O O O O O O O O O
<s> import { AppComponent } from 's' ; import { AboutComponent } from 's' ; import { HomeComponent } from 's' ; export const _UNKNOWN_ : any [ ] = [ AppComponent , AboutComponent , HomeComponent ] ; export * from 's' ; export * from 's' ; export * from 's' ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O
<s> import { TestBed } from 's' ; import { Component } from 's' ; import { FormsModule } from 's' ; import { Route } from 's' ; import { RouterTestingModule } from 's' ; import { StoreModule } from 's' ; import { 0 , 0 } from 's' ; import { t } from 's' ; import { Config } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { SharedModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { reducer , LanguageProviders } from 's' ; import { _UNKNOWN_ } from 's' ; import { HomeComponent } from 's' ; import { AboutComponent } from 's' ; const config : Route [ ] = [ { path : 's' , component : HomeComponent } , { path : 's' , component : AboutComponent } ] ; const _UNKNOWN_ = ( ) => { TestBed . configureTestingModule ( { imports : [ SharedModule , 0 . forRoot ( [ 0 ] ) , _UNKNOWN_ , StoreModule . _UNKNOWN_ ( { } ) , RouterTestingModule . withRoutes ( config ) ] , declarations : [ TestComponent , ... _UNKNOWN_ ] , providers : [ _UNKNOWN_ ( ) , _UNKNOWN_ ( ) , _UNKNOWN_ , LanguageProviders ] } ) ; } ; export function main ( ) { t . describe ( 's' , ( ) => { t . be ( _UNKNOWN_ ) ; t . it ( 's' , t . async ( ( ) => { TestBed . compileComponents ( ) . then ( ( ) => { let fixture = TestBed . createComponent ( TestComponent ) ; fixture . detectChanges ( ) ; t . e ( fixture . nativeElement ) . toBeTruthy ( ) ; } ) ; } ) ) ; } ) ; } @ Component ( { selector : 's' , template : 's' } ) class TestComponent { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O $any[]$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $complex$ O O O O O O $any[]$ O O O O O O $any$ O O O O O O $any$ O O O O O $any[]$ O $any$ O O O O O $string$ O O O $any$ O $any$ O O O $string$ O O O $any$ O $any$ O O O O $void$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any[]$ O O O $any[]$ O O $any$ O O $any[]$ O O $complex$ O O $any[]$ O O O $any[]$ O O O $any$ O $complex$ O O O O O O O O $void$ O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O $void$ O O $any$ O $void$ O O O $any$ O $Function$ O O O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O O O
<s> import { HomeComponent } from 's' ; export const _UNKNOWN_ < any > = [ { path : 's' , component : HomeComponent } ] ; </s>	O O O $any$ O O O O O O $Array$ O O O O O O $string$ O O O $any$ O $any$ O O O O
<s> import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export const routes < any > = [ ... _UNKNOWN_ , ... _UNKNOWN_ ] ; </s>	O O O $any[]$ O O O O O O $any[]$ O O O O O O $Array$ O O O O O O $any[]$ O O $any[]$ O O O
<s> import { Component } from 's' ; import { TestBed } from 's' ; import { RouterTestingModule } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , Http } from 's' ; import { MockBackend } from 's' ; import { StoreModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { t } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , reducer } from 's' ; import { CoreModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { LanguageProviders } from 's' ; import { SharedModule } from 's' ; import { HomeComponent } from 's' ; const _UNKNOWN_ = ( ) => { TestBed . configureTestingModule ( { imports : [ CoreModule , SharedModule , RouterTestingModule , _UNKNOWN_ , _UNKNOWN_ , StoreModule . _UNKNOWN_ ( { sample : reducer } ) , _UNKNOWN_ . run ( _UNKNOWN_ ) ] , declarations : [ HomeComponent , TestComponent ] , providers : [ LanguageProviders , _UNKNOWN_ , _UNKNOWN_ , MockBackend , { provide : Http , useFactory : function ( backend , defaultOptions ) { return new Http ( backend , defaultOptions ) ; } , deps : [ MockBackend , _UNKNOWN_ ] } ] } ) ; } ; export function main ( ) { t . describe ( 's' , ( ) => { t . be ( _UNKNOWN_ ) ; t . it ( 's' , t . async ( ( ) => { TestBed . compileComponents ( ) . then ( ( ) => { let fixture = TestBed . createComponent ( TestComponent ) ; fixture . detectChanges ( ) ; let _UNKNOWN_ = fixture . debugElement . children [ 0 ] . componentInstance ; let _UNKNOWN_ = fixture . debugElement . children [ 0 ] . nativeElement ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) . length ) . toEqual ( 0 ) ; _UNKNOWN_ . newName = 's' ; _UNKNOWN_ . _UNKNOWN_ ( ) ; fixture . detectChanges ( ) ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) . length ) . toEqual ( 0 ) ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) [ 0 ] . textContent ) . toEqual ( 's' ) ; } ) ; } ) ) ; } ) ; } @ Component ( { selector : 's' , template : 's' } ) class TestComponent { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O O $any[]$ O O $complex$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any[]$ O O $any$ O $any$ O O O O O O O O O O $void$ O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O $void$ O O $any$ O $void$ O O O $any$ O $Function$ O O O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O O O
<s> import { TestBed } from 's' ; import { RouterTestingModule } from 's' ; import { 0 , 0 } from 's' ; import { t } from 's' ; import { _UNKNOWN_ , Analytics } from 's' ; const _UNKNOWN_ = ( ) => { TestBed . configureTestingModule ( { imports : [ RouterTestingModule , 0 . forRoot ( [ 0 ] ) ] , providers : [ _UNKNOWN_ ] } ) ; } ; export function main ( ) { t . describe ( 's' , ( ) => { t . be ( _UNKNOWN_ ) ; t . describe ( 's' , ( ) => { t . describe ( 's' , ( ) => { t . it ( 's' , t . inject ( [ _UNKNOWN_ , 0 ] , ( _UNKNOWN_ , segment ) => { _UNKNOWN_ . _UNKNOWN_ ( false ) ; t . spyOn ( segment , 's' ) ; _UNKNOWN_ . track ( 's' , { category : 's' , label : 's' } ) ; t . e ( segment . eventTrack ) . toHaveBeenCalledWith ( 's' , { category : 's' , label : 's' } ) ; } ) ) ; t . it ( 's' , t . inject ( [ _UNKNOWN_ , 0 ] , ( _UNKNOWN_ , segment ) => { t . spyOn ( segment , 's' ) ; _UNKNOWN_ . _UNKNOWN_ ( true ) ; _UNKNOWN_ . track ( 's' , { category : 's' , label : 's' } ) ; t . e ( segment . eventTrack ) . not . toHaveBeenCalled ( ) ; } ) ) ; t . it ( 's' , t . inject ( [ _UNKNOWN_ , 0 ] , ( _UNKNOWN_ , segment ) => { t . spyOn ( segment , 's' ) ; _UNKNOWN_ . pageTrack ( 's' , { } ) ; t . e ( segment . pageTrack ) . toHaveBeenCalledWith ( 's' , { } ) ; } ) ) ; t . it ( 's' , t . inject ( [ _UNKNOWN_ , 0 ] , ( _UNKNOWN_ , segment ) => { t . spyOn ( segment , 's' ) ; _UNKNOWN_ . _UNKNOWN_ ( true ) ; _UNKNOWN_ . pageTrack ( 's' , { } ) ; t . e ( segment . pageTrack ) . not . toHaveBeenCalled ( ) ; } ) ) ; t . it ( 's' , t . inject ( [ _UNKNOWN_ , 0 ] , ( _UNKNOWN_ , segment ) => { t . spyOn ( segment , 's' ) ; _UNKNOWN_ . identify ( { userId : 0 , name : 's' , email : 's' } ) ; t . e ( segment . setUserProperties ) . toHaveBeenCalledWith ( { userId : 0 , name : 's' , email : 's' } ) ; } ) ) ; t . it ( 's' , t . inject ( [ _UNKNOWN_ , 0 ] , ( _UNKNOWN_ , segment ) => { t . spyOn ( segment , 's' ) ; _UNKNOWN_ . _UNKNOWN_ ( true ) ; _UNKNOWN_ . identify ( { userId : 0 , name : 's' , email : 's' } ) ; t . e ( segment . setUserProperties ) . not . toHaveBeenCalled ( ) ; } ) ) ; } ) ; } ) ; t . describe ( 's' , ( ) => { t . describe ( 's' , ( ) => { t . it ( 's' , t . inject ( [ _UNKNOWN_ , 0 ] , ( _UNKNOWN_ , segment ) => { t . spyOn ( _UNKNOWN_ , 's' ) ; let analytics = new _UNKNOWN_ ( _UNKNOWN_ ) ; analytics . category = 's' ; analytics . track ( 's' , { category : analytics . category , label : 's' } ) ; t . e ( _UNKNOWN_ . track ) . toHaveBeenCalledWith ( 's' , { category : analytics . category , label : 's' } ) ; } ) ) ; } ) ; } ) ; } ) ; } class _UNKNOWN_ extends Analytics { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O $any$ O O O O $complex$ O O $any$ O O O O O O O O $void$ O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O $void$ O O $any$ O $Function$ O O O O O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $string$ O O O $string$ O O O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $number$ O O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $number$ O O O $string$ O O O $string$ O O O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $number$ O O O $string$ O O O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O O O O $any$ O $Function$ O O O O O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O $any$ O $string$ O O O $any$ O $void$ O O O O $string$ O $any$ O $string$ O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $string$ O $any$ O $string$ O $string$ O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O
<s> import { TestBed } from 's' ; import { Component } from 's' ; import { t } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = ( ) => { TestBed . configureTestingModule ( { declarations : [ _UNKNOWN_ , TestComponent ] } ) ; } ; @ Component ( { _UNKNOWN_ : [ { provide : _UNKNOWN_ , useClass : _UNKNOWN_ } ] , selector : 's' , template : `template` } ) class TestComponent { } export function main ( ) { t . describe ( 's' , ( ) => { t . be ( _UNKNOWN_ ) ; t . it ( 's' , t . async ( ( ) => { TestBed . compileComponents ( ) . then ( ( ) => { let fixture = TestBed . createComponent ( TestComponent ) ; fixture . detectChanges ( ) ; let _UNKNOWN_ = fixture . debugElement . children [ 0 ] . nativeElement ; t . e ( _UNKNOWN_ . getAttribute ( 's' ) ) . toBe ( 's' ) ; } ) ; } ) ) ; } ) ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O O O O O O $any$ O O $complex$ O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O $string$ O O O O O $any$ O O O O $void$ O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O $void$ O O $any$ O $void$ O O O $any$ O $Function$ O O O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O O O O O O O O O
<s> import { Provider , _UNKNOWN_ } from 's' ; import { TestBed } from 's' ; import { t } from 's' ; import { Config } from 's' ; import { _UNKNOWN_ , LogService , _UNKNOWN_ , _UNKNOWN_ , LogLevel , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; const _UNKNOWN_ = new class extends _UNKNOWN_ { constructor ( ) { super ( { _UNKNOWN_ : LogLevel . Info } ) ; } _UNKNOWN_ ( log ) { return Promise . resolve ( ) ; } } ; const providers < Provider > = [ { provide : _UNKNOWN_ , useValue : console } , _UNKNOWN_ ( LogLevel . Debug ) , { provide : _UNKNOWN_ , useValue : _UNKNOWN_ , multi : true } , LogService ] ; export function main ( ) { t . describe ( 's' , ( ) => { t . be ( ( ) => { Config . RESET ( ) ; t . spyOn ( console , 's' ) ; t . spyOn ( console , 's' ) ; t . spyOn ( console , 's' ) ; t . spyOn ( console , 's' ) ; TestBed . configureTestingModule ( { providers : providers } ) ; } ) ; t . describe ( 's' , ( ) => { t . it ( 's' , t . inject ( [ LogService ] , ( log ) => { t . e ( log . debug ) . toBeDefined ( ) ; t . e ( log . error ) . toBeDefined ( ) ; t . e ( log . warn ) . toBeDefined ( ) ; t . e ( log . info ) . toBeDefined ( ) ; } ) ) ; t . it ( 's' , t . inject ( [ LogService ] , ( log ) => { log . debug ( 's' ) ; t . e ( console . log ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; log . error ( 's' ) ; t . e ( console . error ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; log . warn ( 's' ) ; t . e ( console . warn ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; log . info ( 's' ) ; t . e ( console . info ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; } ) ) ; } ) ; t . describe ( 's' , ( ) => { t . be ( ( ) => { Config . RESET ( ) ; } ) ; t . it ( 's' , t . inject ( [ LogService ] , ( log ) => { Config . DEBUG . 0 = true ; log . debug ( 's' ) ; t . e ( console . log ) . toHaveBeenCalledWith ( [ 's' ] ) ; log . error ( 's' ) ; t . e ( console . error ) . toHaveBeenCalledWith ( [ 's' ] ) ; log . warn ( 's' ) ; t . e ( console . warn ) . toHaveBeenCalledWith ( [ 's' ] ) ; log . info ( 's' ) ; t . e ( console . info ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) ) ; t . it ( 's' , t . inject ( [ LogService ] , ( log ) => { Config . DEBUG . 0 = true ; log . debug ( 's' ) ; t . e ( console . log ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; log . error ( 's' ) ; t . e ( console . error ) . toHaveBeenCalledWith ( [ 's' ] ) ; log . warn ( 's' ) ; t . e ( console . warn ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; log . info ( 's' ) ; t . e ( console . info ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; Config . DEBUG . 0 = true ; log . debug ( 's' ) ; t . e ( console . log ) . toHaveBeenCalledWith ( [ 's' ] ) ; log . error ( 's' ) ; t . e ( console . error ) . toHaveBeenCalledWith ( [ 's' ] ) ; log . warn ( 's' ) ; t . e ( console . warn ) . toHaveBeenCalledWith ( [ 's' ] ) ; log . info ( 's' ) ; t . e ( console . info ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) ) ; t . it ( 's' , t . inject ( [ LogService ] , ( log ) => { Config . DEBUG . 0 = true ; log . debug ( 's' ) ; t . e ( console . log ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; log . error ( 's' ) ; t . e ( console . error ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; log . warn ( 's' ) ; t . e ( console . warn ) . toHaveBeenCalledWith ( [ 's' ] ) ; log . info ( 's' ) ; t . e ( console . info ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; } ) ) ; t . it ( 's' , t . inject ( [ LogService ] , ( log ) => { Config . DEBUG . 0 = true ; log . debug ( 's' ) ; t . e ( console . log ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; log . error ( 's' ) ; t . e ( console . error ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; log . warn ( 's' ) ; t . e ( console . warn ) . not . toHaveBeenCalledWith ( [ 's' ] ) ; log . info ( 's' ) ; t . e ( console . info ) . toHaveBeenCalledWith ( [ 's' ] ) ; } ) ) ; } ) ; t . describe ( 's' , ( ) => { t . be ( ( ) => { t . spyOn ( _UNKNOWN_ , 's' ) ; Config . RESET ( ) ; } ) ; t . it ( 's' , t . inject ( [ LogService ] , ( log ) => { Config . DEBUG . 0 = true ; log . debug ( 's' ) ; t . e ( _UNKNOWN_ . _UNKNOWN_ ) . not . toHaveBeenCalled ( ) ; log . info ( 's' ) ; t . e ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( < _UNKNOWN_ > { level : LogLevel . Info , message : [ 's' ] } ) ; log . warn ( 's' ) ; t . e ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( < _UNKNOWN_ > { level : LogLevel . Warning , message : [ 's' ] } ) ; log . error ( 's' ) ; t . e ( _UNKNOWN_ . _UNKNOWN_ ) . toHaveBeenCalledWith ( < _UNKNOWN_ > { level : LogLevel . Error , message : [ 's' ] } ) ; } ) ) ; } ) ; } ) ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $complex$ O O O O $any$ O O O O O O O O $LogLevel.Info$ O $any$ O $LogLevel.Info$ O O O O $Promise<void>$ O $any$ O O O $PromiseConstructor$ O $complex$ O O O O O O O $Array$ O $any$ O O O O $any$ O $any$ O $Console$ O $Console$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $complex$ O $complex$ O $boolean$ O O O O $any$ O O O O $void$ O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O O O O O $any$ O $void$ O O O $any$ O $any$ O $Console$ O O O O $any$ O $any$ O $Console$ O O O O $any$ O $any$ O $Console$ O O O O $any$ O $any$ O $Console$ O O O O $any$ O $any$ O O $any[]$ O $any[]$ O O O O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O O O $LogService$ O O O $any$ O $any$ O $LogService$ O $complex$ O O $any$ O O O $any$ O $any$ O $LogService$ O $complex$ O O $any$ O O O $any$ O $any$ O $LogService$ O $complex$ O O $any$ O O O $any$ O $any$ O $LogService$ O $complex$ O O $any$ O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O O O $LogService$ O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O O O O O O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O O O O O $any$ O $void$ O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O O O $LogService$ O O O $any$ O O O $boolean$ O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O O O $LogService$ O O O $any$ O O O $boolean$ O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $any$ O O O $boolean$ O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O O O $LogService$ O O O $any$ O O O $boolean$ O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O O O $LogService$ O O O $any$ O O O $boolean$ O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O $any$ O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $Console$ O $void$ O O $any$ O O O O O O O O O O O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O O O O O $any$ O $any$ O $complex$ O O O O $any$ O $void$ O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O O O $LogService$ O O O $any$ O O O $boolean$ O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $complex$ O $Promise<void>$ O O $any$ O $any$ O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $complex$ O $Promise<void>$ O O $any$ O O $any$ O O $LogLevel.Info$ O $any$ O $LogLevel.Info$ O $string[]$ O O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $complex$ O $Promise<void>$ O O $any$ O O $any$ O O $LogLevel.Warning$ O $any$ O $LogLevel.Warning$ O $string[]$ O O O O O O O $LogService$ O $complex$ O O O O $any$ O $any$ O $complex$ O $Promise<void>$ O O $any$ O O $any$ O O $LogLevel.Error$ O $any$ O $LogLevel.Error$ O $string[]$ O O O O O O O O O O O O O O O O O O O
<s> import { LocationStrategy } from 's' ; import { Injectable , EventEmitter } from 's' ; @ Injectable ( ) export class _UNKNOWN_ extends LocationStrategy { _UNKNOWN_ : string = 's' ; _UNKNOWN_ : string = 's' ; _UNKNOWN_ : string = 's' ; _UNKNOWN_ : string [ ] = [ ] ; _subject : EventEmitter < any > = new EventEmitter ( ) ; constructor ( ) { super ( ) ; } _UNKNOWN_ ( url ) { this . _UNKNOWN_ = url ; this . _subject . emit ( new _UNKNOWN_ ( this . path ( ) ) ) ; } path ( _UNKNOWN_ = false ) { return this . _UNKNOWN_ ; } _UNKNOWN_ ( internal ) { if ( ( < any > internal ) . startsWith ( 's' ) && ( < any > this . _UNKNOWN_ ) . endsWith ( 's' ) ) { return this . _UNKNOWN_ + internal . substring ( 0 ) ; } return this . _UNKNOWN_ + internal ; } _UNKNOWN_ ( ctx , title , path , query ) { this . _UNKNOWN_ = title ; var url = path + ( query . length > 0 ? ( 's' + query ) : 's' ) ; this . _UNKNOWN_ = url ; var _UNKNOWN_ = this . _UNKNOWN_ ( url ) ; this . _UNKNOWN_ . push ( _UNKNOWN_ ) ; } replaceState ( ctx , title , path , query ) { this . _UNKNOWN_ = title ; var url = path + ( query . length > 0 ? ( 's' + query ) : 's' ) ; this . _UNKNOWN_ = url ; var _UNKNOWN_ = this . _UNKNOWN_ ( url ) ; this . _UNKNOWN_ . push ( 's' + _UNKNOWN_ ) ; } _UNKNOWN_ ( fn : ( value ) => void ) { this . _subject . subscribe ( { next : fn } ) ; } _UNKNOWN_ ( ) { return this . _UNKNOWN_ ; } back ( ) { if ( this . _UNKNOWN_ . length > 0 ) { this . _UNKNOWN_ . pop ( ) ; var _UNKNOWN_ = this . _UNKNOWN_ . length > 0 ? this . _UNKNOWN_ [ this . _UNKNOWN_ . length - 0 ] : 's' ; this . _UNKNOWN_ ( _UNKNOWN_ ) ; } } forward ( ) { throw 's' ; } } class _UNKNOWN_ { pop : boolean = true ; type : string = 's' ; constructor ( public newUrl ) { } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string[]$ O O O O O O O O $any$ O $any$ O O O O O $any$ O O O O O O O O O O O O $void$ O $string$ O O O O $string$ O $string$ O O O $any$ O $any$ O O $any$ O O O $string$ O O O O O O $string$ O $boolean$ O O O O O O O $string$ O O $string$ O $string$ O O O O O O O O $string$ O O $any$ O O O O O O O O O O $string$ O O $any$ O O O O O O O O $string$ O $string$ O $string$ O O O O O O O O $string$ O $string$ O O $void$ O $any$ O $string$ O $string$ O $string$ O O O O $string$ O $string$ O O $string$ O $string$ O O $string$ O $number$ O O O O O O $string$ O O O O O O O $string$ O $string$ O O $string$ O O O $string$ O $string$ O O O O $string[]$ O $number$ O $string$ O O O $void$ O $any$ O $string$ O $string$ O $string$ O O O O $string$ O $string$ O O $string$ O $string$ O O $string$ O $number$ O O O O O O $string$ O O O O O O O $string$ O $string$ O O $string$ O O O $string$ O $string$ O O O O $string[]$ O $number$ O O O $string$ O O O $void$ O $void$ O O $any$ O O O O O O O $any$ O $any$ O O $void$ O $void$ O O O O $string$ O O O O O O $string$ O O $void$ O O O O O O O $string[]$ O $number$ O O O O O O $string[]$ O $string$ O O O O $string$ O O O $string[]$ O $number$ O O O O O $string[]$ O O O $string[]$ O $number$ O O O O O O O O $void$ O $string$ O O O O $void$ O O O O O O O O O $any$ O $boolean$ O O O O O $string$ O O O O O O O O $string$ O O O O O
<s> export class _UNKNOWN_ { init ( ) { return null ; } getSettings ( group ? , key ? ) { return { 0 : { _UNKNOWN_ : { code : 's' , title : 's' } , _UNKNOWN_ : [ { code : 's' , title : 's' } ] } , logging : { DEBUG : { 0 : false , 0 : false , 0 : false , 0 : false } } } ; } } </s>	O O O $any$ O $any$ O O O O O O O $any$ O $string$ $string$ O $string$ $string$ O O O O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O O $string$ O O O $string$ O O O O O O O O O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O O O O
<s> import * as _ from 's' ; import { t } from 's' ; import { Config } from 's' ; export function main ( ) { t . describe ( 's' , ( ) => { t . be ( ( ) => Config . RESET ( ) ) ; t . it ( 's' , ( ) => { t . e ( Config . _UNKNOWN_ ) . toBeDefined ( ) ; } ) ; t . it ( 's' , ( ) => { t . e ( _ . keys ( Config . _UNKNOWN_ ) . length ) . toBe ( 0 ) ; t . e ( Config . _UNKNOWN_ ) . toBeDefined ( ) ; t . e ( Config . _UNKNOWN_ . _UNKNOWN_ ) . toBe ( 's' ) ; t . e ( Config . _UNKNOWN_ . _UNKNOWN_ ) . toBe ( 's' ) ; t . e ( Config . _UNKNOWN_ . _UNKNOWN_ ) . toBe ( 's' ) ; t . e ( Config . _UNKNOWN_ . _UNKNOWN_ ) . toBe ( 's' ) ; t . e ( Config . _UNKNOWN_ ) . toBeDefined ( ) ; t . e ( Config . _UNKNOWN_ ) . toBeDefined ( ) ; t . e ( Config . _UNKNOWN_ ) . toBeDefined ( ) ; t . e ( Config . _UNKNOWN_ ) . toBeDefined ( ) ; } ) ; t . it ( 's' , ( ) => { t . e ( Config . DEBUG . 0 ) . toBe ( false ) ; t . e ( Config . DEBUG . 0 ) . toBe ( false ) ; t . e ( Config . DEBUG . 0 ) . toBe ( false ) ; t . e ( Config . DEBUG . 0 ) . toBe ( false ) ; t . e ( Config . _UNKNOWN_ ( ) ) . toBe ( false ) ; } ) ; } ) ; } </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $void$ O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O O O O $any$ O $void$ O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O $boolean$ O O $any$ O O O $any$ O $any$ O $any$ O $boolean$ O O $any$ O O O $any$ O $any$ O $any$ O $boolean$ O O $any$ O O O $any$ O $any$ O $any$ O $boolean$ O O $any$ O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O $any$ O O O $boolean$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $boolean$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $boolean$ O O $any$ O O O O $any$ O $any$ O $any$ O O O $boolean$ O O $any$ O O O O $any$ O $any$ O $any$ O $boolean$ O O O O $any$ O O O O O O O O O O O O
<s> import { t } from 's' ; import { _UNKNOWN_ } from 's' ; export function main ( ) { t . describe ( 's' , ( ) => { t . it ( 's' , ( ) => { const languages = _UNKNOWN_ . _UNKNOWN_ ( ) ; t . e ( languages . length ) . toBe ( 0 ) ; t . e ( languages [ 0 ] . code ) . toBe ( 's' ) ; t . e ( languages [ 0 ] . code ) . toBe ( 's' ) ; t . e ( languages [ 0 ] . code ) . toBe ( 's' ) ; t . e ( languages [ 0 ] . code ) . toBe ( 's' ) ; t . e ( languages [ 0 ] . code ) . toBe ( 's' ) ; } ) ; } ) ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $void$ O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $number$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $string$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $string$ O O $any$ O O O O O O O O O O O O
<s> export * from 's' ; </s>	O O O O O O O
<s> import { EventEmitter } from 's' ; import { Observable } from 's' ; import 's' ; export class _UNKNOWN_ { public _UNKNOWN_ : EventEmitter < any > = new EventEmitter ( ) ; public _UNKNOWN_ : EventEmitter < any > = new EventEmitter ( ) ; public _UNKNOWN_ ( lang ) { return { 's' : 's' } ; } public use ( lang ) { } public get ( key : string | Array < string > , _UNKNOWN_ ? ) < string | any > { return Observable . of ( key ) ; } public _UNKNOWN_ ( lang ) { return ; } public _UNKNOWN_ ( ) { return [ 's' ] ; } public _UNKNOWN_ ( lang ) < string > { return Observable . of ( 's' ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $string$ O O O O O O O O O O O $void$ O $string$ O O O O $Observable$ O $complex$ O O O $ArrayConstructor$ O O O O $Object$ $Object$ O O O O O O O O $any$ O $any$ O $complex$ O O O O $void$ O $string$ O O O O O O $string[]$ O O O O O O O O O O $Observable$ O $string$ O O O O O O $any$ O $any$ O O O O O O O
<s> export class _UNKNOWN_ { } </s>	O O O $any$ O O O
<s> import { TranslateService , TranslateLoader } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; export function _UNKNOWN_ ( ) < any > { let providers < any > = [ { provide : TranslateLoader , useClass : _UNKNOWN_ } , { provide : TranslateService , useClass : _UNKNOWN_ } , _UNKNOWN_ ] ; return providers ; } export function _UNKNOWN_ ( ) < any > { return [ { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } ] ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $Array$ O O O O O O O $Array$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any[]$ O O O O $Array$ O O O O O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O
<s> import { TestBed } from 's' ; import { Component } from 's' ; import { RouterTestingModule } from 's' ; import { StoreModule } from 's' ; import { t } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , LogLevel } from 's' ; import { CoreModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { SharedModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , reducer , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = ( languages ? < _UNKNOWN_ > ) => { let providers = [ _UNKNOWN_ ( LogLevel . Debug ) , { provide : _UNKNOWN_ , useValue : null } ] ; if ( languages ) { providers . push ( { provide : _UNKNOWN_ , useValue : languages } ) ; } TestBed . configureTestingModule ( { imports : [ CoreModule . forRoot ( [ { provide : _UNKNOWN_ , useValue : window } , { provide : _UNKNOWN_ , useValue : console } ] ) , SharedModule , RouterTestingModule , _UNKNOWN_ , _UNKNOWN_ , StoreModule . _UNKNOWN_ ( { 0 : reducer } ) ] , declarations : [ TestComponent ] , providers } ) ; TestBed . compileComponents ( ) ; } ; export function main ( ) { t . describe ( 's' , ( ) => { t . describe ( 's' , ( ) => { t . be ( t . async ( ( ) => _UNKNOWN_ ( [ { code : 's' , title : 's' } ] ) ) ) ; t . it ( 's' , ( ) => { let fixture = TestBed . createComponent ( TestComponent ) ; fixture . detectChanges ( ) ; let _UNKNOWN_ = fixture . debugElement . children [ 0 ] . nativeElement ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) . length ) . toBe ( 0 ) ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) [ 0 ] . value ) . toBe ( 's' ) ; } ) ; } ) ; t . describe ( 's' , ( ) => { t . be ( t . async ( ( ) => _UNKNOWN_ ( _UNKNOWN_ ( ) ) ) ) ; t . it ( 's' , ( ) => { let fixture = TestBed . createComponent ( TestComponent ) ; fixture . detectChanges ( ) ; let _UNKNOWN_ = fixture . debugElement . children [ 0 ] . nativeElement ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) . length ) . toBe ( 0 ) ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) [ 0 ] . value ) . toBe ( 's' ) ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) [ 0 ] . value ) . toBe ( 's' ) ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) [ 0 ] . value ) . toBe ( 's' ) ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) [ 0 ] . value ) . toBe ( 's' ) ; t . e ( _UNKNOWN_ . querySelectorAll ( 's' ) [ 0 ] . value ) . toBe ( 's' ) ; } ) ; } ) ; } ) ; } @ Component ( { selector : 's' , template : 's' } ) class TestComponent { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any[]$ O O O O O $void$ O O $any$ $Array$ O $any$ O O O O O $any[]$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $null$ O O O O O O O $any$ O O $any[]$ O $number$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O O $any$ O $any$ O $complex$ O $complex$ O O O $any$ O $any$ O $Console$ O $Console$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $complex$ O O $any$ O O $any[]$ O O O $any$ O $any$ O O O O O O O $void$ O O O $any$ O $Function$ O O O O O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O $any$ O $Function$ O O O O $void$ O O O $string$ O O O $string$ O O O O O O O O $any$ O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O O O O O O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O $any$ O $Function$ O O O O $void$ O $any[]$ O O O O O O $any$ O $void$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O O O O O O O O O O O O O O $any$ O O $string$ O O O $string$ O O O O O $any$ O O O
<s> import { TestBed } from 's' ; import { RouterTestingModule } from 's' ; import { Store , StoreModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { 0 , 0 } from 's' ; import { t } from 's' ; import { CoreModule , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , reducer , _UNKNOWN_ , _UNKNOWN_ } from 's' ; const _UNKNOWN_ = ( options ? ) => { let _UNKNOWN_ = [ ] ; if ( options . languages ) { _UNKNOWN_ . push ( { provide : _UNKNOWN_ , useValue : options . languages } ) ; } TestBed . configureTestingModule ( { imports : [ CoreModule . forRoot ( [ { provide : _UNKNOWN_ , useValue : window } , { provide : _UNKNOWN_ , useValue : console } ] ) , 0 . forRoot ( [ 0 ] ) , StoreModule . _UNKNOWN_ ( { 0 : reducer } ) , _UNKNOWN_ . run ( _UNKNOWN_ ) , RouterTestingModule ] , providers : [ _UNKNOWN_ ( options ) , _UNKNOWN_ ( ) , _UNKNOWN_ ] } ) ; TestBed . compileComponents ( ) ; } ; export function main ( ) { t . describe ( 's' , ( ) => { t . describe ( 's' , ( ) => { t . be ( t . async ( ( ) => { _UNKNOWN_ ( { languages : [ { code : 's' , title : 's' } ] } ) ; } ) ) ; t . it ( 's' , t . inject ( [ _UNKNOWN_ ] , ( languages , store < any > ) => { t . e ( languages . length ) . toBe ( 0 ) ; t . e ( languages [ 0 ] . code ) . toBe ( 's' ) ; } ) ) ; t . it ( 's' , t . inject ( [ _UNKNOWN_ , Store ] , ( _UNKNOWN_ , store < any > ) => { store . dispatch ( new _UNKNOWN_ ( 's' ) ) ; store . select ( 's' ) . subscribe ( ( 0 ) => { t . e ( 0 . lang ) . toBe ( 's' ) ; } ) ; } ) ) ; } ) ; t . describe ( 's' , ( ) => { t . be ( t . async ( ( ) => { _UNKNOWN_ ( { window : _UNKNOWN_ , languages : [ { code : 's' , title : 's' } , { code : 's' , title : 's' } ] } ) ; } ) ) ; t . it ( 's' , t . inject ( [ _UNKNOWN_ , Store , _UNKNOWN_ , _UNKNOWN_ ] , ( _UNKNOWN_ , store < any > , win , languages ) => { t . e ( languages . length ) . toBe ( 0 ) ; t . e ( languages [ 0 ] . code ) . toBe ( 's' ) ; t . e ( languages [ 0 ] . code ) . toBe ( 's' ) ; t . e ( win . navigator . language ) . toBe ( 's' ) ; store . select ( 's' ) . subscribe ( ( 0 ) => { t . e ( 0 . lang ) . toBe ( 's' ) ; } ) ; } ) ) ; } ) ; } ) ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any[]$ O $any$ O O O O O O $any[]$ O $any[]$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O O $any$ $any$ O O O O $any[]$ O O O O O O $any$ O $any$ O O $any[]$ O $number$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O O O $any$ O $any$ O $complex$ O $complex$ O O O $any$ O $any$ O $Console$ O $Console$ O O O O $any$ O $any$ O O $any$ O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any[][]$ O O $any[]$ O $any$ O O $any[]$ O O O $any[]$ O O O O $any$ O $any$ O O O O O O O $void$ O O O $any$ O $Function$ O O O O O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O $any$ O $Function$ O O O O O $void$ O O $complex$ O O O $string$ O O O $string$ O O O O O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O O O $any$ O $Store$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O $any$ O O O $any$ O $Store$ O O O O O O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O O O O O O O O O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O $any$ O $Function$ O O O O O $void$ O O $any$ O $any$ O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O O O O O $any$ O $void$ O O O $any$ O $Function$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $Store$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O O O O O O O O O O O O O O O O O O
<s> export class _UNKNOWN_ { init ( ) { return null ; } getSettings ( group ? , key ? ) { return { 0 : { _UNKNOWN_ : { code : 's' , title : 's' } , _UNKNOWN_ : [ { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } , { code : 's' , title : 's' } ] } , logging : { DEBUG : { 0 : false , 0 : false , 0 : false , 0 : false } } } ; } } </s>	O O O $any$ O $any$ O O O O O O O $any$ O $string$ $string$ O $string$ $string$ O O O O $complex$ O O $complex$ O O $string$ O O O $string$ O O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O O O O O O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O O O O
<s> import { TestBed , getTestBed } from 's' ; import { Injector } from 's' ; import { FormsModule } from 's' ; import { RouterTestingModule } from 's' ; import { ResponseOptions , Response , _UNKNOWN_ , HttpModule } from 's' ; import { MockBackend , _UNKNOWN_ } from 's' ; import { Store , StoreModule } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { t } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , reducer , _UNKNOWN_ } from 's' ; const _UNKNOWN_ = ( ) => { TestBed . configureTestingModule ( { imports : [ FormsModule , _UNKNOWN_ , StoreModule . _UNKNOWN_ ( { sample : reducer } ) , _UNKNOWN_ , HttpModule , RouterTestingModule ] , providers : [ _UNKNOWN_ , _UNKNOWN_ , { provide : _UNKNOWN_ , useClass : MockBackend } ] } ) ; } ; const _UNKNOWN_ = ( connection , response ) => { connection . mockRespond ( new Response ( new ResponseOptions ( { body : response } ) ) ) ; } ; export function main ( ) { t . describe ( 's' , ( ) => { let injector ; let backend ; let _UNKNOWN_ ; let store < any > ; let runner ; let _UNKNOWN_ ; let connection ; t . be ( ( ) => { _UNKNOWN_ ( ) ; injector = getTestBed ( ) ; backend = < any > injector . get ( _UNKNOWN_ ) ; store = injector . get ( Store ) ; runner = injector . get ( _UNKNOWN_ ) ; _UNKNOWN_ = injector . get ( _UNKNOWN_ ) ; backend . connections . subscribe ( ( c ) => connection = c ) ; _UNKNOWN_ = injector . get ( _UNKNOWN_ ) ; } ) ; t . it ( 's' , ( ) => { runner . queue ( new _UNKNOWN_ . _UNKNOWN_ ( ) ) ; _UNKNOWN_ . _UNKNOWN_ . subscribe ( result => { t . e ( result ) . toEqual ( new _UNKNOWN_ . _UNKNOWN_ ( [ 's' , 's' ] ) ) ; } ) ; _UNKNOWN_ ( connection , 's' ) ; } ) ; t . it ( 's' , ( ) => { runner . queue ( new _UNKNOWN_ . _UNKNOWN_ ( 's' ) ) ; _UNKNOWN_ . _UNKNOWN_ . subscribe ( result => { t . e ( result ) . toEqual ( new _UNKNOWN_ . _UNKNOWN_ ( 's' ) ) ; } ) ; } ) ; } ) ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O O O O O $any$ O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $complex$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O $MockConnection$ O $string$ O O O $any$ O $any$ O O $any$ O O $any$ O O $string$ O $string$ O O O O O O O O O $void$ O O O $any$ O $Function$ O O O O O O O O $Injector$ O O $MockBackend$ O O $any$ O O $Store$ O O O O O $any$ O O $any$ O O $MockConnection$ O $any$ O $void$ O O O O O $void$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $MockConnection$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O O O O O O O O $void$ O $any$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O O O O O O O O O O O O O O O O
<s> process . env . NODE_ENV = process . env . NODE_ENV || 's' ; console . log ( `template` ) ; const electron = require ( 's' ) ; const app = electron . app ; const Menu = electron . Menu ; const shell = electron . shell ; const BrowserWindow = electron . BrowserWindow ; let mainWindow = null ; let template ; let menu ; import { _UNKNOWN_ } from 's' ; if ( process . env . NODE_ENV === 's' ) { require ( 's' ) ( ) ; } app . on ( 's' , ( ) => { if ( process . platform !== 's' ) { app . quit ( ) ; } } ) ; app . on ( 's' , ( ) => { mainWindow = new BrowserWindow ( { width : 0 , height : 0 } ) ; mainWindow . _UNKNOWN_ ( 's' + __dirname + 's' ) ; mainWindow . on ( 's' , ( ) => { mainWindow = null ; } ) ; mainWindow . webContents . on ( 's' , ( e , url ) => { console . log ( `template` ) ; } ) ; let _UNKNOWN_ = `template` ; let _UNKNOWN_ = { label : 's' , _UNKNOWN_ : [ ] } ; for ( var lang of _UNKNOWN_ . _UNKNOWN_ ( ) ) { let code = lang . code ; let _UNKNOWN_ = { label : lang . title , click : ( ) => { console . log ( `template` ) ; mainWindow . webContents . _UNKNOWN_ ( `template` ) ; } } ; _UNKNOWN_ . _UNKNOWN_ . push ( _UNKNOWN_ ) ; } let _UNKNOWN_ = { label : 's' , _UNKNOWN_ : [ { label : 's' , click : ( ) => { shell . openExternal ( 's' ) ; } } , { label : 's' , click : ( ) => { shell . openExternal ( 's' ) ; } } , { label : `template` , click : ( ) => { shell . openExternal ( 's' ) ; } } , { label : 's' , click : ( ) => { shell . openExternal ( 's' ) ; } } , { label : 's' , click : ( ) => { shell . openExternal ( 's' ) ; } } , { label : 's' , click : ( ) => { shell . openExternal ( 's' ) ; } } , { label : 's' , click : ( ) => { shell . openExternal ( 's' ) ; } } ] } ; if ( process . platform === 's' ) { template = [ { label : _UNKNOWN_ , _UNKNOWN_ : [ { label : `template` , selector : 's' } , { type : 's' } , { label : 's' , _UNKNOWN_ : [ ] } , { type : 's' } , { label : 's' , _UNKNOWN_ : 's' , selector : 's' } , { label : 's' , _UNKNOWN_ : 's' , selector : 's' } , { label : 's' , selector : 's' } , { type : 's' } , { label : 's' , _UNKNOWN_ : 's' , click : ( ) => { app . quit ( ) ; } } ] } , { label : 's' , _UNKNOWN_ : [ { label : 's' , _UNKNOWN_ : 's' , selector : 's' } , { label : 's' , _UNKNOWN_ : 's' , selector : 's' } , { type : 's' } , { label : 's' , _UNKNOWN_ : 's' , selector : 's' } , { label : 's' , _UNKNOWN_ : 's' , selector : 's' } , { label : 's' , _UNKNOWN_ : 's' , selector : 's' } , { label : 's' , _UNKNOWN_ : 's' , selector : 's' } ] } , { label : 's' , _UNKNOWN_ : ( process . env . NODE_ENV === 's' ) ? [ { label : 's' , _UNKNOWN_ : 's' , click : ( ) => { mainWindow . reload ( ) ; } } , { label : 's' , _UNKNOWN_ : 's' , click : ( ) => { mainWindow . _UNKNOWN_ ( ! mainWindow . _UNKNOWN_ ( ) ) ; } } , { label : 's' , _UNKNOWN_ : 's' , click : ( ) => { mainWindow . _UNKNOWN_ ( ) ; } } ] : [ { label : 's' , _UNKNOWN_ : 's' , click : ( ) => { mainWindow . _UNKNOWN_ ( ! mainWindow . _UNKNOWN_ ( ) ) ; } } ] } , { label : 's' , _UNKNOWN_ : [ { label : 's' , _UNKNOWN_ : 's' , selector : 's' } , { label : 's' , _UNKNOWN_ : 's' , selector : 's' } , { type : 's' } , { label : 's' , selector : 's' } ] } , _UNKNOWN_ , _UNKNOWN_ ] ; menu = Menu . _UNKNOWN_ ( template ) ; Menu . _UNKNOWN_ ( menu ) ; } else { template = [ { label : 's' , _UNKNOWN_ : [ { label : 's' , _UNKNOWN_ : 's' } , { label : 's' , _UNKNOWN_ : 's' , click : ( ) => { mainWindow . close ( ) ; } } ] } , { label : 's' , _UNKNOWN_ : ( process . env . NODE_ENV === 's' ) ? [ { label : 's' , _UNKNOWN_ : 's' , click : ( ) => { mainWindow . reload ( ) ; } } , { label : 's' , _UNKNOWN_ : 's' , click : ( ) => { mainWindow . _UNKNOWN_ ( ! mainWindow . _UNKNOWN_ ( ) ) ; } } , { label : 's' , _UNKNOWN_ : 's' , click : ( ) => { mainWindow . _UNKNOWN_ ( ) ; } } ] : [ { label : 's' , _UNKNOWN_ : 's' , click : ( ) => { mainWindow . _UNKNOWN_ ( ! mainWindow . _UNKNOWN_ ( ) ) ; } } ] } , _UNKNOWN_ , _UNKNOWN_ ] ; menu = Menu . _UNKNOWN_ ( template ) ; mainWindow . _UNKNOWN_ ( menu ) ; } } ) ; </s>	O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $Console$ O $void$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O $any$ O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O O $any$ O O $number$ O O O $number$ O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $string$ O O O $Console$ O $void$ O O O O O O O O $string$ O O O O $any$ O O $string$ O O O $undefined[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O O $string$ O $any$ O $string$ O O $complex$ O O $string$ O $any$ O $string$ O $void$ O O O O O $Console$ O $void$ O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $complex$ O O O O $any$ O O $string$ O O O $complex$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O O $string$ O $string$ O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O $undefined[]$ O O O O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O O O $string$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $string$ O O O O O $string$ O O O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O O $string$ O O O $complex$ O O $any$ O $any$ O $any$ O O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O O O O O O O O $string$ O O O $string$ O O O $void$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O
<s> import { enableProdMode } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; enableProdMode ( ) ; _UNKNOWN_ ( ) . _UNKNOWN_ ( _UNKNOWN_ ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O
<s> import { NgModule } from 's' ; import { APP_BASE_HREF } from 's' ; import { BrowserModule } from 's' ; import { RouterModule } from 's' ; import { Http } from 's' ; import { StoreModule } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; import { TranslateLoader } from 's' ; import { _UNKNOWN_ , AppComponent } from 's' ; import { routes } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , LogLevel , _UNKNOWN_ } from 's' ; import { CoreModule , Config } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; Config . _UNKNOWN_ = Config . _UNKNOWN_ . _UNKNOWN_ ; if ( String ( 's' ) === 's' ) { Config . DEBUG . 0 = true ; } let _UNKNOWN_ = RouterModule . forRoot ( routes ) ; if ( String ( 's' ) === 's' ) { Config . _UNKNOWN_ = Config . _UNKNOWN_ . _UNKNOWN_ ; _UNKNOWN_ = RouterModule . forRoot ( routes , { useHash : true } ) ; } declare var window , console , localStorage ; export function win ( ) { return window ; } export function storage ( ) { return localStorage ; } export function _UNKNOWN_ ( ) { return console ; } export function _UNKNOWN_ ( _UNKNOWN_ ) { return new _UNKNOWN_ ( _UNKNOWN_ , { _UNKNOWN_ : LogLevel . Debug } ) ; } let _UNKNOWN_ : any [ ] = [ ] ; if ( String ( 's' ) === 's' ) { _UNKNOWN_ = [ ... _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ ( ) ] ; } @ NgModule ( { imports : [ BrowserModule , CoreModule . forRoot ( [ { provide : _UNKNOWN_ , useFactory : ( win ) } , { provide : _UNKNOWN_ , useFactory : ( storage ) } , { provide : _UNKNOWN_ , useFactory : ( _UNKNOWN_ ) } , { provide : _UNKNOWN_ , useFactory : ( _UNKNOWN_ ) , deps : [ _UNKNOWN_ ] , multi : true } ] ) , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ . forRoot ( [ { provide : TranslateLoader , deps : [ Http ] , useFactory : ( _UNKNOWN_ ) } ] ) , _UNKNOWN_ , StoreModule . _UNKNOWN_ ( _UNKNOWN_ ) , _UNKNOWN_ . run ( _UNKNOWN_ ) , _UNKNOWN_ . run ( _UNKNOWN_ ) , _UNKNOWN_ , ] , declarations : [ _UNKNOWN_ ] , providers : [ { provide : APP_BASE_HREF , useValue : 's' } , { provide : _UNKNOWN_ , useValue : Config . _UNKNOWN_ ( ) } ] , bootstrap : [ AppComponent ] } ) export class _UNKNOWN_ { } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any[]$ O $any$ O O O O O O $any[]$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $string$ O $any$ O $any$ O $string$ O O O $StringConstructor$ O O O O O O O $any$ O O O $boolean$ O O O O O $any$ O $any$ O $any$ O $any[]$ O O O O $StringConstructor$ O O O O O O O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any[]$ O O $boolean$ O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any[]$ O O O O O O O O O O $StringConstructor$ O O O O O O O $any[]$ O O O $any[]$ O $any$ O $any$ O O O O O O $any$ O O $any[]$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O $complex$ O O $any$ O O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any[]$ O O $any$ O O $any$ O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any[]$ O O O $any[][]$ O O $any[]$ O O $complex$ O O O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $complex$ O $any$ O $complex$ O O O O O $complex$ O O $any$ O O O O O $any$ O O O
<s> import { enableProdMode } from 's' ; import { platformBrowserDynamic } from 's' ; import { _UNKNOWN_ } from 's' ; if ( String ( 's' ) === 's' || String ( 's' ) === 's' ) { enableProdMode ( ) ; } platformBrowserDynamic ( ) . bootstrapModule ( _UNKNOWN_ ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $StringConstructor$ O O O O O O $StringConstructor$ O O O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O
<s> declare var System : _UNKNOWN_ . System ; System . config ( JSON . parse ( 's' ) ) ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $JSON$ O $any$ O O O O O O
<s> export function _UNKNOWN_ ( selector , index , milliseconds ) { element ( by . css ( selector ) ) . all ( by . tagName ( 's' ) ) . then ( function ( options ) { options [ index ] . click ( ) ; } ) ; if ( typeof milliseconds !== 's' ) { browser . sleep ( milliseconds ) ; } } export async function _UNKNOWN_ ( selector , item ) { return await element ( by . css ( selector ) ) . sendKeys ( item ) ; } export function _UNKNOWN_ ( selector , milliseconds ) { element ( by . css ( selector ) ) . all ( by . tagName ( 's' ) ) . then ( function ( options ) { var _UNKNOWN_ = Math . floor ( ( Math . random ( ) * options . length ) ) ; options [ _UNKNOWN_ ] . click ( ) ; return options [ _UNKNOWN_ ] . getText ( ) . then ( function ( text ) { return text ; } ) ; } ) ; if ( typeof milliseconds !== 's' ) { browser . sleep ( milliseconds ) ; } } </s>	O O O $void$ O $string$ O $number$ O $number$ O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O $any$ O $number$ O O $any$ O O O O O O O O O $number$ O O O O $any$ O $any$ O $number$ O O O O O O O $Promise<any>$ O $string$ O $string$ O O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $string$ O O O O O $void$ O $string$ O $number$ O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O $number$ O $Math$ O $number$ O O $Math$ O $number$ O O O $any$ O $any$ O O O $any$ O $number$ O O $any$ O O O O $any$ O $number$ O O $any$ O O O $any$ O O O $string$ O O O $string$ O O O O O O O O O O $number$ O O O O $any$ O $any$ O $number$ O O O O O
<s> import { async , fakeAsync , inject , tick } from 's' ; export interface _UNKNOWN_ { _UNKNOWN_ : Function ; afterEach : Function ; describe : Function ; _UNKNOWN_ : Function ; _UNKNOWN_ : Function ; async ( fn ) : Function ; fakeAsync ( fn ) : Function ; be ( fn ) : void ; beforeEach ( fn ) : void ; e ( actual ) : jasmine . _UNKNOWN_ ; expect ( actual ) : jasmine . _UNKNOWN_ ; fail ( e ? ) : void ; inject ( tokens < any > , fn ) : Function ; it ( name , fn , _UNKNOWN_ ? ) : void ; _UNKNOWN_ ( name , fn , _UNKNOWN_ ? ) : void ; xit ( name , fn , _UNKNOWN_ ? ) : void ; pending ( reason ? ) : void ; spyOn ( object , method ) : jasmine . Spy ; tick ( delay ? ) : void ; } export const 0 = { _UNKNOWN_ : afterEach , afterEach : afterEach , describe : describe , _UNKNOWN_ : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ , async : async , fakeAsync : fakeAsync , be : beforeEach , beforeEach : beforeEach , e : expect , expect : expect , fail : fail , inject : inject , it : it , _UNKNOWN_ : _UNKNOWN_ , xit : xit , pending : pending , spyOn : spyOn , tick : tick } ; </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $FunctionConstructor$ O $Function$ O $Function$ O O $FunctionConstructor$ O $Function$ O $Function$ O O $FunctionConstructor$ O $void$ O $Function$ O O O O $void$ O $Function$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $void$ O $any$ $any$ O O O O $Function$ O $Array$ O O O O $Function$ O O $FunctionConstructor$ O $void$ O $string$ O $Function$ O $number$ $number$ O O O O $void$ O $string$ O $Function$ O $number$ $number$ O O O O $void$ O $string$ O $Function$ O $number$ $number$ O O O O $void$ O $string$ $string$ O O O O $any$ O $any$ O $string$ O O $any$ O $any$ O $void$ O $number$ $number$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O
<s> import { 0 , _UNKNOWN_ } from 's' ; export const t = 0 ; export * from 's' ; export * from 's' ; </s>	O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O O O
<s> import { browser , element , by } from 's' ; describe ( 's' , ( ) => { beforeEach ( async ( ) => { return await browser . get ( 's' ) ; } ) ; it ( 's' , ( ) => { expect ( element ( by . css ( 's' ) ) . getText ( ) ) . toEqual ( 's' ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O O
<s> import { t } from 's' ; import { browser , element , by } from 's' ; t . describe ( 's' , function ( ) { t . be ( async function ( ) { return await browser . get ( 's' ) ; } ) ; t . it ( 's' , function ( ) { t . e ( browser . getTitle ( ) ) . toEqual ( 's' ) ; } ) ; t . it ( 's' , function ( ) { t . e ( element ( by . css ( 's' ) ) . isPresent ( ) ) . toEqual ( true ) ; } ) ; t . it ( 's' , function ( ) { t . e ( element ( by . css ( 's' ) ) . getText ( ) ) . toEqual ( 's' ) ; } ) ; t . it ( 's' , function ( ) { t . e ( element ( by . css ( 's' ) ) . getText ( ) ) . toEqual ( 's' ) ; } ) ; t . it ( 's' , function ( ) { t . e ( element ( by . css ( 's' ) ) . isPresent ( ) ) . toEqual ( true ) ; t . e ( element . all ( by . css ( 's' ) ) . count ( ) ) . toEqual ( 0 ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $Function$ O O O O O O O $any$ O $void$ O O O O O O O O $any$ O $any$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O $any$ O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O O
<s> import { browser , element , by } from 's' ; describe ( 's' , ( ) => { beforeEach ( async ( ) => { return await browser . get ( 's' ) ; } ) ; it ( 's' , ( ) => { expect ( element ( by . css ( 's' ) ) . isPresent ( ) ) . toEqual ( true ) ; } ) ; it ( 's' , ( ) => { expect ( element ( by . css ( 's' ) ) . getText ( ) ) . toEqual ( 's' ) ; } ) ; it ( 's' , ( ) => { element ( by . css ( 's' ) ) . sendKeys ( 's' ) ; element ( by . css ( 's' ) ) . click ( ) ; expect ( element ( by . css ( 's' ) ) . getText ( ) ) . toEqual ( 's' ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O O
<s> import * as gulp from 's' ; import { argv } from 's' ; require ( 's' ) ; const _UNKNOWN_ = argv [ 's' ] ; if ( ! _UNKNOWN_ ) { throw new Error ( 's' ) ; } console . log ( 's' ) ; console . log ( 's' ) ; console . log ( 's' , _UNKNOWN_ ) ; console . log ( 's' ) ; gulp . start ( _UNKNOWN_ ) ; </s>	O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O $ErrorConstructor$ O O O O O $Console$ O $void$ O O O O $Console$ O $void$ O O O O $Console$ O $void$ O O O $any$ O O $Console$ O $void$ O O O O $any$ O $any$ O $any$ O O O
<s> export { _UNKNOWN_ } from 's' ; </s>	O O O $any$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { API : 's' } ; export = _UNKNOWN_ ; </s>	O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O O
<s> import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { ENV : 's' } ; export = _UNKNOWN_ ; </s>	O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O O
<s> import { _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { ENV : 's' } ; export = _UNKNOWN_ ; </s>	O O O $any$ O O O O O $any$ O O $string$ O O O O O O $any$ O O
<s> import { Task } from 's' ; export abstract class _UNKNOWN_ extends Task { _UNKNOWN_ ( files : String [ ] ) { return files . reduce ( ( a , f ) => { return a || ( ! f . endsWith ( 's' ) && ! f . endsWith ( 's' ) && ! f . endsWith ( 's' ) && ! f . endsWith ( 's' ) ) ; } , false ) ; } } </s>	O O O $any$ O O O O O O O $any$ O $any$ O $boolean$ O $String[]$ O $StringConstructor$ O O O O O $String[]$ O $complex$ O O $boolean$ O $String$ O O O O $boolean$ O O O $String$ O $boolean$ O O O O O $String$ O $boolean$ O O O O O $String$ O $boolean$ O O O O O $String$ O $boolean$ O O O O O O O O O O O O O
<s> import { Task } from 's' ; import Config from 's' ; export abstract class _UNKNOWN_ extends Task { _UNKNOWN_ ( files : String [ ] ) { return Config . _UNKNOWN_ || files . some ( f => f . endsWith ( 's' ) || f . endsWith ( 's' ) || f . endsWith ( 's' ) ) ; } } </s>	O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $String[]$ O $StringConstructor$ O O O O O $any$ O $any$ O $String[]$ O $boolean$ O $String$ O $String$ O $boolean$ O O O O $String$ O $boolean$ O O O O $String$ O $boolean$ O O O O O O O O
<s> import * as gulp from 's' ; import { join } from 's' ; var _UNKNOWN_ = require ( 's' ) ; import Config from 's' ; export = ( ) => { let src = [ join ( Config . _UNKNOWN_ , 's' ) ] ; return gulp . src ( src ) . pipe ( _UNKNOWN_ ( { dest : Config . _UNKNOWN_ , map : function ( path ) { return path . replace ( 's' , 's' ) . replace ( 's' , 's' ) ; } } ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } ; </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O O O O O O O $any[]$ O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any[]$ O O $any$ O $any$ O O $string$ O $any$ O $string$ O $string$ O O O $String$ O O O $String$ O $complex$ O O O O O O $complex$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O
<s> import * as gulp from 's' ; import { _UNKNOWN_ } from 's' ; import { relative , join } from 's' ; import Config from 's' ; var _UNKNOWN_ = require ( 's' ) ; export = ( ) => { let src = [ 's' , 's' ] ; let _UNKNOWN_ : _UNKNOWN_ [ ] = Config . _UNKNOWN_ ; _UNKNOWN_ . forEach ( ( pkg ) => { if ( typeof ( pkg . name ) !== 's' ) { src . push ( `template` ) ; } } ) ; src . push ( ... Config . _UNKNOWN_ . map ( x => relative ( Config . _UNKNOWN_ , x . src ) ) ) ; return gulp . src ( src , { base : 's' } ) . pipe ( _UNKNOWN_ ( { dest : join ( Config . _UNKNOWN_ + 's' ) , map : function ( path ) { return path . replace ( 's' , 's' ) . replace ( 's' , 's' ) ; } } ) ) . pipe ( gulp . dest ( join ( Config . _UNKNOWN_ + 's' ) ) ) ; } ; </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O O O $string[]$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $void$ O O $any$ O O O O O O O $any$ O $string$ O O O O O $string[]$ O $number$ O O O O O O O O $string[]$ O $number$ O O $any$ O $any$ O $U[]$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O $string[]$ O O $string$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O $string$ O O O $String$ O O O $String$ O $complex$ O O O O O O $complex$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O O O O
<s> import * as gulp from 's' ; var _UNKNOWN_ = require ( 's' ) ; var electron = require ( 's' ) ; export = ( ) => { let src = [ 's' ] ; return gulp . src ( src , { base : 's' } ) . pipe ( electron ( { version : 's' , platform : 's' } ) ) . pipe ( _UNKNOWN_ ( 's' ) ) ; } ; </s>	O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O $string[]$ O O O O O O $any$ O $any$ O $string[]$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O O O O O O O
<s> import * as gulp from 's' ; var _UNKNOWN_ = require ( 's' ) ; var electron = require ( 's' ) ; export = ( ) => { let src = [ 's' ] ; return gulp . src ( src , { base : 's' } ) . pipe ( electron ( { version : 's' , platform : 's' , _UNKNOWN_ : 's' } ) ) . pipe ( _UNKNOWN_ ( 's' ) ) ; } ; </s>	O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O $string[]$ O O O O O O $any$ O $any$ O $string[]$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O O O O O O O
<s> import * as gulp from 's' ; var _UNKNOWN_ = require ( 's' ) ; var electron = require ( 's' ) ; export = ( ) => { let src = [ 's' ] ; return gulp . src ( src , { base : 's' } ) . pipe ( electron ( { version : 's' , platform : 's' , _UNKNOWN_ : 's' } ) ) . pipe ( _UNKNOWN_ ( 's' ) ) ; } ; </s>	O O O O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O $string[]$ O O O O O O $any$ O $any$ O $string[]$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O O O O $any$ O $any$ O O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; const electron = require ( 's' ) . server . create ( { 's' : 's' } ) ; export = ( ) => { electron . start ( ) ; gulp . watch ( [ 's' ] , reload ) ; } ; function reload ( ) { _UNKNOWN_ ( 's' , electron . reload ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $void$ O O O O O $void$ O O O $any$ O O O $any$ O $any$ O O O O
<s> import * as gulp from 's' ; import { join } from 's' ; import { _UNKNOWN_ } from 's' ; import Config from 's' ; export = class _UNKNOWN_ extends _UNKNOWN_ { run ( done ) { let paths : string [ ] = [ join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' , 's' , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) ] . concat ( Config . _UNKNOWN_ . map ( ( p ) => { return 's' + p ; } ) ) ; return gulp . src ( paths ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } } ; </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O $string[]$ O O O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O $complex$ O $any$ O $string[]$ O $U[]$ O O $string$ O O O O O O $string$ O O O O O O $any$ O $any$ O $string[]$ O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O O
<s> import * as gulp from 's' ; import { join } from 's' ; import Config from 's' ; var _UNKNOWN_ = function ( _UNKNOWN_ ) { return _UNKNOWN_ . map ( function ( file , cb ) { if ( file . stat . isFile ( ) ) { return cb ( null , file ) ; } else { return cb ( ) ; } } ) ; } ; export = ( ) => { let _UNKNOWN_ = require ( 's' ) ; return gulp . src ( [ join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' , 's' , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) ] . concat ( Config . _UNKNOWN_ . map ( ( p ) => { return 's' + p ; } ) ) ) . pipe ( _UNKNOWN_ ( _UNKNOWN_ ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } ; </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O O O $any$ O O O O O O O O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O $complex$ O $any$ O $string[]$ O $U[]$ O O $string$ O O O O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O
<s> import * as gulp from 's' ; import * as merge from 's' ; import { join } from 's' ; import * as _UNKNOWN_ from 's' ; import { _UNKNOWN_ } from 's' ; import Config from 's' ; function copyFiles ( paths : string [ ] , _UNKNOWN_ ) { const dest = join ( Config . _UNKNOWN_ , _UNKNOWN_ ) ; return gulp . src ( paths ) . pipe ( _UNKNOWN_ ( dest ) ) . pipe ( gulp . dest ( dest ) ) ; } function _UNKNOWN_ ( ) { const paths : string [ ] = [ join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' , 's' , 's' ) , ] . concat ( Config . _UNKNOWN_ . map ( ( p ) => { return 's' + p ; } ) ) ; return copyFiles ( paths , 's' ) ; } function _UNKNOWN_ ( ) { const paths : string [ ] = [ join ( Config . _UNKNOWN_ , 's' , 's' ) , ] ; return copyFiles ( paths , 's' ) ; } function _UNKNOWN_ ( ) { const paths : string [ ] = [ join ( Config . _UNKNOWN_ , 's' , 's' , 's' ) , join ( Config . _UNKNOWN_ , 's' , 's' , 's' ) , ] ; return copyFiles ( paths , 's' ) ; } export = class _UNKNOWN_ extends _UNKNOWN_ { run ( ) { return merge ( _UNKNOWN_ ( ) , _UNKNOWN_ ( ) , _UNKNOWN_ ( ) , copyFiles ( [ join ( Config . _UNKNOWN_ , 's' ) ] , 's' ) , ) ; } } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O $string[]$ O O O O O $string$ O O O $any$ O $any$ O $any$ O $string$ O $string$ O O O $any$ O $any$ O $string[]$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $string[]$ O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O O $complex$ O $any$ O $string[]$ O $U[]$ O O $string$ O O O O O O $string$ O O O O O O $any$ O $string[]$ O O O O O O $any$ O O O O $string[]$ O O O O O O $any$ O $any$ O $string$ O O O O O O O O O $any$ O $string[]$ O O O O O O $any$ O O O O $string[]$ O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O O $any$ O $string[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O $any$ O O $any$ O $any$ O $string$ O O O O O O O O O O O O O O
<s> const Builder = require ( 's' ) ; export = ( done ) => { const options = { normalize : true , runtime : false , _UNKNOWN_ : true , _UNKNOWN_ : true , minify : true , _UNKNOWN_ : false } ; var builder = new Builder ( 's' ) ; builder . config ( { paths : { 's' : 's' , 's' : 's' , } , map : { 's' : 's' , } , packages : { 's' : { main : 's' , _UNKNOWN_ : 's' } , } } ) ; builder . bundle ( 's' , 's' , options ) . then ( ( ) => done ( ) ) . catch ( ( error ) => done ( error ) ) ; } ; </s>	O O $any$ O $any$ O O O O O O O $any$ O O O O $complex$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O $complex$ O O O O O O O O O O O O $complex$ O O O O O O O O $complex$ O O O O O $string$ O O O $string$ O O O O O O O O $any$ O $any$ O O O O O $complex$ O O $any$ O O O O $any$ O O O O $any$ O O $any$ O O $any$ O $any$ O O O O O O
<s> import { join } from 's' ; import * as Builder from 's' ; import Config from 's' ; const _UNKNOWN_ = { format : 's' , minify : true , _UNKNOWN_ : false } ; export = ( done ) => { let builder = new Builder ( Config . _UNKNOWN_ ) ; builder . _UNKNOWN_ ( join ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) , join ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) , _UNKNOWN_ ) . then ( ( ) => done ( ) ) . catch ( ( err ) => done ( err ) ) ; } ; </s>	O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O $complex$ O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O O $any$ O O O O $Builder$ O O $any$ O $any$ O $any$ O O $Builder$ O $Promise<any>$ O $any$ O $any$ O $string$ O $any$ O $string$ O O $any$ O $any$ O $string$ O $any$ O $string$ O O $complex$ O O O O O O O $any$ O O O O $Promise<any>$ O O $any$ O O $any$ O $any$ O O O O O O
<s> import Config from 's' ; import { writeFile } from 's' ; import { join } from 's' ; const _UNKNOWN_ = require ( 's' ) ; const _UNKNOWN_ = require ( 's' ) ; const includePaths = require ( 's' ) ; const rollup = require ( 's' ) ; const config = { entry : join ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) , sourceMap : true , _UNKNOWN_ : true , moduleName : 's' , plugins : [ includePaths ( { include : { } , paths : [ join ( Config . _UNKNOWN_ , 's' ) ] , external : [ ] , extensions : [ 's' , 's' , 's' , 's' ] } ) , _UNKNOWN_ ( { _UNKNOWN_ : true , main : true , module : true } ) , _UNKNOWN_ ( { include : Config . _UNKNOWN_ , _UNKNOWN_ : Config . _UNKNOWN_ ( ) } ) ] } ; export = ( done ) => { rollup . rollup ( config ) . then ( ( bundle ) => { const result = bundle . generate ( { format : 's' } ) ; const path = join ( Config . _UNKNOWN_ , 's' ) ; writeFile ( path , result . code , ( error ) => { if ( error ) { console . error ( error ) ; process . exit ( 0 ) ; } done ( ) ; } ) ; } ) . catch ( ( error ) => { console . error ( error ) ; process . exit ( 0 ) ; } ) ; } ; </s>	O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $complex$ O O $any$ O $any$ O $any$ O $string$ O $any$ O $string$ O O $boolean$ O O O $boolean$ O O O $string$ O O O $any[]$ O O $any$ O O ${}$ O O O O $any[]$ O O $any$ O $any$ O $string$ O O O O O $undefined[]$ O O O O $string[]$ O O O O O O O O O O O O O $any$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O $any$ O O $string[]$ O $any$ O $string[]$ O ${}$ O $any$ O ${}$ O O O O O O O O O O $any$ O O O $any$ O $any$ O $complex$ O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $string$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O O $Console$ O $void$ O $any$ O O $any$ O $any$ O O O O O $any$ O O O O O O O O O $any$ O O $any$ O O O $Console$ O $void$ O $any$ O O $any$ O $any$ O O O O O O O O O O
<s> import { join } from 's' ; import * as Builder from 's' ; import Config from 's' ; const _UNKNOWN_ = { format : 's' , minify : true , _UNKNOWN_ : false } ; export = ( done ) => { let builder = new Builder ( Config . _UNKNOWN_ ) ; builder . _UNKNOWN_ ( join ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) , join ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) , _UNKNOWN_ ) . then ( ( ) => done ( ) ) . catch ( ( err ) => done ( err ) ) ; } ; </s>	O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O $complex$ O O $string$ O O O $boolean$ O O O $boolean$ O O O O O O O $any$ O O O O $Builder$ O O $any$ O $any$ O $any$ O O $Builder$ O $Promise<any>$ O $any$ O $any$ O $string$ O $any$ O $string$ O O $any$ O $any$ O $string$ O $any$ O $string$ O O $complex$ O O O O O O O $any$ O O O O $Promise<any>$ O O $any$ O O $any$ O $any$ O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import * as merge from 's' ; import Config from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => merge ( _UNKNOWN_ ( ) ) ; function _UNKNOWN_ ( ) { let _UNKNOWN_ = Config . _UNKNOWN_ . filter ( d => "s" . test ( d . src ) ) ; return _UNKNOWN_ . filter ( l => l . inject === 's' ) . concat ( _UNKNOWN_ . filter ( l => l . inject === 's' ) ) . concat ( _UNKNOWN_ . filter ( l => l . inject === true ) ) . map ( l => l . src ) ; } function _UNKNOWN_ ( ) { return gulp . src ( _UNKNOWN_ ( ) ) . pipe ( plugins . concat ( Config . _UNKNOWN_ ) ) . pipe ( plugins . replace ( "s" , 's' ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O $string[]$ O O O O $any$ O $any$ O $any$ O $complex$ O $any$ O O O $boolean$ O $any$ O $string$ O O O O $any$ O $complex$ O $any$ O $any$ O $complex$ O O O O $complex$ O $any$ O $complex$ O $any$ O $any$ O $complex$ O O O O O $complex$ O $any$ O $complex$ O $any$ O $any$ O $complex$ O O O O O $U[]$ O $any$ O $any$ O $string$ O O O O $any$ O O O O $any$ O $any$ O $string[]$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import Config from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => { let src = [ 's' , join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) ] ; return gulp . src ( src ) . pipe ( plugins . _UNKNOWN_ ( { module : 's' , target : 's' , _UNKNOWN_ : true , _UNKNOWN_ : true , out : Config . _UNKNOWN_ , json : join ( Config . _UNKNOWN_ , 's' ) , name : Config . _UNKNOWN_ , _UNKNOWN_ : false , _UNKNOWN_ : true , version : true } ) ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O O O $any[]$ O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O $boolean$ O O O $boolean$ O O O $string$ O $any$ O $string$ O $any$ O $any$ O $any$ O $string$ O O O O $string$ O $any$ O $string$ O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O O O O
<s> import * as _UNKNOWN_ from 's' ; import * as _UNKNOWN_ from 's' ; import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import * as merge from 's' ; import * as util from 's' ; import * as filter from 's' ; import { join } from 's' ; import Config from 's' ; import { _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; const _UNKNOWN_ = Config . _UNKNOWN_ ( 's' ) ; const processors = [ _UNKNOWN_ ( { browsers : Config . _UNKNOWN_ } ) ] ; const _UNKNOWN_ = ( e ) => util . log ( util . colors . red ( e . message ) ) ; const _UNKNOWN_ = Config . _UNKNOWN_ === 's' ; if ( _UNKNOWN_ ) { processors . push ( _UNKNOWN_ ( { _UNKNOWN_ : { removeAll : true } , _UNKNOWN_ : false , _UNKNOWN_ : false , _UNKNOWN_ : false } ) ) ; } const _UNKNOWN_ = join ( Config . _UNKNOWN_ , 's' , 's' ) ; const _UNKNOWN_ = join ( Config . _UNKNOWN_ , 's' , 's' ) ; const _UNKNOWN_ = join ( Config . _UNKNOWN_ , 's' , 's' ) ; function _UNKNOWN_ ( ) { return gulp . src ( [ join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) ] ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } function _UNKNOWN_ ( ) { return Config . _UNKNOWN_ ? merge ( _UNKNOWN_ ( ) , _UNKNOWN_ ( ) ) : _UNKNOWN_ ( ) ; } function _UNKNOWN_ ( ) { return _UNKNOWN_ ( 's' , [ _UNKNOWN_ ] , [ _UNKNOWN_ ] ) . pipe ( plugins . sourcemaps . init ( ) ) . pipe ( plugins . _UNKNOWN_ ( Config . _UNKNOWN_ ( 's' ) ) . on ( 's' , plugins . _UNKNOWN_ . logError ) ) . pipe ( plugins . _UNKNOWN_ ( processors ) ) . on ( 's' , _UNKNOWN_ ) . pipe ( plugins . sourcemaps . write ( _UNKNOWN_ ? 's' : 's' , { _UNKNOWN_ : ( file ) => { return `template` ; } } ) ) . pipe ( gulp . dest ( _UNKNOWN_ ? Config . _UNKNOWN_ : Config . _UNKNOWN_ ) ) ; } function _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ : string [ ] , _UNKNOWN_ : string [ ] = [ ] ) { let allFiles : string [ ] = _UNKNOWN_ . concat ( _UNKNOWN_ ) ; let _UNKNOWN_ : string [ ] = _UNKNOWN_ . concat ( _UNKNOWN_ . map ( ( path ) => { return 's' + path ; } ) ) ; return gulp . src ( allFiles ) . pipe ( plugins . _UNKNOWN_ ( _UNKNOWN_ ) ) . pipe ( plugins . _UNKNOWN_ ( ) ) . pipe ( filter ( _UNKNOWN_ ) ) ; } function _UNKNOWN_ ( ) { return gulp . src ( [ join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' , 's' , 's' ) ] ) . pipe ( _UNKNOWN_ ? plugins . _UNKNOWN_ ( 's' ) : plugins . util . noop ( ) ) . pipe ( plugins . _UNKNOWN_ ( processors ) ) . on ( 's' , _UNKNOWN_ ) . pipe ( gulp . dest ( _UNKNOWN_ ? Config . _UNKNOWN_ : Config . _UNKNOWN_ ) ) ; } function _UNKNOWN_ ( ) { return Config . _UNKNOWN_ ? _UNKNOWN_ ( ) : _UNKNOWN_ ( ) ; } function _UNKNOWN_ ( ) { return merge ( _UNKNOWN_ ( ) , _UNKNOWN_ ( ) ) . pipe ( _UNKNOWN_ ? plugins . _UNKNOWN_ ( _UNKNOWN_ . targetFile , _UNKNOWN_ . options ) : plugins . util . noop ( ) ) . pipe ( plugins . _UNKNOWN_ ( processors ) ) . on ( 's' , _UNKNOWN_ ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } function _UNKNOWN_ ( ) { return gulp . src ( _UNKNOWN_ ( ) ) . pipe ( _UNKNOWN_ ? plugins . _UNKNOWN_ ( 's' ) : plugins . util . noop ( ) ) ; } function _UNKNOWN_ ( ) { return Config . _UNKNOWN_ . filter ( dep => "s" . test ( dep . src ) ) . map ( dep => dep . src ) ; } function _UNKNOWN_ ( ) { return _UNKNOWN_ ( 's' , _UNKNOWN_ ( ) , [ _UNKNOWN_ ] ) . pipe ( plugins . _UNKNOWN_ ( Config . _UNKNOWN_ ( 's' ) ) . on ( 's' , plugins . _UNKNOWN_ . logError ) ) ; } function _UNKNOWN_ ( ) { return Config . _UNKNOWN_ . filter ( dep => "s" . test ( dep . src ) ) . map ( dep => dep . src ) . concat ( [ _UNKNOWN_ ] ) ; } function _UNKNOWN_ ( ) { return _UNKNOWN_ ( ) . pipe ( plugins . _UNKNOWN_ ( processors ) ) . pipe ( _UNKNOWN_ ? plugins . _UNKNOWN_ ( _UNKNOWN_ . targetFile , _UNKNOWN_ . options ) : plugins . util . noop ( ) ) . on ( 's' , _UNKNOWN_ ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } export = class _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ ( files : String [ ] ) { return super . _UNKNOWN_ ( files ) || files . some ( f => f . endsWith ( 's' ) ) ; } run ( ) { return merge ( _UNKNOWN_ ( ) , _UNKNOWN_ ( ) , _UNKNOWN_ ( ) ) ; } } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any[]$ O O $any$ O O $string[]$ O $any$ O $string[]$ O O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $boolean$ O $any$ O $string$ O O O O O $boolean$ O O $any[]$ O $number$ O $any$ O O $complex$ O O $true$ O O O O $false$ O O O $false$ O O O $false$ O O O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any[]$ O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O O O O $string$ O O $any$ O O O O O O O O O O O $any$ O $any$ O $any$ O $boolean$ O $any$ O $string$ O $any$ O $string$ O O O O O $any$ O $string$ O $string[]$ O O O O O $string[]$ O O O O O O O O O O $string[]$ O O O O O $string[]$ O $complex$ O $string[]$ O O O $string[]$ O O O O O $string[]$ O $complex$ O $string[]$ O $U[]$ O O $string$ O O O O O O $string$ O O O O O O $any$ O $any$ O $string[]$ O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $string[]$ O O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O O O O O $any$ O $boolean$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any[]$ O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $boolean$ O $any$ O $string$ O $any$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O O $any$ O $boolean$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any[]$ O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O $string[]$ O O O O $any$ O $boolean$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O $string[]$ O O O O $any$ O $any$ O $complex$ O $any$ O O O $boolean$ O $any$ O $string$ O O O $U[]$ O $any$ O $any$ O $string$ O O O O $any$ O O O O $any$ O O O $string[]$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $string[]$ O O O O $any$ O $any$ O $complex$ O $any$ O O O $boolean$ O $any$ O $string$ O O O $U[]$ O $any$ O $any$ O $string$ O O $complex$ O O $any$ O O O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any[]$ O O O $any$ O $boolean$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O $any$ O $any$ O $String[]$ O $StringConstructor$ O O O O O O O $any$ O $String[]$ O O $String[]$ O $boolean$ O $String$ O $String$ O $boolean$ O O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import * as slash from 's' ; import Config from 's' ; import { _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => { return gulp . src ( join ( Config . _UNKNOWN_ , 's' ) ) . pipe ( inject ( 's' ) ) . pipe ( inject ( 's' ) ) . pipe ( inject ( ) ) . pipe ( plugins . template ( new _UNKNOWN_ ( ) . _UNKNOWN_ ( ) . build ( ) , { interpolate : "s" } ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } ; function inject ( name ? ) { return plugins . inject ( gulp . src ( _UNKNOWN_ ( name ) , { read : false } ) , { name , transform : _UNKNOWN_ ( ) } ) ; } function _UNKNOWN_ ( name ? ) { return Config . _UNKNOWN_ . filter ( dep => dep [ 's' ] && dep [ 's' ] === ( name || true ) ) . map ( _UNKNOWN_ ) ; } function _UNKNOWN_ ( dep ) { let envPath = dep . src ; if ( envPath . startsWith ( Config . _UNKNOWN_ ) && ! envPath . endsWith ( 's' ) ) { envPath = join ( Config . _UNKNOWN_ , envPath . replace ( Config . _UNKNOWN_ , 's' ) ) ; } else if ( envPath . startsWith ( Config . _UNKNOWN_ ) && envPath . endsWith ( 's' ) ) { envPath = envPath . replace ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) . replace ( 's' , 's' ) ; } return envPath ; } function _UNKNOWN_ ( ) { return function ( filepath ) { if ( filepath . startsWith ( `template` ) ) { filepath = filepath . replace ( `template` , 's' ) ; } if ( Config . _UNKNOWN_ ) { let path = join ( Config . _UNKNOWN_ , filepath ) ; if ( path . indexOf ( 's' ) > - 0 || path . indexOf ( 's' ) > - 0 ) { path = path . replace ( "s" , 's' ) ; } arguments [ 0 ] = path . substring ( 0 ) ; } else { arguments [ 0 ] = join ( Config . _UNKNOWN_ , filepath ) ; } const queryString = Config . _UNKNOWN_ ( ) ; if ( queryString ) { arguments [ 0 ] += `template` ; } return slash ( plugins . inject . transform . apply ( plugins . inject . transform , arguments ) ) ; } ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O O $string$ O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O $complex$ O O O O $RegExp$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $string$ $string$ O O O $any$ O $any$ O $any$ O $any$ O $any[]$ O $string$ O O O $boolean$ O O O O O O $string$ O $string$ O $string$ O O O O O O O $any[]$ O $string$ $string$ O O O $any$ O $any$ O $complex$ O $any$ O $any$ O O O O $any$ O O O O O $string$ O O O O O $U[]$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $string$ O O O O O O O O O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $string$ O O $any$ O O O O O O O O $any$ O O O $string$ O O O O O O $string$ O O O O $string$ O $boolean$ O O O O O $string$ O $string$ O $complex$ O O O O O O O O O $any$ O $boolean$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O O O $IArguments$ O O O O $any$ O $any$ O O O O O O O $IArguments$ O O O O $any$ O $any$ O $any$ O $string$ O O O O $string$ O $any$ O $string$ O O O O O $string$ O O $IArguments$ O O O O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $IArguments$ O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join , sep , normalize } from 's' ; import * as slash from 's' ; import Config from 's' ; import { _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => { return gulp . src ( join ( Config . _UNKNOWN_ , 's' ) ) . pipe ( _UNKNOWN_ ( ) ) . pipe ( _UNKNOWN_ ( ) ) . pipe ( plugins . template ( new _UNKNOWN_ ( ) . _UNKNOWN_ ( ) . build ( ) , { interpolate : "s" } ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } ; function inject ( ... files < string > ) { return plugins . inject ( gulp . src ( files , { read : false } ) , { files , transform : _UNKNOWN_ ( ) } ) ; } function _UNKNOWN_ ( ) { return inject ( join ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) , join ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) ) ; } function _UNKNOWN_ ( ) { return inject ( join ( Config . _UNKNOWN_ , `template` ) ) ; } function _UNKNOWN_ ( ) { return function ( filepath ) { let path < string > = normalize ( filepath ) . split ( sep ) ; let _UNKNOWN_ = path . indexOf ( Config . _UNKNOWN_ ) ; if ( _UNKNOWN_ > - 0 ) { _UNKNOWN_ ++ ; } else { _UNKNOWN_ = 0 ; } arguments [ 0 ] = Config . _UNKNOWN_ + path . slice ( _UNKNOWN_ , path . length ) . join ( sep ) ; const queryString = Config . _UNKNOWN_ ( ) ; if ( queryString ) { arguments [ 0 ] += `template` ; } return slash ( plugins . inject . transform . apply ( plugins . inject . transform , arguments ) ) ; } ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O $string$ O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O $complex$ O O O O $RegExp$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O O $Array$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string[]$ O O $boolean$ O O O O O O $string[]$ O $string$ O $string$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $string$ O $any$ O $string$ O O $any$ O $any$ O $string$ O $any$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O $string$ O O O O O O $string$ O O O $Array$ O O O O $any$ O $string$ O O $any$ O $any$ O O O $number$ O $string[]$ O $number$ O $any$ O $string$ O O O O $number$ O O O O O $number$ O O O O O $number$ O O O O $IArguments$ O O O O $any$ O $any$ O $string[]$ O $string[]$ O $number$ O $string[]$ O $number$ O O $string$ O $any$ O O O $string$ O $any$ O $string$ O O O O O $string$ O O $IArguments$ O O O O O O O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $IArguments$ O O O O O O O
<s> import { Task } from 's' ; export abstract class _UNKNOWN_ extends Task { _UNKNOWN_ ( files : String [ ] ) { return files . reduce ( ( a , f ) => { return a || f . endsWith ( 's' ) ; } , false ) ; } } </s>	O O O $any$ O O O O O O O $any$ O $any$ O $boolean$ O $String[]$ O $StringConstructor$ O O O O O $String[]$ O $complex$ O O $boolean$ O $String$ O O O O $boolean$ O $String$ O $boolean$ O O O O O O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import * as merge from 's' ; import * as util from 's' ; import { join } from 's' ; import Config from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; let _UNKNOWN_ = Config . _UNKNOWN_ ; export = class _UNKNOWN_ extends _UNKNOWN_ { run ( ) { let _UNKNOWN_ ; let typings = gulp . src ( [ Config . _UNKNOWN_ + 's' ] ) ; let src = [ join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , `template` ) ] ; let projectFiles = gulp . src ( src ) ; let result ; let _UNKNOWN_ = true ; if ( _UNKNOWN_ < Config . _UNKNOWN_ ) { _UNKNOWN_ = false ; _UNKNOWN_ = _UNKNOWN_ ( { _UNKNOWN_ : true } ) ; projectFiles = projectFiles . pipe ( plugins . _UNKNOWN_ ( ) ) ; util . log ( 's' ) ; } else { _UNKNOWN_ = _UNKNOWN_ ( ) ; projectFiles = merge ( typings , projectFiles ) ; } result = projectFiles . pipe ( plugins . _UNKNOWN_ ( ) ) . pipe ( plugins . sourcemaps . init ( ) ) . pipe ( _UNKNOWN_ ( ) ) . on ( 's' , ( ) => { _UNKNOWN_ = Config . _UNKNOWN_ ; } ) ; if ( _UNKNOWN_ ) { _UNKNOWN_ = 0 ; } else { _UNKNOWN_ ++ ; } return result . js . pipe ( plugins . sourcemaps . write ( ) ) . pipe ( plugins . template ( new _UNKNOWN_ ( ) . _UNKNOWN_ ( ) . build ( ) , { interpolate : "s" } ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $number$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $string$ O O O O O O $any[]$ O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any[]$ O O O $any$ O O $boolean$ O O O O O $number$ O $any$ O $number$ O O $boolean$ O O O $any$ O $any$ O O $boolean$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O O O $number$ O $any$ O $number$ O O O O O O $boolean$ O O $number$ O O O O O O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O $complex$ O O O O $RegExp$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import Config from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => { let _UNKNOWN_ = _UNKNOWN_ ( { 's' : 's' } , Config . 0 ) ; let src = [ Config . _UNKNOWN_ + 's' , join ( Config . 0 , 's' ) ] ; let result = gulp . src ( src ) . pipe ( plugins . _UNKNOWN_ ( ) ) . pipe ( plugins . sourcemaps . init ( ) ) . pipe ( _UNKNOWN_ ( ) ) ; return result . js . pipe ( plugins . sourcemaps . write ( ) ) . pipe ( plugins . template ( new _UNKNOWN_ ( ) . _UNKNOWN_ ( ) . build ( ) , { interpolate : "s" } ) ) . pipe ( gulp . dest ( Config . 0 ) ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O O O O O O O $any$ O $string$ O O O $any[]$ O O $any$ O $string$ O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O O O $complex$ O O O O $RegExp$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O
<s> import { readdirSync , lstatSync } from 's' ; import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import Config from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => { let _UNKNOWN_ = _UNKNOWN_ ( { } , Config . _UNKNOWN_ ) ; let _UNKNOWN_ = readdirSync ( Config . _UNKNOWN_ ) . filter ( ( f ) => lstatSync ( join ( Config . _UNKNOWN_ , f ) ) . isDirectory ( ) && f !== Config . _UNKNOWN_ ) . map ( ( f ) => 's' + join ( Config . _UNKNOWN_ , f , Config . _UNKNOWN_ + 's' ) ) ; let src = [ Config . _UNKNOWN_ + 's' , join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , `template` ) , ... _UNKNOWN_ ] ; let result = gulp . src ( src ) . pipe ( plugins . _UNKNOWN_ ( ) ) . pipe ( _UNKNOWN_ ( ) ) . once ( 's' , function ( e ) { this . once ( 's' , ( ) => process . exit ( 0 ) ) ; } ) ; return result . js . pipe ( plugins . template ( new _UNKNOWN_ ( ) . build ( ) , { interpolate : "s" } ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) . on ( 's' , ( e ) => { console . log ( e ) ; } ) ; } ; </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O O O O $any$ O $string$ O O O $any$ O $any$ O $any$ O $string$ O O $any$ O O $string$ O O $any$ O $any$ O $any$ O $string$ O $string$ O O O $any$ O O O $string$ O $any$ O $any$ O O $any$ O O $string$ O O O O $any$ O $any$ O $string$ O $string$ O $any$ O $string$ O O O O O O $any[]$ O O $any$ O $string$ O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O O O O $RegExp$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O O O $Console$ O $void$ O $any$ O O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import Config from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( { target : 's' , module : 's' , moduleResolution : 's' } , Config . _UNKNOWN_ ) ; const src = [ join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) ] ; const result = gulp . src ( src ) . pipe ( plugins . _UNKNOWN_ ( ) ) . pipe ( _UNKNOWN_ ( ) ) . once ( 's' , ( ) => { this . once ( 's' , ( ) => process . exit ( 0 ) ) ; } ) ; return result . js . pipe ( plugins . template ( new _UNKNOWN_ ( ) . build ( ) , { interpolate : "s" } ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) . on ( 's' , ( e ) => { console . log ( e ) ; } ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O O $any$ O $string$ O O O $any[]$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O O O O $RegExp$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O O O $Console$ O $void$ O $any$ O O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import Config from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; const _UNKNOWN_ = { base : Config . _UNKNOWN_ , target : 's' , _UNKNOWN_ : true , _UNKNOWN_ : true } ; export = ( ) => { let _UNKNOWN_ = _UNKNOWN_ ( { } , Config . _UNKNOWN_ ) ; let src = [ Config . _UNKNOWN_ + 's' , join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , `template` ) ] ; let result = gulp . src ( src ) . pipe ( plugins . _UNKNOWN_ ( ) ) . pipe ( plugins . 0 ( _UNKNOWN_ ) ) . pipe ( _UNKNOWN_ ( ) ) . once ( 's' , function ( e ) { this . once ( 's' , ( ) => process . exit ( 0 ) ) ; } ) ; return result . js . pipe ( plugins . template ( new _UNKNOWN_ ( ) . build ( ) ) , { interpolate : "s" } ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) . on ( 's' , ( e ) => { console . log ( e ) ; } ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O $complex$ O O $string$ O $any$ O $string$ O $string$ O O O $boolean$ O O O $boolean$ O O O O O O O O O O O $any$ O $any$ O O O O $any$ O $string$ O O O $any[]$ O O $any$ O $string$ O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $complex$ O O O $any$ O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O O O O O $RegExp$ O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O O O $Console$ O $void$ O $any$ O O O O O O O O
<s> import 's' ; import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import * as merge from 's' ; import * as util from 's' ; import { join } from 's' ; import Config from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; let _UNKNOWN_ = Config . _UNKNOWN_ ; export = class _UNKNOWN_ extends _UNKNOWN_ { run ( ) { let _UNKNOWN_ ; let typings = gulp . src ( [ Config . _UNKNOWN_ + 's' ] ) ; let src = [ join ( Config . _UNKNOWN_ , 's' ) ] ; let projectFiles = gulp . src ( src ) ; let result ; let _UNKNOWN_ = true ; if ( _UNKNOWN_ < Config . _UNKNOWN_ ) { _UNKNOWN_ = false ; _UNKNOWN_ = _UNKNOWN_ ( { _UNKNOWN_ : true } ) ; projectFiles = projectFiles . pipe ( plugins . _UNKNOWN_ ( ) ) ; util . log ( 's' ) ; } else { _UNKNOWN_ = _UNKNOWN_ ( ) ; projectFiles = merge ( typings , projectFiles ) ; } result = projectFiles . pipe ( plugins . _UNKNOWN_ ( ) ) . pipe ( plugins . sourcemaps . init ( ) ) . pipe ( _UNKNOWN_ ( ) ) . on ( 's' , ( ) => { _UNKNOWN_ = Config . _UNKNOWN_ ; } ) ; if ( _UNKNOWN_ ) { _UNKNOWN_ = 0 ; } else { _UNKNOWN_ ++ ; } return result . js . pipe ( plugins . sourcemaps . write ( ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } } ; </s>	O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $number$ O $any$ O $number$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $string$ O O O O O O $any[]$ O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any[]$ O O O $any$ O O $boolean$ O O O O O $number$ O $any$ O $number$ O O $boolean$ O O O $any$ O $any$ O O $boolean$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O O O $number$ O $any$ O $number$ O O O O O O $boolean$ O O $number$ O O O O O O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import * as merge from 's' ; import * as fs from 's' ; import * as path from 's' ; import Config from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; const _UNKNOWN_ = JSON . stringify ( Config . _UNKNOWN_ ) ; export = class _UNKNOWN_ extends _UNKNOWN_ { run ( ) { const src = [ 's' , 's' , 's' , 's' , 's' , 's' , 's' , 's' , `template` , ] ; const _UNKNOWN_ = _UNKNOWN_ ( { } , Config . _UNKNOWN_ ) ; const result = gulp . src ( [ ... src , 's' , ] , { base : Config . _UNKNOWN_ , cwd : Config . _UNKNOWN_ , } ) . pipe ( plugins . sourcemaps . init ( ) ) . pipe ( _UNKNOWN_ ( ) ) ; const template = ( < any > Object ) . assign ( new _UNKNOWN_ ( ) . _UNKNOWN_ ( ) . build ( ) , { _UNKNOWN_ : _UNKNOWN_ } , ) ; const transpiled = result . js . pipe ( plugins . sourcemaps . write ( ) ) . pipe ( plugins . template ( template , { interpolate : "s" } ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; const copy = gulp . src ( src , { base : Config . _UNKNOWN_ , cwd : Config . _UNKNOWN_ , } ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; fs . writeFileSync ( path . join ( Config . _UNKNOWN_ , 's' ) , JSON . stringify ( template ) ) ; return merge ( transpiled , copy ) ; } } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $string$ O $JSON$ O $complex$ O $any$ O $complex$ O O O O O $any$ O $any$ O $any$ O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O $string$ O O O $any$ O $any$ O $any$ O O O $string[]$ O O O O O O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O O O O O $ObjectConstructor$ O O $any$ O O $any$ O O O $any$ O O O $complex$ O O O O $string$ O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $RegExp$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O $string[]$ O O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O $JSON$ O $complex$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import * as merge from 's' ; import * as util from 's' ; import * as rename from 's' ; import Config from 's' ; import { _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; const _UNKNOWN_ = ( e ) => util . log ( util . colors . red ( e . message ) ) ; function _UNKNOWN_ ( ) { return rename ( ( path ) => { path . basename = path . basename . replace ( "s" , 's' ) ; } ) ; } function _UNKNOWN_ ( ) { return gulp . src ( [ 's' , 's' , 's' , ] , { base : Config . _UNKNOWN_ , cwd : Config . _UNKNOWN_ , } ) . pipe ( _UNKNOWN_ ( ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } function _UNKNOWN_ ( ) { return Config . _UNKNOWN_ ? merge ( _UNKNOWN_ ( ) , _UNKNOWN_ ( ) ) : _UNKNOWN_ ( ) ; } function _UNKNOWN_ ( ) { return gulp . src ( [ 's' , 's' , 's' , ] , { base : Config . _UNKNOWN_ , cwd : Config . _UNKNOWN_ , } ) . pipe ( _UNKNOWN_ ( ) ) . on ( 's' , _UNKNOWN_ ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } function _UNKNOWN_ ( ) { const stream = gulp . src ( [ 's' , 's' , 's' , ] , { base : Config . _UNKNOWN_ , cwd : Config . _UNKNOWN_ , } ) ; return stream . pipe ( _UNKNOWN_ ( ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } function _UNKNOWN_ ( ) { const _UNKNOWN_ = "s" ; return gulp . src ( [ 's' , 's' , 's' , 's' , ] , { base : Config . _UNKNOWN_ , cwd : Config . _UNKNOWN_ , } ) . pipe ( rename ( ( path ) => { const match = path . basename . match ( _UNKNOWN_ ) ; if ( match ) { const _UNKNOWN_ = path . extname ; path . extname = match [ 0 ] ; path . basename = path . basename . replace ( _UNKNOWN_ , _UNKNOWN_ ) ; } } ) ) . pipe ( gulp . dest ( ( Config . _UNKNOWN_ ) ) ) ; } export = class _UNKNOWN_ extends _UNKNOWN_ { _UNKNOWN_ ( files : String [ ] ) { return files . some ( ( f ) => ( f . indexOf ( 's' ) !== - 0 && ! ! f . match ( "s" ) ) || ( f . indexOf ( 's' ) === - 0 && ! ! f . match ( "s" ) ) ) ; } run ( ) { return merge ( _UNKNOWN_ ( ) , _UNKNOWN_ ( ) ) . on ( 's' , ( ) => _UNKNOWN_ ( ) ) ; } } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O O O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O O O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O O O O $any$ O $any$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O O O O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O O O O $RegExp$ O O O O $any$ O $any$ O O O O O O O O O O O O O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O O O O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $RegExp$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $RegExp$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O $any$ O $string$ O O O O O O O O $any$ O $any$ O $boolean$ O $String[]$ O $StringConstructor$ O O O O O $String[]$ O $boolean$ O O $String$ O O O $String$ O $number$ O O O O O O O O O $String$ O $complex$ O O O O O O $String$ O $number$ O O O O O O O O O $String$ O $complex$ O O O O O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O O $any$ O O O O O O $any$ O O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import Config from 's' ; import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => { let _UNKNOWN_ = _UNKNOWN_ ( ) ; let src = [ join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) ] ; let result = gulp . src ( src , { base : 's' } ) . pipe ( plugins . _UNKNOWN_ ( ) ) . pipe ( plugins . sourcemaps . init ( ) ) . pipe ( _UNKNOWN_ ( ) ) ; return result . js . pipe ( plugins . template ( new _UNKNOWN_ ( ) . build ( ) , { interpolate : "s" } ) ) . pipe ( plugins . sourcemaps . write ( ) ) . pipe ( gulp . dest ( 's' ) ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O O O O $any[]$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any[]$ O O $string$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O O O O $RegExp$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O
<s> import * as util from 's' ; import { join } from 's' ; let fs = require ( 's' ) ; export = ( done ) => { let _UNKNOWN_ = join ( process . cwd ( ) , 's' , 's' ) ; let _UNKNOWN_ = require ( 's' ) ; let _UNKNOWN_ = require ( 's' ) ; let _UNKNOWN_ = false ; try { fs . _UNKNOWN_ ( _UNKNOWN_ , fs . _UNKNOWN_ ) ; util . log ( 's' ) ; _UNKNOWN_ = true ; } catch ( e ) { util . log ( 's' ) ; done ( ) ; } if ( _UNKNOWN_ ) { util . log ( 's' ) ; _UNKNOWN_ ( ) ; util . log ( 's' ) ; let build = _UNKNOWN_ ( ) ; build . on ( 's' , done ) ; } } ; </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $boolean$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $boolean$ O O O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O O $boolean$ O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O
<s> import * as util from 's' ; import Config from 's' ; function _UNKNOWN_ ( message ) { console . error ( util . colors . white . _UNKNOWN_ . bold ( message ) ) ; process . exit ( 0 ) ; } export = ( ) => { let exec = require ( 's' ) . exec ; let semver = require ( 's' ) ; exec ( 's' , function ( error , stdout , stderr ) { if ( error !== null ) { _UNKNOWN_ ( 's' + error + stderr ) ; } if ( ! semver . gte ( stdout , Config . _UNKNOWN_ ) ) { _UNKNOWN_ ( 's' + Config . _UNKNOWN_ + 's' + stdout ) ; } } ) ; exec ( 's' , function ( error , stdout , stderr ) { if ( error !== null ) { _UNKNOWN_ ( 's' + error + stderr ) ; } if ( ! semver . gte ( stdout , Config . _UNKNOWN_ ) ) { _UNKNOWN_ ( 's' + Config . _UNKNOWN_ + 's' + stdout ) ; } } ) ; } ; </s>	O O O O $any$ O O O O $any$ O O O O $void$ O $string$ O O $Console$ O $void$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O O O O O O O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O O O O $Error$ O $any$ O $any$ O O O O $Error$ O O O O $void$ O O O $Error$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $void$ O O O $any$ O $string$ O O O $any$ O O O O O O $any$ O O O O O $Error$ O $any$ O $any$ O O O O $Error$ O O O O $void$ O O O $Error$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $void$ O O O $any$ O $string$ O O O $any$ O O O O O O O O O
<s> import * as chalk from 's' ; import { lstatSync , readdirSync } from 's' ; import * as util from 's' ; import * as rimraf from 's' ; import { join } from 's' ; import Config from 's' ; export = ( done ) => { _UNKNOWN_ ( Config . _UNKNOWN_ ) ; done ( ) ; } ; function walk ( path ) { let files = readdirSync ( path ) ; for ( let i = 0 ; i < files . length ; i += 0 ) { let _UNKNOWN_ = join ( path , files [ i ] ) ; if ( lstatSync ( _UNKNOWN_ ) . isDirectory ( ) ) { _UNKNOWN_ ( _UNKNOWN_ ) ; } } } function _UNKNOWN_ ( path ) { try { rimraf . sync ( join ( path , 's' ) ) ; util . log ( 's' , chalk . yellow ( `template` ) ) ; rimraf . sync ( join ( path , 's' ) ) ; util . log ( 's' , chalk . yellow ( `template` ) ) ; } catch ( e ) { util . log ( 's' , chalk . yellow ( `template` ) , e ) ; } walk ( path ) ; } </s>	O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O $void$ O $any$ O $string$ O O $any$ O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O O $any$ O O O O $void$ O $any$ O O O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O O $void$ O $any$ O O O O
<s> import Config from 's' ; import { clean } from 's' ; export = clean ( [ Config . _UNKNOWN_ , Config . _UNKNOWN_ , Config . _UNKNOWN_ ] ) ; </s>	O O $any$ O O O O O $void$ O O O O O O $void$ O O $any$ O $string$ O $any$ O $string$ O $any$ O $string$ O O O O
<s> import Config from 's' ; import { clean } from 's' ; export = clean ( [ Config . _UNKNOWN_ , Config . _UNKNOWN_ ] ) ; </s>	O O $any$ O O O O O $void$ O O O O O O $void$ O O $any$ O $string$ O $any$ O $string$ O O O O
<s> import Config from 's' ; import { clean } from 's' ; export = clean ( Config . _UNKNOWN_ ) ; </s>	O O $any$ O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O O
<s> import Config from 's' ; import { clean } from 's' ; export = clean ( Config . 0 ) ; </s>	O O $any$ O O O O O $void$ O O O O O O $void$ O $any$ O $string$ O O O
<s> import Config from 's' ; import { clean } from 's' ; export = clean ( [ Config . _UNKNOWN_ , Config . _UNKNOWN_ ] ) ; </s>	O O $any$ O O O O O $void$ O O O O O O $void$ O O $any$ O $string$ O $any$ O $string$ O O O O
<s> import Config from 's' ; import { clean } from 's' ; export = clean ( [ Config . _UNKNOWN_ ] ) ; </s>	O O $any$ O O O O O $void$ O O O O O O $void$ O O $any$ O $string$ O O O O
<s> import { clean } from 's' ; import { join } from 's' ; import Config from 's' ; export = clean ( [ 's' , 's' , join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) ] ) ; </s>	O O O $void$ O O O O O O $any$ O O O O O $any$ O O O O O $void$ O O O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O O
<s> import { join } from 's' ; import { clean } from 's' ; import Config from 's' ; export = clean ( [ 's' , 's' , join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) ] ) ; </s>	O O O $any$ O O O O O O $void$ O O O O O $any$ O O O O O $void$ O O O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O O
<s> import 's' ; import * as ts from 's' ; import { argv } from 's' ; import { join } from 's' ; import { writeFileSync , readFileSync , readdirSync } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , main } from 's' ; import Config from 's' ; function _UNKNOWN_ ( _UNKNOWN_ , cliOptions , program : ts . Program , host : ts . CompilerHost ) { return _UNKNOWN_ . create ( _UNKNOWN_ , cliOptions , program , host ) . _UNKNOWN_ ( ) ; } const _UNKNOWN_ = ( path , mod = ( f ) => f ) => { const file = readFileSync ( path ) ; writeFileSync ( path , mod ( file . toString ( ) ) ) ; } ; export = ( done ) => { _UNKNOWN_ ( join ( Config . _UNKNOWN_ , 's' ) , ( content ) => { const parsed = JSON . parse ( content ) ; const path = join ( Config . _UNKNOWN_ , Config . _UNKNOWN_ , 's' , 's' ) ; parsed . files = parsed . files || [ ] ; parsed . files = parsed . files . concat ( readdirSync ( path ) . filter ( f => f . endsWith ( 's' ) ) . map ( f => join ( path , f ) ) ) ; parsed . files = parsed . files . filter ( ( f , i ) => parsed . files . indexOf ( f ) === i ) ; parsed . files . push ( join ( Config . _UNKNOWN_ , Config . _UNKNOWN_ + 's' ) ) ; return JSON . stringify ( parsed , null , 0 ) ; } ) ; const args = argv ; if ( args . lang ) { args [ 's' ] = `template` ; args [ 's' ] = args . lang ; args [ 's' ] = 's' ; } const cliOptions = new _UNKNOWN_ ( args ) ; main ( Config . _UNKNOWN_ , cliOptions , _UNKNOWN_ ) . then ( done ) . catch ( e => { console . error ( e . stack ) ; console . error ( 's' ) ; process . exit ( 0 ) ; } ) ; } ; </s>	O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O $any$ O $any$ O $any$ O $Program$ O $any$ O $any$ O $CompilerHost$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $Program$ O $CompilerHost$ O O $any$ O O O O O $void$ O O $string$ O $any$ O O $string$ O O $string$ O O O O $any$ O $any$ O $string$ O O $any$ O $string$ O $any$ O $any$ O $any$ O O O O O O O O O O $any$ O O O $void$ O $any$ O $any$ O $string$ O O O O O $string$ O O O O $any$ O $JSON$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $string$ O $number$ O O $any$ O $any$ O $any$ O $string$ O O $number$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O $JSON$ O $complex$ O $any$ O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $string$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $Console$ O $void$ O $any$ O $any$ O O $Console$ O $void$ O O O O $any$ O $any$ O O O O O O O O O O
<s> import * as gulp from 's' ; import { join } from 's' ; import Config from 's' ; const replace = require ( 's' ) ; export = ( ) => { return gulp . src ( [ join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) ] ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } ; </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O
<s> import * as gulp from 's' ; import { join } from 's' ; import Config from 's' ; export = ( ) => { return gulp . src ( [ join ( Config . _UNKNOWN_ , 's' ) , join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) ] ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } ; </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O
<s> import * as express from 's' ; import * as history from 's' ; import * as gulp from 's' ; import { resolve , join } from 's' ; import { protractor } from 's' ; import Config from 's' ; class _UNKNOWN_ { server ( port , dir ) { let app = express ( ) ; let root = resolve ( process . cwd ( ) , dir ) ; for ( let proxy of Config . _UNKNOWN_ ) { app . use ( proxy ) ; } app . use ( express . static ( root ) ) ; app . use ( history ( 's' , { root } ) ) ; return new Promise ( ( resolve , reject ) => { let server = app . listen ( port , ( ) => { resolve ( server ) ; } ) ; } ) ; } } export = ( done ) => { process . env . _UNKNOWN_ = 's' ; new _UNKNOWN_ ( ) . server ( Config . PORT , Config . _UNKNOWN_ ) . then ( ( server ) => { gulp . src ( join ( Config . _UNKNOWN_ , 's' ) ) . pipe ( protractor ( { configFile : 's' } ) ) . on ( 's' , ( error ) => { throw error ; } ) . on ( 's' , ( ) => { server . close ( done ) ; } ) ; } ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O $Promise<unknown>$ O $number$ O $string$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O O O O O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $PromiseConstructor$ O O $void$ O $void$ O O O O $any$ O $any$ O $any$ O $number$ O O O O O $void$ O $any$ O O O O O O O O O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O $Promise<unknown>$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O $any$ O O $string$ O O O O O O $any$ O O O O $string$ O O O O $string$ O O O O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import * as gulp from 's' ; import Config from 's' ; export = ( ) => { return require ( 's' ) . _UNKNOWN_ ( { group : [ { name : 's' , sources : gulp . src ( `template` ) } , { name : 's' , sources : gulp . src ( `template` ) } ] } ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } ; </s>	O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O O O O $any$ O O $complex$ O O O $string$ O O O $any$ O $any$ O $any$ O O O O O O $string$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O
<s> import * as karma from 's' ; import { join } from 's' ; export const _UNKNOWN_ = ( done , config = { } ) => { return new ( < any > karma ) . Server ( Object . assign ( { configFile : join ( process . cwd ( ) , 's' ) , singleRun : true } , config ) ) . start ( done ) ; } ; </s>	O O O O $any$ O O O O O $any$ O O O O O O $any$ O O $any$ O $any$ O O O O O O O O O O O O $any$ O O $any$ O $ObjectConstructor$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $true$ O O O O $any$ O O O $any$ O $any$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; import Config from 's' ; export = ( done ) => { return _UNKNOWN_ ( done , Config . _UNKNOWN_ ( ) ) ; } ; </s>	O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O O
<s> import * as karma from 's' ; import { join } from 's' ; import Config from 's' ; let _UNKNOWN_ = ( done , config = { } ) => { return new ( < any > karma ) . Server ( Object . assign ( { configFile : join ( process . cwd ( ) , 's' ) , singleRun : true } , config ) , ( exitCode ) => { done ( ) ; } ) . start ( ) ; } ; export = ( done ) => { let _UNKNOWN_ = Config . _UNKNOWN_ ( ) ; _UNKNOWN_ . singleRun = true ; return _UNKNOWN_ ( done , _UNKNOWN_ ) ; } ; </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O O O O O O O $any$ O O $any$ O $ObjectConstructor$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $true$ O O O O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O
<s> import { _UNKNOWN_ } from 's' ; export = ( done ) => setTimeout ( ( ) => { return _UNKNOWN_ ( done , { singleRun : false } ) ; } , 0 ) ; </s>	O O O $any$ O O O O O O O $any$ O O $number$ O O O O O O $any$ O $any$ O O $boolean$ O O O O O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import * as merge from 's' ; import { join } from 's' ; import Config from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; const _UNKNOWN_ = ( target , destDir ) => { return gulp . src ( join ( destDir , target ) ) . pipe ( plugins . _UNKNOWN_ ( { compress : true , _UNKNOWN_ : true } ) ) . pipe ( gulp . dest ( destDir ) ) ; } ; export = ( ) => { return merge ( _UNKNOWN_ ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) , _UNKNOWN_ ( Config . _UNKNOWN_ , Config . _UNKNOWN_ ) ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O $string$ O $string$ O O O O $any$ O $any$ O $any$ O $string$ O $string$ O O O $any$ O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O O O O O O $any$ O $any$ O $any$ O $string$ O $any$ O $string$ O O $any$ O $any$ O $string$ O $any$ O $string$ O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import Config from 's' ; export = ( ) => { return gulp . src ( [ join ( Config . _UNKNOWN_ , 's' ) ] ) . pipe ( _UNKNOWN_ ( { _UNKNOWN_ : true , removeComments : true , _UNKNOWN_ : true } ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O $boolean$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O
<s> export = ( done ) => { done ( ) ; } ; </s>	O O O O $any$ O O O $any$ O O O O O O
<s> import Config from 's' ; import { readFile } from 's' ; import * as util from 's' ; import { join } from 's' ; export = ( done ) => { let _UNKNOWN_ = join ( Config . _UNKNOWN_ , 's' , 's' ) ; if ( require ( 's' ) . 0 ) { _UNKNOWN_ = join ( Config . _UNKNOWN_ , 's' , 's' ) ; } readFile ( _UNKNOWN_ , ( e , content ) => { if ( ! e ) { console . log ( util . colors . green ( content . toString ( ) ) ) ; } done ( ) ; } ) ; } ; </s>	O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O $any$ O $any$ O $any$ O $string$ O O O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O $Console$ O $void$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export = _UNKNOWN_ ; </s>	O O O $void$ O O O O O O $void$ O O
<s> import { join } from 's' ; import * as _UNKNOWN_ from 's' ; import Config from 's' ; export = ( ) => { let _UNKNOWN_ = Config . _UNKNOWN_ ; let _UNKNOWN_ : string [ ] = [ join ( _UNKNOWN_ , 's' ) ] ; _UNKNOWN_ . create ( ) . init ( { server : { baseDir : 's' + _UNKNOWN_ } , port : Config . _UNKNOWN_ , files : _UNKNOWN_ , _UNKNOWN_ : false } ) ; } ; </s>	O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O O O O O O O $string$ O $any$ O $string$ O O $string[]$ O O O O O O $any$ O $string$ O O O O O $any$ O $any$ O O O $any$ O O $complex$ O O $string$ O O O $string$ O O $any$ O $any$ O $any$ O $string[]$ O $string[]$ O $boolean$ O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export = _UNKNOWN_ ; </s>	O O O $void$ O O O O O O $void$ O O
<s> import { _UNKNOWN_ } from 's' ; export = _UNKNOWN_ ; </s>	O O O $void$ O O O O O O $void$ O O
<s> import { _UNKNOWN_ } from 's' ; export = _UNKNOWN_ ; </s>	O O O $void$ O O O O O O $void$ O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import * as _UNKNOWN_ from 's' ; import Config from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; import { _UNKNOWN_ } from 's' ; function _UNKNOWN_ ( path , _UNKNOWN_ : ( e , done : ( ) => void ) => void ) { let paths : string [ ] = [ join ( Config . _UNKNOWN_ , path ) ] . concat ( Config . _UNKNOWN_ . map ( ( p ) => { return 's' + p ; } ) ) ; let _UNKNOWN_ = false ; let _UNKNOWN_ = null ; let _UNKNOWN_ = ( ) => { _UNKNOWN_ = false ; if ( _UNKNOWN_ ) { _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; _UNKNOWN_ = null ; } } ; plugins . watch ( paths , ( e ) => { if ( _UNKNOWN_ ) { _UNKNOWN_ = e ; return ; } _UNKNOWN_ = true ; _UNKNOWN_ ( e , _UNKNOWN_ ) ; } ) ; } gulp . task ( 's' , function ( ) { _UNKNOWN_ ( 's' , ( e , done ) => _UNKNOWN_ ( 's' , 's' , 's' , ( ) => { _UNKNOWN_ ( e ) ; done ( ) ; } ) ) ; _UNKNOWN_ ( 's' , ( e , done ) => _UNKNOWN_ ( 's' , 's' , ( ) => { _UNKNOWN_ ( e ) ; _UNKNOWN_ ( 's' , 's' , done ) ; } ) ) ; } ) ; export = ( done ) => _UNKNOWN_ ( 's' , 's' , 's' , 's' , 's' , done ) ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O $void$ O O O O O $void$ O $string$ O $void$ O O $any$ O $void$ O O O O O O O O O O O $string[]$ O O O O O O $any$ O $any$ O $string$ O $string$ O O O $complex$ O $any$ O $string[]$ O $U[]$ O O $string$ O O O O O O $string$ O O O O O O $boolean$ O O O O $any$ O O O O $void$ O O O O O $boolean$ O O O O O $any$ O O $void$ O $any$ O $void$ O O $any$ O O O O O O $any$ O $any$ O $string[]$ O O $any$ O O O O O $boolean$ O O $any$ O $any$ O O O O $boolean$ O O O $void$ O $any$ O $void$ O O O O O O $any$ O $any$ O O O O O O O $void$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $void$ O $any$ O O $any$ O O O O O O O $void$ O O O O $any$ O $any$ O O $any$ O O O O O O O O O $void$ O $any$ O O $any$ O O O O O $any$ O O O O O O O O O O O O $any$ O O $any$ O O O O O O O O O O O $any$ O O O
<s> import * as gulp from 's' ; import { _UNKNOWN_ } from 's' ; import Config from 's' ; import { join } from 's' ; export = ( ) => { return gulp . src ( [ join ( Config . _UNKNOWN_ , 's' ) ] ) . pipe ( _UNKNOWN_ ( gulp . src ( [ join ( Config . _UNKNOWN_ , 's' , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) ] , { nodir : true } ) ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) ; } ; </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $string$ O O O O O O $boolean$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import Config from 's' ; import { _UNKNOWN_ , } from 's' ; import { _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => { const _UNKNOWN_ = _UNKNOWN_ ( { _UNKNOWN_ : true , _UNKNOWN_ : false } , Config . _UNKNOWN_ ) ; const src = [ join ( Config . _UNKNOWN_ , 's' ) ] ; const result = gulp . src ( src ) . pipe ( plugins . _UNKNOWN_ ( ) ) . pipe ( _UNKNOWN_ ( ) ) . once ( 's' , ( ) => { this . once ( 's' , ( ) => process . exit ( 0 ) ) ; } ) ; return result . js . pipe ( plugins . template ( new _UNKNOWN_ ( ) . build ( ) , { interpolate : "s" } ) ) . pipe ( plugins . rename ( Config . _UNKNOWN_ ) ) . pipe ( gulp . dest ( Config . _UNKNOWN_ ) ) . on ( 's' , ( e ) => { console . log ( e ) ; } ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O O O $any$ O $any$ O O $boolean$ O O O $boolean$ O O O O $any$ O $string$ O O O $any[]$ O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any$ O $any[]$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $complex$ O O O O $RegExp$ O O O O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O O $any$ O O O O $any$ O O O $Console$ O $void$ O $any$ O O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import Config from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => { let src = [ 's' , 's' , ] ; return gulp . src ( src , { base : Config . _UNKNOWN_ , cwd : Config . _UNKNOWN_ , } ) . pipe ( plugins . tslint ( ) ) . pipe ( plugins . tslint . report ( { _UNKNOWN_ : require ( 's' ) } ) ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O O O $string[]$ O O O O O O O O O $any$ O $any$ O $string[]$ O O $string$ O $any$ O $string$ O $string$ O $any$ O $string$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O
<s> import * as gulp from 's' ; import * as _UNKNOWN_ from 's' ; import { join } from 's' ; import Config from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; export = ( ) => { let src = [ join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) , join ( Config . 0 , 's' ) , 's' + join ( Config . 0 , 's' ) , join ( Config . _UNKNOWN_ , 's' ) , 's' + join ( Config . _UNKNOWN_ , 's' ) ] ; return gulp . src ( src , { 's' : 's' } ) . pipe ( plugins . tslint ( ) ) . pipe ( plugins . tslint . report ( { _UNKNOWN_ : require ( 's' ) || Config . _UNKNOWN_ } ) ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O O O $any[]$ O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $string$ O O O O O O $any$ O $any$ O $any[]$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $boolean$ O O O O O O O
<s> import { watch } from 's' ; export = watch ( 's' ) ; </s>	O O O $void$ O O O O O O $void$ O O O O O
<s> import { watch } from 's' ; import Config from 's' ; export = watch ( 's' , Config . 0 ) ; </s>	O O O $void$ O O O O O $any$ O O O O O $void$ O O O $any$ O $string$ O O O
<s> import { watch } from 's' ; export = watch ( 's' ) ; </s>	O O O $void$ O O O O O O $void$ O O O O O
<s> import * as _UNKNOWN_ from 's' ; import * as _UNKNOWN_ from 's' ; import Config from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; const plugins = < any > _UNKNOWN_ ( ) ; const _UNKNOWN_ = 's' ; export = function watch ( ) { const paths : string [ ] = [ `template` , `template` , `template` , `template` , `template` , `template` , `template` , ] ; plugins . watch ( paths , ( e ) => { _UNKNOWN_ . addFile ( e . path ) ; _UNKNOWN_ ( _UNKNOWN_ , ( ) => { _UNKNOWN_ . clear ( ) ; _UNKNOWN_ ( e ) ; } ) ; } ) ; } ; </s>	O O O O $any$ O O O O O O $any$ O O O O $any$ O O O O O $any$ O O O O O O $void$ O O O O O $any$ O O O O $any$ O O O O O O O O O O O $void$ O O O O $string[]$ O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O $string[]$ O O $any$ O O O $any$ O $void$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O $void$ O O O $void$ O $any$ O O O O O O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export = _UNKNOWN_ ; </s>	O O O $any$ O O O O O O $any$ O O
<s> export interface _UNKNOWN_ { _UNKNOWN_ ( ) : void ; _UNKNOWN_ ( ) : void ; } export interface _UNKNOWN_ extends _UNKNOWN_ { append ( parentNode , _UNKNOWN_ : ( ) => _UNKNOWN_ ) : void ; insertBefore ( _UNKNOWN_ , _UNKNOWN_ : ( ) => _UNKNOWN_ ) : void ; merge ( _UNKNOWN_ , _UNKNOWN_ : ( ) => _UNKNOWN_ ) : void ; replace ( _UNKNOWN_ , _UNKNOWN_ : ( ) => _UNKNOWN_ ) : void ; resume ( ) : void ; detach ( _UNKNOWN_ : ( ) => _UNKNOWN_ ) : Projection ; stop ( ) : void ; } export interface _UNKNOWN_ { readonly _UNKNOWN_ : string ; readonly properties : _UNKNOWN_ | undefined ; readonly children : _UNKNOWN_ [ ] | undefined ; readonly text : string | undefined ; _UNKNOWN_ : Node | null ; } export interface _UNKNOWN_ { _UNKNOWN_ ? : ( ( element , properties ? ) => void ) ; _UNKNOWN_ ? ( element , _UNKNOWN_ : ( ) => void , properties ? ) : void ; _UNKNOWN_ ? ( element , properties ? , _UNKNOWN_ ? ) : void ; _UNKNOWN_ ? ( element , _UNKNOWN_ , _UNKNOWN_ , properties , children : _UNKNOWN_ [ ] ) : void ; _UNKNOWN_ ? ( element , _UNKNOWN_ , _UNKNOWN_ , properties , children : _UNKNOWN_ [ ] ) : void ; _UNKNOWN_ ? ( element ) : void ; readonly bind ? : object ; readonly key ? : Object ; readonly classes ? : { [ index ] : boolean | null | undefined } ; readonly styles ? : Partial < CSSStyleDeclaration > ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; readonly action ? : string ; readonly encoding ? : string ; readonly _UNKNOWN_ ? : string ; readonly method ? : string ; readonly name ? : string ; readonly target ? : string ; readonly href ? : string ; readonly rel ? : string ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; onclick ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; onload ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev : _UNKNOWN_ | _UNKNOWN_ ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; _UNKNOWN_ ? ( ev ) : boolean | void ; readonly _UNKNOWN_ ? : boolean ; readonly tabIndex ? : number ; readonly disabled ? : boolean ; readonly title ? : string ; readonly accessKey ? : string ; readonly class ? : string ; readonly id ? : string ; readonly type ? : string ; readonly autocomplete ? : string ; readonly checked ? : boolean ; readonly placeholder ? : string ; readonly readOnly ? : boolean ; readonly src ? : string ; readonly value ? : string ; readonly alt ? : string ; readonly _UNKNOWN_ ? : string ; readonly innerHTML ? : string ; readonly className ? : never | 's' ; readonly [ index ] : any ; } export interface _UNKNOWN_ extends Array < _UNKNOWN_ > { } export type _UNKNOWN_ = string | _UNKNOWN_ | _UNKNOWN_ | false | null | undefined ; export interface Projection { readonly _UNKNOWN_ : Element ; update ( _UNKNOWN_ ) : void ; _UNKNOWN_ ( ) : _UNKNOWN_ ; } export type _UNKNOWN_ = ( propertyName , eventHandler , _UNKNOWN_ , properties ) => Function | undefined ; export type _UNKNOWN_ = 's' | 's' | 's' | 's' | 's' | 's' ; export type _UNKNOWN_ = ( eventType , trigger : Event | undefined ) => void ; export interface _UNKNOWN_ { _UNKNOWN_ ? : _UNKNOWN_ ; _UNKNOWN_ ? ( _UNKNOWN_ , styleName , value ) : void ; } export interface _UNKNOWN_ extends _UNKNOWN_ { readonly namespace ? : string ; _UNKNOWN_ ? : _UNKNOWN_ ; } export interface Mapping < Source , Target > { results : Target [ ] ; map ( _UNKNOWN_ : Source [ ] ) : void ; } export interface _UNKNOWN_ < Result > { invalidate ( ) : void ; result ( inputs : Object [ ] , _UNKNOWN_ : ( ) => Result ) : Result ; } export interface Component { _UNKNOWN_ ( ) : _UNKNOWN_ | null | undefined ; } export interface _UNKNOWN_ { render ( ) : _UNKNOWN_ | null | undefined ; } export interface _UNKNOWN_ { create ( _UNKNOWN_ , _UNKNOWN_ ? ) : Projection ; append ( parentNode , _UNKNOWN_ , _UNKNOWN_ ? ) : Projection ; insertBefore ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ? ) : Projection ; merge ( element , _UNKNOWN_ , _UNKNOWN_ ? ) : Projection ; replace ( element , _UNKNOWN_ , _UNKNOWN_ ? ) : Projection ; } </s>	O O O $any$ O $void$ O O O O O $void$ O O O O O O O O $any$ O $any$ O $void$ O $Element$ O $any$ O O O O $any$ O O O O $void$ O $Element$ O $any$ O O O O $any$ O O O O $void$ O $Element$ O $any$ O O O O $any$ O O O O $void$ O $Element$ O $any$ O O O O $any$ O O O O $void$ O O O O O $Projection$ O $any$ O O O O $any$ O O $any$ O $void$ O O O O O O O O $any$ O O $string$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $string$ O O O O O $Node$ O O O O O O O O $any$ O $void$ O O O O $Element$ O $any$ $any$ O O O O O $void$ O O $Element$ O $void$ O O O O O O $any$ $any$ O O O O $void$ O O $Element$ O $any$ $any$ O $any$ $any$ O O O O $void$ O O $Element$ O $any$ O $string$ O $any$ O $any$ O $any$ O O O O O O $void$ O O $Element$ O $any$ O $string$ O $any$ O $any$ O $any$ O O O O O O $void$ O O $Element$ O O O O O $object$ O O O O O $Object$ O O $ObjectConstructor$ O O $complex$ O O O O $string$ O O O O O O O O O O $any$ O O $any$ O $complex$ O O $complex$ O O $TouchEvent$ O O O O O O $complex$ O O $TouchEvent$ O O O O O O $complex$ O O $TouchEvent$ O O O O O O $complex$ O O $TouchEvent$ O O O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O $complex$ O O $FocusEvent$ O O O O O O $complex$ O O $Event$ O O O O O O $complex$ O O $MouseEvent$ O O O O O O $complex$ O O $MouseEvent$ O O O O O O $complex$ O O $FocusEvent$ O O O O O O $complex$ O O $Event$ O O O O O O $complex$ O O $KeyboardEvent$ O O O O O O $complex$ O O $KeyboardEvent$ O O O O O O $complex$ O O $KeyboardEvent$ O O O O O O $complex$ O O $Event$ O O O O O O $complex$ O O $MouseEvent$ O O O O O O $complex$ O O $MouseEvent$ O O O O O O $complex$ O O $MouseEvent$ O O O O O O $complex$ O O $MouseEvent$ O O O O O O $complex$ O O $MouseEvent$ O O O O O O $complex$ O O $MouseEvent$ O O O O O O $complex$ O O $MouseEvent$ O O O O O O $complex$ O O $any$ O $complex$ O $any$ O O O O O O $complex$ O O $UIEvent$ O O O O O O $complex$ O O $Event$ O O O O O O O $boolean$ O O O O O $number$ O O O O O $boolean$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $boolean$ O O O O O $string$ O O O O O $boolean$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O $string$ O O O O O O O O O O O O O O $string$ O O O O O O O $any$ O $ArrayConstructor$ O $any$ O O O O O $any$ O O O $any$ O $any$ O O O O O O O O O $any$ O O $Element$ O $complex$ O $void$ O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O $string$ O $Function$ O $Node$ O $any$ O O $FunctionConstructor$ O O O O O $any$ O O O O O O O O O O O O O O O $any$ O O $any$ O $Event$ O $complex$ O O O O O O O O $any$ O $any$ O O $any$ O $void$ O O $HTMLElement$ O $string$ O $string$ O O O O O O O $any$ O $any$ O O $string$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $void$ O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O $void$ O O O O O $Result$ O $Object[]$ O $ObjectConstructor$ O O O $Result$ O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $Projection$ O $any$ O $any$ $any$ O O $any$ O $Projection$ O $Element$ O $any$ O $any$ $any$ O O $any$ O $Projection$ O $Element$ O $any$ O $any$ $any$ O O $any$ O $Projection$ O $Element$ O $any$ O $any$ $any$ O O $any$ O $Projection$ O $Element$ O $any$ O $any$ $any$ O O $any$ O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; let _UNKNOWN_ = ( data ) : _UNKNOWN_ => { return { _UNKNOWN_ : 's' , properties : undefined , children : undefined , text : data . toString ( ) , _UNKNOWN_ : null } ; } ; let _UNKNOWN_ = ( _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ [ ] , main : _UNKNOWN_ [ ] ) => { for ( let i = 0 , length = _UNKNOWN_ . length ; i < length ; i ++ ) { let item = _UNKNOWN_ [ i ] ; if ( Array . isArray ( item ) ) { _UNKNOWN_ ( _UNKNOWN_ , item , main ) ; } else { if ( item !== null && item !== undefined && item !== false ) { if ( typeof item === 's' ) { item = _UNKNOWN_ ( item ) ; } main . push ( item ) ; } } } } ; export function h ( selector , properties ? , children ? : _UNKNOWN_ [ ] ) ; export function h ( selector , children : _UNKNOWN_ [ ] ) ; export function h ( selector , properties ? , children ? : _UNKNOWN_ [ ] ) { if ( Array . isArray ( properties ) ) { children = properties ; properties = undefined ; } else if ( ( properties && ( typeof properties === 's' || properties . hasOwnProperty ( 's' ) ) ) || ( children && ( typeof children === 's' || children . hasOwnProperty ( 's' ) ) ) ) { throw new Error ( 's' ) ; } let text : string | undefined ; let _UNKNOWN_ : _UNKNOWN_ [ ] | undefined ; if ( children !== undefined && children . length === 0 && typeof children [ 0 ] === 's' ) { text = children [ 0 ] as string ; } else if ( children ) { _UNKNOWN_ = [ ] ; _UNKNOWN_ ( selector , children , _UNKNOWN_ ) ; if ( _UNKNOWN_ . length === 0 ) { _UNKNOWN_ = undefined ; } } return { _UNKNOWN_ : selector , properties : properties , children : _UNKNOWN_ , text : ( text === 's' ) ? undefined : text , _UNKNOWN_ : null } ; } </s>	O O O $any$ O $any$ O $any$ O O O O O $any$ O O $string$ O O $any$ O O O O $string$ O O O $undefined$ O $undefined$ O $undefined$ O $undefined$ O $string$ O $string$ O $string$ O O O $null$ O O O O O O O $void$ O O $string$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O $number$ O $number$ O O O O $any$ O $any$ O $number$ O O O O $ArrayConstructor$ O $complex$ O $any$ O O O $void$ O $string$ O $any$ O $any$ O O O O O O O $complex$ O O O $complex$ O $undefined$ O $complex$ O O O O O O O $complex$ O O O O $any$ O $any$ O $string$ O O O $any$ O $number$ O $any$ O O O O O O O O O $any$ O $string$ O $any$ $any$ O $any$ O O $any$ O O O O O O $any$ O $string$ O $any$ O $any$ O O O O O O $any$ O $string$ O $any$ $any$ O $any$ O O $any$ O O O O O O $ArrayConstructor$ O $complex$ O $any$ O O O $any$ O $any[]$ O $any$ O $undefined$ O O O O O O $any$ O O O $any$ O O O $any$ O $boolean$ O O O O O O O $any$ O O O $any$ O O O $any$ O $boolean$ O O O O O O O O O $ErrorConstructor$ O O O O O O $string$ O O O O O O $any$ O $any$ O O O O O O O $any$ O $undefined$ O $any$ O $number$ O O O O $any$ O O O O O O O $string$ O $any$ O O O O O O O O O O $any$ O O $any$ O O O O $void$ O $string$ O $any$ O $any$ O O O O $any$ O $number$ O O O O $any$ O $undefined$ O O O O O $string$ O $string$ O $any$ O $any$ O $any$ O $any$ O $string$ O O $string$ O O O O $undefined$ O $string$ O $null$ O O O O O O
<s> import { Mapping } from 's' ; export let _UNKNOWN_ = < Source , Target > ( _UNKNOWN_ : ( source ) => ( string | number ) , _UNKNOWN_ : ( source , index ) => Target , _UNKNOWN_ : ( source , target , index ) => void ) : Mapping < Source , Target > => { let keys = [ ] as Object [ ] ; let results = [ ] as Target [ ] ; return { results : results , map : ( _UNKNOWN_ : Source [ ] ) => { let _UNKNOWN_ = _UNKNOWN_ . map ( _UNKNOWN_ ) ; let _UNKNOWN_ = results . slice ( ) ; let _UNKNOWN_ = 0 ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { let source = _UNKNOWN_ [ i ] ; let sourceKey = _UNKNOWN_ [ i ] ; if ( sourceKey === keys [ _UNKNOWN_ ] ) { results [ i ] = _UNKNOWN_ [ _UNKNOWN_ ] ; _UNKNOWN_ ( source , _UNKNOWN_ [ _UNKNOWN_ ] , i ) ; _UNKNOWN_ ++ ; } else { let found = false ; for ( let j = 0 ; j < keys . length + 0 ; j ++ ) { let searchIndex = ( _UNKNOWN_ + j ) % keys . length ; if ( keys [ searchIndex ] === sourceKey ) { results [ i ] = _UNKNOWN_ [ searchIndex ] ; _UNKNOWN_ ( _UNKNOWN_ [ i ] , _UNKNOWN_ [ searchIndex ] , i ) ; _UNKNOWN_ = searchIndex + 0 ; found = true ; break ; } } if ( ! found ) { results [ i ] = _UNKNOWN_ ( source , i ) ; } } } results . length = _UNKNOWN_ . length ; keys = _UNKNOWN_ ; } } ; } ; </s>	O O O $any$ O O O O O O $any$ O O $any$ O $any$ O O $complex$ O O $Source$ O O O O O O O O $Target$ O O $Source$ O $number$ O O $any$ O $void$ O O $Source$ O $Target$ O $number$ O O O O O $any$ O $any$ O $any$ O O O O $Object[]$ O O O O $ObjectConstructor$ O O O O $any$ O O O O $any$ O O O O O $any$ O $any$ O $void$ O O $any$ O $any$ O O O O O O $complex$ O $any$ O $U[]$ O $complex$ O O O $any$ O $any$ O $any$ O O O O $number$ O O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O $Source$ O $any$ O $number$ O O O $complex$ O $complex$ O $number$ O O O O $complex$ O $Object[]$ O $number$ O O O $any$ O $number$ O O $any$ O $number$ O O $void$ O $Source$ O $any$ O $number$ O O $number$ O O $number$ O O O O O O $boolean$ O O O O O O $number$ O O O $number$ O $Object[]$ O $number$ O O O $number$ O O O O $number$ O O $number$ O $number$ O O $Object[]$ O $number$ O O O $Object[]$ O $number$ O O $complex$ O O $any$ O $number$ O O $any$ O $number$ O O $void$ O $any$ O $number$ O O $any$ O $number$ O O $number$ O O $number$ O $number$ O O O $boolean$ O O O O O O O O O O $boolean$ O O $any$ O $number$ O O $Target$ O $Source$ O $number$ O O O O O $any$ O $number$ O $any$ O $number$ O $Object[]$ O $complex$ O O O O O O O
<s> import { Projection , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; const 0 = 's' ; const _UNKNOWN_ = `template` ; const _UNKNOWN_ = `template` ; let _UNKNOWN_ = < _UNKNOWN_ [ ] > [ ] ; export let extend = < T > ( base : T , overrides ) : T => { let result = { } as any ; Object . keys ( base ) . forEach ( ( key ) => { result [ key ] = ( base as any ) [ key ] ; } ) ; if ( overrides ) { Object . keys ( overrides ) . forEach ( ( key ) => { result [ key ] = overrides [ key ] ; } ) ; } return result ; } ; let same = ( 0 , 0 ) => { if ( 0 . _UNKNOWN_ !== 0 . _UNKNOWN_ ) { return false ; } if ( 0 . properties && 0 . properties ) { if ( 0 . properties . key !== 0 . properties . key ) { return false ; } return 0 . properties . bind === 0 . properties . bind ; } return ! 0 . properties && ! 0 . properties ; } ; let _UNKNOWN_ = ( styleValue ) => { if ( typeof styleValue !== 's' ) { throw new Error ( 's' ) ; } } ; let _UNKNOWN_ = ( children : _UNKNOWN_ [ ] , _UNKNOWN_ , start ) => { if ( _UNKNOWN_ . _UNKNOWN_ !== 's' ) { for ( let i = start ; i < children . length ; i ++ ) { if ( same ( children [ i ] , _UNKNOWN_ ) ) { return i ; } } } return - 0 ; } ; let _UNKNOWN_ = ( childNodes : _UNKNOWN_ [ ] , _UNKNOWN_ , _UNKNOWN_ , operation ) => { let childNode = childNodes [ _UNKNOWN_ ] ; if ( childNode . _UNKNOWN_ === 's' ) { return ; } let properties = childNode . properties ; let key = properties ? ( properties . key === undefined ? properties . bind : properties . key ) : undefined ; if ( ! key ) { for ( let i = 0 ; i < childNodes . length ; i ++ ) { if ( i !== _UNKNOWN_ ) { let node = childNodes [ i ] ; if ( same ( node , childNode ) ) { throw new Error ( `template` ) ; } } } } } ; let _UNKNOWN_ = ( _UNKNOWN_ ) => { if ( _UNKNOWN_ . properties ) { let _UNKNOWN_ = _UNKNOWN_ . properties . _UNKNOWN_ ; if ( _UNKNOWN_ ) { _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ as Element , _UNKNOWN_ . properties ) ; } } } ; let _UNKNOWN_ : _UNKNOWN_ [ ] = [ ] ; let _UNKNOWN_ = false ; let _UNKNOWN_ = ( node ) => { ( node . children || [ ] ) . forEach ( _UNKNOWN_ ) ; if ( node . properties && node . properties . _UNKNOWN_ ) { node . properties . _UNKNOWN_ . apply ( node . properties . bind || node . properties , [ < Element > node . _UNKNOWN_ ] ) ; } } ; let _UNKNOWN_ = ( ) : void => { _UNKNOWN_ = false ; _UNKNOWN_ . forEach ( _UNKNOWN_ ) ; _UNKNOWN_ . length = 0 ; } ; let _UNKNOWN_ = ( _UNKNOWN_ ) : void => { _UNKNOWN_ . push ( _UNKNOWN_ ) ; if ( ! _UNKNOWN_ ) { _UNKNOWN_ = true ; if ( typeof window !== 's' && 's' in window ) { window . _UNKNOWN_ ( _UNKNOWN_ , { timeout : 0 } ) ; } else { setTimeout ( _UNKNOWN_ , 0 ) ; } } } ; let _UNKNOWN_ = ( _UNKNOWN_ ) => { let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ! ; if ( _UNKNOWN_ . properties ) { let _UNKNOWN_ = _UNKNOWN_ . properties . _UNKNOWN_ ; if ( _UNKNOWN_ ) { ( _UNKNOWN_ as HTMLElement ) . style . pointerEvents = 's' ; let _UNKNOWN_ = ( ) => { if ( _UNKNOWN_ . parentNode ) { _UNKNOWN_ . parentNode . removeChild ( _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ ) ; } } ; _UNKNOWN_ ( _UNKNOWN_ as Element , _UNKNOWN_ , _UNKNOWN_ . properties ) ; return ; } } if ( _UNKNOWN_ . parentNode ) { _UNKNOWN_ . parentNode . removeChild ( _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ ) ; } } ; let _UNKNOWN_ = ( _UNKNOWN_ , properties : _UNKNOWN_ | undefined , _UNKNOWN_ ) => { if ( ! properties ) { return ; } let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ; let propNames = Object . keys ( properties ) ; let _UNKNOWN_ = propNames . length ; for ( let i = 0 ; i < _UNKNOWN_ ; i ++ ) { let propName = propNames [ i ] ; let propValue = properties [ propName ] ; if ( propName === 's' ) { throw new Error ( 's' ) ; } else if ( propName === 's' ) { ( propValue as string ) . split ( "s" ) . forEach ( token => ( _UNKNOWN_ as Element ) . classList . add ( token ) ) ; } else if ( propName === 's' ) { let classNames = Object . keys ( propValue ) ; let _UNKNOWN_ = classNames . length ; for ( let j = 0 ; j < _UNKNOWN_ ; j ++ ) { let className = classNames [ j ] ; if ( propValue [ className ] ) { ( _UNKNOWN_ as Element ) . classList . add ( className ) ; } } } else if ( propName === 's' ) { let _UNKNOWN_ = Object . keys ( propValue ) ; let _UNKNOWN_ = _UNKNOWN_ . length ; for ( let j = 0 ; j < _UNKNOWN_ ; j ++ ) { let styleName = _UNKNOWN_ [ j ] ; let styleValue = propValue [ styleName ] ; if ( styleValue ) { _UNKNOWN_ ( styleValue ) ; _UNKNOWN_ . _UNKNOWN_ ! ( < HTMLElement > _UNKNOWN_ , styleName , styleValue ) ; } } } else if ( propName !== 's' && propValue !== null && propValue !== undefined ) { let type = typeof propValue ; if ( type === 's' ) { if ( propName . lastIndexOf ( 's' , 0 ) === 0 ) { if ( _UNKNOWN_ ) { propValue = _UNKNOWN_ ( propName , propValue , _UNKNOWN_ , properties ) ; } if ( propName === 's' ) { ( function ( ) { let _UNKNOWN_ = propValue ; propValue = function ( this , evt ) { _UNKNOWN_ . apply ( this , [ evt ] ) ; ( evt . target as any ) [ 's' ] = ( evt . target as HTMLInputElement ) . value ; } ; } ( ) ) ; } ( _UNKNOWN_ as any ) [ propName ] = propValue ; } } else if ( type === 's' && propName !== 's' && propName !== 's' ) { if ( _UNKNOWN_ . namespace === _UNKNOWN_ && propName === 's' ) { ( _UNKNOWN_ as Element ) . setAttributeNS ( _UNKNOWN_ , propName , propValue ) ; } else { ( _UNKNOWN_ as Element ) . setAttribute ( propName , propValue ) ; } } else { ( _UNKNOWN_ as any ) [ propName ] = propValue ; } } } } ; let _UNKNOWN_ = ( _UNKNOWN_ , children : _UNKNOWN_ [ ] | undefined , _UNKNOWN_ ) => { if ( ! children ) { return ; } for ( let child of children ) { _UNKNOWN_ ( child , _UNKNOWN_ , undefined , _UNKNOWN_ ) ; } } ; export let _UNKNOWN_ = ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) => { _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ . children , _UNKNOWN_ ) ; if ( _UNKNOWN_ . text ) { _UNKNOWN_ . textContent = _UNKNOWN_ . text ; } _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ . properties , _UNKNOWN_ ) ; if ( _UNKNOWN_ . properties && _UNKNOWN_ . properties . _UNKNOWN_ ) { _UNKNOWN_ . properties . _UNKNOWN_ . apply ( _UNKNOWN_ . properties . bind || _UNKNOWN_ . properties , [ _UNKNOWN_ as Element , _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ . properties , _UNKNOWN_ . children ] ) ; } } ; export let _UNKNOWN_ = ( _UNKNOWN_ , parentNode , insertBefore : Node | null | undefined , _UNKNOWN_ ) : void => { let _UNKNOWN_ : Node | undefined ; let start = 0 ; let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ; let doc = parentNode . ownerDocument ; if ( _UNKNOWN_ === 's' ) { _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ = doc . createTextNode ( _UNKNOWN_ . text ! ) ; if ( insertBefore !== undefined ) { parentNode . insertBefore ( _UNKNOWN_ , insertBefore ) ; } else { parentNode . appendChild ( _UNKNOWN_ ) ; } } else { for ( let i = 0 ; i <= _UNKNOWN_ . length ; ++ i ) { let c = _UNKNOWN_ . charAt ( i ) ; if ( i === _UNKNOWN_ . length || c === 's' || c === 's' ) { let type = _UNKNOWN_ . charAt ( start - 0 ) ; let found = _UNKNOWN_ . slice ( start , i ) ; if ( type === 's' ) { ( _UNKNOWN_ ! as HTMLElement ) . classList . add ( found ) ; } else if ( type === 's' ) { ( _UNKNOWN_ ! as Element ) . id = found ; } else { if ( found === 's' ) { _UNKNOWN_ = extend ( _UNKNOWN_ , { namespace : _UNKNOWN_ } ) ; } if ( _UNKNOWN_ . namespace !== undefined ) { _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ = doc . _UNKNOWN_ ( _UNKNOWN_ . namespace , found ) ; } else { _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ = ( _UNKNOWN_ . _UNKNOWN_ || doc . createElement ( found ) ) ; if ( found === 's' && _UNKNOWN_ . properties && _UNKNOWN_ . properties . type !== undefined ) { ( _UNKNOWN_ as Element ) . setAttribute ( 's' , _UNKNOWN_ . properties . type ) ; } } if ( insertBefore !== undefined ) { parentNode . insertBefore ( _UNKNOWN_ , insertBefore ) ; } else if ( _UNKNOWN_ . parentNode !== parentNode ) { parentNode . appendChild ( _UNKNOWN_ ) ; } } start = i + 0 ; } } _UNKNOWN_ ( _UNKNOWN_ ! , _UNKNOWN_ , _UNKNOWN_ ) ; } } ; let _UNKNOWN_ : ( previous , _UNKNOWN_ , _UNKNOWN_ ) => boolean ; let _UNKNOWN_ = ( _UNKNOWN_ , classes : string | null | undefined , on ) => { if ( ! classes ) { return ; } classes . split ( 's' ) . forEach ( c => _UNKNOWN_ . classList . toggle ( c , on ) ) ; } ; let _UNKNOWN_ = ( _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ | undefined , properties : _UNKNOWN_ | undefined , _UNKNOWN_ ) => { if ( ! properties ) { return ; } let _UNKNOWN_ = false ; let propNames = Object . keys ( properties ) ; let _UNKNOWN_ = propNames . length ; for ( let i = 0 ; i < _UNKNOWN_ ; i ++ ) { let propName = propNames [ i ] ; let propValue = properties [ propName ] ; let previousValue = _UNKNOWN_ ! [ propName ] ; if ( propName === 's' ) { if ( previousValue !== propValue ) { _UNKNOWN_ ( _UNKNOWN_ as HTMLElement , previousValue , false ) ; _UNKNOWN_ ( _UNKNOWN_ as HTMLElement , propValue , true ) ; } } else if ( propName === 's' ) { let classList = ( _UNKNOWN_ as Element ) . classList ; let classNames = Object . keys ( propValue ) ; let _UNKNOWN_ = classNames . length ; for ( let j = 0 ; j < _UNKNOWN_ ; j ++ ) { let className = classNames [ j ] ; let on = ! ! propValue [ className ] ; let _UNKNOWN_ = ! ! previousValue [ className ] ; if ( on === _UNKNOWN_ ) { continue ; } _UNKNOWN_ = true ; if ( on ) { classList . add ( className ) ; } else { classList . remove ( className ) ; } } } else if ( propName === 's' ) { let _UNKNOWN_ = Object . keys ( propValue ) ; let _UNKNOWN_ = _UNKNOWN_ . length ; for ( let j = 0 ; j < _UNKNOWN_ ; j ++ ) { let styleName = _UNKNOWN_ [ j ] ; let _UNKNOWN_ = propValue [ styleName ] ; let _UNKNOWN_ = previousValue [ styleName ] ; if ( _UNKNOWN_ === _UNKNOWN_ ) { continue ; } _UNKNOWN_ = true ; if ( _UNKNOWN_ ) { _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ ! ( _UNKNOWN_ as HTMLElement , styleName , _UNKNOWN_ ) ; } else { _UNKNOWN_ . _UNKNOWN_ ! ( _UNKNOWN_ as HTMLElement , styleName , 's' ) ; } } } else { if ( ! propValue && typeof previousValue === 's' ) { propValue = 's' ; } if ( propName === 's' ) { let _UNKNOWN_ = ( _UNKNOWN_ as any ) [ propName ] ; if ( _UNKNOWN_ !== propValue && ( ( _UNKNOWN_ as any ) [ 's' ] ? _UNKNOWN_ === ( _UNKNOWN_ as any ) [ 's' ] : propValue !== previousValue ) ) { ( _UNKNOWN_ as any ) [ propName ] = propValue ; ( _UNKNOWN_ as any ) [ 's' ] = undefined ; } if ( propValue !== previousValue ) { _UNKNOWN_ = true ; } } else if ( propValue !== previousValue ) { let type = typeof propValue ; if ( type !== 's' || ! _UNKNOWN_ . _UNKNOWN_ ) { if ( type === 's' && propName !== 's' ) { if ( _UNKNOWN_ . namespace === _UNKNOWN_ && propName === 's' ) { ( _UNKNOWN_ as Element ) . setAttributeNS ( _UNKNOWN_ , propName , propValue ) ; } else if ( propName === 's' && propValue === 's' ) { ( _UNKNOWN_ as any ) . removeAttribute ( propName ) ; } else { ( _UNKNOWN_ as Element ) . setAttribute ( propName , propValue ) ; } } else { if ( ( _UNKNOWN_ as any ) [ propName ] !== propValue ) { ( _UNKNOWN_ as any ) [ propName ] = propValue ; } } _UNKNOWN_ = true ; } } } } return _UNKNOWN_ ; } ; let _UNKNOWN_ = ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ [ ] | undefined , _UNKNOWN_ : _UNKNOWN_ [ ] | undefined , _UNKNOWN_ ) => { if ( _UNKNOWN_ === _UNKNOWN_ ) { return false ; } _UNKNOWN_ = _UNKNOWN_ || _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ || _UNKNOWN_ ; let _UNKNOWN_ = _UNKNOWN_ . length ; let _UNKNOWN_ = _UNKNOWN_ . length ; let _UNKNOWN_ = 0 ; let newIndex = 0 ; let i ; let _UNKNOWN_ = false ; while ( newIndex < _UNKNOWN_ ) { let _UNKNOWN_ = ( _UNKNOWN_ < _UNKNOWN_ ) ? _UNKNOWN_ [ _UNKNOWN_ ] : undefined ; let _UNKNOWN_ = _UNKNOWN_ [ newIndex ] ; if ( _UNKNOWN_ !== undefined && same ( _UNKNOWN_ , _UNKNOWN_ ) ) { _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) || _UNKNOWN_ ; _UNKNOWN_ ++ ; } else { let _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ + 0 ) ; if ( _UNKNOWN_ >= 0 ) { for ( i = _UNKNOWN_ ; i < _UNKNOWN_ ; i ++ ) { _UNKNOWN_ ( _UNKNOWN_ [ i ] ) ; _UNKNOWN_ ( _UNKNOWN_ , i , _UNKNOWN_ , 's' ) ; } _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ [ _UNKNOWN_ ] , _UNKNOWN_ , _UNKNOWN_ ) || _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ + 0 ; } else { _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , ( _UNKNOWN_ < _UNKNOWN_ ) ? _UNKNOWN_ [ _UNKNOWN_ ] . _UNKNOWN_ : undefined , _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ , newIndex , _UNKNOWN_ , 's' ) ; } } newIndex ++ ; } if ( _UNKNOWN_ > _UNKNOWN_ ) { for ( i = _UNKNOWN_ ; i < _UNKNOWN_ ; i ++ ) { _UNKNOWN_ ( _UNKNOWN_ [ i ] ) ; _UNKNOWN_ ( _UNKNOWN_ , i , _UNKNOWN_ , 's' ) ; } } return _UNKNOWN_ ; } ; _UNKNOWN_ = ( previous , _UNKNOWN_ , _UNKNOWN_ ) => { let _UNKNOWN_ = previous . _UNKNOWN_ ! ; let _UNKNOWN_ = false ; if ( previous === _UNKNOWN_ ) { return false ; } let updated = false ; if ( _UNKNOWN_ . _UNKNOWN_ === 's' ) { if ( _UNKNOWN_ . text !== previous . text ) { let _UNKNOWN_ = _UNKNOWN_ . ownerDocument . createTextNode ( _UNKNOWN_ . text ! ) ; _UNKNOWN_ . parentNode ! . replaceChild ( _UNKNOWN_ , _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ = true ; return _UNKNOWN_ ; } _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ; } else { if ( _UNKNOWN_ . _UNKNOWN_ . lastIndexOf ( 's' , 0 ) === 0 ) { _UNKNOWN_ = extend ( _UNKNOWN_ , { namespace : _UNKNOWN_ } ) ; } if ( previous . text !== _UNKNOWN_ . text ) { updated = true ; if ( _UNKNOWN_ . text === undefined ) { _UNKNOWN_ . removeChild ( _UNKNOWN_ . firstChild ! ) ; } else { _UNKNOWN_ . textContent = _UNKNOWN_ . text ; } } _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ; updated = _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , previous . children , _UNKNOWN_ . children , _UNKNOWN_ ) || updated ; updated = _UNKNOWN_ ( _UNKNOWN_ , previous . properties , _UNKNOWN_ . properties , _UNKNOWN_ ) || updated ; if ( _UNKNOWN_ . properties && _UNKNOWN_ . properties . _UNKNOWN_ ) { _UNKNOWN_ . properties . _UNKNOWN_ . apply ( _UNKNOWN_ . properties . bind || _UNKNOWN_ . properties , [ < Element > _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ , _UNKNOWN_ . properties , _UNKNOWN_ . children ] ) ; } } if ( updated && _UNKNOWN_ . properties && _UNKNOWN_ . properties . _UNKNOWN_ ) { _UNKNOWN_ . properties . _UNKNOWN_ ( < Element > _UNKNOWN_ , _UNKNOWN_ . properties , previous . properties ) ; } return _UNKNOWN_ ; } ; export let _UNKNOWN_ = ( _UNKNOWN_ , _UNKNOWN_ ) : Projection => { return { _UNKNOWN_ : ( ) => _UNKNOWN_ , update : ( _UNKNOWN_ ) => { if ( _UNKNOWN_ . _UNKNOWN_ !== _UNKNOWN_ . _UNKNOWN_ ) { throw new Error ( 's' ) ; } let _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; } , _UNKNOWN_ : < Element > _UNKNOWN_ . _UNKNOWN_ } ; } ; </s>	O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O $string$ O O O O $string$ O O O O $any$ O O $any$ O O O O O O O O $T$ O O $any$ O O $T$ O $any$ O $any$ O O $any$ O O O $any$ O O O O O O $ObjectConstructor$ O $complex$ O $T$ O O $void$ O O $string$ O O O $any$ O $string$ O O O $T$ O O O O $string$ O O O O O O O $any$ O O $ObjectConstructor$ O $complex$ O $any$ O O $void$ O O $string$ O O O $any$ O $string$ O O $any$ O $string$ O O O O O O O $any$ O O O O O O O $any$ O $any$ O O O O O $any$ O $string$ O $any$ O $string$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $Object$ O $any$ O $any$ O $Object$ O O O O O O O $any$ O $any$ O $object$ O $any$ O $any$ O $object$ O O O O $any$ O $any$ O O $any$ O $any$ O O O O $void$ O O $Object$ O O O O O O $Object$ O O O O O O $ErrorConstructor$ O O O O O O O O $number$ O O $any$ O $any$ O O O $any$ O $number$ O O O O O $any$ O $string$ O O O O O O O $number$ O $number$ O $number$ O $any$ O $number$ O $number$ O O O O O O O $any$ O $number$ O O $any$ O O O O $number$ O O O O O O O O O O O $void$ O O $any$ O $any$ O O O $number$ O $any$ O $string$ O O O O $any$ O $any$ O $number$ O O O O $any$ O $string$ O O O O O O O O $any$ O $any$ O $any$ O O $object$ O $any$ O O $any$ O $Object$ O $undefined$ O $any$ O $object$ O $any$ O $Object$ O O $undefined$ O O O O $object$ O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O O $number$ O $number$ O O O $any$ O $any$ O $number$ O O O O O O $any$ O $any$ O O O O O $ErrorConstructor$ O O O O O O O O O O O $void$ O O $any$ O O O O O $any$ O $any$ O O O $void$ O $any$ O $any$ O $void$ O O O $void$ O O $void$ O $any$ O $Node$ O $complex$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $boolean$ O O O O $void$ O O $any$ O O O O $any$ O $any$ O O O O O $void$ O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O $any$ O $any$ O $void$ O $any$ O $any$ O $any$ O $object$ O $any$ O $any$ O O O $complex$ O $any$ O $Node$ O O O O O O O $void$ O O O O O O O $boolean$ O O O $any$ O $void$ O $void$ O O $any$ O $number$ O O O O O O $void$ O O $any$ O O O O O $any$ O $number$ O $any$ O O O O O $boolean$ O O $boolean$ O O O O O O $complex$ O O O O O $complex$ O O $complex$ O $number$ O $void$ O O $number$ O O O O O O O O $number$ O $void$ O O O O O O O O O $void$ O O $any$ O O O O $Node$ O $any$ O $Node$ O O O O $any$ O $any$ O O O $void$ O $any$ O $any$ O $void$ O O O $void$ O O O $Node$ O $complex$ O O $CSSStyleDeclaration$ O $string$ O O O O $void$ O O O O O O O $Node$ O $complex$ O O $Node$ O $complex$ O $T$ O $Node$ O O $void$ O $any$ O O O O O $void$ O $Node$ O $complex$ O $void$ O $any$ O $any$ O O O O O O O O $Node$ O $complex$ O O $Node$ O $complex$ O $T$ O $Node$ O O $void$ O $any$ O O O O O O $void$ O O $Node$ O $any$ O $any$ O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O $string[]$ O $ObjectConstructor$ O $complex$ O $any$ O O O $number$ O $string[]$ O $number$ O O O O $number$ O O O $number$ O $number$ O $number$ O O O O $string$ O $string[]$ O $number$ O O O $any$ O $any$ O $string$ O O O O $string$ O O O O O O $ErrorConstructor$ O O O O O O O O $string$ O O O O O $any$ O O O O $complex$ O O O O $void$ O $string$ O O $Node$ O $complex$ O O $DOMTokenList$ O $void$ O $string$ O O O O O O O $string$ O O O O O $string[]$ O $ObjectConstructor$ O $complex$ O $any$ O O O $number$ O $string[]$ O $number$ O O O O $number$ O O O $number$ O $number$ O $number$ O O O O $string$ O $string[]$ O $number$ O O O O $any$ O $string$ O O O O $Node$ O $complex$ O O $DOMTokenList$ O $void$ O $string$ O O O O O O O O $string$ O O O O O $string[]$ O $ObjectConstructor$ O $complex$ O $any$ O O O $number$ O $string[]$ O $number$ O O O O $number$ O O O $number$ O $number$ O $number$ O O O O $string$ O $string[]$ O $number$ O O O $any$ O $any$ O $string$ O O O O $any$ O O $void$ O $any$ O O $any$ O $void$ O O O $complex$ O $Node$ O $string$ O $any$ O O O O O O O O $string$ O O O $any$ O O O $any$ O $undefined$ O O O O O O $any$ O O O O O O O O O O $string$ O $number$ O O O O O O O O O O O $any$ O O $any$ O $any$ O $string$ O $any$ O $Node$ O $any$ O O O O O $string$ O O O O O O O O O O $any$ O $any$ O $any$ O O O $HTMLElement$ O $Event$ O O $any$ O $any$ O O O O $Event$ O O O O $Event$ O $EventTarget$ O O O O O O O O $Event$ O $EventTarget$ O $complex$ O O $string$ O O O O O O O O O O $Node$ O O O O $string$ O O $any$ O O O O O O O O O O $string$ O O O $string$ O O O O O O $any$ O $string$ O $string$ O $string$ O O O O O $Node$ O $complex$ O O $void$ O $string$ O O O $any$ O O O O O O $Node$ O $complex$ O O $void$ O $string$ O $any$ O O O O O O O $Node$ O O O O $string$ O O $any$ O O O O O O O $void$ O O $Node$ O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O O $void$ O $any$ O $Node$ O $undefined$ O $any$ O O O O O O O $void$ O O $Node$ O $any$ O $any$ O O O $void$ O $Node$ O $any$ O $any$ O $any$ O O O O $any$ O $string$ O O $Node$ O $string$ O $any$ O $string$ O O $void$ O $Node$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $void$ O O $any$ O $any$ O $void$ O $any$ O $any$ O $any$ O $object$ O $any$ O $any$ O O $Node$ O $complex$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O O $any$ O $Node$ O $Node$ O O O O O O O $any$ O O O O O O $Node$ O O O O O O $number$ O O O O $string$ O $any$ O $string$ O O $Document$ O $Node$ O $Document$ O O O $string$ O O O O $Node$ O $any$ O $Node$ O $Document$ O $Text$ O $any$ O $string$ O O O O O $Node$ O $undefined$ O O $Node$ O $T$ O $Node$ O $Node$ O O O O O $Node$ O $T$ O $Node$ O O O O O O O O O $number$ O O O $number$ O $string$ O $number$ O O $number$ O O O $string$ O $string$ O $string$ O $number$ O O O O $number$ O $string$ O $number$ O $string$ O O O $string$ O O O O O $string$ O $string$ O $string$ O $number$ O O O O O $string$ O $string$ O $string$ O $number$ O $number$ O O O O $string$ O O O O O $Node$ O O $complex$ O O $DOMTokenList$ O $void$ O $string$ O O O O O O $string$ O O O O O $Node$ O O $complex$ O O $string$ O $string$ O O O O O O $string$ O O O O $any$ O $T$ O $any$ O O $string$ O $string$ O O O O O O $any$ O $string$ O $undefined$ O O $Node$ O $any$ O $Node$ O $Document$ O O O $any$ O $string$ O $string$ O O O O O $Node$ O $any$ O $Node$ O O $any$ O $Node$ O $Document$ O O O $string$ O O O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O $undefined$ O O O $Node$ O $complex$ O O $void$ O O O $any$ O $any$ O $string$ O O O O O O $Node$ O $undefined$ O O $Node$ O $T$ O $Node$ O $Node$ O O O O O O $Node$ O $complex$ O $Node$ O O $Node$ O $T$ O $Node$ O O O O $number$ O $number$ O O O O O $void$ O $Node$ O O $any$ O $any$ O O O O O O $boolean$ O O $any$ O $any$ O $any$ O O O O O $void$ O O $HTMLElement$ O $string$ O O O O O O O $boolean$ O O O O O O $string$ O O O O O $string$ O $complex$ O O O O $void$ O $string$ O $HTMLElement$ O $DOMTokenList$ O $boolean$ O $string$ O $boolean$ O O O O O O $boolean$ O O $Node$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O O O O O O $boolean$ O O O O $string[]$ O $ObjectConstructor$ O $complex$ O $any$ O O O $number$ O $string[]$ O $number$ O O O O $number$ O O O $number$ O $number$ O $number$ O O O O $string$ O $string[]$ O $number$ O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O O $string$ O O O O $string$ O O O O O O $any$ O $any$ O O $void$ O $Node$ O $complex$ O $any$ O O O O $void$ O $Node$ O $complex$ O $any$ O O O O O O O O O $string$ O O O O O $DOMTokenList$ O O $Node$ O $complex$ O O $DOMTokenList$ O O $string[]$ O $ObjectConstructor$ O $complex$ O $any$ O O O $number$ O $string[]$ O $number$ O O O O $number$ O O O $number$ O $number$ O $number$ O O O O $string$ O $string[]$ O $number$ O O O $boolean$ O O O $any$ O $string$ O O O $boolean$ O O O $any$ O $string$ O O O O $boolean$ O $boolean$ O O O O O $boolean$ O O O O O $boolean$ O O $DOMTokenList$ O $void$ O $string$ O O O O O $DOMTokenList$ O $void$ O $string$ O O O O O O O O $string$ O O O O O $string[]$ O $ObjectConstructor$ O $complex$ O $any$ O O O $number$ O $string[]$ O $number$ O O O O $number$ O O O $number$ O $number$ O $number$ O O O O $string$ O $string[]$ O $number$ O O O $any$ O $any$ O $string$ O O O $any$ O $any$ O $string$ O O O O $any$ O $any$ O O O O O $boolean$ O O O O O $any$ O O $void$ O $any$ O O $any$ O $void$ O O $Node$ O $complex$ O $string$ O $any$ O O O O O $any$ O $void$ O O $Node$ O $complex$ O $string$ O O O O O O O O O O O O $any$ O O $any$ O O O O $any$ O O O O O O $string$ O O O O O $any$ O O $Node$ O O O O O O O O O $any$ O $any$ O O O $Node$ O O O O O O O $any$ O O $Node$ O O O O O O O $any$ O $any$ O O O O $Node$ O O O O O O O $any$ O O $Node$ O O O O O O O $undefined$ O O O O $any$ O $any$ O O $boolean$ O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O O O $string$ O O O O O O $any$ O $string$ O $string$ O $string$ O O O O O $Node$ O $complex$ O O $void$ O $string$ O O O $any$ O O O O O O $string$ O O O $any$ O O O O O $Node$ O O O O $any$ O O O O O O O O $Node$ O $complex$ O O $void$ O $string$ O $any$ O O O O O O O O O $Node$ O O O O $string$ O O $any$ O O O $Node$ O O O O $string$ O O $any$ O O O $boolean$ O O O O O O O O $boolean$ O O O O $boolean$ O O $any$ O $Node$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $number$ O $any$ O $number$ O O $number$ O $any$ O $number$ O O $number$ O O O O $number$ O O O O $number$ O O $boolean$ O O O O O $number$ O $number$ O O O $any$ O O $number$ O $number$ O O $any$ O $number$ O O $undefined$ O O $any$ O $any$ O $number$ O O O O $any$ O $undefined$ O O O $any$ O $any$ O O O $boolean$ O $boolean$ O $any$ O $any$ O $any$ O O $boolean$ O $number$ O O O O O O $number$ O $number$ O $any$ O $any$ O $number$ O O O O O O $number$ O O O O O O $number$ O $number$ O $number$ O $number$ O $number$ O O O $void$ O $any$ O $number$ O O O $void$ O $any$ O $number$ O $any$ O O O O O $boolean$ O $boolean$ O $any$ O $number$ O O $any$ O $any$ O O $boolean$ O $number$ O $number$ O O O O O O $void$ O $any$ O $Node$ O O $number$ O $number$ O O $any$ O $number$ O O $Node$ O $undefined$ O $any$ O O $void$ O $any$ O O $void$ O $any$ O $number$ O $any$ O O O O O O $number$ O O O O O $number$ O $number$ O O O O $number$ O $number$ O $number$ O $number$ O $number$ O O O $void$ O $any$ O $number$ O O O $void$ O $any$ O $number$ O $any$ O O O O O O O $boolean$ O O O $boolean$ O O $any$ O $any$ O $any$ O O O O $Node$ O $any$ O $Node$ O O O $boolean$ O O O O O $any$ O $any$ O O O O O O O $boolean$ O O O O O $any$ O $string$ O O O O O O $any$ O $string$ O $any$ O $string$ O O O $Text$ O $Node$ O $Document$ O $Text$ O $any$ O $string$ O O O $Node$ O $complex$ O O $T$ O $Text$ O $Node$ O O $any$ O $Node$ O $Text$ O $boolean$ O O O O $true$ O O $any$ O $Node$ O $Node$ O O O O O O $any$ O $string$ O $number$ O O O O O O O O O $any$ O $T$ O $any$ O O $string$ O $string$ O O O O O O $any$ O $string$ O $any$ O $string$ O O $boolean$ O O O O O $any$ O $string$ O $undefined$ O O $Node$ O $T$ O $Node$ O $ChildNode$ O O O O O O $Node$ O $string$ O $any$ O $string$ O O O $any$ O $Node$ O $Node$ O $boolean$ O $boolean$ O $any$ O $Node$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O $boolean$ O $boolean$ O $Node$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $boolean$ O O O $any$ O $any$ O $any$ O $any$ O $void$ O O $any$ O $any$ O $void$ O $any$ O $any$ O $any$ O $object$ O $any$ O $any$ O O O $complex$ O $Node$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $boolean$ O $any$ O $any$ O $any$ O $any$ O $void$ O O $any$ O $any$ O $void$ O O $complex$ O $Node$ O $any$ O $any$ O $any$ O $any$ O O O O $false$ O O O O O $Projection$ O O $any$ O $any$ O O $any$ O O O O $any$ O O O O $any$ O $void$ O O $any$ O O O O O $any$ O $string$ O $any$ O $string$ O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $any$ O O O O $Element$ O O $complex$ O $any$ O $Node$ O O O O O
<s> import { Projection , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , _UNKNOWN_ , extend , _UNKNOWN_ } from 's' ; const _UNKNOWN_ = { namespace : undefined , _UNKNOWN_ : ( ) => undefined , _UNKNOWN_ : undefined , _UNKNOWN_ : ( _UNKNOWN_ , styleName , value ) => { ( _UNKNOWN_ . style as any ) [ styleName ] = value ; } } ; export let _UNKNOWN_ = ( _UNKNOWN_ ? ) => { return extend ( _UNKNOWN_ , _UNKNOWN_ ) ; } ; export let dom = { create : ( _UNKNOWN_ , _UNKNOWN_ ? ) : Projection => { _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ , document . createElement ( 's' ) , undefined , _UNKNOWN_ ) ; return _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } , append : ( parentNode , _UNKNOWN_ , _UNKNOWN_ ? ) : Projection => { _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ , parentNode , undefined , _UNKNOWN_ ) ; return _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } , insertBefore : ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ? ) : Projection => { _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ . parentNode ! , _UNKNOWN_ , _UNKNOWN_ ) ; return _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } , merge : ( element , _UNKNOWN_ , _UNKNOWN_ ? ) : Projection => { _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ = element ; _UNKNOWN_ ( element , _UNKNOWN_ , _UNKNOWN_ ) ; return _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } , replace : ( element , _UNKNOWN_ , _UNKNOWN_ ? ) : Projection => { _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ , element . parentNode ! , element , _UNKNOWN_ ) ; element . parentNode ! . removeChild ( element ) ; return _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; } } ; </s>	O O O $any$ O $any$ O $any$ O O O O O O $void$ O $Projection$ O $T$ O $void$ O O O O O $any$ O O $undefined$ O $undefined$ O $any$ O O O O $undefined$ O $undefined$ O $undefined$ O $void$ O O $HTMLElement$ O $string$ O $string$ O O O O $HTMLElement$ O $CSSStyleDeclaration$ O O O O $string$ O O $string$ O O O O O O $any$ O O $any$ $any$ O O O O $T$ O $any$ O $any$ O O O O O O $complex$ O O $Projection$ O O $any$ O $any$ $any$ O O $any$ O O $any$ O $any$ O $any$ O O $void$ O $any$ O $Document$ O O O O O O $undefined$ O $any$ O O O $Projection$ O $any$ O $any$ O O O O $Projection$ O O $Element$ O $any$ O $any$ $any$ O O $any$ O O $any$ O $any$ O $any$ O O $void$ O $any$ O $Element$ O $undefined$ O $any$ O O O $Projection$ O $any$ O $any$ O O O O $Projection$ O O $Element$ O $any$ O $any$ $any$ O O $any$ O O $any$ O $any$ O $any$ O O $void$ O $any$ O $Element$ O $complex$ O O $Element$ O $any$ O O O $Projection$ O $any$ O $any$ O O O O $Projection$ O O $Element$ O $any$ O $any$ $any$ O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $Node$ O $Element$ O $void$ O $Element$ O $any$ O $any$ O O O $Projection$ O $any$ O $any$ O O O O $Projection$ O O $Element$ O $any$ O $any$ $any$ O O $any$ O O $any$ O $any$ O $any$ O O $void$ O $any$ O $Element$ O $complex$ O O $Element$ O $any$ O O $Element$ O $complex$ O O $T$ O $Element$ O O O $Projection$ O $any$ O $any$ O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { h } from 's' ; import { _UNKNOWN_ } from 's' ; import { dom } from 's' ; const version = 's' ; let _UNKNOWN_ = ( text ) : _UNKNOWN_ => { let handleClick = ( evt ) => { console . log ( 's' , { text } ) ; } ; return { render : ( ) => { return h ( 's' , { key : text , onclick : handleClick } , [ text ] ) ; } } ; } ; interface _UNKNOWN_ extends _UNKNOWN_ { update ( state ) : void ; } let _UNKNOWN_ = ( state ) : _UNKNOWN_ => { let _UNKNOWN_ = _UNKNOWN_ ( `template` ) ; let mapping = _UNKNOWN_ < string , _UNKNOWN_ > ( text => text , _UNKNOWN_ , ( ) => undefined ) ; mapping . map ( state . props ) ; return { update : ( newState ) => { mapping . map ( newState . props ) ; } , render : ( ) => { return h ( 's' , { 's' : `template` , key : state . id , classes : { active : state . active } } , [ _UNKNOWN_ . render ( ) , mapping . results . map ( cell => cell . render ( ) ) ] ) ; } } ; } ; interface Table extends _UNKNOWN_ { update ( state ) : void ; } let createTable = ( state ) : Table => { let mapping = _UNKNOWN_ < _UNKNOWN_ , _UNKNOWN_ > ( _UNKNOWN_ => _UNKNOWN_ . id , _UNKNOWN_ , ( source , target ) => target . update ( source ) ) ; mapping . map ( state . items ) ; return { update : ( newState ) => { state = newState ; mapping . map ( newState . items ) ; } , render : ( ) => { return h ( 's' , [ h ( 's' , mapping . results . map ( row => row . render ( ) ) ) ] ) ; } } ; } ; let _UNKNOWN_ = ( state ) : _UNKNOWN_ => { const time = state . time ; return h ( 's' , { 's' : `template` , styles : { background : `template` , _UNKNOWN_ : `template` } } ) ; } ; let _UNKNOWN_ = ( state ) : _UNKNOWN_ => { const items = state . items ; return h ( 's' , items . map ( item => _UNKNOWN_ ( item ) ) ) ; } ; let _UNKNOWN_ = ( state ) : _UNKNOWN_ => { return h ( 's' , { key : state . id } , [ `template` ] ) ; } ; let _UNKNOWN_ = ( state ) : _UNKNOWN_ => { return h ( 's' , { key : state . id } , state . children . map ( child => { if ( child . container ) { return _UNKNOWN_ ( child ) ; } else { return _UNKNOWN_ ( child ) ; } } ) ) ; } ; let _UNKNOWN_ = ( state ) : _UNKNOWN_ => { return h ( 's' , [ _UNKNOWN_ ( state . root ) ] ) ; } ; let _UNKNOWN_ = ( state : AppState | null ) => { let table : Table | undefined ; let _UNKNOWN_ = ( ) => { if ( ! state || state . location !== 's' ) { table = undefined ; } else { if ( table ) { table . update ( state . table ) ; } else { table = createTable ( state . table ) ; } } } ; _UNKNOWN_ ( ) ; return { update : ( newState ) => { state = newState ; _UNKNOWN_ ( ) ; } , render : ( ) => { let children : ( _UNKNOWN_ | null | undefined ) [ ] | undefined ; if ( state ) { switch ( state . location ) { case 's' : children = [ table ! . render ( ) ] ; break ; case 's' : children = [ _UNKNOWN_ ( state . anim ) ] ; break ; default : children = [ _UNKNOWN_ ( state . tree ) ] ; break ; } } return h ( 's' , children ) ; } } ; } ; document . title = version ; _UNKNOWN_ . init ( 's' , version ) ; let main = _UNKNOWN_ ( null ) ; document . addEventListener ( 's' , ( ) => { const container = document . querySelector ( 's' ) ! ; let projection = dom . append ( container , main . render ( ) , { } ) ; _UNKNOWN_ . run ( ( state ) => { main . update ( state ) ; projection . update ( main . render ( ) ) ; } , ( samples ) => { projection . _UNKNOWN_ . remove ( ) ; dom . append ( container , h ( 's' , [ JSON . stringify ( samples , undefined , 0 ) ] ) ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $complex$ O O O O O O O O O O $any$ O O $string$ O O $any$ O O O $void$ O O $MouseEvent$ O O O $Console$ O $void$ O O O O $string$ O O O O O O O $any$ O O O O O O $complex$ O O O O $string$ O $string$ O $void$ O $void$ O O O $string$ O O O O O O O O O $any$ O $any$ O $void$ O $any$ O O O O O O $any$ O O $any$ O O $any$ O O O $any$ O $any$ O O O O O $complex$ O $any$ O O O $any$ O O $string$ O $string$ O $any$ O O O O $undefined$ O O $complex$ O $void$ O $any$ O $string[]$ O O O O $void$ O O $any$ O O O $complex$ O $void$ O $any$ O $string[]$ O O O O $any$ O O O O O O $complex$ O O O O O O O O $number$ O $any$ O $number$ O $complex$ O O $boolean$ O $any$ O $boolean$ O O O O $any$ O $any$ O O O $complex$ O $any$ O $U[]$ O $any$ O $any$ O $any$ O O O O O O O O O O O O $any$ O $any$ O $void$ O $any$ O O O O O O $any$ O O $any$ O O $any$ O O O $complex$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $number$ O $any$ O O $any$ O $any$ O O $any$ O $void$ O $any$ O O O $complex$ O $void$ O $any$ O $any$ O O O O $void$ O O $any$ O O O $any$ O $any$ O $complex$ O $void$ O $any$ O $any$ O O O O $any$ O O O O O O $complex$ O O O O $complex$ O O O $complex$ O $any$ O $U[]$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O $any$ O O $any$ O O $any$ O O O $number$ O $any$ O $number$ O O $complex$ O O O O O O O O $complex$ O O $string$ O O O $string$ O O O O O O O O O $any$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $complex$ O O O $any$ O $U[]$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O $any$ O O $any$ O O O $complex$ O O O O $number$ O $any$ O $number$ O O O O O O O O O O $any$ O O $any$ O O $any$ O O O $complex$ O O O O $number$ O $any$ O $number$ O O $any$ O $any$ O $U[]$ O $any$ O O O O $any$ O $boolean$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O $any$ O O $any$ O O O $complex$ O O O O $any$ O $any$ O $any$ O O O O O O O $complex$ O O $AppState$ O $any$ O O O O O O $any$ O $any$ O O O O $void$ O O O O O O O O $AppState$ O $AppState$ O $string$ O O O O $any$ O $undefined$ O O O O O O $any$ O O $any$ O $void$ O $AppState$ O $any$ O O O O O $any$ O $any$ O $AppState$ O $any$ O O O O O O $void$ O O O O O $void$ O O $AppState$ O O O $AppState$ O $AppState$ O $void$ O O O O O $any$ O O O O O O $any$ O O $any$ O O O O O O O O O O O O $AppState$ O O O O $AppState$ O $string$ O O O O O $any$ O O $any$ O O $any$ O O O O O O O O O $any$ O O $any$ O $AppState$ O $any$ O O O O O O O $any$ O O $any$ O $AppState$ O $any$ O O O O O O O O $complex$ O O O $any$ O O O O O O O $Document$ O $string$ O O O $any$ O $void$ O O O O O O O $complex$ O $complex$ O O O O $Document$ O O O O O O O O O O $Element$ O $Document$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $Element$ O $complex$ O $any$ O O O O O O O $any$ O $void$ O O $AppState$ O O O $complex$ O $void$ O $AppState$ O O $Projection$ O $void$ O $complex$ O $any$ O O O O O O O $any$ O O O $Projection$ O $Element$ O $void$ O O O $complex$ O $Projection$ O $Element$ O $complex$ O O O O $JSON$ O $complex$ O $any$ O $undefined$ O O O O O O O O O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ , Projection , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import { _UNKNOWN_ , dom } from 's' ; let _UNKNOWN_ = ( node , rootNode ) => { let _UNKNOWN_ : Node [ ] = [ ] ; while ( node !== rootNode ) { _UNKNOWN_ . push ( node ) ; node = node . parentNode ! ; } return _UNKNOWN_ ; } ; let find : < T > ( items : T [ ] , predicate : ( item : T ) => boolean ) => T | undefined ; if ( Array . prototype . find ) { find = ( items , predicate ) => items . find ( predicate ) ; } else { find = ( items , predicate ) => items . filter ( predicate ) [ 0 ] ; } let _UNKNOWN_ = ( _UNKNOWN_ , _UNKNOWN_ : Node [ ] ) : _UNKNOWN_ | undefined => { let result : _UNKNOWN_ | undefined = _UNKNOWN_ ; _UNKNOWN_ . forEach ( node => { result = ( result && result . children ) ? find ( result . children , child => child . _UNKNOWN_ === node ) : undefined ; } ) ; return result ; } ; let _UNKNOWN_ = ( _UNKNOWN_ , _UNKNOWN_ : ( ) => Projection | undefined , _UNKNOWN_ ) : _UNKNOWN_ => { let _UNKNOWN_ = function ( this , evt ) { _UNKNOWN_ ( 's' , evt ) ; let projection = _UNKNOWN_ ( ) ! ; let _UNKNOWN_ = _UNKNOWN_ ( evt . currentTarget as Element , projection . _UNKNOWN_ ) ; _UNKNOWN_ . reverse ( ) ; let _UNKNOWN_ = _UNKNOWN_ ( projection . _UNKNOWN_ ( ) , _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; let result ; if ( _UNKNOWN_ ) { result = _UNKNOWN_ . properties ! [ `template` ] . apply ( _UNKNOWN_ . properties ! . bind || this , arguments ) ; } _UNKNOWN_ ( 's' , evt ) ; return result ; } ; return ( propertyName , eventHandler , _UNKNOWN_ , properties ) => _UNKNOWN_ ; } ; export let _UNKNOWN_ = ( _UNKNOWN_ ? ) : _UNKNOWN_ => { let _UNKNOWN_ ; let _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ ) ; let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ! ; let _UNKNOWN_ = true ; let scheduled : number | undefined ; let _UNKNOWN_ = false ; let _UNKNOWN_ = [ ] as Projection [ ] ; let _UNKNOWN_ = [ ] as ( ( ) => _UNKNOWN_ ) [ ] ; let _UNKNOWN_ = ( _UNKNOWN_ : ( node , _UNKNOWN_ , _UNKNOWN_ ) => Projection , node , _UNKNOWN_ : ( ) => _UNKNOWN_ ) : void => { let projection : Projection | undefined ; let _UNKNOWN_ = ( ) => projection ; _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; projection = _UNKNOWN_ ( node , _UNKNOWN_ ( ) , _UNKNOWN_ ) ; _UNKNOWN_ . push ( projection ) ; _UNKNOWN_ . push ( _UNKNOWN_ ) ; } ; let _UNKNOWN_ = ( ) => { scheduled = undefined ; if ( ! _UNKNOWN_ ) { return ; } _UNKNOWN_ = false ; _UNKNOWN_ ( 's' , undefined ) ; for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { let _UNKNOWN_ = _UNKNOWN_ [ i ] ( ) ; _UNKNOWN_ ( 's' , undefined ) ; _UNKNOWN_ [ i ] . update ( _UNKNOWN_ ) ; _UNKNOWN_ ( 's' , undefined ) ; } _UNKNOWN_ ( 's' , undefined ) ; _UNKNOWN_ = true ; } ; _UNKNOWN_ = { _UNKNOWN_ : _UNKNOWN_ , _UNKNOWN_ : ( ) => { if ( ! scheduled && ! _UNKNOWN_ ) { scheduled = requestAnimationFrame ( _UNKNOWN_ ) ; } } , stop : ( ) => { if ( scheduled ) { cancelAnimationFrame ( scheduled ) ; scheduled = undefined ; } _UNKNOWN_ = true ; } , resume : ( ) => { _UNKNOWN_ = false ; _UNKNOWN_ = true ; _UNKNOWN_ . _UNKNOWN_ ( ) ; } , append : ( parentNode , _UNKNOWN_ ) => { _UNKNOWN_ ( dom . append , parentNode , _UNKNOWN_ ) ; } , insertBefore : ( _UNKNOWN_ , _UNKNOWN_ ) => { _UNKNOWN_ ( dom . insertBefore , _UNKNOWN_ , _UNKNOWN_ ) ; } , merge : ( _UNKNOWN_ , _UNKNOWN_ ) => { _UNKNOWN_ ( dom . merge , _UNKNOWN_ , _UNKNOWN_ ) ; } , replace : ( _UNKNOWN_ , _UNKNOWN_ ) => { _UNKNOWN_ ( dom . replace , _UNKNOWN_ , _UNKNOWN_ ) ; } , detach : ( _UNKNOWN_ ) => { for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { if ( _UNKNOWN_ [ i ] === _UNKNOWN_ ) { _UNKNOWN_ . splice ( i , 0 ) ; return _UNKNOWN_ . splice ( i , 0 ) [ 0 ] ; } } throw new Error ( 's' ) ; } } ; return _UNKNOWN_ ; } ; </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $complex$ O O O O O $Node[]$ O O $Node$ O $Element$ O O O O $Node[]$ O O O O O O O O O O $Node$ O $Element$ O O $Node[]$ O $number$ O $Node$ O O $Node$ O $Node$ O $complex$ O O O O $Node[]$ O O O O $T$ O O $any$ O O $T[]$ O $any$ O O O $boolean$ O O $T$ O $any$ O O O O O $any$ O O O O O $ArrayConstructor$ O $any[]$ O $complex$ O O $T$ O O $T[]$ O $boolean$ O O $T[]$ O $complex$ O $boolean$ O O O O O $T$ O O $T[]$ O $boolean$ O O $T[]$ O $complex$ O $boolean$ O O O O O O O $any$ O O $any$ O $Node[]$ O O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $Node[]$ O $void$ O $Node$ O O $any$ O O $any$ O $any$ O $any$ O O $T$ O $any$ O $any$ O $any$ O $any$ O $Node$ O $Node$ O O $undefined$ O O O O O $any$ O O O O $any$ O O $any$ O $Projection$ O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O O $Node$ O $Event$ O O $any$ O O O $Event$ O O O $Projection$ O $Projection$ O O O O O $Node[]$ O $Node[]$ O $Event$ O $EventTarget$ O $complex$ O $Projection$ O $Element$ O O $Node[]$ O $Node[]$ O O O O $any$ O $any$ O $Projection$ O $any$ O O O $Node[]$ O O $any$ O $void$ O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $object$ O O O $IArguments$ O O O $any$ O O O $Event$ O O O $any$ O O O O O $string$ O $Function$ O $Node$ O $any$ O O $any$ O O O O O $any$ O O $any$ $any$ O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $boolean$ O O O O $number$ O O O O O O $boolean$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O O O $any$ O O O O O $void$ O O $Projection$ O O $Element$ O $any$ O $any$ O O $any$ O $Element$ O $any$ O O O O $any$ O O O O O O $Projection$ O $any$ O O O O $Projection$ O O O O $Projection$ O $any$ O $any$ O $any$ O $any$ O $Projection$ O $any$ O O $Projection$ O $Projection$ O $Element$ O $any$ O O O $any$ O O $any$ O $number$ O $Projection$ O O $any$ O $number$ O $any$ O O O O O $void$ O O O O O $number$ O $undefined$ O O O O $boolean$ O O O O O $boolean$ O O O $any$ O O O $undefined$ O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O $any$ O $any$ O $number$ O O O O $any$ O O O $undefined$ O O $any$ O $number$ O O $void$ O $any$ O O $any$ O O O $undefined$ O O O $any$ O O O $undefined$ O O $boolean$ O O O O O $any$ O O $void$ O $void$ O $void$ O O O O O O O O $number$ O O $boolean$ O O $number$ O $number$ O $void$ O O O O O $void$ O O O O O O O $number$ O O $void$ O $number$ O O $number$ O $undefined$ O O $boolean$ O O O O O $void$ O O O O O $boolean$ O O O $boolean$ O O O $any$ O $void$ O O O O O $void$ O O $Element$ O $any$ O O O $void$ O $complex$ O $Projection$ O $Element$ O $any$ O O O O $void$ O O $Element$ O $any$ O O O $void$ O $complex$ O $Projection$ O $Element$ O $any$ O O O O $void$ O O $Element$ O $any$ O O O $void$ O $complex$ O $Projection$ O $Element$ O $any$ O O O O $void$ O O $Element$ O $any$ O O O $void$ O $complex$ O $Projection$ O $Element$ O $any$ O O O O $Projection$ O O $any$ O O O O O O $number$ O O O $number$ O $any$ O $number$ O $number$ O O O O O $any$ O $number$ O O $any$ O O $any$ O $complex$ O $number$ O O O O O $any$ O $complex$ O $number$ O O O O O O O O O O O $ErrorConstructor$ O O O O O O O O $any$ O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from 's' ; export let _UNKNOWN_ ; if ( window . performance && window . performance . measure ) { let performance = window . performance ; let _UNKNOWN_ : _UNKNOWN_ | undefined ; _UNKNOWN_ = ( eventType , trigger : Event | undefined ) => { performance . mark ( eventType ) ; switch ( eventType ) { case 's' : performance . measure ( 's' , 's' , 's' ) ; break ; case 's' : performance . measure ( 's' , 's' , 's' ) ; break ; case 's' : performance . measure ( 's' , _UNKNOWN_ , 's' ) ; break ; case 's' : performance . measure ( 's' , 's' , 's' ) ; break ; } _UNKNOWN_ = eventType ; } ; } else { _UNKNOWN_ = ( ) => undefined ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O $complex$ O $Performance$ O $complex$ O $Performance$ O $void$ O O O $Performance$ O $complex$ O $Performance$ O O $any$ O $any$ O O O $any$ O O $any$ O $Event$ O $complex$ O O O O O $Performance$ O $void$ O $any$ O O O O $any$ O O O O O $Performance$ O $void$ O O O O O O O O O O O O O $Performance$ O $void$ O O O O O O O O O O O O O $Performance$ O $void$ O O O $any$ O O O O O O O O O $Performance$ O $void$ O O O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O $undefined$ O O O
<s> import { h } from 's' ; import { _UNKNOWN_ } from 's' ; import { _UNKNOWN_ } from 's' ; document . addEventListener ( 's' , ( ) => { let name = 's' ; let _UNKNOWN_ = ( evt ) => { name = ( evt . target as HTMLInputElement ) . value ; } ; let render = ( ) => { return h ( 's' , [ h ( 's' , [ h ( 's' , [ 's' ] ) , h ( 's' , { type : 's' , _UNKNOWN_ : true , value : name , _UNKNOWN_ : _UNKNOWN_ } ) ] ) , name ? [ h ( 's' , [ `template` ] ) ] : [ ] ] ) ; } ; _UNKNOWN_ ( { _UNKNOWN_ : _UNKNOWN_ } ) . merge ( document . body , render ) ; } ) ; </s>	O O O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O $Document$ O O O O O O O O O O $string$ O O O O $void$ O O $Event$ O O O $string$ O O $Event$ O $EventTarget$ O $complex$ O O $string$ O O O O $any$ O O O O O O $complex$ O O O O $complex$ O O O O $complex$ O O O O O O O O $complex$ O O O O $string$ O O O $boolean$ O O O $string$ O $string$ O $void$ O $void$ O O O O O $string$ O O $complex$ O O O O O O O O O O O O O O O O $any$ O O $any$ O $any$ O O O $void$ O $Document$ O $HTMLElement$ O $any$ O O O O O O
<s> import { _UNKNOWN_ } from 's' ; export let _UNKNOWN_ = < Result > ( ) : _UNKNOWN_ < Result > => { let _UNKNOWN_ : Object [ ] | undefined ; let _UNKNOWN_ : Result | undefined ; return { invalidate : ( ) => { _UNKNOWN_ = undefined ; _UNKNOWN_ = undefined ; } , result : ( inputs : Object [ ] , _UNKNOWN_ : ( ) => Result ) => { if ( _UNKNOWN_ ) { for ( let i = 0 ; i < inputs . length ; i ++ ) { if ( _UNKNOWN_ [ i ] !== inputs [ i ] ) { _UNKNOWN_ = undefined ; } } } if ( ! _UNKNOWN_ ) { _UNKNOWN_ = _UNKNOWN_ ( ) ; _UNKNOWN_ = inputs ; } return _UNKNOWN_ ; } } ; } ; </s>	O O O $any$ O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O O $Object[]$ O $ObjectConstructor$ O O O O O O $Result$ O $any$ O O O O O $void$ O O O O O $Result$ O $undefined$ O $Object[]$ O $undefined$ O O O $Result$ O O $Object[]$ O $ObjectConstructor$ O O O $Result$ O O O O $any$ O O O O O $Object[]$ O O O O O $number$ O O O $number$ O $Object[]$ O $number$ O $number$ O O O O O $Object[]$ O $number$ O O $Object[]$ O $number$ O O O $Result$ O $undefined$ O O O O O O O $Result$ O O $Result$ O $Result$ O O O $Object[]$ O $Object[]$ O O O $Result$ O O O O O O O
<s> export * from 's' ; export { dom } from 's' ; export { h } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; export { _UNKNOWN_ } from 's' ; </s>	O O O O O O O O $complex$ O O O O O O $complex$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O
<s> import chai = require ( 's' ) ; import chaiAsPromised = require ( 's' ) ; chai . use ( chaiAsPromised ) ; let expect = chai . expect ; import sinon = require ( 's' ) ; import sinonChai = require ( 's' ) ; chai . use ( sinonChai ) ; require ( 's' ) ; export { chai , expect , sinon } ; </s>	O O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O O O
<s> import { expect , sinon } from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let cache = _UNKNOWN_ ( ) ; let calculate = sinon . stub ( ) . returns ( 's' ) ; let result = cache . result ( [ 0 ] , calculate ) ; expect ( calculate ) . to . be . calledOnce ; expect ( result ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let cache = _UNKNOWN_ ( ) ; let calculate = sinon . stub ( ) . returns ( 's' ) ; cache . result ( [ 0 ] , calculate ) ; expect ( calculate ) . to . have . callCount ( 0 ) ; cache . result ( [ 0 ] , calculate ) ; expect ( calculate ) . to . have . callCount ( 0 ) ; cache . result ( [ 0 ] , calculate ) ; expect ( calculate ) . to . have . callCount ( 0 ) ; } ) ; it ( 's' , ( ) => { let cache = _UNKNOWN_ ( ) ; let calculate = sinon . stub ( ) . returns ( 's' ) ; cache . result ( [ 0 ] , calculate ) ; cache . invalidate ( ) ; cache . result ( [ 0 ] , calculate ) ; expect ( calculate ) . to . have . callCount ( 0 ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $unknown$ O $any$ O $unknown$ O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $unknown$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $unknown$ O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $unknown$ O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $unknown$ O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $unknown$ O O O O O $any$ O O $any$ O $void$ O O O $any$ O $unknown$ O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import { expect , sinon } from 's' ; import { dom , h } from 's' ; import { _UNKNOWN_ , SinonStub } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { let _UNKNOWN_ ; let clock ; beforeEach ( ( ) => { _UNKNOWN_ = sinon . stub ( ) ; global . window = < any > { _UNKNOWN_ } ; clock = sinon . useFakeTimers ( ) ; } ) ; afterEach ( ( ) => { delete global . window ; clock . restore ( ) ; } ) ; it ( 's' , ( ) => { let 0 = sinon . spy ( ) ; let 0 = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , [ h ( 's' , { } , [ h ( 's' , { _UNKNOWN_ : 0 } , [ h ( 's' , { } , [ h ( 's' , { _UNKNOWN_ : 0 } , [ ] ) ] ) ] ) ] ) ] ) ) ; projection . update ( h ( 's' , [ ] ) ) ; expect ( _UNKNOWN_ ) . to . have . been . calledOnce ; _UNKNOWN_ . yield ( ) ; expect ( 0 ) . to . have . been . called ; expect ( 0 ) . to . have . been . called ; } ) ; it ( 's' , ( ) => { let 0 = sinon . spy ( ) ; let 0 = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , [ h ( 's' , { _UNKNOWN_ : 0 } ) , h ( 's' , { _UNKNOWN_ : 0 } ) ] ) ) ; projection . update ( h ( 's' , [ ] ) ) ; expect ( _UNKNOWN_ ) . to . have . been . calledOnce ; _UNKNOWN_ . yield ( ) ; expect ( 0 ) . to . have . been . called ; expect ( 0 ) . to . have . been . called ; } ) ; it ( 's' , ( ) => { delete ( global as any ) . window ; let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , [ h ( 's' , { _UNKNOWN_ } ) ] ) ) ; projection . update ( h ( 's' , [ ] ) ) ; expect ( _UNKNOWN_ ) . to . not . have . been . called ; clock . tick ( 0 ) ; expect ( _UNKNOWN_ ) . to . have . been . called ; } ) ; it ( 's' , ( ) => { _UNKNOWN_ . _UNKNOWN_ ( ) ; let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , [ h ( 's' , { _UNKNOWN_ } ) ] ) ) ; let _UNKNOWN_ = projection . _UNKNOWN_ . children [ 0 ] ; projection . update ( h ( 's' , [ ] ) ) ; expect ( _UNKNOWN_ ) . to . have . been . calledWith ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { _UNKNOWN_ . _UNKNOWN_ ( ) ; let _UNKNOWN_ = sinon . spy ( ) ; let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , [ h ( 's' , { _UNKNOWN_ , bind : _UNKNOWN_ } ) ] ) ) ; projection . update ( h ( 's' , [ ] ) ) ; expect ( _UNKNOWN_ ) . to . have . been . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { _UNKNOWN_ . _UNKNOWN_ ( ) ; let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , [ h ( 's' , { _UNKNOWN_ , _UNKNOWN_ : ( element , _UNKNOWN_ ) => _UNKNOWN_ ( ) } ) ] ) ) ; projection . update ( h ( 's' , [ ] ) ) ; expect ( _UNKNOWN_ ) . to . have . been . called ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $complex$ O $complex$ O O O O O O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $SinonStub$ O O $SinonFakeTimers$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O O O O $complex$ O O O O $any$ O $any$ O O O $complex$ O O O O O O O $complex$ O O O O $any$ O $any$ O O O O O O O O O O O O O O O $Projection$ O $void$ O $complex$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $any$ O $any$ O O O $complex$ O O O O $any$ O $any$ O O O O O O $Projection$ O $void$ O $complex$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $any$ O O O O O O $Projection$ O $void$ O $complex$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $any$ O O O O O O O $Element$ O $Projection$ O $Element$ O $HTMLCollection$ O O O O $Projection$ O $void$ O $complex$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $Element$ O O O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $any$ O $any$ O $any$ O O O O O O $Projection$ O $void$ O $complex$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $any$ O $void$ O O $Element$ O $void$ O O $void$ O O O O O O O O $Projection$ O $void$ O $complex$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import { expect , sinon } from 's' ; import { h , dom } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , { _UNKNOWN_ } ) ) ; expect ( _UNKNOWN_ ) . to . have . been . calledWith ( projection . _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = sinon . spy ( ) ; let _UNKNOWN_ = sinon . spy ( ) ; dom . create ( h ( 's' , { _UNKNOWN_ : _UNKNOWN_ , bind : _UNKNOWN_ } ) ) ; expect ( _UNKNOWN_ ) . to . be . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , { _UNKNOWN_ } ) ) ; projection . update ( h ( 's' , { _UNKNOWN_ } ) ) ; expect ( _UNKNOWN_ ) . to . have . been . calledWith ( projection . _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = sinon . spy ( ) ; let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , { _UNKNOWN_ : _UNKNOWN_ , bind : _UNKNOWN_ } ) ) ; projection . update ( h ( 's' , { _UNKNOWN_ : _UNKNOWN_ , bind : _UNKNOWN_ } ) ) ; expect ( _UNKNOWN_ ) . to . be . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $complex$ O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $Projection$ O $Element$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $complex$ O $Projection$ O $complex$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $Projection$ O $Element$ O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O
<s> import { expect , sinon } from 's' ; import { dom , h } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , { _UNKNOWN_ } , [ 's' ] ) ) ; projection . update ( h ( 's' , { _UNKNOWN_ } , [ 's' ] ) ) ; expect ( _UNKNOWN_ ) . to . have . been . calledOnce ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , { _UNKNOWN_ } , [ 's' , h ( 's' ) , 's' ] ) ) ; projection . update ( h ( 's' , { _UNKNOWN_ } , [ 's' , h ( 's' ) , 's' ] ) ) ; expect ( _UNKNOWN_ ) . to . have . been . calledOnce ; _UNKNOWN_ . reset ( ) ; projection . update ( h ( 's' , { _UNKNOWN_ } , [ 's' , h ( 's' ) , 's' ] ) ) ; expect ( _UNKNOWN_ ) . to . not . have . been . called ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , { _UNKNOWN_ , href : 's' } ) ) ; projection . update ( h ( 's' , { _UNKNOWN_ , href : 's' } ) ) ; expect ( _UNKNOWN_ ) . to . have . been . calledWith ( projection . _UNKNOWN_ , sinon . match ( { href : 's' } ) , sinon . match ( { href : 's' } ) ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , [ ] ) ) ; projection . update ( h ( 's' , [ h ( 's' , { _UNKNOWN_ } ) ] ) ) ; expect ( _UNKNOWN_ ) . to . have . been . calledWith ( projection . _UNKNOWN_ . childNodes [ 0 ] , sinon . match ( { } ) ) ; } ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ = sinon . spy ( ) ; let projection = dom . create ( h ( 's' , [ h ( 's' , { _UNKNOWN_ } ) ] ) ) ; projection . update ( h ( 's' , [ ] ) ) ; expect ( _UNKNOWN_ ) . to . have . been . calledWithExactly ( projection . _UNKNOWN_ . childNodes [ 0 ] , sinon . match ( { } ) , sinon . match ( { } ) ) ; expect ( projection . _UNKNOWN_ . childNodes ) . to . have . length ( 0 ) ; _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( 0 ) ; expect ( projection . _UNKNOWN_ . childNodes ) . to . be . empty ; _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( 0 ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $complex$ O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $any$ O O O O O O O O $Projection$ O $void$ O $complex$ O O O O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $any$ O O O O O $complex$ O O O O O O O O O $Projection$ O $void$ O $complex$ O O O O $any$ O O O O O $complex$ O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $Projection$ O $void$ O $complex$ O O O O $any$ O O O O O $complex$ O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $any$ O $string$ O O O O O O $Projection$ O $void$ O $complex$ O O O O $any$ O $string$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $Projection$ O $Element$ O $any$ O $any$ O O $string$ O O O O O $any$ O $any$ O O $string$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $Projection$ O $Element$ O $NodeListOf<ChildNode>$ O O O O $any$ O $any$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $any$ O O O O O O $Projection$ O $void$ O $complex$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $Projection$ O $Element$ O $NodeListOf<ChildNode>$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O $Projection$ O $Element$ O $NodeListOf<ChildNode>$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $Projection$ O $Element$ O $NodeListOf<ChildNode>$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O
<s> import { expect } from 's' ; import { dom , h } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , { key : 0 } ) , h ( 's' , { key : 0 } ) , h ( 's' , { key : 0 } ) ] ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; expect ( div . children . length ) . to . equal ( 0 ) ; let _UNKNOWN_ = div . children [ 0 ] ; let _UNKNOWN_ = div . children [ 0 ] ; projection . update ( h ( 's' , [ h ( 's' , { key : 0 } ) , h ( 's' , { key : 0 } ) ] ) ) ; expect ( div . children . length ) . to . equal ( 0 ) ; expect ( div . children [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; expect ( div . children [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; projection . update ( h ( 's' , [ h ( 's' , { key : 0 } ) ] ) ) ; expect ( div . children . length ) . to . equal ( 0 ) ; expect ( div . children [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; projection . update ( h ( 's' , [ ] ) ) ; expect ( div . children . length ) . to . equal ( 0 ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , { key : 0 } ) , h ( 's' , { key : 0 } ) ] ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; expect ( div . children . length ) . to . equal ( 0 ) ; let _UNKNOWN_ = div . children [ 0 ] ; let _UNKNOWN_ = div . children [ 0 ] ; projection . update ( h ( 's' , [ h ( 's' , { key : 0 } ) , h ( 's' , { key : 0 } ) , h ( 's' , { key : 0 } ) , h ( 's' , { key : 0 } ) , h ( 's' , { key : 0 } ) ] ) ) ; expect ( div . children . length ) . to . equal ( 0 ) ; expect ( div . children [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; expect ( div . children [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , { bind : { } } ) ] ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; expect ( div . children . length ) . to . equal ( 0 ) ; projection . update ( h ( 's' , [ h ( 's' , { bind : { } } ) , h ( 's' , { bind : { } } ) ] ) ) ; expect ( div . children . length ) . to . equal ( 0 ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , { key : 's' } ) , h ( 's' , { key : 's' } ) ] ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; expect ( div . children . length ) . to . equal ( 0 ) ; let _UNKNOWN_ = div . children [ 0 ] ; let _UNKNOWN_ = div . children [ 0 ] ; projection . update ( h ( 's' , [ h ( 's' , { key : 's' } ) , h ( 's' , { key : 's' } ) , h ( 's' , { key : 's' } ) ] ) ) ; expect ( div . childNodes . length ) . to . equal ( 0 ) ; expect ( div . childNodes [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; expect ( div . childNodes [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , { key : false } ) , h ( 's' , < any > { key : null } ) , h ( 's' , { key : 's' } ) , h ( 's' , { } ) ] ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; expect ( div . children . length ) . to . equal ( 0 ) ; let _UNKNOWN_ = div . children [ 0 ] ; let _UNKNOWN_ = div . children [ 0 ] ; let _UNKNOWN_ = div . children [ 0 ] ; let _UNKNOWN_ = div . children [ 0 ] ; projection . update ( h ( 's' , [ h ( 's' , { key : 0 } ) ] ) ) ; expect ( div . children . length ) . to . equal ( 0 ) ; let newSpan = div . childNodes [ 0 ] ; expect ( newSpan ) . not . to . equal ( _UNKNOWN_ ) ; expect ( newSpan ) . not . to . equal ( _UNKNOWN_ ) ; expect ( newSpan ) . not . to . equal ( _UNKNOWN_ ) ; expect ( newSpan ) . not . to . equal ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = false ; let render = ( ) => h ( 's' , [ h ( 's' ) , _UNKNOWN_ && h ( 's' ) ] ) ; expect ( render ( ) . children ) . to . have . length ( 0 ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , { key : 's' } ) , h ( 's' , { key : 's' } ) , h ( 's' , { key : 's' } ) ] ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; expect ( div . children . length ) . to . equal ( 0 ) ; let _UNKNOWN_ = div . children [ 0 ] ; let _UNKNOWN_ = div . children [ 0 ] ; projection . update ( h ( 's' , [ h ( 's' , { key : 's' } ) , h ( 's' , { key : 's' } ) ] ) ) ; expect ( div . childNodes . length ) . to . equal ( 0 ) ; expect ( div . childNodes [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; expect ( div . childNodes [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , { key : 0 } ) , h ( 's' , { key : false } ) , h ( 's' , < any > { key : null } ) ] ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; expect ( div . children . length ) . to . equal ( 0 ) ; let _UNKNOWN_ = div . children [ 0 ] ; let _UNKNOWN_ = div . children [ 0 ] ; projection . update ( h ( 's' , [ h ( 's' , { key : 0 } ) , h ( 's' , < any > { key : null } ) ] ) ) ; expect ( div . childNodes . length ) . to . equal ( 0 ) ; expect ( div . childNodes [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; expect ( div . childNodes [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , { key : 's' } ) , h ( 's' , { key : 's' } ) ] ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; expect ( div . children . length ) . to . equal ( 0 ) ; let _UNKNOWN_ = div . children [ 0 ] ; let _UNKNOWN_ = div . children [ 0 ] ; projection . update ( h ( 's' , [ h ( 's' , { key : 's' } ) , h ( 's' , { key : 's' } ) ] ) ) ; expect ( div . childNodes . length ) . to . equal ( 0 ) ; expect ( div . childNodes [ 0 ] ) . to . not . equal ( _UNKNOWN_ ) ; expect ( div . childNodes [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , { key : 0 } ) , h ( 's' , { key : 0 } ) ] ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; expect ( div . children . length ) . to . equal ( 0 ) ; let _UNKNOWN_ = div . children [ 0 ] ; let _UNKNOWN_ = div . children [ 0 ] ; projection . update ( h ( 's' , [ h ( 's' , { key : 0 } ) , 's' , h ( 's' , { key : 0 } ) ] ) ) ; expect ( div . childNodes . length ) . to . equal ( 0 ) ; expect ( div . childNodes [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; expect ( div . childNodes [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ 's' ] ) ) ; let span = projection . _UNKNOWN_ as HTMLSpanElement ; expect ( span . childNodes . length ) . to . equal ( 0 ) ; projection . update ( h ( 's' , [ undefined ] ) ) ; expect ( span . childNodes . length ) . to . equal ( 0 ) ; projection . update ( h ( 's' , [ 's' ] ) ) ; expect ( span . childNodes . length ) . to . equal ( 0 ) ; projection . update ( h ( 's' , [ undefined ] ) ) ; expect ( span . childNodes . length ) . to . equal ( 0 ) ; projection . update ( h ( 's' , [ 's' ] ) ) ; expect ( span . childNodes . length ) . to . equal ( 0 ) ; projection . update ( h ( 's' , [ 's' ] ) ) ; expect ( span . childNodes . length ) . to . equal ( 0 ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , [ 's' ] ) , h ( 's' , [ 's' ] ) ] ) ) ; expect ( ( ) => { projection . update ( h ( 's' , [ h ( 's' , [ 's' ] ) , h ( 's' , [ 's' ] ) , h ( 's' , [ 's' ] ) ] ) ) ; } ) . to . throw ( ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , [ 's' ] ) , h ( 's' , [ 's' ] ) , h ( 's' , [ 's' ] ) ] ) ) ; expect ( ( ) => { projection . update ( h ( 's' , [ h ( 's' , [ 's' ] ) , h ( 's' , [ 's' ] ) ] ) ) ; } ) . to . throw ( ) ; } ) ; it ( 's' , ( ) => { let text = 's' ; let _UNKNOWN_ = ( evt ) => { text = ( evt . currentTarget as HTMLElement ) . innerHTML ; } ; let render = ( ) => h ( 's' , { _UNKNOWN_ : true , _UNKNOWN_ : _UNKNOWN_ , innerHTML : text } ) ; let projection = dom . create ( render ( ) ) ; projection . _UNKNOWN_ . removeChild ( projection . _UNKNOWN_ . firstChild ! ) ; _UNKNOWN_ ( < any > { currentTarget : projection . _UNKNOWN_ } ) ; projection . update ( render ( ) ) ; projection . _UNKNOWN_ . innerHTML = 's' ; _UNKNOWN_ ( < any > { currentTarget : projection . _UNKNOWN_ } ) ; projection . update ( render ( ) ) ; expect ( projection . _UNKNOWN_ . innerHTML ) . to . equal ( 's' ) ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ h ( 's' , [ h ( 's' , { cx : 's' , cy : 's' , r : 's' , fill : 's' } ) , h ( 's' , { href : 's' } ) ] ) , h ( 's' ) ] ) ) ; let svg = projection . _UNKNOWN_ . firstChild ! ; expect ( svg . _UNKNOWN_ ) . to . equal ( 's' ) ; let circle = svg . firstChild ! ; expect ( circle . _UNKNOWN_ ) . to . equal ( 's' ) ; let image = svg . lastChild ! ; expect ( image . attributes [ 0 ] . _UNKNOWN_ ) . to . equal ( 's' ) ; let span = projection . _UNKNOWN_ . lastChild ! ; expect ( span . _UNKNOWN_ ) . to . equal ( 's' ) ; projection . update ( h ( 's' , [ h ( 's' , [ h ( 's' , { key : 's' , cx : 's' , cy : 's' , r : 's' , fill : 's' } ) , h ( 's' , { href : 's' } ) ] ) , h ( 's' ) ] ) ) ; let _UNKNOWN_ = svg . firstChild ! ; expect ( _UNKNOWN_ . _UNKNOWN_ ) . to . equal ( 's' ) ; } ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $complex$ O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O $number$ O O O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O $number$ O O O O O O O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $any$ O $any$ O $Element$ O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $any$ O $any$ O $Element$ O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $number$ O O O O O O O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $any$ O $any$ O $Element$ O O $Projection$ O $void$ O $complex$ O O O O O O O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O $number$ O O O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O $number$ O O O O O O O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $any$ O $any$ O $Element$ O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $any$ O $any$ O $Element$ O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O ${}$ O O O O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O ${}$ O O O O O O $complex$ O O O O ${}$ O O O O O O O O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $string$ O O O O O $complex$ O O O O $string$ O O O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $string$ O O O O O $complex$ O O O O $string$ O O O O O $complex$ O O O O $string$ O O O O O O O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O O $any$ O $any$ O $Element$ O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O O $any$ O $any$ O $Element$ O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $boolean$ O O O O O $complex$ O O O O O O O $null$ O O O O O $complex$ O O O O $string$ O O O O O $complex$ O O O O O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $number$ O O O O O O O O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O $ChildNode$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O $any$ O $ChildNode$ O O $any$ O $any$ O $any$ O $Element$ O O $any$ O $ChildNode$ O O $any$ O $any$ O $any$ O $Element$ O O $any$ O $ChildNode$ O O $any$ O $any$ O $any$ O $Element$ O O $any$ O $ChildNode$ O O $any$ O $any$ O $any$ O $Element$ O O O O O $any$ O O O O O O O O $boolean$ O O O O $any$ O O O O $complex$ O O O O $complex$ O O O O $boolean$ O $complex$ O O O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $string$ O O O O O $complex$ O O O O $string$ O O O O O $complex$ O O O O $string$ O O O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $string$ O O O O O $complex$ O O O O $string$ O O O O O O O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O O $any$ O $any$ O $Element$ O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O O $any$ O $any$ O $Element$ O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O $boolean$ O O O O O $complex$ O O O O O O O $null$ O O O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O O O O $null$ O O O O O O O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O O $any$ O $any$ O $Element$ O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O O $any$ O $any$ O $Element$ O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $string$ O O O O O $complex$ O O O O $string$ O O O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $string$ O O O O O $complex$ O O O O $string$ O O O O O O O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O O $any$ O $any$ O $any$ O $Element$ O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O O $any$ O $any$ O $Element$ O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $number$ O O O O O $complex$ O O O O $number$ O O O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLDivElement$ O $HTMLCollection$ O $number$ O O $any$ O $any$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O O $Element$ O $HTMLDivElement$ O $HTMLCollection$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $number$ O O O O O O O $complex$ O O O O $number$ O O O O O O O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O O $any$ O $any$ O $Element$ O O $any$ O $HTMLDivElement$ O $NodeListOf<ChildNode>$ O O O O O $any$ O $any$ O $Element$ O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O O O O O O $HTMLSpanElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLSpanElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $undefined$ O O O O $any$ O $HTMLSpanElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O O O O O O $any$ O $HTMLSpanElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $undefined$ O O O O $any$ O $HTMLSpanElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O O O O O O $any$ O $HTMLSpanElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O O O O O O $any$ O $HTMLSpanElement$ O $NodeListOf<ChildNode>$ O $number$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O O O O O $complex$ O O O O O O O O O O O $any$ O O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O O O O O $complex$ O O O O O O O O $complex$ O O O O O O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O O O O O $complex$ O O O O O O O O $complex$ O O O O O O O O O O O $any$ O O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O O O O O $complex$ O O O O O O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O O $string$ O O O O $void$ O O $Event$ O O O $string$ O O $Event$ O $EventTarget$ O $complex$ O O $string$ O O O O $any$ O O O O $complex$ O O O O $boolean$ O O O $void$ O $void$ O $string$ O $string$ O O O O $Projection$ O $complex$ O $Projection$ O $any$ O O O O $Projection$ O $Element$ O $T$ O $Projection$ O $Element$ O $ChildNode$ O O O $void$ O O O O O $Element$ O $Projection$ O $Element$ O O O $Projection$ O $void$ O $any$ O O O O $Projection$ O $Element$ O $string$ O O O $void$ O O O O O $Element$ O $Projection$ O $Element$ O O O $Projection$ O $void$ O $any$ O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O O O $complex$ O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O O O O O $complex$ O O O O O O O O $ChildNode$ O $Projection$ O $Element$ O $ChildNode$ O O $any$ O $ChildNode$ O $string$ O O $any$ O $any$ O O O O O $ChildNode$ O $ChildNode$ O $ChildNode$ O O $any$ O $ChildNode$ O $string$ O O $any$ O $any$ O O O O O $ChildNode$ O $ChildNode$ O $ChildNode$ O O $any$ O $ChildNode$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $ChildNode$ O $Projection$ O $Element$ O $ChildNode$ O O $any$ O $ChildNode$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O O O $complex$ O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O O O $complex$ O O O O $string$ O O O O O O O $complex$ O O O O O O O O $ChildNode$ O $ChildNode$ O $ChildNode$ O O $any$ O $ChildNode$ O $string$ O O $any$ O $any$ O O O O O O O O O O O O O O O O O
<s> import { expect , sinon } from 's' ; import { dom , h } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ 's' ] ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , [ 's' ] ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , [ 's' , h ( 's' , [ 's' ] ) ] ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , [ 's' ] ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , [ 's' ] ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , [ 's' , 's' , 's' ] ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , [ 's' , 's' ] ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , [ 's' , 's' , 's' ] ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection = dom . create ( h ( 's' ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection = dom . create ( h ( 's' ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection = dom . create ( h ( 's' ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection = dom . create ( h ( 's' ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection = dom . create ( h ( 's' ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' ) ) ; expect ( ( ) => { projection . update ( h ( 's' ) ) ; } ) . to . throw ( "s" ) ; } ) ; it ( 's' , ( ) => { const node = document . createElement ( 's' ) ; ( node as any ) . foo = 's' ; const childNode = document . createElement ( 's' ) ; ( childNode as any ) . bar = 's' ; node . appendChild ( childNode ) ; const spy = sinon . spy ( node , 's' ) ; const _UNKNOWN_ = h ( 's' , { id : 's' } ) ; _UNKNOWN_ . _UNKNOWN_ = childNode ; const _UNKNOWN_ = h ( 's' , { id : 's' } , [ _UNKNOWN_ ] ) ; _UNKNOWN_ . _UNKNOWN_ = node ; const projection = dom . create ( _UNKNOWN_ ) ; const root = projection . _UNKNOWN_ as any ; expect ( root . outerHTML ) . to . equal ( 's' ) ; expect ( root . foo ) . to . equal ( 's' ) ; expect ( root . children [ 0 ] . bar ) . to . equal ( 's' ) ; expect ( spy . called ) . to . be . false ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $complex$ O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O O O $complex$ O O O O O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O O O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O O O O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O O $any$ O O O O O $Projection$ O $void$ O $complex$ O O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $HTMLDivElement$ O $Document$ O O O O O O O $HTMLDivElement$ O O O O $any$ O O O O $HTMLSpanElement$ O $Document$ O O O O O O O $HTMLSpanElement$ O O O O $any$ O O O $HTMLDivElement$ O $T$ O $HTMLSpanElement$ O O O $any$ O $any$ O $any$ O $HTMLDivElement$ O O O O O $any$ O $complex$ O O O O $string$ O O O O O $any$ O $Node$ O $HTMLSpanElement$ O O $any$ O $complex$ O O O O $string$ O O O O O $any$ O O O $any$ O $Node$ O $HTMLDivElement$ O O $Projection$ O $complex$ O $Projection$ O $any$ O O O $any$ O $Projection$ O $Element$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O
<s> import { expect , sinon } from 's' ; import { dom , h } from 's' ; let _UNKNOWN_ = ( propertyName , _UNKNOWN_ ) => { return function ( this ) { return _UNKNOWN_ . apply ( this , arguments ) ; } ; } ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { classes : { a : true , b : false } } ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; expect ( div . className ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { classes : { a : true , b : true } } ) ) ; expect ( div . className ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { classes : { a : false , b : true } } ) ) ; expect ( div . className ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { class : 's' } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { class : 's' } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { class : undefined } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { class : 's' } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { classes : { extra : true } , class : 's' } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { classes : { extra : true } , class : 's' } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { classes : { extra : false } , class : 's' } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => { dom . create ( h ( 's' , { className : 's' } as any ) ) ; } ) . to . throw ( Error ) ; } ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { href : 's' } ) ) ; let link = projection . _UNKNOWN_ as _UNKNOWN_ ; expect ( link . getAttribute ( 's' ) ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { href : 's' } ) ) ; expect ( link . getAttribute ( 's' ) ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { href : undefined } ) ) ; expect ( link . getAttribute ( 's' ) ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { href : undefined } ) ) ; let link = projection . _UNKNOWN_ as _UNKNOWN_ ; expect ( link . getAttribute ( 's' ) ) . to . be . null ; projection . update ( h ( 's' , { href : 's' } ) ) ; expect ( link . getAttribute ( 's' ) ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { disabled : true } ) ) ; let link = projection . _UNKNOWN_ as _UNKNOWN_ ; expect ( link . disabled ) . to . equal ( true ) ; projection . update ( h ( 's' , < any > { disabled : null } ) ) ; expect ( link . disabled ) . to . be . null ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { href : 's' , tabIndex : 0 } ) ) ; let link = projection . _UNKNOWN_ as _UNKNOWN_ ; expect ( link . tabIndex ) . to . equal ( 0 ) ; projection . update ( h ( 's' , { href : 's' , tabIndex : 0 } ) ) ; expect ( link . tabIndex ) . to . equal ( 0 ) ; projection . update ( h ( 's' , { href : 's' , tabIndex : undefined } ) ) ; expect ( link . tabIndex ) . to . equal ( 0 ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { innerHTML : 's' } ) ) ; let _UNKNOWN_ = projection . _UNKNOWN_ as HTMLElement ; expect ( _UNKNOWN_ . childNodes ) . to . have . length ( 0 ) ; expect ( _UNKNOWN_ . firstChild ! . textContent ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { innerHTML : 's' } ) ) ; expect ( _UNKNOWN_ . childNodes ) . to . have . length ( 0 ) ; expect ( _UNKNOWN_ . firstChild ! . textContent ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { scrollTop : 0 } ) ) ; let div = projection . _UNKNOWN_ as HTMLDivElement ; Object . defineProperty ( div , 's' , { get : ( ) => 0 , set : sinon . stub ( ) . throws ( 's' ) } ) ; projection . update ( h ( 's' , { scrollTop : 0 } ) ) ; } ) ; it ( 's' , ( ) => { let parentNode = { appendChild : sinon . spy ( ( child ) => { expect ( child . getAttribute ( 's' ) ) . to . equal ( 's' ) ; } ) , ownerDocument : { createElement : sinon . spy ( ( tag ) => { return document . createElement ( tag ) ; } ) } } ; dom . append ( < any > parentNode , h ( 's' , { type : 's' } ) ) ; expect ( parentNode . appendChild ) . to . have . been . called ; expect ( parentNode . ownerDocument . createElement ) . to . have . been . called ; } ) ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ = 's' ; let _UNKNOWN_ = ( evt ) => { _UNKNOWN_ = ( evt . target as HTMLInputElement ) . value . substr ( 0 , 0 ) ; } ; let _UNKNOWN_ = ( ) => h ( 's' , { value : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ } ) ; let projection = dom . create ( _UNKNOWN_ ( ) , { _UNKNOWN_ : _UNKNOWN_ } ) ; let inputElement = ( projection . _UNKNOWN_ as HTMLInputElement ) ; expect ( inputElement . value ) . to . equal ( _UNKNOWN_ ) ; inputElement . value = 's' ; inputElement . _UNKNOWN_ ( { target : inputElement } as any ) ; expect ( _UNKNOWN_ ) . to . equal ( 's' ) ; projection . update ( _UNKNOWN_ ( ) ) ; expect ( inputElement . value ) . to . equal ( 's' ) ; inputElement . value = 's' ; inputElement . _UNKNOWN_ ( { target : inputElement } as any ) ; expect ( _UNKNOWN_ ) . to . equal ( 's' ) ; projection . update ( _UNKNOWN_ ( ) ) ; expect ( inputElement . value ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = 's' ; let _UNKNOWN_ = ( evt ) => { _UNKNOWN_ = ( evt . target as HTMLInputElement ) . value ; } ; let _UNKNOWN_ = ( ) => h ( 's' , { value : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ } ) ; let projection = dom . create ( _UNKNOWN_ ( ) , { _UNKNOWN_ : _UNKNOWN_ } ) ; let inputElement = ( projection . _UNKNOWN_ as HTMLInputElement ) ; expect ( inputElement . value ) . to . equal ( _UNKNOWN_ ) ; inputElement . value = 's' ; inputElement . _UNKNOWN_ ( { target : inputElement } as any ) ; expect ( _UNKNOWN_ ) . to . equal ( 's' ) ; projection . update ( _UNKNOWN_ ( ) ) ; inputElement . value = 's' ; projection . update ( _UNKNOWN_ ( ) ) ; expect ( _UNKNOWN_ ) . to . equal ( 's' ) ; expect ( inputElement . value ) . to . equal ( 's' ) ; inputElement . _UNKNOWN_ ( { target : inputElement } as any ) ; expect ( _UNKNOWN_ ) . to . equal ( 's' ) ; projection . update ( _UNKNOWN_ ( ) ) ; } ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = 's' ; let _UNKNOWN_ = ( evt ) => { _UNKNOWN_ = ( evt . target as HTMLInputElement ) . value ; } ; let _UNKNOWN_ = ( ) => h ( 's' , { value : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ } ) ; let projection = dom . create ( _UNKNOWN_ ( ) , { _UNKNOWN_ : _UNKNOWN_ } ) ; let inputElement = ( projection . _UNKNOWN_ as HTMLInputElement ) ; expect ( inputElement . value ) . to . equal ( _UNKNOWN_ ) ; _UNKNOWN_ = 's' ; projection . update ( _UNKNOWN_ ( ) ) ; expect ( inputElement . value ) . to . equal ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = 's' ; let _UNKNOWN_ = ( evt ) => { _UNKNOWN_ = ( evt . target as HTMLInputElement ) . value ; } ; let _UNKNOWN_ = ( ) => h ( 's' , { value : _UNKNOWN_ , _UNKNOWN_ : _UNKNOWN_ } ) ; let projection = dom . create ( _UNKNOWN_ ( ) , { _UNKNOWN_ : _UNKNOWN_ } ) ; let inputElement = ( projection . _UNKNOWN_ as HTMLInputElement ) ; expect ( inputElement . value ) . to . equal ( _UNKNOWN_ ) ; inputElement . value = 's' ; projection . update ( _UNKNOWN_ ( ) ) ; expect ( inputElement . value ) . not . to . equal ( _UNKNOWN_ ) ; } ) ; it ( 's' , ( ) => { let model = 's' ; let _UNKNOWN_ = ( evt ) => { let element = evt . target as HTMLInputElement ; model = element . value ; if ( model . indexOf ( 's' ) > 0 ) { model = model . replace ( "s" , 's' ) ; element . value = model ; } } ; let _UNKNOWN_ = ( ) => h ( 's' , { value : model , _UNKNOWN_ : _UNKNOWN_ } ) ; let projection = dom . create ( _UNKNOWN_ ( ) , { _UNKNOWN_ : _UNKNOWN_ } ) ; let inputElement = ( projection . _UNKNOWN_ as HTMLInputElement ) ; expect ( inputElement . value ) . to . equal ( model ) ; inputElement . value = 's' ; inputElement . _UNKNOWN_ ( { target : inputElement } as any as Event ) ; projection . update ( _UNKNOWN_ ( ) ) ; inputElement . value = 's' ; inputElement . _UNKNOWN_ ( { target : inputElement } as any as Event ) ; projection . update ( _UNKNOWN_ ( ) ) ; expect ( inputElement . value ) . to . equal ( 's' ) ; model = 's' ; projection . update ( _UNKNOWN_ ( ) ) ; expect ( inputElement . value ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let role : string | undefined = 's' ; let _UNKNOWN_ = ( ) => h ( 's' , { role : role } ) ; let projection = dom . create ( _UNKNOWN_ ( ) , { _UNKNOWN_ : _UNKNOWN_ } ) ; let element = projection . _UNKNOWN_ ; expect ( element . attributes ) . to . have . property ( 's' ) ; expect ( element . getAttribute ( 's' ) ) . to . equal ( role ) ; role = undefined ; projection . update ( _UNKNOWN_ ( ) ) ; expect ( element . attributes ) . to . not . have . property ( 's' ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $complex$ O $complex$ O O O O O $any$ O O $string$ O $Function$ O O O O O O $Node$ O O O $Function$ O $any$ O O O $IArguments$ O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O $true$ O O O $false$ O O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLDivElement$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O $true$ O O O $true$ O O O O O O O $any$ O $HTMLDivElement$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O $false$ O O O $true$ O O O O O O O $any$ O $HTMLDivElement$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $string$ O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $string$ O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $undefined$ O $undefined$ O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $string$ O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O $true$ O O O O $string$ O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O $true$ O O O O $string$ O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O $false$ O O O O $string$ O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $complex$ O $Projection$ O $complex$ O O O O $string$ O O O O O O O O O O O $any$ O $any$ O $ErrorConstructor$ O O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $string$ O O O O O O O $HTMLLinkElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLLinkElement$ O $string$ O O O O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $string$ O O O O O O $any$ O $HTMLLinkElement$ O $string$ O O O O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $undefined$ O $undefined$ O O O O $any$ O $HTMLLinkElement$ O $string$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $undefined$ O $undefined$ O O O O O $HTMLLinkElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLLinkElement$ O $string$ O O O O O $any$ O $any$ O $any$ O $Projection$ O $void$ O $complex$ O O O O $string$ O O O O O O $any$ O $HTMLLinkElement$ O $string$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $true$ O O O O O O O $HTMLLinkElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLLinkElement$ O $boolean$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O O O O $null$ O O O O O O $any$ O $HTMLLinkElement$ O $boolean$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $string$ O O O $number$ O O O O O O O $HTMLLinkElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLLinkElement$ O $number$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $string$ O O O $number$ O O O O O O $any$ O $HTMLLinkElement$ O $number$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $string$ O O O $undefined$ O $undefined$ O O O O $any$ O $HTMLLinkElement$ O $number$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $string$ O O O O O O O $HTMLElement$ O $Projection$ O $Element$ O $complex$ O $any$ O $HTMLElement$ O $NodeListOf<ChildNode>$ O O $any$ O $any$ O $any$ O O O O $any$ O $HTMLElement$ O $ChildNode$ O O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $string$ O O O O O O $any$ O $HTMLElement$ O $NodeListOf<ChildNode>$ O O $any$ O $any$ O $any$ O O O O $any$ O $HTMLElement$ O $ChildNode$ O O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $number$ O O O O O O O $HTMLDivElement$ O $Projection$ O $Element$ O $complex$ O $ObjectConstructor$ O $any$ O $HTMLDivElement$ O O O O $number$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O $Projection$ O $void$ O $complex$ O O O O $number$ O O O O O O O O O $any$ O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O $HTMLElement$ O O O $any$ O $HTMLElement$ O $string$ O O O O O $any$ O $any$ O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O $string$ O O O O $Document$ O O O $string$ O O O O O O O $complex$ O $Projection$ O O O O $complex$ O $complex$ O O O O $string$ O O O O O O $any$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O O O O $string$ O O O O $void$ O O $Event$ O O O $string$ O O $Event$ O $EventTarget$ O $complex$ O O $string$ O $string$ O O O O O O O O O $any$ O O O O $complex$ O O O O $string$ O $string$ O $void$ O $void$ O O O O $Projection$ O $complex$ O $Projection$ O $any$ O O O O $any$ O $any$ O O O O $HTMLInputElement$ O O $Projection$ O $Element$ O $complex$ O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O $string$ O O $HTMLInputElement$ O $string$ O O O $HTMLInputElement$ O $any$ O O $HTMLInputElement$ O $HTMLInputElement$ O O O O O $any$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $any$ O O O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O O O O $HTMLInputElement$ O $string$ O O O $HTMLInputElement$ O $any$ O O $HTMLInputElement$ O $HTMLInputElement$ O O O O O $any$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $any$ O O O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $string$ O O O O $void$ O O $Event$ O O O $string$ O O $Event$ O $EventTarget$ O $complex$ O O $string$ O O O O $any$ O O O O $complex$ O O O O $string$ O $string$ O $void$ O $void$ O O O O $Projection$ O $complex$ O $Projection$ O $any$ O O O O $any$ O $any$ O O O O $HTMLInputElement$ O O $Projection$ O $Element$ O $complex$ O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O $string$ O O $HTMLInputElement$ O $string$ O O O $HTMLInputElement$ O $any$ O O $HTMLInputElement$ O $HTMLInputElement$ O O O O O $any$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $any$ O O O O $HTMLInputElement$ O $string$ O O O $Projection$ O $void$ O $any$ O O O O $any$ O $string$ O O $any$ O $any$ O O O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O O O O $HTMLInputElement$ O $any$ O O $HTMLInputElement$ O $HTMLInputElement$ O O O O O $any$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $any$ O O O O O O O O O O $any$ O O O O O O O O $string$ O O O O $void$ O O $Event$ O O O $string$ O O $Event$ O $EventTarget$ O $complex$ O O $string$ O O O O $any$ O O O O $complex$ O O O O $string$ O $string$ O $void$ O $void$ O O O O $Projection$ O $complex$ O $Projection$ O $any$ O O O O $any$ O $any$ O O O O $HTMLInputElement$ O O $Projection$ O $Element$ O $complex$ O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O $string$ O O $string$ O O O $Projection$ O $void$ O $any$ O O O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O O O O $void$ O O $Event$ O O O $string$ O O $Event$ O $EventTarget$ O $complex$ O O $string$ O O O O $any$ O O O O $complex$ O O O O $string$ O $string$ O $void$ O $void$ O O O O $Projection$ O $complex$ O $Projection$ O $any$ O O O O $any$ O $any$ O O O O $HTMLInputElement$ O O $Projection$ O $Element$ O $complex$ O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O $string$ O O $HTMLInputElement$ O $string$ O O O $Projection$ O $void$ O $any$ O O O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O $any$ O $string$ O O O O O $any$ O O O O O O O O $string$ O O O O $void$ O O $Event$ O O O O $HTMLInputElement$ O $Event$ O $EventTarget$ O $complex$ O $string$ O $HTMLInputElement$ O $string$ O O O $string$ O $number$ O O O O O O O $string$ O $string$ O $complex$ O O O O O O $HTMLInputElement$ O $string$ O $string$ O O O O O $any$ O O O O $complex$ O O O O $string$ O $string$ O $void$ O $void$ O O O O $Projection$ O $complex$ O $Projection$ O $any$ O O O O $any$ O $any$ O O O O $HTMLInputElement$ O O $Projection$ O $Element$ O $complex$ O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O $string$ O O $HTMLInputElement$ O $string$ O O O $HTMLInputElement$ O $any$ O O $HTMLInputElement$ O $HTMLInputElement$ O O O O $complex$ O O $Projection$ O $void$ O $any$ O O O O $HTMLInputElement$ O $string$ O O O $HTMLInputElement$ O $any$ O O $HTMLInputElement$ O $HTMLInputElement$ O O O O $complex$ O O $Projection$ O $void$ O $any$ O O O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O O O O $string$ O O O $Projection$ O $void$ O $any$ O O O O $any$ O $HTMLInputElement$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $string$ O O O O O O O O $any$ O O O O $complex$ O O O O $string$ O $string$ O O O O $Projection$ O $complex$ O $Projection$ O $any$ O O O O $any$ O $any$ O O O O $Element$ O $Projection$ O $Element$ O $any$ O $Element$ O $NamedNodeMap$ O O $any$ O $any$ O $any$ O O O O $any$ O $Element$ O $string$ O O O O O $any$ O $any$ O $string$ O O $string$ O $undefined$ O $Projection$ O $void$ O $any$ O O O O $any$ O $Element$ O $NamedNodeMap$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O O O O
<s> import { expect } from 's' ; import { dom , h } from 's' ; describe ( 's' , ( ) => { describe ( 's' , ( ) => { it ( 's' , ( ) => { try { dom . create ( h ( 's' , { styles : { height : 0 } as any } ) ) ; expect . fail ( ) ; } catch ( e ) { expect ( e . message . indexOf ( 's' ) >= 0 ) . to . be . true ; } } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { styles : { height : 's' } } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { styles : { height : 's' } } ) ) ; projection . update ( h ( 's' , { styles : { height : 's' } } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { styles : { height : 's' } } ) ) ; projection . update ( h ( 's' , { styles : { height : null } } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; } ) ; it ( 's' , ( ) => { let projection = dom . create ( h ( 's' , { styles : { height : undefined } } ) ) ; projection . update ( h ( 's' , { styles : { height : 's' } } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { styles : { height : 's' } } ) ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = ( _UNKNOWN_ , styleName , value ) => { ( _UNKNOWN_ as any ) . style [ `template` ] = value ; } ; let projection = dom . create ( h ( 's' , { styles : { height : 's' } } ) , { _UNKNOWN_ : _UNKNOWN_ } ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; projection . update ( h ( 's' , { styles : { height : 's' } } ) ) ; expect ( projection . _UNKNOWN_ . outerHTML ) . to . equal ( 's' ) ; } ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $complex$ O $complex$ O O O O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O O $complex$ O $Projection$ O $complex$ O O O O $any$ O O $number$ O O O O O O O O O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O $string$ O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O $string$ O O O O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O $string$ O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O $string$ O O O O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O $null$ O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O $undefined$ O $undefined$ O O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O $string$ O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O $string$ O O O O O O O O O O $any$ O O O O O O O O $void$ O O $Element$ O $string$ O $string$ O O O O $Element$ O O O O $any$ O O O O $string$ O O O O $Projection$ O $complex$ O $Projection$ O $complex$ O O O O $complex$ O O $string$ O O O O O O O $void$ O $void$ O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $Projection$ O $void$ O $complex$ O O O O $complex$ O O $string$ O O O O O O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O O O O O O O O O O O
<s> import { expect } from 's' ; import { h , _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let _UNKNOWN_ = ( text ) : _UNKNOWN_ => { return { _UNKNOWN_ : 's' , properties : undefined , children : undefined , text : text , _UNKNOWN_ : null } ; } ; it ( 's' , ( ) => { let _UNKNOWN_ = h ( 's' , [ 's' , null , [ ] as string [ ] , [ null ] , [ 's' ] , [ h ( 's' ) ] , [ h ( 's' , [ 's' ] ) ] , [ [ [ [ 's' ] , null ] , 's' ] ] ] ) ; expect ( _UNKNOWN_ . children ) . to . deep . equal ( [ _UNKNOWN_ ( 's' ) , _UNKNOWN_ ( 's' ) , h ( 's' ) , h ( 's' , [ 's' ] ) , _UNKNOWN_ ( 's' ) , _UNKNOWN_ ( 's' ) ] ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = h ( 's' , [ 's' , h ( 's' , [ [ 's' ] ] ) , h ( 's' , { src : 's' } ) , 's' , undefined , null , [ undefined , h ( 's' , [ 's' ] ) , h ( 's' , undefined , [ 's' ] ) , h ( 's' , undefined ) , h ( 's' , undefined , undefined ) , h ( 's' , [ undefined , undefined ] ) , h ( 's' , [ null , null ] ) , h ( 's' , [ null ] ) ] ] ) ; expect ( _UNKNOWN_ . children ) . to . deep . equal ( [ _UNKNOWN_ ( 's' ) , h ( 's' , [ 's' , undefined ] ) , h ( 's' , { src : 's' } ) , _UNKNOWN_ ( 's' ) , h ( 's' , [ 's' ] ) , h ( 's' , [ 's' ] , undefined ) , h ( 's' ) , h ( 's' ) , h ( 's' ) , h ( 's' ) , h ( 's' ) ] ) ; } ) ; it ( 's' , ( ) => { expect ( h ( 's' , [ [ 's' ] ] ) ) . to . deep . equal ( { _UNKNOWN_ : 's' , properties : undefined , text : undefined , children : [ _UNKNOWN_ ( 's' ) ] , _UNKNOWN_ : null } ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => h ( 's' , h ( 's' ) ) ) . to . throw ( 's' ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => h ( 's' , { } , h ( 's' ) as any ) ) . to . throw ( 's' ) ; } ) ; it ( 's' , ( ) => { expect ( ( ) => h ( 's' , 's' as any ) ) . to . throw ( 's' ) ; expect ( ( ) => h ( 's' , { } as any , 's' as any ) ) . to . throw ( 's' ) ; } ) ; } ) ; </s>	O O O $any$ O O O O O O $complex$ O $any$ O O O O $any$ O O O O O O O O $any$ O O $string$ O O $any$ O O O O $string$ O O O $undefined$ O $undefined$ O $undefined$ O $undefined$ O $string$ O $string$ O $null$ O O O O O O $any$ O O O O O O O O $any$ O $complex$ O O O O O O O O O O O O O O O O O O O O O O O O $complex$ O O O O O O $complex$ O O O O O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O O O O $complex$ O O O O $complex$ O O O O O O O O $any$ O O O O $any$ O O O O O O O O O $any$ O O O O O O O O $any$ O $complex$ O O O O O O $complex$ O O O O O O O O O O $complex$ O O O O $string$ O O O O O O O $undefined$ O O O O $undefined$ O $complex$ O O O O O O O O $complex$ O O O $undefined$ O O O O O O $complex$ O O O $undefined$ O O $complex$ O O O $undefined$ O $undefined$ O O $complex$ O O O O $undefined$ O $undefined$ O O O $complex$ O O O O O O O O O O $complex$ O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O $complex$ O O O O O O $undefined$ O O O $complex$ O O O O $string$ O O O O O $any$ O O O O $complex$ O O O O O O O O $complex$ O O O O O O O $undefined$ O O $complex$ O O O O $complex$ O O O O $complex$ O O O O $complex$ O O O O $complex$ O O O O O O O O O $any$ O O O O O O O $any$ O $complex$ O O O O O O O O O O O $any$ O $any$ O $any$ O O $string$ O O O $undefined$ O $undefined$ O $undefined$ O $undefined$ O $any$ O O $any$ O O O O O $null$ O O O O O O O O $any$ O O O O O O O $any$ O O O O $complex$ O O O $complex$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O $complex$ O O O O O O $complex$ O O O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O O $any$ O O O O $complex$ O O O O O O O O O $any$ O $any$ O O O O $any$ O O O O $complex$ O O O O O O O O O O O O O O $any$ O $any$ O O O O O O O O O O O
<s> import { expect } from 's' ; import { _UNKNOWN_ } from 's' ; let _UNKNOWN_ = ( results : number [ ] [ ] , result : number [ ] , _UNKNOWN_ : number [ ] , _UNKNOWN_ ) => { if ( _UNKNOWN_ === 0 ) { results . push ( result ) ; } for ( let i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { let newResult = result . slice ( ) ; newResult . push ( _UNKNOWN_ [ i ] ) ; let _UNKNOWN_ = _UNKNOWN_ . slice ( ) ; _UNKNOWN_ . splice ( i , 0 ) ; _UNKNOWN_ ( results , newResult , _UNKNOWN_ , _UNKNOWN_ - 0 ) ; } } ; let _UNKNOWN_ = ( ) => { let results = [ ] as number [ ] [ ] ; for ( let length = 0 ; length <= 0 ; length ++ ) { let _UNKNOWN_ = [ 0 , 0 , 0 , 0 ] ; let result = [ ] as number [ ] ; _UNKNOWN_ ( results , result , _UNKNOWN_ , length ) ; } return results ; } ; interface Target { source : number ; _UNKNOWN_ : number ; _UNKNOWN_ ? : boolean ; } let _UNKNOWN_ = ( source ) => { return { source : source , _UNKNOWN_ : 0 , _UNKNOWN_ : undefined as boolean | undefined } ; } ; let _UNKNOWN_ = ( source , target ) => { expect ( source ) . to . equal ( target . source ) ; target . _UNKNOWN_ ++ ; } ; let _UNKNOWN_ = ( results : Target [ ] , sources : number [ ] ) => { results . forEach ( ( target , index ) => { expect ( target . source ) . to . equal ( sources [ index ] ) ; expect ( target . _UNKNOWN_ ) . to . equal ( 0 ) ; } ) ; } ; let _UNKNOWN_ = ( results : Target [ ] , sources : number [ ] , _UNKNOWN_ : number [ ] ) => { results . forEach ( ( target , index ) => { expect ( target . source ) . to . equal ( sources [ index ] ) ; if ( _UNKNOWN_ . indexOf ( target . source ) >= 0 ) { expect ( target . _UNKNOWN_ ) . to . be . true ; expect ( target . _UNKNOWN_ ) . to . equal ( 0 ) ; } else { expect ( target . _UNKNOWN_ ) . to . be . undefined ; expect ( target . _UNKNOWN_ ) . to . equal ( 0 ) ; } } ) ; } ; describe ( 's' , ( ) => { it ( 's' , ( ) => { let _UNKNOWN_ = _UNKNOWN_ ( ) ; for ( let _UNKNOWN_ of _UNKNOWN_ ) { for ( let _UNKNOWN_ of _UNKNOWN_ ) { let mapping = _UNKNOWN_ ( key => key , _UNKNOWN_ , _UNKNOWN_ ) ; mapping . map ( _UNKNOWN_ ) ; _UNKNOWN_ ( mapping . results , _UNKNOWN_ ) ; mapping . results . forEach ( target => { target . _UNKNOWN_ = true ; } ) ; mapping . map ( _UNKNOWN_ ) ; _UNKNOWN_ ( mapping . results , _UNKNOWN_ , _UNKNOWN_ ) ; } } } ) . timeout ( 0 ) ; } ) ; </s>	O O O $any$ O O O O O O $any$ O O O O O $void$ O O $number[][]$ O O O O O O O $number[]$ O O O O O $number[]$ O O O O O $number$ O O O O O $number$ O O O O $number[][]$ O $number$ O $number[]$ O O O O O O $number$ O O O $number$ O $number[]$ O $number$ O $number$ O O O O $number[]$ O $number[]$ O $number[]$ O O O $number[]$ O $number$ O $number[]$ O $number$ O O O O $number[]$ O $number[]$ O $number[]$ O O O $number[]$ O $complex$ O $number$ O O O O $void$ O $number[][]$ O $number[]$ O $number[]$ O $number$ O O O O O O O O $number[][]$ O O O O O O $number[][]$ O O O O O O O O O O O O O $number$ O O O $number$ O O O $number$ O O O O $number[]$ O O O O O O O O O O O O $number[]$ O O O O O O O O $void$ O $number[][]$ O $number[]$ O $number[]$ O $number$ O O O O $number[][]$ O O O O $any$ O $number$ O O O $number$ O O O $boolean$ O O O O O O $complex$ O O $number$ O O O O O $number$ O $number$ O $number$ O O O $boolean$ O $undefined$ O O O O O O O O O $void$ O O $number$ O $Target$ O O O $any$ O $number$ O O $any$ O $any$ O $Target$ O $number$ O O $Target$ O $number$ O O O O O $void$ O O $any$ O $any$ O O O $number[]$ O O O O O O O $any$ O $void$ O O $Target$ O $number$ O O O $any$ O $Target$ O $number$ O O $any$ O $any$ O $number[]$ O $number$ O O O $any$ O $Target$ O $number$ O O $any$ O $any$ O O O O O O O O O O $void$ O O $any$ O $any$ O O O $number[]$ O O O O O $number[]$ O O O O O O O $any$ O $void$ O O $Target$ O $number$ O O O $any$ O $Target$ O $number$ O O $any$ O $any$ O $number[]$ O $number$ O O O O O $number[]$ O $number$ O $Target$ O $number$ O O O O O $any$ O $Target$ O $boolean$ O O $any$ O $any$ O $any$ O $any$ O $Target$ O $number$ O O $any$ O $any$ O O O O O O O $any$ O $Target$ O $boolean$ O O $any$ O $any$ O $any$ O $any$ O $Target$ O $number$ O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O O O O $number[][]$ O $number[][]$ O O O O O O $number[]$ O $number[][]$ O O O O O $number[]$ O $number[][]$ O O O $complex$ O $any$ O $number$ O $number$ O $complex$ O $void$ O O $complex$ O $void$ O $number[]$ O O $void$ O $complex$ O $any$ O $number[]$ O O $complex$ O $any$ O $void$ O $Target$ O O $Target$ O $boolean$ O O O O O O $complex$ O $void$ O $number[]$ O O $void$ O $complex$ O $any$ O $number[]$ O $number[]$ O O O O O O O $any$ O O O O O O O O
<s> import { expect , sinon } from 's' ; import { _UNKNOWN_ , h , _UNKNOWN_ , _UNKNOWN_ } from 's' ; import * as path from 's' ; describe ( 's' , ( ) => { beforeEach ( ( ) => { global . requestAnimationFrame = sinon . stub ( ) . returns ( 0 ) ; global . cancelAnimationFrame = sinon . stub ( ) ; } ) ; afterEach ( ( ) => { delete global . requestAnimationFrame ; delete global . cancelAnimationFrame ; } ) ; it ( 's' , ( ) => { let parentElement = { appendChild : sinon . stub ( ) , insertBefore : sinon . stub ( ) , ownerDocument : { createElement : sinon . spy ( ( tag ) => { return document . createElement ( tag ) ; } ) } , removeChild : sinon . stub ( ) } ; let _UNKNOWN_ = sinon . stub ( ) . returns ( h ( 's' , [ h ( 's' ) ] ) ) ; let _UNKNOWN_ = _UNKNOWN_ ( { } ) ; _UNKNOWN_ . append ( parentElement as any , _UNKNOWN_ ) ; expect ( _UNKNOWN_ ) . to . have . been . calledOnce ; expect ( parentElement . ownerDocument . createElement ) . to . have . been . calledOnce ; expect ( parentElement . appendChild ) . to . have . been . calledOnce ; expect ( parentElement . appendChild . _UNKNOWN_ . args [ 0 ] . tagName ) . to . equal ( 's' ) ; let _UNKNOWN_ = { parentNode : parentElement } ; _UNKNOWN_ . insertBefore ( _UNKNOWN_ as any , _UNKNOWN_ ) ; expect ( _UNKNOWN_ ) . to . have . been . _UNKNOWN_ ; expect ( parentElement . insertBefore ) . to . have . been . calledOnce ; expect ( parentElement . insertBefore . _UNKNOWN_ . args [ 0 ] . tagName ) . to . equal ( 's' ) ; expect ( parentElement . insertBefore . _UNKNOWN_ . args [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; let _UNKNOWN_ = sinon . stub ( ) . returns ( h ( 's' , [ h ( 's' ) ] ) ) ; let _UNKNOWN_ = { appendChild : sinon . stub ( ) , ownerDocument : { createElement : sinon . spy ( ( tag ) => { return document . createElement ( tag ) ; } ) } } ; _UNKNOWN_ . merge ( _UNKNOWN_ as any , _UNKNOWN_ ) ; expect ( _UNKNOWN_ ) . to . have . been . calledOnce ; expect ( _UNKNOWN_ . ownerDocument . createElement ) . to . have . been . calledOnce ; expect ( _UNKNOWN_ . appendChild ) . to . have . been . calledOnce ; expect ( _UNKNOWN_ . appendChild . _UNKNOWN_ . args [ 0 ] . tagName ) . to . equal ( 's' ) ; let _UNKNOWN_ = { parentNode : parentElement } ; _UNKNOWN_ . replace ( _UNKNOWN_ as any , _UNKNOWN_ ) ; expect ( _UNKNOWN_ ) . to . have . been . _UNKNOWN_ ; expect ( parentElement . removeChild ) . to . have . been . calledOnce ; expect ( parentElement . removeChild . _UNKNOWN_ . args [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; expect ( parentElement . insertBefore ) . to . have . been . _UNKNOWN_ ; expect ( parentElement . insertBefore . _UNKNOWN_ . args [ 0 ] . tagName ) . to . equal ( 's' ) ; expect ( parentElement . insertBefore . _UNKNOWN_ . args [ 0 ] ) . to . equal ( _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( _UNKNOWN_ ) . to . have . been . _UNKNOWN_ ; expect ( global . requestAnimationFrame ) . to . have . been . calledOnce ; global . requestAnimationFrame . _UNKNOWN_ ( 0 ) ; expect ( _UNKNOWN_ ) . to . have . callCount ( 0 ) ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = _UNKNOWN_ ( { } ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( global . requestAnimationFrame ) . to . have . been . calledOnce ; global . requestAnimationFrame . _UNKNOWN_ ( 0 ) ; _UNKNOWN_ . stop ( ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( global . requestAnimationFrame ) . to . have . been . calledOnce ; _UNKNOWN_ . resume ( ) ; expect ( global . requestAnimationFrame ) . to . have . been . _UNKNOWN_ ; global . requestAnimationFrame . _UNKNOWN_ ( 0 ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( global . requestAnimationFrame ) . to . have . been . _UNKNOWN_ ; _UNKNOWN_ . stop ( ) ; expect ( global . cancelAnimationFrame ) . to . have . been . calledOnce ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = _UNKNOWN_ ( { } ) ; let parentElement = { appendChild : sinon . stub ( ) , ownerDocument : document } ; let _UNKNOWN_ = sinon . stub ( ) . returns ( h ( 's' ) ) ; _UNKNOWN_ . append ( parentElement as any , _UNKNOWN_ ) ; _UNKNOWN_ . throws ( 's' ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; expect ( ( ) => { global . requestAnimationFrame . _UNKNOWN_ ( 0 ) ; } ) . to . throw ( Error ) ; global . requestAnimationFrame . _UNKNOWN_ ( 0 ) ; _UNKNOWN_ . reset ( ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; global . requestAnimationFrame . _UNKNOWN_ ( 0 ) ; expect ( _UNKNOWN_ ) . not . to . be . called ; global . requestAnimationFrame . reset ( ) ; _UNKNOWN_ . returns ( h ( 's' ) ) ; _UNKNOWN_ . resume ( ) ; global . requestAnimationFrame . _UNKNOWN_ ( 0 ) ; expect ( _UNKNOWN_ ) . to . be . calledOnce ; } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = _UNKNOWN_ ( { } ) ; let parentElement = { appendChild : sinon . stub ( ) , ownerDocument : document } ; let handleClick = sinon . stub ( ) ; let _UNKNOWN_ = ( ) => h ( 's' , { onclick : handleClick } ) ; _UNKNOWN_ . append ( parentElement as any , _UNKNOWN_ ) ; let button = parentElement . appendChild . _UNKNOWN_ . args [ 0 ] as HTMLElement ; let evt = { currentTarget : button , type : 's' } ; expect ( global . requestAnimationFrame ) . not . to . be . called ; button . onclick . apply ( button , [ evt ] ) ; expect ( global . requestAnimationFrame ) . to . be . calledOnce ; expect ( handleClick ) . to . be . _UNKNOWN_ ( button ) . calledWith ( evt ) ; } ) ; it ( 's' , ( ) => { let parentElement = { appendChild : sinon . stub ( ) , ownerDocument : document } ; let _UNKNOWN_ = _UNKNOWN_ ( { } ) ; let handleClick = sinon . stub ( ) ; let _UNKNOWN_ = ( ) => h ( 's' , { onclick : handleClick } ) ; _UNKNOWN_ . append ( parentElement as any , _UNKNOWN_ ) ; let button = parentElement . appendChild . _UNKNOWN_ . args [ 0 ] as HTMLElement ; let clickEvent = { currentTarget : button , type : 's' } ; button . onclick ( clickEvent as any ) ; expect ( handleClick ) . to . be . _UNKNOWN_ ( button ) . calledWithExactly ( clickEvent ) ; } ) ; describe ( 's' , ( ) => { class _UNKNOWN_ implements _UNKNOWN_ { private text : string ; private _UNKNOWN_ : ( sender ) => void ; constructor ( buttonText , _UNKNOWN_ : ( sender ) => void ) { this . text = buttonText ; this . _UNKNOWN_ = _UNKNOWN_ ; } public render ( ) { return h ( 's' , { onclick : this . handleClick , bind : this } , [ this . text ] ) ; } private handleClick ( evt ) { this . _UNKNOWN_ ( this ) ; } } it ( 's' , ( ) => { let _UNKNOWN_ = sinon . stub ( ) ; let button = new _UNKNOWN_ ( 's' , _UNKNOWN_ ) ; let parentElement = { appendChild : sinon . stub ( ) , ownerDocument : document } ; let _UNKNOWN_ = _UNKNOWN_ ( { } ) ; _UNKNOWN_ . append ( parentElement as any , ( ) => button . render ( ) ) ; let buttonElement = parentElement . appendChild . _UNKNOWN_ . args [ 0 ] as HTMLElement ; let clickEvent = { currentTarget : buttonElement , type : 's' } ; buttonElement . onclick ( clickEvent as any ) ; expect ( _UNKNOWN_ ) . to . be . calledWithExactly ( button ) ; } ) ; let _UNKNOWN_ = ( _UNKNOWN_ : ( arg ) => _UNKNOWN_ ) => { let _UNKNOWN_ = _UNKNOWN_ ( { } ) ; let parentElement = { appendChild : sinon . stub ( ) , ownerDocument : document } ; let eventHandler = sinon . stub ( ) ; let _UNKNOWN_ = ( ) => h ( 's' , [ h ( 's' , [ h ( 's' , { onclick : eventHandler } ) ] ) ] ) ; _UNKNOWN_ . append ( parentElement as any , _UNKNOWN_ ) ; let div = parentElement . appendChild . _UNKNOWN_ . args [ 0 ] as HTMLElement ; let button = div ! . firstChild ! . firstChild ! as HTMLElement ; let evt = { currentTarget : button , type : 's' } ; expect ( eventHandler ) . to . have . not . been . called ; button . onclick . apply ( button , [ evt ] ) ; expect ( eventHandler ) . to . have . been . calledOnce ; eventHandler = sinon . stub ( ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; button . onclick . apply ( button , [ evt ] ) ; expect ( eventHandler ) . to . have . been . calledOnce ; } ; it ( 's' , ( ) => _UNKNOWN_ ( _UNKNOWN_ ) ) ; it ( 's' , ( ) => { let _UNKNOWN_ = Array . prototype . find ; try { delete Array . prototype . find ; delete require . cache [ path . normalize ( path . join ( __dirname , 's' ) ) ] ; let _UNKNOWN_ = require ( 's' ) . _UNKNOWN_ ; _UNKNOWN_ ( _UNKNOWN_ ) ; } finally { Array . prototype . find = _UNKNOWN_ ; } } ) ; it ( 's' , ( ) => { let _UNKNOWN_ = true ; let _UNKNOWN_ = sinon . spy ( ) ; let eventHandler = ( ) => { _UNKNOWN_ = false ; } ; let _UNKNOWN_ = ( ) => h ( 's' , [ _UNKNOWN_ ? [ h ( 's' , { _UNKNOWN_ : _UNKNOWN_ , onclick : eventHandler } ) ] : [ ] ] ) ; let _UNKNOWN_ = _UNKNOWN_ ( { } ) ; let parentElement = document . createElement ( 's' ) ; _UNKNOWN_ . append ( parentElement , _UNKNOWN_ ) ; let div = parentElement . firstChild as HTMLElement ; let button = div . firstChild ! as HTMLButtonElement ; button . onclick ( { currentTarget : button , type : 's' } as any ) ; expect ( _UNKNOWN_ ) . to . be . false ; _UNKNOWN_ . _UNKNOWN_ ( ) ; let _UNKNOWN_ = { _UNKNOWN_ : button . _UNKNOWN_ as Function , parentNode : div } ; _UNKNOWN_ . _UNKNOWN_ ( { currentTarget : _UNKNOWN_ , type : 's' } as any ) ; expect ( _UNKNOWN_ ) . to . not . have . been . called ; } ) ; } ) ; it ( 's' , ( ) => { let parentElement = { appendChild : sinon . stub ( ) , ownerDocument : document } ; let _UNKNOWN_ = _UNKNOWN_ ( { } ) ; let _UNKNOWN_ = ( ) => h ( 's' ) ; let 0 = ( ) => h ( 's' ) ; _UNKNOWN_ . append ( parentElement as any , _UNKNOWN_ ) ; _UNKNOWN_ . append ( parentElement as any , 0 ) ; let projection = _UNKNOWN_ . detach ( _UNKNOWN_ ) ; expect ( projection . _UNKNOWN_ . id ) . to . equal ( 's' ) ; expect ( ( ) => { _UNKNOWN_ . detach ( _UNKNOWN_ ) ; } ) . to . throw ( ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $any$ O $complex$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O $string$ O O O O $Document$ O O O $string$ O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $complex$ O O O O $complex$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $void$ O $complex$ O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $complex$ O O $complex$ O $complex$ O O $any$ O $void$ O $complex$ O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $complex$ O O O $any$ O $any$ O $any$ O O O $any$ O $complex$ O O O O $complex$ O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O $string$ O O O O $Document$ O O O $string$ O O O O O O O $any$ O $void$ O $complex$ O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O $complex$ O O $complex$ O $complex$ O O $any$ O $void$ O $complex$ O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $complex$ O O $any$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O $complex$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $complex$ O O $any$ O $void$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O $any$ O $void$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $void$ O O O $any$ O $void$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $void$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $void$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $void$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $Document$ O $Document$ O O O $any$ O $any$ O $any$ O O O $any$ O $complex$ O O O O O $any$ O $void$ O $complex$ O O O $any$ O O $any$ O $any$ O O O O $any$ O $void$ O O O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $ErrorConstructor$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $void$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $complex$ O O O O O $any$ O $void$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $Document$ O $Document$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $complex$ O O O O $any$ O $any$ O O O $any$ O $void$ O $complex$ O O O $any$ O O O $HTMLElement$ O $complex$ O $any$ O $any$ O $any$ O O O O $complex$ O O $complex$ O O $HTMLElement$ O $HTMLElement$ O $string$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $HTMLElement$ O $any$ O $any$ O $HTMLElement$ O O $complex$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $HTMLElement$ O O $any$ O $complex$ O O O O O $any$ O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $Document$ O $Document$ O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $complex$ O O O O $any$ O $any$ O O O $any$ O $void$ O $complex$ O O O $any$ O O O $HTMLElement$ O $complex$ O $any$ O $any$ O $any$ O O O O $complex$ O O $complex$ O O $HTMLElement$ O $HTMLElement$ O $string$ O O O O $HTMLElement$ O $any$ O $complex$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $HTMLElement$ O O $any$ O $complex$ O O O O O $any$ O O O O O O O O $any$ O $any$ O O $string$ O O O O $void$ O O $any$ O O O O O O $string$ O $void$ O O $any$ O O O O O O O $string$ O $string$ O O O $void$ O $void$ O O O $any$ O O O O $complex$ O O O O $void$ O O O $void$ O $this$ O O O O O O O $string$ O O O O O $void$ O $MouseEvent$ O O O O $void$ O O O O O O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O O O $any$ O O O $complex$ O O $any$ O $any$ O $any$ O O O $Document$ O $Document$ O O O $any$ O $any$ O O O O O $any$ O $void$ O $complex$ O O O O O O $any$ O $any$ O O O O O $HTMLElement$ O $complex$ O $any$ O $any$ O $any$ O O O O $complex$ O O $complex$ O O $HTMLElement$ O $HTMLElement$ O $string$ O O O O $HTMLElement$ O $any$ O $complex$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O O $any$ O O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $Document$ O $Document$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O O $complex$ O O O O $complex$ O O O O $complex$ O O O O $any$ O $any$ O O O O O O O $any$ O $void$ O $complex$ O O O $any$ O O O $HTMLElement$ O $complex$ O $any$ O $any$ O $any$ O O O O $complex$ O O $HTMLElement$ O $HTMLElement$ O O $ChildNode$ O O $ChildNode$ O O $complex$ O O $complex$ O O $HTMLElement$ O $HTMLElement$ O $string$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $HTMLElement$ O $any$ O $any$ O $HTMLElement$ O O $complex$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $void$ O O O $HTMLElement$ O $any$ O $any$ O $HTMLElement$ O O $complex$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O $void$ O $any$ O O O $any$ O O O O O O O O $complex$ O $ArrayConstructor$ O $any[]$ O $complex$ O O O O $ArrayConstructor$ O $any[]$ O $complex$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O $void$ O $any$ O O O O O $ArrayConstructor$ O $any[]$ O $complex$ O $complex$ O O O O O $any$ O O O O O O O O $boolean$ O O O O $any$ O $any$ O $any$ O O O O $void$ O O O O O $boolean$ O O O O O O $any$ O O O O $complex$ O O O O $boolean$ O O $complex$ O O O O $any$ O $any$ O $void$ O $void$ O O O O O O O O O O $any$ O $any$ O O O O O O $HTMLElement$ O $Document$ O O O O O O $any$ O $void$ O $HTMLElement$ O $any$ O O O $HTMLElement$ O $HTMLElement$ O $ChildNode$ O $complex$ O O $HTMLButtonElement$ O $HTMLElement$ O $ChildNode$ O O $complex$ O $HTMLButtonElement$ O $any$ O O $HTMLButtonElement$ O $HTMLButtonElement$ O $string$ O O O O O O O $any$ O $true$ O O $any$ O $any$ O $any$ O $any$ O $void$ O O O O $complex$ O O $Function$ O $HTMLButtonElement$ O $any$ O $FunctionConstructor$ O $HTMLElement$ O $HTMLElement$ O O $complex$ O $Function$ O O $complex$ O $complex$ O $string$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O O O $complex$ O O $any$ O $any$ O $any$ O O O $Document$ O $Document$ O O O $any$ O $any$ O O O O O O $any$ O O O O $complex$ O O O O O $any$ O O O O $complex$ O O O O $any$ O $void$ O $complex$ O O O $any$ O O $any$ O $void$ O $complex$ O O O $any$ O O O $Projection$ O $any$ O $Projection$ O $any$ O O $any$ O $Projection$ O $Element$ O $string$ O O $any$ O $any$ O O O O $any$ O O O O O $any$ O $Projection$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O
<s> import { expect , sinon } from 's' ; import { SinonSpy } from 's' ; import * as path from 's' ; import { _UNKNOWN_ } from 's' ; describe ( 's' , ( ) => { let window : { performance ? : { mark : SinonSpy ; measure ? : SinonSpy ; } } ; let _UNKNOWN_ = ( ) => { let sourceFile = path . normalize ( path . join ( __dirname , 's' ) ) ; delete require . cache [ sourceFile ] ; } ; beforeEach ( ( ) => { _UNKNOWN_ ( ) ; window = { performance : { mark : sinon . spy ( ) , measure : sinon . spy ( ) } } ; ( global as any ) . window = window ; } ) ; let _UNKNOWN_ : ( ) => _UNKNOWN_ = ( ) => require ( 's' ) . _UNKNOWN_ ; afterEach ( ( ) => { delete ( global as any ) . window ; _UNKNOWN_ ( ) ; } ) ; it ( 's' , ( ) => { delete window . performance . measure ; let logger = _UNKNOWN_ ( ) ; let event = { } as any ; logger ( 's' , event ) ; logger ( 's' , event ) ; expect ( window . performance . mark ) . to . not . have . been . called ; } ) ; it ( 's' , ( ) => { let logger = _UNKNOWN_ ( ) ; let event = { } as any ; logger ( 's' , event ) ; logger ( 's' , event ) ; expect ( window . performance . measure ) . to . have . been . calledOnce ; } ) ; it ( 's' , ( ) => { let logger = _UNKNOWN_ ( ) ; logger ( 's' , undefined ) ; logger ( 's' , undefined ) ; logger ( 's' , undefined ) ; logger ( 's' , undefined ) ; logger ( 's' , undefined ) ; logger ( 's' , undefined ) ; let calls = window . performance . measure . _UNKNOWN_ ( ) . map ( call => call . args ) ; expect ( calls ) . to . deep . equal ( [ [ 's' , 's' , 's' ] , [ 's' , 's' , 's' ] , [ 's' , 's' , 's' ] , [ 's' , 's' , 's' ] , [ 's' , 's' , 's' ] ] ) ; } ) ; } ) ; </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O $any$ O O O O O O O O $complex$ O O $complex$ O O O $any$ O $any$ O $any$ O O $any$ O O O O O $void$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O $void$ O O O $complex$ O O $complex$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $complex$ O O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O $any$ O O O O O O O $any$ O O O O $any$ O $void$ O O O O O O $any$ O O O O O O O O $complex$ O $complex$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O $complex$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O O O O $any$ O O O O O O $any$ O O O $any$ O O $any$ O O O $any$ O O $any$ O $complex$ O $complex$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O O O $undefined$ O O $any$ O O O $undefined$ O O $any$ O O O $undefined$ O O $any$ O O O $undefined$ O O $any$ O O O $undefined$ O O $any$ O O O $undefined$ O O O $any$ O $complex$ O $complex$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O
<s> import * as fs from 's' ; import * as _UNKNOWN_ from 's' ; let input = fs . createReadStream ( `template` ) ; let stream = input . pipe ( _UNKNOWN_ . _UNKNOWN_ ( ) ) ; let length = 0 ; stream . on ( 's' , chunk => { length += chunk . length ; } ) ; stream . on ( 's' , ( ) => { console . log ( 's' , length / 0 ) ; if ( length >= 0 * 0 ) { console . error ( 's' ) ; process . exit ( 0 ) ; } console . log ( 's' ) ; process . exit ( 0 ) ; } ) ; </s>	O O O O $any$ O O O O O O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $number$ O O O $any$ O $any$ O O O $any$ O O $number$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O $Console$ O $void$ O O O $number$ O O O O O O $number$ O O O O O O $Console$ O $void$ O O O O $any$ O $any$ O O O O O $Console$ O $void$ O O O O $any$ O $any$ O O O O O O O O
<s> if ( global . _UNKNOWN_ ) { global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) } </s>	O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O $any$ O $any$ O O O O O O $any$ O O O O O O
<s> var Analytics = require ( "s" ) ; var enabled = false ; export function start ( ) { var packageJson = require ( "s" ) ; if ( packageJson . _UNKNOWN_ ) { var Analytics = require ( "s" ) ; Analytics . init ( { appId : packageJson . _UNKNOWN_ , logger : { info => console . info ( "s" + msg ) , error => console . error ( "s" + msg ) } } ) ; Analytics . start ( ) ; enabled = true ; } } export function trackEvent ( feature ) { if ( ! enabled ) { return ; } Analytics . trackEvent ( feature ) ; } export function _UNKNOWN_ ( feature , time ) { if ( ! enabled ) { return ; } Analytics . _UNKNOWN_ ( feature , time ) ; } export function _UNKNOWN_ ( feature ) { if ( ! enabled ) { return ; } return Analytics . _UNKNOWN_ ( feature ) ; } export function trackException ( e , context ) { if ( ! enabled ) { return ; } Analytics . trackException ( e , context ) ; } export interface _UNKNOWN_ { stop : ( ) => void ; } </s>	O O $any$ O $any$ O O O O O $boolean$ O O O O O $void$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $complex$ O O $any$ O $Console$ O $void$ O O O $any$ O O $any$ O $Console$ O $void$ O O O $any$ O O O O O $any$ O $any$ O O O $boolean$ O O O O O O O $void$ O $string$ O O O O O $boolean$ O O O O O $any$ O $any$ O $string$ O O O O O $void$ O $string$ O $number$ O O O O O $boolean$ O O O O O $any$ O $any$ O $string$ O $number$ O O O O O $any$ O $string$ O O O O O $boolean$ O O O O O O $any$ O $any$ O $string$ O O O O O $any$ O $Error$ O $string$ O O O O O $boolean$ O O O O O $any$ O $any$ O $Error$ O $string$ O O O O O $any$ O $void$ O O O O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { View } from "s" ; import { Color } from "s" ; export function _UNKNOWN_ < _UNKNOWN_ extends Function > ( args , cb ) { return < any > function ( ) { if ( args . android || args . ios ) { return ( < Function > cb ) . apply ( this , arguments ) ; } return undefined ; } } export function _UNKNOWN_ ( args ) { var _UNKNOWN_ = args . object ; switch ( args . action ) { case "s" : if ( ! ( -- _UNKNOWN_ . _UNKNOWN_ ) ) { _UNKNOWN_ . animate ( { backgroundColor : new Color ( 0 ) , duration : 0 } ) . then ( _UNKNOWN_ ( _UNKNOWN_ , ( ) => _UNKNOWN_ . animate ( { backgroundColor : new Color ( 0 ) , duration : 0 } ) ) ) ; } break ; case "s" : _UNKNOWN_ . _UNKNOWN_ = ( _UNKNOWN_ . _UNKNOWN_ || 0 ) + 0 ; _UNKNOWN_ . backgroundColor = new Color ( 0 ) ; break ; case "s" : _UNKNOWN_ . _UNKNOWN_ = 0 ; _UNKNOWN_ . animate ( { backgroundColor : new Color ( 0 ) , duration : 0 } ) ; break ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $FunctionConstructor$ O O $View$ O $any$ O O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $FunctionConstructor$ O $any$ O O $any$ O O O $IArguments$ O O O O $undefined$ O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O $number$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $any$ O O $any$ O O O O $number$ O O O O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O $any$ O O $any$ O O O O $number$ O O O O O O O O O O
<s> import * as _UNKNOWN_ from "s" ; export interface Example { title : string ; path ? : string ; _UNKNOWN_ ? : boolean ; isNew ? : boolean ; info ? : string ; image ? : string ; controls : string ; group ? : _UNKNOWN_ ; } export interface _UNKNOWN_ { id : string ; title : string ; info ? : string ; url ? : string ; isNew ? : boolean ; tint ? : string ; examples : Array < Example > ; } export var groups < _UNKNOWN_ > = [ { id : "s" , title : "s" , isNew : false , info : "s" , url : "s" , tint : "s" , examples : [ { title : "s" , image : "s" , controls : "s" , path : "s" , info : "s" , _UNKNOWN_ : true , isNew : false } , { title : "s" , image : "s" , controls : "s" , path : "s" , info : "s" , _UNKNOWN_ : true , isNew : false } , { title : "s" , image : "s" , controls : "s" , path : "s" , info : "s" , _UNKNOWN_ : true , isNew : false } ] } , { id : "s" , title : "s" , isNew : false , url : "s" , info : "s" , tint : "s" , examples : [ { title : "s" , image : "s" , path : "s" , info : "s" , controls : "s" , _UNKNOWN_ : true , isNew : false } , { title : "s" , image : "s" , path : "s" , info : "s" , controls : "s" , _UNKNOWN_ : true , isNew : false } , { title : "s" , image : "s" , path : "s" , info : "s" , controls : "s" , _UNKNOWN_ : true , isNew : false } , { title : "s" , image : "s" , path : "s" , info : "s" , controls : "s" , _UNKNOWN_ : true , isNew : false } ] } , { id : "s" , title : "s" , isNew : true , url : "s" , info : "s" , tint : "s" , examples : [ { title : "s" , image : "s" , path : "s" , info : "s" , controls : "s" , _UNKNOWN_ : true , isNew : false } , { title : "s" , image : "s" , path : "s" , info : "s" , controls : "s" , _UNKNOWN_ : true , isNew : false } , { title : "s" , image : "s" , path : "s" , info : "s" , controls : "s" , _UNKNOWN_ : true , isNew : false } ] } , { id : "s" , title : "s" , isNew : true , url : "s" , info : "s" , tint : "s" , examples : [ { title : "s" , image : "s" , path : "s" , info : "s" , controls : "s" , _UNKNOWN_ : true , isNew : true } ] } ] ; export var _UNKNOWN_ = new Array < Example > ( ) ; groups . forEach ( group => { group . examples . forEach ( ex => { if ( ex . _UNKNOWN_ ) { _UNKNOWN_ . push ( ex ) ; } ex . group = group ; } ) } ) ; </s>	O O O O $any$ O O O O O $any$ O $string$ O O O $string$ O O O O $boolean$ O O O O $boolean$ O O O O $string$ O O O O $string$ O O O O $string$ O O O $any$ O O $any$ O O O O $any$ O $string$ O O O $string$ O O O $string$ O O O O $string$ O O O O $boolean$ O O O O $string$ O O O O $Example[]$ O $ArrayConstructor$ O $any$ O O O O O $Array$ O $any$ O O O O $string$ O O O $string$ O O O $false$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $false$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $false$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $false$ O O O O O O O $string$ O O O $string$ O O O $false$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $false$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $false$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $false$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $false$ O O O O O O O $string$ O O O $string$ O O O $true$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $false$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $false$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $false$ O O O O O O O $string$ O O O $string$ O O O $true$ O O O $string$ O O O $string$ O O O $string$ O O O $complex$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O O $true$ O O O $true$ O O O O O O O O O $Example[]$ O O $ArrayConstructor$ O $any$ O O O O $any$ O $void$ O $any$ O O $any$ O $Example[]$ O $void$ O $Example$ O O O O $Example$ O $boolean$ O O $Example[]$ O $number$ O $Example$ O O O $Example$ O $any$ O $any$ O O O O O O O
<s> import * as _UNKNOWN_ from "s" ; import * as observable from "s" ; import * as _UNKNOWN_ from "s" ; export class _UNKNOWN_ extends observable . Observable { public group : _UNKNOWN_ . _UNKNOWN_ ; public examples : Array < _UNKNOWN_ . Example > ; constructor ( group : _UNKNOWN_ . _UNKNOWN_ ) { super ( ) ; this . set ( "s" , group . examples ) ; this . set ( "s" , group ) ; this . set ( "s" , false ) ; } public _UNKNOWN_ ( ) { this . set ( "s" , ! this . get ( "s" ) ) ; } public _UNKNOWN_ ( ) { this . set ( "s" , ! this . get ( "s" ) ) ; } get screenWidth ( ) : number { return _UNKNOWN_ . screen . _UNKNOWN_ . _UNKNOWN_ ; } } function capitalize ( str ) { return str . charAt ( 0 ) . toUpperCase ( ) + str . slice ( 0 ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $Example[]$ O $ArrayConstructor$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O O $any$ O $Example[]$ O O O O $any$ O O O $any$ O O O O $any$ O O O O O O O O $void$ O O O O O $any$ O O O O O O $any$ O O O O O O O $void$ O O O O O $any$ O O O O O O $any$ O O O O O O O $number$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $string$ O $string$ O O O $string$ O $string$ O O O O $string$ O O O $string$ O $string$ O O O O O O
<s> import * as observable from "s" ; import * as _UNKNOWN_ from "s" ; export class _UNKNOWN_ extends observable . Observable implements _UNKNOWN_ . Example { isSelected : boolean ; constructor ( private _UNKNOWN_ : _UNKNOWN_ . Example ) { super ( ) ; } get title ( ) : string { return this . _UNKNOWN_ . title ; } get info ( ) : string { return this . _UNKNOWN_ . info ; } get image ( ) : string { return this . _UNKNOWN_ . image ; } get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ . _UNKNOWN_ ; } get isNew ( ) : boolean { return this . _UNKNOWN_ . isNew ; } get path ( ) : string { return this . _UNKNOWN_ . path ; } get group ( ) : _UNKNOWN_ . _UNKNOWN_ { return this . _UNKNOWN_ . group ; } get controls ( ) : string { return this . _UNKNOWN_ . controls ; } get example ( ) : _UNKNOWN_ . Example { return this . _UNKNOWN_ ; } } export class _UNKNOWN_ extends observable . Observable { private _UNKNOWN_ : _UNKNOWN_ [ ] ; private _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ ; constructor ( example : _UNKNOWN_ . Example ) { super ( ) ; if ( ! example ) { throw new Error ( "s" ) ; } var _UNKNOWN_ = example . group . examples . map < _UNKNOWN_ > ( ( e ) => { var _UNKNOWN_ = new _UNKNOWN_ ( e ) ; if ( e === example ) { this . _UNKNOWN_ = _UNKNOWN_ ; } return _UNKNOWN_ ; } ) this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = example . group ; } get examples ( ) : _UNKNOWN_ [ ] { return this . _UNKNOWN_ ; } get group ( ) : _UNKNOWN_ . _UNKNOWN_ { return this . _UNKNOWN_ ; } private _UNKNOWN_ : _UNKNOWN_ ; get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . _UNKNOWN_ ; } set _UNKNOWN_ ( value ) { if ( value !== this . _UNKNOWN_ ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( "s" , value ) ; } } public _UNKNOWN_ : any ; } export interface _UNKNOWN_ { _UNKNOWN_ : boolean ; example : _UNKNOWN_ . Example ; siblings : _UNKNOWN_ . Example [ ] ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O O O O O $Example$ O $any$ O $any$ O O O O O O O O $string$ O O O O O O O O $Example$ O $string$ O O O $string$ O O O O O O O O $Example$ O $string$ O O O $string$ O O O O O O O O $Example$ O $string$ O O O $boolean$ O O O O O O O O $Example$ O $boolean$ O O O $boolean$ O O O O O O O O $Example$ O $boolean$ O O O $string$ O O O O O O O O $Example$ O $string$ O O O $any$ O O O $any$ O $any$ O O O O $Example$ O $any$ O O O $string$ O O O O O O O O $Example$ O $string$ O O O $Example$ O O O $any$ O $any$ O O O O $Example$ O O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $Example$ O $any$ O $any$ O O O O O O O O O $Example$ O O O O $ErrorConstructor$ O O O O O O $any$ O $Example$ O $any$ O $Example[]$ O $U[]$ O $any$ O O O $Example$ O O O O $any$ O O $any$ O $Example$ O O O O $Example$ O $Example$ O O O O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O $any$ O $Example$ O $any$ O O O $any$ O O O $any$ O O O O O O $any$ O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O $any$ O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O $any$ O $any$ O O O $any$ O O O $any$ O O O O O $any$ O O O O O O $any$ O $boolean$ O O O $Example$ O $any$ O $any$ O $Example[]$ O $any$ O $any$ O O O O O
<s> declare var _UNKNOWN_ ; declare var _UNKNOWN_ ; declare var _UNKNOWN_ ; declare var _UNKNOWN_ ; export var _UNKNOWN_ = false ; export function time ( ) { if ( ! _UNKNOWN_ ) { return ; } if ( global . android ) { return _UNKNOWN_ . lang . System . _UNKNOWN_ ( ) / 0 ; } else { return _UNKNOWN_ ( ) * 0 ; } } interface _UNKNOWN_ { totalTime : number ; lastTime ? : number ; count : number ; _UNKNOWN_ : number ; } var timers = new Map < string , _UNKNOWN_ > ( ) ; export function start ( name ) { if ( ! _UNKNOWN_ ) { return ; } var info ; if ( timers . has ( name ) ) { info = timers . get ( name ) ; if ( info . _UNKNOWN_ != 0 ) { console . log ( `template` ) ; } info . _UNKNOWN_ = time ( ) ; } else { info = { totalTime : 0 , count : 0 , _UNKNOWN_ : time ( ) } ; timers . set ( name , info ) ; } } export function pause ( name ) { if ( ! _UNKNOWN_ ) { return ; } var info = _UNKNOWN_ ( name ) ; if ( info ) { console . log ( `template` ) ; } } export function stop ( name ) { if ( ! _UNKNOWN_ ) { return ; } var info = _UNKNOWN_ ( name ) ; if ( info ) { console . log ( `template` ) ; timers . delete ( name ) ; } } function _UNKNOWN_ ( name ) { var info = timers . get ( name ) ; if ( ! info ) { console . log ( `template` ) return null ; } info . lastTime = Math . round ( time ( ) - info . _UNKNOWN_ ) ; info . totalTime += info . lastTime ; info . count ++ ; info . _UNKNOWN_ = 0 ; return info ; } export function _UNKNOWN_ ( name ) { if ( ! _UNKNOWN_ ) { return ; } if ( global . android ) { _UNKNOWN_ ( name ) ; } } export function _UNKNOWN_ ( name ) { if ( ! _UNKNOWN_ ) { return ; } if ( global . android ) { _UNKNOWN_ ( name ) ; } } </s>	O O O $any$ O O O $any$ O O O $any$ O O O $any$ O O O $boolean$ O O O O O $number$ O O O O O O $boolean$ O O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $any$ O O O O O O O O $any$ O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O O O $complex$ O O $MapConstructor$ O O O $any$ O O O O O O $void$ O $string$ O O O O O $boolean$ O O O O O O $any$ O O O $complex$ O $boolean$ O $string$ O O O $any$ O $complex$ O $any$ O $string$ O O O O $any$ O $number$ O O O O $Console$ O $void$ O O O O O $any$ O $number$ O $number$ O O O O O O $any$ O O $number$ O O O $number$ O O O $number$ O $number$ O O O O $complex$ O $complex$ O $string$ O $any$ O O O O O O $void$ O $string$ O O O O O $boolean$ O O O O O O $any$ O $any$ O $string$ O O O O $any$ O O $Console$ O $void$ O O O O O O O O $void$ O $string$ O O O O O $boolean$ O O O O O O $any$ O $any$ O $string$ O O O O $any$ O O $Console$ O $void$ O O O O $complex$ O $boolean$ O $string$ O O O O O $any$ O $string$ O O O $any$ O $complex$ O $any$ O $string$ O O O O O $any$ O O $Console$ O $void$ O O O O O O O $any$ O $number$ O $Math$ O $number$ O $number$ O O O $any$ O $number$ O O $any$ O $number$ O $any$ O $number$ O $any$ O $number$ O O $any$ O $number$ O O O O $any$ O O O O $void$ O $string$ O O O O O $boolean$ O O O O O O O $any$ O $any$ O O $any$ O $string$ O O O O O O $void$ O $string$ O O O O O $boolean$ O O O O O O O $any$ O $any$ O O $any$ O $string$ O O O O O
<s> import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as frame from "s" ; import * as _UNKNOWN_ from "s" ; import * as platform from "s" ; import * as _UNKNOWN_ from "s" ; import * as analytics from "s" ; import * as utils from "s" ; import { _UNKNOWN_ , isAndroid } from "s" ; function _UNKNOWN_ ( to , context ? ) { var _UNKNOWN_ = "s" + to + ( context ? "s" + context + "s" : "s" ) ; console . log ( "s" + _UNKNOWN_ ) ; analytics . trackEvent ( _UNKNOWN_ ) ; return to ; } export function _UNKNOWN_ ( context : _UNKNOWN_ . _UNKNOWN_ ) { frame . _UNKNOWN_ ( ) . navigate ( { animated : true , context : context , moduleName : _UNKNOWN_ ( "s" ) , } ) } export function _UNKNOWN_ ( example : _UNKNOWN_ . Example , siblings : _UNKNOWN_ . Example [ ] ) { var _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = { _UNKNOWN_ : true , example : example , siblings : siblings } frame . _UNKNOWN_ ( ) . navigate ( { animated : true , moduleName : _UNKNOWN_ ( _UNKNOWN_ . example . path ) , context : _UNKNOWN_ } ) ; } export function _UNKNOWN_ ( current : _UNKNOWN_ . _UNKNOWN_ ) { var index = current . siblings . indexOf ( current . example ) ; ++ index ; if ( index >= current . siblings . length ) { index = 0 ; } var _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = { _UNKNOWN_ : true , example : current . siblings [ index ] , siblings : current . siblings } frame . _UNKNOWN_ ( ) . navigate ( { animated : true , moduleName : _UNKNOWN_ ( _UNKNOWN_ . example . path ) , context : _UNKNOWN_ } ) ; } export function _UNKNOWN_ ( current : _UNKNOWN_ . _UNKNOWN_ ) { var index = current . siblings . indexOf ( current . example ) ; -- index ; if ( index < 0 ) { index = current . siblings . length - 0 ; } var _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = { _UNKNOWN_ : true , example : current . siblings [ index ] , siblings : current . siblings } frame . _UNKNOWN_ ( ) . navigate ( { animated : true , moduleName : _UNKNOWN_ ( _UNKNOWN_ . example . path ) , context : _UNKNOWN_ } ) ; } export function _UNKNOWN_ ( context : _UNKNOWN_ . _UNKNOWN_ ) { var _UNKNOWN_ = new _UNKNOWN_ . _UNKNOWN_ ( context . example ) ; frame . _UNKNOWN_ ( ) . navigate ( { animated : true , context : _UNKNOWN_ , moduleName : _UNKNOWN_ ( "s" , _UNKNOWN_ . _UNKNOWN_ . path ) } ) ; } export function _UNKNOWN_ ( context : _UNKNOWN_ . Example ) { frame . _UNKNOWN_ ( ) . navigate ( { animated : true , context : context , moduleName : _UNKNOWN_ ( "s" , context . path ) , } ) } export function _UNKNOWN_ ( context : _UNKNOWN_ . _UNKNOWN_ ) { frame . _UNKNOWN_ ( ) . navigate ( { animated : true , context : context , moduleName : _UNKNOWN_ ( "s" , context . title ) , } ) } export function _UNKNOWN_ ( ) { var _UNKNOWN_ = frame . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ . _UNKNOWN_ . moduleName !== "s" ) { frame . _UNKNOWN_ ( ) . navigate ( _UNKNOWN_ ( "s" ) ) ; } } export function _UNKNOWN_ ( ) { var _UNKNOWN_ = frame . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ . _UNKNOWN_ . moduleName !== "s" ) { frame . _UNKNOWN_ ( ) . navigate ( _UNKNOWN_ ( "s" ) ) ; } } export function _UNKNOWN_ ( ) { var _UNKNOWN_ = frame . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ . _UNKNOWN_ . moduleName !== "s" ) { frame . _UNKNOWN_ ( ) . navigate ( _UNKNOWN_ ( "s" ) ) ; } } export function _UNKNOWN_ ( ) { frame . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( context ) { var _UNKNOWN_ = frame . _UNKNOWN_ ( ) ; var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ [ _UNKNOWN_ . _UNKNOWN_ . length - 0 ] ; _UNKNOWN_ . entry . context = context ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; } export function _UNKNOWN_ ( ) { var _UNKNOWN_ = frame . _UNKNOWN_ ( ) ; var stack = _UNKNOWN_ . _UNKNOWN_ ; for ( var top = stack . length - 0 ; top >= 0 ; -- top ) { var _UNKNOWN_ = stack [ top ] ; if ( ! "s" . test ( _UNKNOWN_ . entry . moduleName ) ) { _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; break ; } } } export function openLink ( view ) { var url = view . tag ; if ( url ) { if ( _UNKNOWN_ ) { var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( url ) ; var _UNKNOWN_ = utils . ios . getter ( _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ ) ; if ( _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ) { _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; } } else if ( isAndroid ) { var intent = new android . content . _UNKNOWN_ ( android . content . _UNKNOWN_ . _UNKNOWN_ , android . net . Uri . parse ( url ) ) ; var activity = frame . _UNKNOWN_ ( ) . android . activity ; activity . _UNKNOWN_ ( android . content . _UNKNOWN_ . _UNKNOWN_ ( intent , "s" ) ) ; } } } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O $string$ O $string$ O $string$ $string$ O O O $string$ O O O $string$ O O $string$ O O O $string$ O O O O O O $Console$ O $void$ O O O $string$ O O $any$ O $void$ O $string$ O O O $string$ O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O $boolean$ O O O $any$ O $any$ O $string$ O $string$ O O O O O O O O O $void$ O $Example$ O $any$ O $any$ O $Example[]$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O $true$ O O O $Example$ O $Example$ O $Example[]$ O $Example[]$ O $any$ O $any$ O O O $any$ O O $boolean$ O O O $string$ O $string$ O $any$ O $Example$ O $string$ O O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O $number$ O $any$ O $Example[]$ O $number$ O $any$ O $Example$ O O O $number$ O O O $number$ O $any$ O $Example[]$ O $number$ O O $number$ O O O O O $any$ O $any$ O $any$ O O $true$ O O O $Example$ O $any$ O $Example[]$ O $number$ O O $Example[]$ O $any$ O $Example[]$ O $any$ O $any$ O O O $any$ O O $boolean$ O O O $string$ O $string$ O $any$ O $Example$ O $string$ O O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O $number$ O $any$ O $Example[]$ O $number$ O $any$ O $Example$ O O O $number$ O O O $number$ O O O O $number$ O $any$ O $Example[]$ O $number$ O O O O O $any$ O $any$ O $any$ O O $true$ O O O $Example$ O $any$ O $Example[]$ O $number$ O O $Example[]$ O $any$ O $Example[]$ O $any$ O $any$ O O O $any$ O O $boolean$ O O O $string$ O $string$ O $any$ O $Example$ O $string$ O O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $Example$ O O $any$ O $any$ O O O $any$ O O $boolean$ O O O $any$ O $any$ O $string$ O $string$ O O O $any$ O $any$ O $string$ O O O O O O O $void$ O $Example$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O $boolean$ O O O $Example$ O $Example$ O $string$ O $string$ O O O $Example$ O $string$ O O O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O $boolean$ O O O $any$ O $any$ O $string$ O $string$ O O O $any$ O $string$ O O O O O O O $void$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $string$ O O O O O O O O O $void$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $string$ O O O O O O O O O $void$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $string$ O O O O O O O O O $void$ O O O $any$ O $any$ O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O $number$ O $any$ O $any$ O O O $number$ O O O O $number$ O O O $any$ O $any$ O $number$ O O O O O O O $boolean$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $Uri$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O
<s> import * as application from "s" ; import * as utils from "s" ; import * as dialogs from "s" ; import { isAndroid , _UNKNOWN_ } from "s" ; import * as settings from "s" ; import { Observable } from "s" ; import * as navigator from "s" ; const enabled = true ; interface _UNKNOWN_ { readonly id : string ; readonly title : string ; readonly body : string ; readonly url : string ; readonly date : string ; } const _UNKNOWN_ = "s" ; const _UNKNOWN_ = "s" ; let _UNKNOWN_ ; function _UNKNOWN_ ( ) { if ( _UNKNOWN_ ) { return _UNKNOWN_ ; } const str = settings . getString ( _UNKNOWN_ , "s" ) ; try { _UNKNOWN_ = JSON . parse ( str ) ; } catch ( e ) { console . log ( "s" ) ; _UNKNOWN_ = { } ; } return _UNKNOWN_ ; } function _UNKNOWN_ ( ) { try { settings . _UNKNOWN_ ( _UNKNOWN_ , JSON . stringify ( _UNKNOWN_ ( ) ) ) ; } catch ( e ) { console . log ( "s" + e ) ; } } function _UNKNOWN_ ( id ) { return ! ! _UNKNOWN_ ( ) [ id ] ; } function _UNKNOWN_ ( id ) { _UNKNOWN_ ( ) [ id ] = true ; _UNKNOWN_ ( ) ; } function _UNKNOWN_ ( ) { let _UNKNOWN_ = _UNKNOWN_ ( ) ; _UNKNOWN_ . _UNKNOWN_ . filter ( n => n && n . id ) . forEach ( n => _UNKNOWN_ [ n . id ] = true ) ; console . log ( "s" + JSON . stringify ( _UNKNOWN_ ) ) ; _UNKNOWN_ ( ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; } function _UNKNOWN_ ( id ) { _UNKNOWN_ ( ) [ id ] = false ; _UNKNOWN_ ( ) ; } function _UNKNOWN_ ( ) { const _UNKNOWN_ = settings . getBoolean ( _UNKNOWN_ , true ) ; if ( _UNKNOWN_ ) { _UNKNOWN_ ( ) ; settings . _UNKNOWN_ ( _UNKNOWN_ , false ) ; } } export class _UNKNOWN_ extends Observable { readonly id : string ; readonly title : string ; readonly body : string ; readonly url : string ; readonly date : string ; constructor ( base ) { super ( ) ; this . id = base . id ; this . title = base . title ; this . body = base . body ; this . url = base . url ; this . date = base . date ; } get _UNKNOWN_ ( ) : boolean { return ! ! ( this . id && _UNKNOWN_ ( this . id ) ) ; } set _UNKNOWN_ ( value ) { if ( value && this . id ) { _UNKNOWN_ ( this . id ) ; } else { _UNKNOWN_ ( this . id ) ; } this . _UNKNOWN_ ( "s" , value ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; } } export class ViewModel extends Observable { _UNKNOWN_ : _UNKNOWN_ [ ] ; _UNKNOWN_ : boolean = false ; _UNKNOWN_ : boolean = false ; constructor ( ) { super ( ) ; this . _UNKNOWN_ ( [ ] ) ; } _UNKNOWN_ ( updates : _UNKNOWN_ [ ] ) { this . _UNKNOWN_ = updates . filter ( fb => ! ! fb ) . map ( fb => new _UNKNOWN_ ( fb ) ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( "s" , this . _UNKNOWN_ ) ; } _UNKNOWN_ ( ) { let newValue = this . _UNKNOWN_ && this . _UNKNOWN_ . length > 0 ; if ( newValue != this . _UNKNOWN_ ) { this . _UNKNOWN_ = newValue ; this . _UNKNOWN_ ( "s" , newValue ) ; } } _UNKNOWN_ ( ) { let newValue = this . _UNKNOWN_ && this . _UNKNOWN_ . length > 0 && this . _UNKNOWN_ . some ( args => ! args . _UNKNOWN_ ) ; if ( newValue != this . _UNKNOWN_ ) { this . _UNKNOWN_ = newValue ; this . _UNKNOWN_ ( "s" , newValue ) ; console . log ( "s" + this . _UNKNOWN_ ) ; } } } export const _UNKNOWN_ = new ViewModel ( ) ; var firebase ; var _UNKNOWN_ ; export function init ( ) { if ( ! enabled ) { return ; } firebase = require ( "s" ) ; var _UNKNOWN_ = settings . getBoolean ( "s" , false ) ; if ( isAndroid ) { _UNKNOWN_ ( ) ; } else if ( _UNKNOWN_ ) { application . on ( "s" , args => { _UNKNOWN_ ( ) ; } ) ; } } export function _UNKNOWN_ ( ) { if ( ! enabled ) { return ; } if ( _UNKNOWN_ && ! settings . getBoolean ( "s" , false ) ) { _UNKNOWN_ ( ) ; } } function _UNKNOWN_ ( ) { if ( ! enabled ) { return ; } console . log ( "s" ) ; firebase . init ( { persist : true , _UNKNOWN_ ( message ) { console . log ( "s" ) ; console . log ( JSON . stringify ( message ) ) ; let url = ( < any > message ) . url ; let id = ( < any > message ) . id ; if ( url ) { if ( message . foreground ) { dialogs . confirm ( { title : ( < any > message ) . _UNKNOWN_ , message : ( < any > message ) . _UNKNOWN_ , okButtonText : isAndroid ? "s" : "s" , cancelButtonText : isAndroid ? "s" : "s" } ) . then ( result => { if ( result ) { utils . openUrl ( url ) ; if ( id ) { _UNKNOWN_ ( id ) ; _UNKNOWN_ . _UNKNOWN_ . filter ( a => a . id === a . id ) . forEach ( a => a . _UNKNOWN_ = true ) ; } navigator . _UNKNOWN_ ( ) ; } } ) ; } else { if ( _UNKNOWN_ != url ) { navigator . _UNKNOWN_ ( ) ; _UNKNOWN_ = url ; } } } } , _UNKNOWN_ ( token ) { console . log ( "s" ) ; console . log ( "s" + token ) ; settings . _UNKNOWN_ ( "s" , true ) ; } } ) . then ( value => { firebase . _UNKNOWN_ ( ( result ) => { if ( ! result . error ) { console . log ( "s" + JSON . stringify ( result . value ) ) _UNKNOWN_ . _UNKNOWN_ ( result . value || [ ] ) ; _UNKNOWN_ ( ) ; } else { console . log ( JSON . stringify ( result ) ) ; } } , "s" ) . then ( ( _UNKNOWN_ ) => { const path = _UNKNOWN_ . path ; const listeners = _UNKNOWN_ . listeners console . log ( "s" + path + "s" + listeners ) ; } ) ; } ) . catch ( e => { console . log ( "s" + e ) ; console . log ( "s" + e . stack ) ; } ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O $true$ O O O O $any$ O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O O O O O O O O O O O $any$ O O $any$ O O O O O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $JSON$ O $any$ O $any$ O O O O O $any$ O O $Console$ O $void$ O O O O $any$ O O O O O O $any$ O O O $void$ O O O O O $any$ O $any$ O O O $JSON$ O $complex$ O $any$ O O O O O O O O $any$ O O $Console$ O $void$ O O O $any$ O O O O O $boolean$ O $string$ O O O O O $any$ O O O $string$ O O O O $void$ O $string$ O O $any$ O O O $string$ O O O O $void$ O O O O O $void$ O O O O $any$ O $any$ O O O $ViewModel$ O $any$ O $complex$ O $any$ O $any$ O $any$ O $string$ O O $void$ O $any$ O $any$ O $any$ O $string$ O O O O O $Console$ O $void$ O O O $JSON$ O $complex$ O $any$ O O O $void$ O O O $ViewModel$ O $void$ O O O O O $void$ O $string$ O O $any$ O O O $string$ O O O O $void$ O O O O O $void$ O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $void$ O O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O $string$ O O O O O $any$ O O O O O O O O $string$ O $any$ O $string$ O O O $string$ O $any$ O $string$ O O O $string$ O $any$ O $string$ O O O $string$ O $any$ O $string$ O O O $string$ O $any$ O $string$ O O O $boolean$ O O O O O O O O O O O $string$ O $boolean$ O O O $string$ O O O O O $boolean$ O $boolean$ O O O O $boolean$ O O O $string$ O O $void$ O O O $string$ O O O O O $void$ O O O $string$ O O O O O $any$ O O O $boolean$ O O $ViewModel$ O $void$ O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $boolean$ O O O O O $boolean$ O O O O O O O O O O O O O O O $void$ O O O O O O $void$ O $any$ O $any$ O O O O O O $any$ O $any$ O $complex$ O $any$ O O O $any$ O O $U[]$ O $any$ O O $any$ O $any$ O O O O O $void$ O O O O O $void$ O O O O O $any$ O O O O O $any$ O O O $void$ O O O O $boolean$ O O O $any$ O O O $any$ O $number$ O O O O O $boolean$ O O O $boolean$ O O O O $boolean$ O $boolean$ O O O $any$ O O O $boolean$ O O O O $void$ O O O O $boolean$ O O O $any$ O O O $any$ O $number$ O O O O O $any$ O $boolean$ O $any$ O O $any$ O $boolean$ O O O O $boolean$ O O O $boolean$ O O O O $boolean$ O $boolean$ O O O $any$ O O O $boolean$ O O $Console$ O $void$ O O O O O $boolean$ O O O O O O O $ViewModel$ O O $any$ O O O O $any$ O O $any$ O O O $void$ O O O O O O $true$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $void$ O O O O O O O $any$ O O $any$ O $any$ O O O $any$ O O $void$ O O O O O O O O O O $void$ O O O O O O $true$ O O O O O O O $any$ O O $any$ O $any$ O O O O O O O $void$ O O O O O O $void$ O O O O O O $true$ O O O O O $Console$ O $void$ O O O O $any$ O $any$ O O $boolean$ O O O $void$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O $JSON$ O $complex$ O $any$ O O O O $any$ O O O O O $any$ O O $any$ O O $any$ O O O O O $any$ O O $any$ O O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O $string$ O $any$ O O O O O $string$ O $any$ O O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O $void$ O $any$ O O $ViewModel$ O $any$ O $complex$ O $any$ O $any$ O $string$ O $any$ O $string$ O O $void$ O $any$ O $any$ O $boolean$ O O O O O $any$ O $void$ O O O O O O O O O O O O $any$ O $any$ O O $any$ O $void$ O O O $any$ O $any$ O O O O O O $void$ O $any$ O O $Console$ O $void$ O O O O $Console$ O $void$ O O O $any$ O O $any$ O $any$ O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O O $Console$ O $void$ O O O $JSON$ O $complex$ O $any$ O $any$ O O $ViewModel$ O $void$ O $any$ O $any$ O O O O O $void$ O O O O O O $Console$ O $void$ O $JSON$ O $complex$ O $any$ O O O O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ $Console$ O $void$ O O O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O $Console$ O $void$ O O O $any$ O O $Console$ O $void$ O O O $any$ O $any$ O O O O O O O
<s> export enum _UNKNOWN_ { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } </s>	O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O
<s> import { View } from "s" ; import { Color } from "s" ; import * as platform from "s" ; import * as common from "s" ; global . _UNKNOWN_ ( common , exports ) ; export function _UNKNOWN_ ( view , colors < Color > , orientation ? : common . _UNKNOWN_ ) { let _UNKNOWN_ = ( < any > view ) . _UNKNOWN_ ; if ( ! _UNKNOWN_ ) { throw new Error ( "s" ) ; } let _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) ; if ( ! ( _UNKNOWN_ instanceof android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ) ) { _UNKNOWN_ = new android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; } let _UNKNOWN_ = 0 ; let _UNKNOWN_ = new Array < number > ( ) ; colors . forEach ( function ( color ) { _UNKNOWN_ . push ( color . android ) ; } ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; let _UNKNOWN_ = _UNKNOWN_ ( orientation ) ; if ( _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; } } function _UNKNOWN_ ( orientation ? : common . _UNKNOWN_ ) { switch ( orientation ) { case common . _UNKNOWN_ . _UNKNOWN_ : return android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ; case common . _UNKNOWN_ . _UNKNOWN_ : return android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ; case common . _UNKNOWN_ . _UNKNOWN_ : return android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ; case common . _UNKNOWN_ . _UNKNOWN_ : return android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ; case common . _UNKNOWN_ . _UNKNOWN_ : return android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ; case common . _UNKNOWN_ . _UNKNOWN_ : return android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ; case common . _UNKNOWN_ . _UNKNOWN_ : return android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ; case common . _UNKNOWN_ . _UNKNOWN_ : return android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $View$ O $Array$ O $any$ O O $Orientation$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $number$ O O O O $number[]$ O O $ArrayConstructor$ O O O O O O $any[]$ O $void$ O O O $Color$ O O $number[]$ O $number$ O $any$ O $any$ O O O O O $any$ O $any$ O $number[]$ O O $any$ O $any$ O $number$ O O O $Orientation$ O $Orientation$ O $Orientation$ O O O O $Orientation$ O O $any$ O $any$ O $Orientation$ O O O O O $Orientation$ O $Orientation$ O O $any$ O $any$ O O O O $Orientation$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Orientation$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Orientation$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Orientation$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Orientation$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Orientation$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Orientation$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Orientation$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Orientation$ O O O O
<s> import { View } from "s" ; import { Color } from "s" ; import * as platform from "s" ; import * as common from "s" ; global . _UNKNOWN_ ( common , exports ) ; export function _UNKNOWN_ ( view , colors < Color > , orientation ? : common . _UNKNOWN_ ) { let _UNKNOWN_ = ( < any > view ) . _UNKNOWN_ ; if ( ! _UNKNOWN_ ) { throw new Error ( "s" ) ; } let _UNKNOWN_ = _UNKNOWN_ . layer ( ) ; let _UNKNOWN_ = _UNKNOWN_ . alloc ( ) . _UNKNOWN_ ( colors . length ) ; colors . forEach ( function ( color ) { _UNKNOWN_ . _UNKNOWN_ ( color . ios . _UNKNOWN_ ) ; } ) ; _UNKNOWN_ . colors = _UNKNOWN_ ; _UNKNOWN_ . frame = _UNKNOWN_ . bounds ; _UNKNOWN_ ( _UNKNOWN_ , orientation ) ; _UNKNOWN_ . layer . _UNKNOWN_ ( _UNKNOWN_ , 0 ) ; } function _UNKNOWN_ ( _UNKNOWN_ , orientation ? : common . _UNKNOWN_ ) { switch ( orientation ) { case common . _UNKNOWN_ . _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ( 0 , 0 ) ; _UNKNOWN_ . endPoint = _UNKNOWN_ ( 0 , 0 ) ; case common . _UNKNOWN_ . _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ( 0 , 0 ) ; _UNKNOWN_ . endPoint = _UNKNOWN_ ( 0 , 0 ) ; case common . _UNKNOWN_ . _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ( 0 , 0 ) ; _UNKNOWN_ . endPoint = _UNKNOWN_ ( 0 , 0 ) ; case common . _UNKNOWN_ . _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ( 0 , 0 ) ; _UNKNOWN_ . endPoint = _UNKNOWN_ ( 0 , 0 ) ; case common . _UNKNOWN_ . _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ( 0 , 0 ) ; _UNKNOWN_ . endPoint = _UNKNOWN_ ( 0 , 0 ) ; case common . _UNKNOWN_ . _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ( 0 , 0 ) ; _UNKNOWN_ . endPoint = _UNKNOWN_ ( 0 , 0 ) ; case common . _UNKNOWN_ . _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ( 0 , 0 ) ; _UNKNOWN_ . endPoint = _UNKNOWN_ ( 0 , 0 ) ; case common . _UNKNOWN_ . _UNKNOWN_ : _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ ( 0 , 0 ) ; _UNKNOWN_ . endPoint = _UNKNOWN_ ( 0 , 0 ) ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $View$ O $Array$ O $any$ O O $Orientation$ O O $any$ O $any$ O O O $any$ O O O O O $any$ O O $any$ O O O O $any$ O O O O $ErrorConstructor$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any[]$ O $number$ O O $any[]$ O $void$ O O O $Color$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $void$ O $any$ O $Orientation$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O $Orientation$ O O $any$ O $any$ O O O O $Orientation$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O O O
<s> import * as _UNKNOWN_ from "s" ; import * as observable from "s" ; import * as builder from "s" ; import * as app from "s" ; import * as utils from "s" ; export class _UNKNOWN_ { private _UNKNOWN_ ; private 0 ; private 0 ; private _UNKNOWN_ ; private 0 ; private _UNKNOWN_ ; private _UNKNOWN_ ; private 0 ; private 0 ; private _UNKNOWN_ ; private _UNKNOWN_ ; private _UNKNOWN_ ; private _UNKNOWN_ ; private selectedItem : _UNKNOWN_ ; private _UNKNOWN_ ; private _UNKNOWN_ ; constructor ( _UNKNOWN_ ) { this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = { } ; } public _UNKNOWN_ ( ) { for ( var i = 0 ; i < this . _UNKNOWN_ . length ; i ++ ) { delete this . _UNKNOWN_ [ i ] ; } this . _UNKNOWN_ = { } ; } public _UNKNOWN_ ( item , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) { if ( this . selectedItem ) { this . selectedItem . isSelected = false ; } item . isSelected = true ; this . selectedItem = item ; var _UNKNOWN_ = this . _UNKNOWN_ && _UNKNOWN_ . android !== undefined ; var _UNKNOWN_ = _UNKNOWN_ ? this . _UNKNOWN_ [ _UNKNOWN_ + _UNKNOWN_ ] : null ; if ( ! _UNKNOWN_ ) { _UNKNOWN_ = builder . load ( { path : _UNKNOWN_ , name : _UNKNOWN_ } ) ; if ( _UNKNOWN_ ) { this . _UNKNOWN_ [ _UNKNOWN_ + _UNKNOWN_ ] = _UNKNOWN_ ; } } if ( _UNKNOWN_ . _UNKNOWN_ ( ) > 0 ) { var child = _UNKNOWN_ . _UNKNOWN_ ( 0 ) ; _UNKNOWN_ . removeChild ( child ) ; child = null ; if ( _UNKNOWN_ . ios ) { utils . _UNKNOWN_ ( ) ; } } _UNKNOWN_ . addChild ( _UNKNOWN_ ) ; } get _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } return this . _UNKNOWN_ = [ { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } ] ; } get 0 ( ) { if ( this . 0 ) { return this . 0 ; } return this . 0 = [ { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } ] ; } get 0 ( ) { if ( this . 0 ) { return this . 0 ; } return this . 0 = [ { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } ] ; } get _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } return this . _UNKNOWN_ = [ { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } ] ; } get 0 ( ) { if ( this . 0 ) { return this . 0 ; } return this . 0 = [ { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } , { Category : "s" , _UNKNOWN_ : 0 } ] ; } get _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } return this . _UNKNOWN_ = [ { Country : "s" , _UNKNOWN_ : Math . random ( ) * 0 , _UNKNOWN_ : 0 } , { Country : "s" , _UNKNOWN_ : Math . random ( ) * 0 , _UNKNOWN_ : 0 } , { Country : "s" , _UNKNOWN_ : Math . random ( ) * 0 , _UNKNOWN_ : 0 } , { Country : "s" , _UNKNOWN_ : Math . random ( ) * 0 , _UNKNOWN_ : 0 } , { Country : "s" , _UNKNOWN_ : Math . random ( ) * 0 , _UNKNOWN_ : 0 } ] ; } get _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } return this . _UNKNOWN_ = [ { Country : "s" , _UNKNOWN_ : 0 } , { Country : "s" , _UNKNOWN_ : 0 } , { Country : "s" , _UNKNOWN_ : 0 } ] ; } get 0 ( ) { if ( this . 0 ) { return this . 0 ; } return this . 0 = [ { _UNKNOWN_ : "s" , _UNKNOWN_ : 0 } , { _UNKNOWN_ : "s" , _UNKNOWN_ : 0 } , { _UNKNOWN_ : "s" , _UNKNOWN_ : 0 } , { _UNKNOWN_ : "s" , _UNKNOWN_ : 0 } ] ; } get 0 ( ) { if ( this . 0 ) { return this . 0 ; } return this . 0 = [ { Level : "s" , _UNKNOWN_ : 0 } , { Level : "s" , _UNKNOWN_ : 0 } , { Level : "s" , _UNKNOWN_ : 0 } ] ; } private _UNKNOWN_ ( groupName , _UNKNOWN_ ) { if ( app . ios ) { return "s" + groupName + "s" + _UNKNOWN_ ; } var resourcePath = "s" + _UNKNOWN_ ; return resourcePath ; } get _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } return this . _UNKNOWN_ = [ new _UNKNOWN_ ( true , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) ] ; } get _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } return this . _UNKNOWN_ = [ new _UNKNOWN_ ( true , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) ] ; } get _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } return this . _UNKNOWN_ = [ new _UNKNOWN_ ( true , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) ] ; } get _UNKNOWN_ ( ) { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } return this . _UNKNOWN_ = [ new _UNKNOWN_ ( true , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , new _UNKNOWN_ ( false , this . _UNKNOWN_ ( "s" , "s" ) , "s" ) , ] ; } } export class _UNKNOWN_ extends observable . Observable { constructor ( selected , _UNKNOWN_ , _UNKNOWN_ ) { super ( ) ; this . isSelected = selected ; this . _UNKNOWN_ = _UNKNOWN_ ; this . _UNKNOWN_ = _UNKNOWN_ ; } get isSelected ( ) { return this . get ( "s" ) ; } set isSelected ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) { var suffix = app . ios ? "s" : "s" ; return this . get ( "s" ) + suffix ; } get _UNKNOWN_ ( ) { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O O $any$ O $any$ O O $any$ O O $any$ O O O $boolean$ O O O O $any$ O $boolean$ O O O $any$ O O O O O O $void$ O O O O O O $number$ O O O $number$ O O O $any$ O $any$ O $number$ O O O O O O $any$ O $number$ O O O O O $any$ O O O O O O $void$ O $any$ O $any$ O $string$ O $string$ O O O O O O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O $boolean$ O O O $any$ O $any$ O $any$ O $undefined$ O O $any$ O $boolean$ O O O $any$ O $string$ O $string$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O $string$ O $string$ O $string$ O $string$ O O O O O $boolean$ O O O O $any$ O $string$ O $string$ O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $string$ O O O $number$ O $Math$ O $number$ O O O O O $number$ O O O O O $string$ O O O $number$ O $Math$ O $number$ O O O O O $number$ O O O O O $string$ O O O $number$ O $Math$ O $number$ O O O O O $number$ O O O O O $string$ O O O $number$ O $Math$ O $number$ O O O O O $number$ O O O O O $string$ O O O $number$ O $Math$ O $number$ O O O O O $number$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O $string$ O O O $number$ O O O O O O O $string$ O $string$ O $string$ O O O O $any$ O $any$ O O O O O $string$ O O O $string$ O O O $string$ O O O $string$ O O $string$ O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O $any$ O O O O O $string$ O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O $string$ O O O O $string$ O $any$ O $any$ O O O O O O O O $any$ O O O O $string$ O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O O
<s> import * as observable from "s" ; import * as _UNKNOWN_ from "s" ; import * as utils from "s" ; import * as models from "s" ; import * as frame from "s" ; import * as pages from "s" ; import * as _UNKNOWN_ from "s" ; import * as app from "s" ; import * as navigator from "s" ; export function _UNKNOWN_ ( args : observable . EventData ) { var grid = < _UNKNOWN_ . GridLayout > args . object ; if ( grid . android ) { var _UNKNOWN_ = < any > android . support . 0 . view . _UNKNOWN_ ; if ( _UNKNOWN_ . _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( grid . android , 0 * utils . layout . _UNKNOWN_ ( ) ) ; } } } function _UNKNOWN_ ( page , item : models . _UNKNOWN_ ) { var _UNKNOWN_ = page . _UNKNOWN_ ; _UNKNOWN_ . _UNKNOWN_ ( item , page . _UNKNOWN_ ( "s" ) , "s" , item . _UNKNOWN_ ) ; var _UNKNOWN_ = page . _UNKNOWN_ ( "s" ) ; if ( app . android ) { _UNKNOWN_ . _UNKNOWN_ . android . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ . widget . chart . engine . axes . common . _UNKNOWN_ . _UNKNOWN_ ) ; } } var _UNKNOWN_ = new models . _UNKNOWN_ ( true ) ; export function _UNKNOWN_ ( args : observable . EventData ) { var page = < pages . Page > args . object ; page . _UNKNOWN_ = _UNKNOWN_ ; var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ [ 0 ] ; _UNKNOWN_ ( page , _UNKNOWN_ ) ; } export function _UNKNOWN_ ( args : observable . EventData ) { var page = < pages . Page > args . object ; page . _UNKNOWN_ . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { if ( args . object . android ) { args . object . android . _UNKNOWN_ ( false ) ; } } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { var item = args . view . _UNKNOWN_ ; var page = frame . _UNKNOWN_ ( ) . currentPage ; _UNKNOWN_ ( page , item ) ; } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O O $any$ O $void$ O O O O O
<s> import * as observable from "s" ; import * as _UNKNOWN_ from "s" ; import * as utils from "s" ; import * as models from "s" ; import * as frame from "s" ; import * as pages from "s" ; import * as _UNKNOWN_ from "s" ; import * as app from "s" ; import * as navigator from "s" ; export function _UNKNOWN_ ( args : observable . EventData ) { var grid = < _UNKNOWN_ . GridLayout > args . object ; if ( grid . android ) { var _UNKNOWN_ = < any > android . support . 0 . view . _UNKNOWN_ ; if ( _UNKNOWN_ . _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( grid . android , 0 * utils . layout . _UNKNOWN_ ( ) ) ; } } } function _UNKNOWN_ ( page , item : models . _UNKNOWN_ ) { var _UNKNOWN_ = page . _UNKNOWN_ ; _UNKNOWN_ . _UNKNOWN_ ( item , page . _UNKNOWN_ ( "s" ) , "s" , item . _UNKNOWN_ ) ; var _UNKNOWN_ = page . _UNKNOWN_ ( "s" ) ; if ( app . android ) { _UNKNOWN_ . _UNKNOWN_ . android . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ . widget . chart . engine . axes . common . _UNKNOWN_ . _UNKNOWN_ ) ; } } var _UNKNOWN_ = new models . _UNKNOWN_ ( true ) ; export function _UNKNOWN_ ( args : observable . EventData ) { var page = < pages . Page > args . object ; page . _UNKNOWN_ = _UNKNOWN_ ; var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ [ 0 ] ; _UNKNOWN_ ( page , _UNKNOWN_ ) ; } export function _UNKNOWN_ ( args : observable . EventData ) { var page = < pages . Page > args . object ; page . _UNKNOWN_ . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { if ( args . object . android ) { args . object . android . _UNKNOWN_ ( false ) ; } } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { var item = args . view . _UNKNOWN_ ; var page = frame . _UNKNOWN_ ( ) . currentPage ; _UNKNOWN_ ( page , item ) ; } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O O $any$ O $void$ O O O O O
<s> import * as observable from "s" ; import * as _UNKNOWN_ from "s" ; import * as utils from "s" ; import * as models from "s" ; import * as frame from "s" ; import * as pages from "s" ; import * as _UNKNOWN_ from "s" ; import * as app from "s" ; import * as navigator from "s" ; export function _UNKNOWN_ ( args : observable . EventData ) { var grid = < _UNKNOWN_ . GridLayout > args . object ; if ( grid . android ) { var _UNKNOWN_ = < any > android . support . 0 . view . _UNKNOWN_ ; if ( _UNKNOWN_ . _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( grid . android , 0 * utils . layout . _UNKNOWN_ ( ) ) ; } } } function _UNKNOWN_ ( page , item : models . _UNKNOWN_ ) { var _UNKNOWN_ = page . _UNKNOWN_ ; _UNKNOWN_ . _UNKNOWN_ ( item , page . _UNKNOWN_ ( "s" ) , "s" , item . _UNKNOWN_ ) ; var _UNKNOWN_ = page . _UNKNOWN_ ( "s" ) ; if ( app . android ) { _UNKNOWN_ . _UNKNOWN_ . android . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ . widget . chart . engine . axes . common . _UNKNOWN_ . _UNKNOWN_ ) ; } } var _UNKNOWN_ = new models . _UNKNOWN_ ( true ) ; export function _UNKNOWN_ ( args : observable . EventData ) { var page = < pages . Page > args . object ; page . _UNKNOWN_ = _UNKNOWN_ ; var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ [ 0 ] ; _UNKNOWN_ ( page , _UNKNOWN_ ) ; } export function _UNKNOWN_ ( args : observable . EventData ) { var page = < pages . Page > args . object ; page . _UNKNOWN_ . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { if ( args . object . android ) { args . object . android . _UNKNOWN_ ( false ) ; } } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { var item = args . view . _UNKNOWN_ ; var page = frame . _UNKNOWN_ ( ) . currentPage ; _UNKNOWN_ ( page , item ) ; } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O O $any$ O $void$ O O O O O
<s> import * as observable from "s" ; import * as _UNKNOWN_ from "s" ; import * as utils from "s" ; import * as models from "s" ; import * as frame from "s" ; import * as pages from "s" ; import * as _UNKNOWN_ from "s" ; import * as app from "s" ; import * as navigator from "s" ; export function _UNKNOWN_ ( args : observable . EventData ) { var grid = < _UNKNOWN_ . GridLayout > args . object ; if ( grid . android ) { var _UNKNOWN_ = < any > android . support . 0 . view . _UNKNOWN_ ; if ( _UNKNOWN_ . _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( grid . android , 0 * utils . layout . _UNKNOWN_ ( ) ) ; } } } function _UNKNOWN_ ( page , item : models . _UNKNOWN_ ) { var _UNKNOWN_ = page . _UNKNOWN_ ; _UNKNOWN_ . _UNKNOWN_ ( item , page . _UNKNOWN_ ( "s" ) , "s" , item . _UNKNOWN_ ) ; } var _UNKNOWN_ = new models . _UNKNOWN_ ( false ) ; export function _UNKNOWN_ ( args : observable . EventData ) { var page = < pages . Page > args . object ; page . _UNKNOWN_ = _UNKNOWN_ ; var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ [ 0 ] ; _UNKNOWN_ ( page , _UNKNOWN_ ) ; } export function _UNKNOWN_ ( args ) { if ( args . object . android ) { args . object . android . _UNKNOWN_ ( false ) ; } } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { var item = args . view . _UNKNOWN_ ; var page = frame . _UNKNOWN_ ( ) . currentPage ; _UNKNOWN_ ( page , item ) ; } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O O $any$ O $void$ O O O O O
<s> import * as observable from "s" ; function _UNKNOWN_ ( time ) { var hour = time . getHours ( ) ; var min = time . getMinutes ( ) + "s" ; return ( hour <= 0 ? hour : hour - 0 ) + "s" + ( min . length === 0 ? 's' + min : min ) + ( hour < 0 ? "s" : "s" ) } export class Session extends observable . Observable { constructor ( public title , public start , public end , public room , public _UNKNOWN_ , public cssClass ? ) { super ( ) ; this . cssClass = "s" ; } get range ( ) : string { return _UNKNOWN_ ( this . start ) + "s" + _UNKNOWN_ ( this . end ) ; } public _UNKNOWN_ ( ) { let _UNKNOWN_ = this . get ( "s" ) ; this . set ( "s" , ! _UNKNOWN_ ) ; this . set ( "s" , ! _UNKNOWN_ ? "s" : "s" ) ; setTimeout ( ( ) => { this . set ( "s" , "s" ) ; } , 0 ) ; } } var _UNKNOWN_ < Session > = [ new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , false ) , new Session ( "s" , new Date ( 0 , 0 , 0 , 0 , 0 ) , new Date ( 0 , 0 , 0 , 0 , 0 ) , "s" , true ) , ] ; export class _UNKNOWN_ extends observable . Observable { public sessions : Array < Session > ; private _UNKNOWN_ : number ; public get _UNKNOWN_ ( ) : number { return this . _UNKNOWN_ ; } public set _UNKNOWN_ ( value ) { if ( this . _UNKNOWN_ !== value ) { this . _UNKNOWN_ = value ; this . filter ( ) ; } } private _UNKNOWN_ : string ; public get search ( ) : string { return this . _UNKNOWN_ ; } public set search ( value ) { if ( this . _UNKNOWN_ !== value ) { this . _UNKNOWN_ = value ; this . filter ( ) ; } } private filter ( ) { let day = this . _UNKNOWN_ + 0 ; let _UNKNOWN_ = this . search ? this . search . toLocaleLowerCase ( ) : this . search ; let _UNKNOWN_ = _UNKNOWN_ . filter ( ( session ) => { let include = ( session . start . getDate ( ) === day ) && ( ! _UNKNOWN_ || session . title . toLocaleLowerCase ( ) . indexOf ( _UNKNOWN_ ) >= 0 ) ; if ( include ) { session . cssClass = "s" ; } return include ; } ) ; this . set ( "s" , _UNKNOWN_ ) } constructor ( ) { super ( ) ; this . _UNKNOWN_ = 0 ; this . search = null ; this . filter ( ) ; } } export var instance = new _UNKNOWN_ ( ) ; </s>	O O O O $any$ O O O O $string$ O $Date$ O O O $number$ O $Date$ O $number$ O O O O $string$ O $Date$ O $number$ O O O O O O O $number$ O O O $number$ O $number$ O O O O O O O $string$ O $number$ O O O O O $string$ O $string$ O O O $number$ O O O O O O O O O O $any$ O $any$ O $any$ O O O O $string$ O O $Date$ O O $Date$ O O $string$ O O $boolean$ O O $string$ $string$ O O O O O O O O $string$ O O O O O $string$ O O O O O O $string$ O O O $Date$ O O O O $string$ O O O $Date$ O O O O $void$ O O O O $any$ O O O $any$ O O O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O O $number$ O O O O O O O $any$ O O O O O O O O O O O O O O $Array$ O $any$ O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O $any$ O O O O $DateConstructor$ O O O O O O O O O O O O O $DateConstructor$ O O O O O O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O $any$ O $ArrayConstructor$ O $any$ O O O $number$ O O O O O $number$ O O O O O O O O $number$ O O O O $number$ O $number$ O O O O O O $number$ O $number$ O O O O $number$ O $number$ O O O $void$ O O O O O O $string$ O O O O O $string$ O O O O O O O O $string$ O O O O $string$ O $string$ O O O O O O $string$ O $string$ O O O O $string$ O $string$ O O O $void$ O O O O O O $void$ O O O O $number$ O O O $number$ O O O O $string$ O O O $string$ O O O $string$ O $string$ O O O O O $string$ O O $any$ O $any$ O $complex$ O O $Session$ O O O O $boolean$ O O $Session$ O $Date$ O $number$ O O O $number$ O O O O $string$ O $Session$ O $string$ O $string$ O O O $number$ O $string$ O O O O O O O $boolean$ O O $Session$ O $string$ O O O O O $boolean$ O O O O O O $any$ O O O $any$ O O O O O O O O O O O O $number$ O O O O O $string$ O O O O O $void$ O O O O O O O $any$ O O $any$ O O O O
<s> import { EventData , Observable } from "s" ; import { Page } from "s" ; import { View } from "s" ; import { Color } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" ; import { SearchBar } from "s" ; import * as platform from "s" ; import * as navigator from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as utils from "s" ; export function _UNKNOWN_ ( args ) { var page = < Page > args . object ; page . _UNKNOWN_ = _UNKNOWN_ . instance ; } export function _UNKNOWN_ ( args ) { let searchBar = < SearchBar > args . object ; if ( searchBar . android ) { searchBar . android . _UNKNOWN_ ( ) ; } } export function _UNKNOWN_ ( args ) { let background = < View > args . object ; let colors = new Array < Color > ( new Color ( "s" ) , new Color ( "s" ) ) ; let orientation = _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ; switch ( platform . device . os ) { case platform . _UNKNOWN_ . android : _UNKNOWN_ . _UNKNOWN_ ( background , colors , orientation ) ; break ; case platform . _UNKNOWN_ . ios : setTimeout ( ( ) => { _UNKNOWN_ . _UNKNOWN_ ( background , colors , orientation ) ; } ) ; let search = background . _UNKNOWN_ ( "s" ) ; search . ios . _UNKNOWN_ = _UNKNOWN_ . alloc ( ) . init ( ) ; break ; } } export function _UNKNOWN_ ( args ) { if ( args . ios ) { var cell = < _UNKNOWN_ > args . ios ; cell . backgroundColor = utils . ios . getter ( _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ ) ; } } export function _UNKNOWN_ ( args ) { var session = < _UNKNOWN_ . Session > args . view . _UNKNOWN_ ; session . _UNKNOWN_ ( ) ; } var _UNKNOWN_ = 0 ; export function _UNKNOWN_ ( args ) { if ( _UNKNOWN_ ) { clearTimeout ( _UNKNOWN_ ) ; } _UNKNOWN_ = setTimeout ( ( ) => { _UNKNOWN_ = 0 ; } , 0 ) ; } export function tap ( args ) { var page = ( < View > args . object ) . page ; if ( ! _UNKNOWN_ ) { _UNKNOWN_ = setTimeout ( ( ) => { page . _UNKNOWN_ < SearchBar > ( "s" ) . _UNKNOWN_ ( ) ; _UNKNOWN_ = 0 ; } , 0 ) ; } } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O $EventData$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $EventData$ O O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O $void$ O $EventData$ O O O $any$ O O $any$ O $any$ O $any$ O O $any[]$ O O $ArrayConstructor$ O $any$ O O O $any$ O O O O O $any$ O O O O O O $Orientation$ O $any$ O $any$ O $Orientation$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any[]$ O $Orientation$ O O O O O $any$ O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $any[]$ O $Orientation$ O O O O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O O O O O O $void$ O $ItemEventData$ O O O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O $Session$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Session$ O $void$ O O O O O $number$ O O O O O $void$ O $any$ O O O O $number$ O O $void$ O $number$ O O O $number$ O $number$ O O O O O $number$ O O O O O O O O O O O $void$ O $EventData$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $number$ O O $number$ O $number$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $number$ O O O O O O O O O O O O $void$ O $EventData$ O O $any$ O $void$ O O O O O
<s> import { Observable } from "s" ; import { ObservableArray } from "s" ; import * as appModule from "s" ; export class _UNKNOWN_ extends Observable { constructor ( ) { super ( ) ; this . _UNKNOWN_ = _UNKNOWN_ ( new Date ( ) ) ; this . _UNKNOWN_ = new ObservableArray < _UNKNOWN_ > ( ) ; var today = _UNKNOWN_ ( new Date ( ) ) ; var 0 = _UNKNOWN_ . _UNKNOWN_ ( "s" , "s" , today , "s" , 0 , "s" , 0 , "s" , false ) ; this . _UNKNOWN_ . push ( 0 ) ; var 0 = _UNKNOWN_ . _UNKNOWN_ ( "s" , "s" , today , "s" , 0 , "s" , 0 , "s" , false ) ; this . _UNKNOWN_ . push ( 0 ) ; var 0 = _UNKNOWN_ . _UNKNOWN_ ( "s" , "s" , today , "s" , 0 , "s" , 0 , "s" , false ) ; this . _UNKNOWN_ . push ( 0 ) ; var 0 = _UNKNOWN_ . _UNKNOWN_ ( "s" , "s" , today , "s" , 0 , "s" , 0 , "s" , false ) ; this . _UNKNOWN_ . push ( 0 ) ; var 0 = _UNKNOWN_ . _UNKNOWN_ ( "s" , "s" , today , "s" , 0 , "s" , 0 , "s" , false ) ; this . _UNKNOWN_ . push ( 0 ) ; var options = new Array < String > ( ) ; options . push ( "s" ) ; options . push ( "s" ) ; options . push ( "s" ) ; options . push ( "s" ) ; this . _UNKNOWN_ = options ; var _UNKNOWN_ = new Array < Number > ( ) ; _UNKNOWN_ . push ( 0 ) ; _UNKNOWN_ . push ( 0 ) ; _UNKNOWN_ . push ( 0 ) ; _UNKNOWN_ . push ( 0 ) ; this . _UNKNOWN_ = _UNKNOWN_ ; var _UNKNOWN_ = new Array < String > ( ) ; _UNKNOWN_ . push ( "s" ) ; _UNKNOWN_ . push ( "s" ) ; _UNKNOWN_ . push ( "s" ) ; _UNKNOWN_ . push ( "s" ) ; this . _UNKNOWN_ = _UNKNOWN_ ; appModule . _UNKNOWN_ ( ) [ "s" ] = _UNKNOWN_ ; appModule . _UNKNOWN_ ( ) [ "s" ] = _UNKNOWN_ ; } get isNew ( ) : Boolean { return this . get ( "s" ) ; } set isNew ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) : String { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } set _UNKNOWN_ ( value < _UNKNOWN_ > ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) : ObservableArray < _UNKNOWN_ > { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . get ( "s" ) ; } set _UNKNOWN_ ( value < String > ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) : Array < String > { return this . get ( "s" ) ; } set _UNKNOWN_ ( value < String > ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) : Array < String > { return this . get ( "s" ) ; } set _UNKNOWN_ ( value < Number > ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) : Array < Number > { return this . get ( "s" ) ; } } function _UNKNOWN_ ( date ) { var day = date . getDate ( ) ; var month = date . getMonth ( ) + 0 ; var _UNKNOWN_ = day < 0 ? "s" + day : day ; var _UNKNOWN_ = month < 0 ? "s" + month : month ; var _UNKNOWN_ = date . getDay ( ) ; return _UNKNOWN_ ( _UNKNOWN_ ) + "s" + _UNKNOWN_ + "s" + _UNKNOWN_ ; } function _UNKNOWN_ ( date ) { var day = date . getDate ( ) ; var month = date . getMonth ( ) + 0 ; var year = date . getFullYear ( ) ; return year + "s" + month + "s" + day ; } function _UNKNOWN_ ( day ) { switch ( day ) { case 0 : return "s" ; case 0 : return "s" ; case 0 : return "s" ; case 0 : return "s" ; case 0 : return "s" ; case 0 : return "s" ; case 0 : return "s" ; } } var _UNKNOWN_ = function ( value ) { var _UNKNOWN_ = value . split ( "s" ) ; var hour = _UNKNOWN_ [ 0 ] ; var minute = _UNKNOWN_ [ 0 ] ; var _UNKNOWN_ = Number ( hour ) ; if ( _UNKNOWN_ > 0 ) { _UNKNOWN_ -= 0 ; } if ( _UNKNOWN_ == 0 ) { _UNKNOWN_ = 0 ; } return _UNKNOWN_ + "s" + minute ; } var _UNKNOWN_ = function ( value ) { var _UNKNOWN_ = value . split ( "s" ) ; var hour = _UNKNOWN_ [ 0 ] ; var minute = _UNKNOWN_ [ 0 ] ; var _UNKNOWN_ = Number ( hour ) ; if ( _UNKNOWN_ >= 0 ) { return "s" ; } return "s" ; } export class _UNKNOWN_ { public name : string = "s" ; public phone : string = "s" ; public date : string = _UNKNOWN_ ( new Date ( ) ) ; public time : string = "s" ; public table : number = 0 ; public section : string = "s" ; public _UNKNOWN_ : number = 0 ; public origin : string = "s" ; public cancelled : boolean = false ; constructor ( ) { } static _UNKNOWN_ ( name , phone , date , time , table , section , _UNKNOWN_ , origin , cancelled ) { var r = new _UNKNOWN_ ( ) ; r . name = name ; r . phone = phone ; r . date = date ; r . time = time ; r . table = table ; r . section = section ; r . _UNKNOWN_ = _UNKNOWN_ ; r . origin = origin ; r . cancelled = cancelled ; return r ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O $String$ O $string$ O O $DateConstructor$ O O O O O O $any$ O O $any$ O $any$ O O O O O $string$ O $string$ O O $DateConstructor$ O O O O O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $string$ O O O O O O O O O O O O O O O O $any$ O $any$ O $any$ O O O $String[]$ O O $ArrayConstructor$ O $StringConstructor$ O O O O $String[]$ O $number$ O O O O $String[]$ O $number$ O O O O $String[]$ O $number$ O O O O $String[]$ O $number$ O O O O O O $String[]$ O $String[]$ O O $any$ O O $ArrayConstructor$ O $NumberConstructor$ O O O O $any$ O $number$ O O O O $any$ O $number$ O O O O $any$ O $number$ O O O O $any$ O $number$ O O O O O O $any$ O $any$ O O $String[]$ O O $ArrayConstructor$ O $StringConstructor$ O O O O $String[]$ O $number$ O O O O $String[]$ O $number$ O O O O $String[]$ O $number$ O O O O $String[]$ O $number$ O O O O O O $String[]$ O $String[]$ O $any$ O $any$ O O O O O O $string$ O $any$ O $any$ O O O O O O $complex$ O O O $Boolean$ O O O $BooleanConstructor$ O O O O $any$ O O O O O O $Boolean$ O $Boolean$ O O O O $any$ O O O $Boolean$ O O O O $String$ O O O $StringConstructor$ O O O O $any$ O O O O O O $String$ O $String$ O O O O $any$ O O O $String$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O O O O O $String[]$ O $Array$ O $StringConstructor$ O O O O O $any$ O O O $String[]$ O O O O $String[]$ O O O $ArrayConstructor$ O $StringConstructor$ O O O O O $any$ O O O O O O $String[]$ O $Array$ O $StringConstructor$ O O O O O $any$ O O O $String[]$ O O O O $String[]$ O O O $ArrayConstructor$ O $StringConstructor$ O O O O O $any$ O O O O O O $any$ O $Array$ O $NumberConstructor$ O O O O O $any$ O O O $any$ O O O O $any$ O O O $ArrayConstructor$ O $NumberConstructor$ O O O O O $any$ O O O O O O O $string$ O $Date$ O O O $number$ O $Date$ O $number$ O O O O $number$ O $Date$ O $number$ O O O O O O $complex$ O $number$ O O O O O $number$ O $number$ O O $complex$ O $number$ O O O O O $number$ O $number$ O O $number$ O $Date$ O $number$ O O O O $complex$ O $number$ O O O O $complex$ O O O $complex$ O O O $string$ O $Date$ O O O $number$ O $Date$ O $number$ O O O O $number$ O $Date$ O $number$ O O O O O O $number$ O $Date$ O $number$ O O O O $number$ O O O $number$ O O O $number$ O O O $complex$ O $number$ O O O O $number$ O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O O $string$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $number$ O $NumberConstructor$ O $any$ O O O O $number$ O O O O $number$ O O O O O O $number$ O O O O $number$ O O O O O $number$ O O O $any$ O O O $complex$ O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $number$ O $NumberConstructor$ O $any$ O O O O $number$ O O O O O O O O O O O O O O $any$ O O $string$ O O O O O O $string$ O O O O O O $string$ O O O $string$ O O $DateConstructor$ O O O O O $string$ O O O O O O $number$ O O O O O O $string$ O O O O O O $number$ O O O O O O $string$ O O O O O O $boolean$ O O O O O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O O O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $number$ O $any$ O $any$ O $string$ O $any$ O $any$ O $boolean$ O $any$ O O $any$ O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { EventData } from "s" ; import { Page , _UNKNOWN_ } from "s" ; import * as _UNKNOWN_ from "s" ; import { _UNKNOWN_ as _UNKNOWN_ } from "s" ; import * as navigator from "s" ; import * as _UNKNOWN_ from "s" ; import { Color } from "s" ; import * as platform from "s" ; var _UNKNOWN_ = new Color ( "s" ) ; var model ; var _UNKNOWN_ ; var scale ; export function _UNKNOWN_ ( args ) { var screen = platform . screen ; scale = screen . _UNKNOWN_ . scale ; _UNKNOWN_ = 0 * scale ; var page = < Page > args . object ; model = < _UNKNOWN_ > args . context ; page . _UNKNOWN_ = model ; } export function _UNKNOWN_ ( args ) { var page = < Page > ( < _UNKNOWN_ . View > args . object ) . page ; var _UNKNOWN_ = < _UNKNOWN_ . _UNKNOWN_ > _UNKNOWN_ . _UNKNOWN_ ( page , "s" ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ . _UNKNOWN_ ( ) ) { return ; } if ( model . isNew ) { model . _UNKNOWN_ . push ( model . _UNKNOWN_ ) ; } navigator . _UNKNOWN_ ( model ) ; } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( data : _UNKNOWN_ . _UNKNOWN_ ) { if ( data . propertyName == "s" ) { _UNKNOWN_ ( data . editor ) ; } if ( data . propertyName == "s" || data . propertyName == "s" ) { _UNKNOWN_ ( data . editor ) ; } if ( data . propertyName == "s" ) { var root ; if ( data . editor . _UNKNOWN_ instanceof Function ) { root = data . editor . _UNKNOWN_ ( ) ; } else { root = data . editor . _UNKNOWN_ ; } root . _UNKNOWN_ ( ) . _UNKNOWN_ ( _UNKNOWN_ , 0 , 0 , 0 ) ; } } export function _UNKNOWN_ ( data : _UNKNOWN_ . _UNKNOWN_ ) { } export function _UNKNOWN_ ( editor ) { var _UNKNOWN_ = editor . _UNKNOWN_ ( ) ; _UNKNOWN_ . _UNKNOWN_ ( "s" ) ; _UNKNOWN_ . _UNKNOWN_ ( "s" ) ; _UNKNOWN_ . _UNKNOWN_ ( ) . _UNKNOWN_ ( _UNKNOWN_ . android ) ; _UNKNOWN_ . _UNKNOWN_ ( ) . _UNKNOWN_ ( _UNKNOWN_ . android ) ; } export function _UNKNOWN_ ( data : _UNKNOWN_ . _UNKNOWN_ ) { if ( data . groupName != "s" ) { return ; } var _UNKNOWN_ = data . group . _UNKNOWN_ ( ) . getContext ( ) ; var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) . _UNKNOWN_ ( "s" , "s" , _UNKNOWN_ . getPackageName ( ) ) ; var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) . _UNKNOWN_ ( _UNKNOWN_ ) ; data . group . _UNKNOWN_ ( ) . _UNKNOWN_ ( _UNKNOWN_ ) ; } export function _UNKNOWN_ ( editor ) { var _UNKNOWN_ = editor . _UNKNOWN_ ( ) . getContext ( ) ; var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) . _UNKNOWN_ ( "s" , "s" , _UNKNOWN_ . getPackageName ( ) ) ; var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( ) . _UNKNOWN_ ( "s" , "s" , _UNKNOWN_ . getPackageName ( ) ) ; editor . _UNKNOWN_ ( _UNKNOWN_ ) ; editor . _UNKNOWN_ ( _UNKNOWN_ ) ; } var _UNKNOWN_ ; export function _UNKNOWN_ ( args ) { var editorView : android . widget . _UNKNOWN_ = new android . widget . _UNKNOWN_ ( args . context ) ; editorView . _UNKNOWN_ ( _UNKNOWN_ . android ) ; var _UNKNOWN_ = new android . widget . _UNKNOWN_ . _UNKNOWN_ ( - 0 , - 0 ) ; _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ , 0 , 0 , 0 ) ; editorView . _UNKNOWN_ ( _UNKNOWN_ ) ; var _UNKNOWN_ = 0 * scale ; editorView . _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ ) ; editorView . _UNKNOWN_ ( new android . view . View . _UNKNOWN_ ( { onClick ( view : android . view . View ) { _UNKNOWN_ ( view , args . object ) ; } } ) ) ; args . view = editorView ; } export function _UNKNOWN_ ( args ) { _UNKNOWN_ ( args . view , args . value ) ; } export function _UNKNOWN_ ( args ) { args . value = _UNKNOWN_ ; } export function _UNKNOWN_ ( editorView , value ) { _UNKNOWN_ = value ; var buttonText = _UNKNOWN_ ? "s" : "s" ; editorView . setText ( buttonText ) ; } export function _UNKNOWN_ ( editorView , editor ) { var newValue = ! _UNKNOWN_ ; _UNKNOWN_ ( editorView , newValue ) ; editor . _UNKNOWN_ ( ) ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O $Color$ O O $any$ O O O O O $any$ O O $number$ O O $any$ O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $number$ O O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $EventData$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O $any$ O $Boolean$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O O O O O $void$ O $EventData$ O O $any$ O $void$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O O O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O $FunctionConstructor$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $number$ O O O O O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $void$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $number$ O O O O O O O O $any$ O $void$ O $any$ O O O $number$ O O O $any$ O $any$ O $void$ O $number$ O $number$ O $number$ O $number$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O $void$ O $any$ O $any$ O $any$ O $any$ O O $void$ O $any$ O $any$ O $any$ O O O O O O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O $void$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O O $string$ O $any$ O O O O O $any$ O $any$ O $string$ O O O O O $void$ O $any$ O $any$ O O O $boolean$ O O $any$ O $void$ O $any$ O $boolean$ O O $any$ O $any$ O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { EventData } from "s" ; import { Page , _UNKNOWN_ } from "s" ; import * as _UNKNOWN_ from "s" ; import { _UNKNOWN_ as _UNKNOWN_ } from "s" ; import * as navigator from "s" ; import * as _UNKNOWN_ from "s" ; import { Color } from "s" ; import * as platform from "s" ; var _UNKNOWN_ = new Color ( "s" ) ; var model ; var _UNKNOWN_ = 0 ; export function _UNKNOWN_ ( args ) { var page = < Page > args . object ; model = < _UNKNOWN_ > args . context ; page . _UNKNOWN_ = model ; } export function _UNKNOWN_ ( args ) { var page = < Page > ( < _UNKNOWN_ . View > args . object ) . page ; var _UNKNOWN_ = < _UNKNOWN_ . _UNKNOWN_ > _UNKNOWN_ . _UNKNOWN_ ( page , "s" ) ; _UNKNOWN_ . _UNKNOWN_ ( ) ; if ( _UNKNOWN_ . _UNKNOWN_ ( ) ) { return ; } if ( model . isNew ) { model . _UNKNOWN_ . push ( model . _UNKNOWN_ ) ; } navigator . _UNKNOWN_ ( model ) ; } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( data : _UNKNOWN_ . _UNKNOWN_ ) { switch ( data . propertyName ) { case "s" : _UNKNOWN_ ( data . editor ) ; break ; case "s" : _UNKNOWN_ ( data . editor ) ; break ; case "s" : _UNKNOWN_ ( data . editor ) ; break ; case "s" : _UNKNOWN_ ( data . editor ) ; break ; case "s" : _UNKNOWN_ ( data . editor ) ; break ; case "s" : _UNKNOWN_ ( data . editor ) ; break ; case "s" : _UNKNOWN_ ( data . editor ) ; break ; case "s" : _UNKNOWN_ ( data . editor ) ; break ; case "s" : _UNKNOWN_ ( data . editor ) ; break ; } } export function _UNKNOWN_ ( editor ) { _UNKNOWN_ ( editor ) ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , 0 ) ; _UNKNOWN_ ( editor ) ; } export function _UNKNOWN_ ( editor ) { _UNKNOWN_ ( editor ) ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , 0 ) ; _UNKNOWN_ ( editor ) ; } export function _UNKNOWN_ ( editor ) { _UNKNOWN_ ( editor ) ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , 0 ) ; } export function _UNKNOWN_ ( editor ) { _UNKNOWN_ ( editor ) ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , 0 ) ; } export function _UNKNOWN_ ( editor ) { _UNKNOWN_ ( editor ) ; _UNKNOWN_ ( editor ) ; var _UNKNOWN_ = _UNKNOWN_ . new ( ) . _UNKNOWN_ ( editor ) ; editor . _UNKNOWN_ . delegate = _UNKNOWN_ ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , 0 ) ; _UNKNOWN_ ( editor , 0 ) ; } export function _UNKNOWN_ ( editor ) { _UNKNOWN_ ( editor ) ; var _UNKNOWN_ = _UNKNOWN_ . new ( ) . _UNKNOWN_ ( editor ) ; editor . _UNKNOWN_ . delegate = _UNKNOWN_ ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , 0 ) ; _UNKNOWN_ ( editor , _UNKNOWN_ + 0 ) ; _UNKNOWN_ ( editor , 0 ) ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; } export function _UNKNOWN_ ( editor ) { _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , 0 ) ; _UNKNOWN_ ( editor , 0 ) ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , - 0 ) ; } export function _UNKNOWN_ ( editor ) { _UNKNOWN_ ( editor ) ; _UNKNOWN_ ( editor ) ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; _UNKNOWN_ ( editor , _UNKNOWN_ ) ; } export function _UNKNOWN_ ( editor ) { _UNKNOWN_ ( editor ) ; _UNKNOWN_ ( editor ) ; _UNKNOWN_ ( editor , 0 ) ; } export function _UNKNOWN_ ( editor , value ) { editor . style . _UNKNOWN_ = value ; } export function _UNKNOWN_ ( editor , value ) { editor . style . _UNKNOWN_ = { horizontal : value , vertical : 0 } ; } export function _UNKNOWN_ ( editor , value ) { editor . style . _UNKNOWN_ = { horizontal : value , vertical : 0 } ; } export function _UNKNOWN_ ( editor , value ) { var _UNKNOWN_ = editor . _UNKNOWN_ . _UNKNOWN_ ( editor . _UNKNOWN_ ) ; _UNKNOWN_ . _UNKNOWN_ = { horizontal : value , vertical : 0 } ; } export function _UNKNOWN_ ( editor , value ) { editor . editor . _UNKNOWN_ = value . ios ; } export function _UNKNOWN_ ( editor , value ) { editor . style . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( value . ios ) ; } export function _UNKNOWN_ ( editor ) { var _UNKNOWN_ = editor . _UNKNOWN_ . _UNKNOWN_ ( editor . _UNKNOWN_ ) ; editor . _UNKNOWN_ . _UNKNOWN_ ( 0 , _UNKNOWN_ . column ) ; } export function _UNKNOWN_ ( editor ) { editor . style . _UNKNOWN_ = null ; } export function _UNKNOWN_ ( editor ) { editor . backgroundColor = _UNKNOWN_ . _UNKNOWN_ ; } export function _UNKNOWN_ ( editor ) { editor . style . _UNKNOWN_ = { horizontal : _UNKNOWN_ , vertical : 0 } ; editor . _UNKNOWN_ . font = _UNKNOWN_ . _UNKNOWN_ ( "s" , 0 ) ; } export function _UNKNOWN_ ( data : _UNKNOWN_ . _UNKNOWN_ ) { if ( data . groupName != "s" ) { return ; } var _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( "s" ) ; var backgroundColor = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ ) ; data . group . backgroundColor = backgroundColor ; data . group . _UNKNOWN_ . backgroundColor = _UNKNOWN_ . _UNKNOWN_ ; } var _UNKNOWN_ ; export function _UNKNOWN_ ( args ) { _UNKNOWN_ = new _UNKNOWN_ ( ) ; _UNKNOWN_ . editor = args . object ; var editorView = _UNKNOWN_ . _UNKNOWN_ ( _UNKNOWN_ . System ) ; editorView . _UNKNOWN_ = _UNKNOWN_ . ios ; editorView . _UNKNOWN_ = _UNKNOWN_ . Left ; editorView . _UNKNOWN_ ( _UNKNOWN_ , "s" , _UNKNOWN_ . _UNKNOWN_ ) ; args . view = editorView ; } export function _UNKNOWN_ ( args ) { _UNKNOWN_ . _UNKNOWN_ ( args . view , args . value ) ; } export function _UNKNOWN_ ( args ) { args . value = _UNKNOWN_ . _UNKNOWN_ ; } export class _UNKNOWN_ extends _UNKNOWN_ { public _UNKNOWN_ : Boolean ; public editor : _UNKNOWN_ . _UNKNOWN_ ; public _UNKNOWN_ ( editorView , newValue ) { this . _UNKNOWN_ = newValue ; var buttonText = this . _UNKNOWN_ ? "s" : "s" ; editorView . _UNKNOWN_ ( buttonText , _UNKNOWN_ . Normal ) ; } public "s" ( sender ) { var newValue = ! this . _UNKNOWN_ ; this . _UNKNOWN_ ( sender , newValue ) ; this . editor . _UNKNOWN_ ( ) ; } public static _UNKNOWN_ = { "s" : { returns : _UNKNOWN_ . types . void , params : [ _UNKNOWN_ . class ( ) ] } } ; } class _UNKNOWN_ extends _UNKNOWN_ implements _UNKNOWN_ { public static _UNKNOWN_ = [ _UNKNOWN_ ] ; static new ( ) { return < _UNKNOWN_ > super . new ( ) ; } private _owner : _UNKNOWN_ ; public _UNKNOWN_ ( owner ) { this . _owner = owner ; return this ; } public _UNKNOWN_ ( _UNKNOWN_ , row , component ) { return this . _owner . options [ row ] ; } public _UNKNOWN_ ( _UNKNOWN_ , row , component ) { this . _owner . selectedIndex = row ; this . _owner . owner . _UNKNOWN_ ( this . _owner ) ; } public _UNKNOWN_ ( _UNKNOWN_ , row , component ) { var title = this . _UNKNOWN_ ( _UNKNOWN_ , row , component ) ; var _UNKNOWN_ = String ( title ) ; var keys = _UNKNOWN_ . alloc ( ) . init ( ) ; keys . _UNKNOWN_ ( _UNKNOWN_ ) ; var values = _UNKNOWN_ . alloc ( ) . init ( ) ; values . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ ) ; var attr = NSDictionary . alloc ( ) . _UNKNOWN_ ( values , keys ) ; var res = _UNKNOWN_ . alloc ( ) . _UNKNOWN_ ( _UNKNOWN_ , attr ) ; return res ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O $Color$ O O $any$ O O O O O $any$ O O $number$ O O O O O $void$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $EventData$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O $any$ O $Boolean$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $void$ O $any$ O O O O O $void$ O $EventData$ O O $any$ O $void$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O O $void$ O $any$ O O $void$ O $any$ O $number$ O O $void$ O $any$ O O O O $void$ O $any$ O O O O O $void$ O $any$ O O $void$ O $any$ O O $void$ O $any$ O $number$ O O $void$ O $any$ O O O O $void$ O $any$ O O O O O $void$ O $any$ O O $void$ O $any$ O O $void$ O $any$ O $any$ O O $void$ O $any$ O $number$ O O $void$ O $any$ O O O O O O O $void$ O $any$ O O $void$ O $any$ O O $void$ O $any$ O $any$ O O $void$ O $any$ O $number$ O O $void$ O $any$ O O O O O O O $void$ O $any$ O O $void$ O $any$ O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $void$ O $any$ O $any$ O O $void$ O $any$ O O O O $void$ O $any$ O O O O O O O $void$ O $any$ O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $void$ O $any$ O $any$ O O $void$ O $any$ O O O O $void$ O $any$ O $number$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O O $void$ O $any$ O $any$ O O $void$ O $any$ O O O O $void$ O $any$ O O O O $void$ O $any$ O $any$ O O $void$ O $any$ O O O O O O O O $void$ O $any$ O O $void$ O $any$ O O $void$ O $any$ O O $void$ O $any$ O $any$ O O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O O $void$ O $any$ O O $void$ O $any$ O O $void$ O $any$ O O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $number$ O O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $number$ O O O O O O O $void$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O $number$ O O O O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O $number$ O $number$ O $number$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O $void$ O $any$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O $Boolean$ O $BooleanConstructor$ O O $any$ O $any$ O $any$ O O $void$ O $any$ O $any$ O O O O $Boolean$ O $any$ O O $string$ O O O $Boolean$ O O O O O $any$ O $any$ O $string$ O $any$ O $any$ O O O O O O $any$ O O O $boolean$ O O O O $Boolean$ O O O $void$ O $any$ O $boolean$ O O O O $any$ O $any$ O O O O O O $complex$ O O O O O $any$ O $any$ O $complex$ O $any$ O $any[]$ O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O O O $any[]$ O O $any$ O O O $any$ O O O O O $any$ O O O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $string$ O $StringConstructor$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $string$ O $any$ O O O $any$ O O O O
<s> import * as _UNKNOWN_ from "s" ; import * as model from "s" ; import * as navigator from "s" ; import { ObservableArray } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ as _UNKNOWN_ } from "s" ; let _UNKNOWN_ ; export function _UNKNOWN_ ( args ) { let page = args . object ; if ( args . _UNKNOWN_ && args . context instanceof model . _UNKNOWN_ ) { _UNKNOWN_ = args . context ; } else { _UNKNOWN_ = new model . _UNKNOWN_ ( ) ; } page . _UNKNOWN_ = null ; page . _UNKNOWN_ = _UNKNOWN_ ; } export function _UNKNOWN_ ( args ) { if ( args . _UNKNOWN_ ) { _UNKNOWN_ = undefined ; } } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { var item : model . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ . getItem ( args . index ) ; _UNKNOWN_ ( item , false ) ; } export function _UNKNOWN_ ( args ) { var item : model . _UNKNOWN_ = new model . _UNKNOWN_ ( ) ; _UNKNOWN_ ( item , true ) ; } export function _UNKNOWN_ ( item : model . _UNKNOWN_ , isNew ) { _UNKNOWN_ . _UNKNOWN_ = item ; _UNKNOWN_ . isNew = isNew ; _UNKNOWN_ ( ) . navigate ( { moduleName : "s" , animated : true , context : _UNKNOWN_ } ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O $any$ O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $void$ O $any$ O O O O $any$ O $any$ O O $any$ O $undefined$ O O O O O $void$ O $any$ O O $any$ O $void$ O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $void$ O $any$ O O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O $void$ O $any$ O O O O O O O $void$ O $any$ O $any$ O $any$ O $Boolean$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $Boolean$ O $any$ O O O $any$ O O $string$ O O O $boolean$ O O O $any$ O $any$ O O O O O
<s> import * as pages from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as utils from "s" ; import * as _UNKNOWN_ from "s" ; import * as navigator from "s" ; import * as view from "s" ; import * as platform from "s" ; import * as _UNKNOWN_ from "s" ; import * as builder from "s" ; import { View } from "s" import { knownFolders } from "s" ; import { _UNKNOWN_ } from "s" ; var _UNKNOWN_ = 0 ; var _UNKNOWN_ = ( platform . device . os === platform . _UNKNOWN_ . android ) ? new android . view . animation . _UNKNOWN_ ( ) : _UNKNOWN_ . _UNKNOWN_ ; export class _UNKNOWN_ extends pages . Page { private _UNKNOWN_ : _UNKNOWN_ ; public constructor ( ) { super ( ) ; this . on ( "s" , args => { if ( ! this . _UNKNOWN_ ) { var root = this . content ; var _UNKNOWN_ = root . _UNKNOWN_ ; var _UNKNOWN_ = knownFolders . _UNKNOWN_ ( ) . path + "s" ; var _UNKNOWN_ = < View > builder . load ( _UNKNOWN_ , require ( "s" ) ) ; this . _UNKNOWN_ = < _UNKNOWN_ > _UNKNOWN_ . _UNKNOWN_ ( "s" ) ; this . content = _UNKNOWN_ ; this . _UNKNOWN_ . _UNKNOWN_ = root ; if ( root . _UNKNOWN_ !== _UNKNOWN_ ) { root . _UNKNOWN_ = _UNKNOWN_ ; } this . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ = this . _UNKNOWN_ ; } } ) ; } public _UNKNOWN_ ( ) { super . _UNKNOWN_ ( ) ; _UNKNOWN_ . stop ( "s" ) ; this . _UNKNOWN_ . _UNKNOWN_ . getItems ( ) . forEach ( item => { if ( ( < any > item ) . id === "s" ) { item . on ( "s" , ( ) => { this . _UNKNOWN_ . _UNKNOWN_ = true ; this . _UNKNOWN_ . _UNKNOWN_ ( ) ; } ) ; } } ) ; } } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $number$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O O O O O O O $any$ O O O $any$ O O O O O O O $any$ O O O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O $string$ O $any$ O $any$ O O O $any$ O O O O $any$ O O $any$ O $any$ O $any$ O $string$ O $any$ O O O O O O O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O $any$ O O O O O O O $void$ O O O O O $any$ O O O $any$ O $void$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O O $any$ O O O O $any$ O $any$ O O O O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O O O
<s> import * as utils from "s" ; import * as platform from "s" ; import * as navigator from "s" ; import { _UNKNOWN_ } from "s" ; import { View } from "s" ; var isAndroid = platform . device . os === platform . _UNKNOWN_ . android ; var _UNKNOWN_ = 0 ; var _UNKNOWN_ = ( platform . device . os === platform . _UNKNOWN_ . android ) ? new android . view . animation . _UNKNOWN_ ( ) : _UNKNOWN_ . _UNKNOWN_ ; export function _UNKNOWN_ ( args ) { var drawer = args . object . page . _UNKNOWN_ ( "s" ) ; drawer . _UNKNOWN_ = true ; drawer . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { var drawer = args . object . page . _UNKNOWN_ ( "s" ) ; drawer . _UNKNOWN_ = false ; drawer . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { var _UNKNOWN_ = args . object . _UNKNOWN_ ( "s" ) ; var _UNKNOWN_ = isAndroid ? 0 : 0 ; var _UNKNOWN_ = ( s ) => 0 * 0 + s * 0 ; var _UNKNOWN_ = ( scale , opacity , duration = 0 ) => ( ) => _UNKNOWN_ . animate ( { scale : { x : _UNKNOWN_ ( scale ) , y : _UNKNOWN_ ( scale ) } , opacity : opacity , duration : duration * _UNKNOWN_ , curve : _UNKNOWN_ } ) ; _UNKNOWN_ ( 0 , 0 , 0 ) ( ) . then ( _UNKNOWN_ ( 0 , 0 ) ) . then ( _UNKNOWN_ ( 0 , 0 ) ) . then ( _UNKNOWN_ ( 0 , 0 ) ) . then ( _UNKNOWN_ ( 0 , 0 ) ) . then ( _UNKNOWN_ ( 0 , 0 ) ) . then ( _UNKNOWN_ ( 0 , 0 ) ) ; var _UNKNOWN_ = args . object . _UNKNOWN_ ( "s" ) ; setTimeout ( _UNKNOWN_ ( _UNKNOWN_ , ( ) => _UNKNOWN_ . animate ( { translate : { x : 0 , y : 0 } , opacity : 0 , duration : 0 * _UNKNOWN_ , curve : _UNKNOWN_ } ) ) , 0 ) ; var title = args . object . _UNKNOWN_ ( "s" ) ; setTimeout ( _UNKNOWN_ ( title , ( ) => title . animate ( { translate : { x : 0 , y : 0 } , opacity : 0 , duration : 0 * _UNKNOWN_ , curve : _UNKNOWN_ } ) ) , 0 ) ; var _UNKNOWN_ = args . object . _UNKNOWN_ ( "s" ) ; if ( args . object . android ) { var _UNKNOWN_ = < any > android . support . 0 . view . _UNKNOWN_ ; var _UNKNOWN_ = _UNKNOWN_ * utils . layout . _UNKNOWN_ ( ) + 0 ; var _UNKNOWN_ = ( view , _UNKNOWN_ ) => { _UNKNOWN_ . _UNKNOWN_ ( view . android , _UNKNOWN_ ) ; } _UNKNOWN_ ( _UNKNOWN_ , 0 * utils . layout . _UNKNOWN_ ( ) + 0 ) ; _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ ) ; _UNKNOWN_ ( _UNKNOWN_ , _UNKNOWN_ + 0 ) ; _UNKNOWN_ ( title , _UNKNOWN_ + 0 ) ; } } export function _UNKNOWN_ ( args ) { var drawer = args . object ; drawer . _UNKNOWN_ = false ; } export function _UNKNOWN_ ( args ) { var drawer = args . object ; drawer . _UNKNOWN_ = false ; if ( ! drawer . _UNKNOWN_ ) { drawer . _UNKNOWN_ = true ; drawer . page . on ( "s" , ( args ) => { drawer . _UNKNOWN_ ( ) ; } ) ; if ( drawer . ios ) { drawer . ios . _UNKNOWN_ . style . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ; drawer . ios . _UNKNOWN_ . style . _UNKNOWN_ = 0 ; } } } export function _UNKNOWN_ ( args ) { console . log ( "s" ) ; navigator . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { console . log ( "s" ) ; navigator . _UNKNOWN_ ( args . object . _UNKNOWN_ ) ; } export function _UNKNOWN_ ( args ) { console . log ( "s" ) ; navigator . _UNKNOWN_ ( args . object . _UNKNOWN_ . example ) ; } export function _UNKNOWN_ ( args ) { console . log ( "s" ) ; } export function _UNKNOWN_ ( args ) { console . log ( "s" ) ; navigator . _UNKNOWN_ ( args . object . _UNKNOWN_ ) ; } export function _UNKNOWN_ ( args ) { console . log ( "s" ) ; navigator . _UNKNOWN_ ( args . object . _UNKNOWN_ ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $boolean$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $number$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $any$ O $any$ O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O O $number$ O $boolean$ O O O O O O $number$ O O $any$ O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O $number$ O O O O O O O $any$ O $any$ O O $complex$ O O $number$ O $number$ O $any$ O O $number$ O $number$ O $any$ O O O $any$ O $any$ O $number$ O $number$ O $number$ O $any$ O $any$ O O O $any$ O O O O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $number$ O $any$ O $any$ O O O O $any$ O $any$ O O $complex$ O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O $number$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $number$ O $any$ O $any$ O O O O $any$ O $any$ O O $complex$ O O $number$ O O O $number$ O O O O $number$ O O O $number$ O O O $number$ O $any$ O $any$ O O O O O O O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $number$ O $number$ O $any$ O $any$ O $any$ O O O O O O $void$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O $number$ O O $void$ O $any$ O $number$ O O O O $void$ O $any$ O $number$ O O O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $void$ O $any$ O O $Console$ O $void$ O O O O $any$ O $void$ O O O O O O $void$ O $any$ O O $Console$ O $void$ O O O O $any$ O $void$ O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O O $Console$ O $void$ O O O O $any$ O $void$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O O $Console$ O $void$ O O O O O O O $void$ O $any$ O O $Console$ O $void$ O O O O $any$ O $void$ O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O O $Console$ O $void$ O O O O $any$ O $void$ O $any$ O $any$ O $any$ O O O O
<s> import * as observable from "s" ; import * as _UNKNOWN_ from "s" ; import * as utils from "s" ; import { Page } from "s" ; import { Color } from "s" ; import * as navigator from "s" ; import { View } from "s" ; import * as _UNKNOWN_ from "s" ; let page ; export function _UNKNOWN_ ( args : observable . EventData ) { var grid = < _UNKNOWN_ . GridLayout > args . object ; if ( grid . android ) { var _UNKNOWN_ = < any > android . support . 0 . view . _UNKNOWN_ ; if ( _UNKNOWN_ . _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ ( grid . android , 0 * utils . layout . _UNKNOWN_ ( ) ) ; } } } export function _UNKNOWN_ ( args : observable . EventData ) { page = < Page > args . object ; page . _UNKNOWN_ = observable . _UNKNOWN_ ( { selectedIndex : 0 } ) ; _UNKNOWN_ ( null ) ; } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { if ( page !== undefined ) { let _UNKNOWN_ = page . _UNKNOWN_ < _UNKNOWN_ . _UNKNOWN_ > ( "s" ) ; let index = _UNKNOWN_ . selectedIndex ; let names = [ "s" , "s" , "s" , "s" , "s" ] ; for ( let name of names ) { let view = page . _UNKNOWN_ < View > ( "s" + index + name ) ; if ( view !== undefined ) { view . className = name ; view . className = name + "s" ; } } } } export function _UNKNOWN_ ( args : observable . EventData ) { let button = < View > args . object ; let className = button . className . replace ( "s" , "s" ) . replace ( "s" , "s" ) ; button . className = className ; button . className = className + "s" ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $number$ O O O O O $void$ O O O O O O O $void$ O $any$ O O $any$ O $void$ O O O O O O $void$ O $any$ O O O O $any$ O $undefined$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O O $string[]$ O O O O O O O O O O O O O O O O $string$ O $string[]$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $string$ O O O O $any$ O $undefined$ O O $any$ O $any$ O $string$ O $any$ O $any$ O $string$ O O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O
<s> import { Observable } from 's' ; export class _UNKNOWN_ extends Observable { private _UNKNOWN_ : boolean ; private _UNKNOWN_ = [ { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } , ] ; constructor ( ) { super ( ) ; this . _UNKNOWN_ = true ; } public get _UNKNOWN_ ( ) : Array < any > { return this . _UNKNOWN_ ; } public get _UNKNOWN_ ( ) : boolean { return this . _UNKNOWN_ ; } public set _UNKNOWN_ ( value ) { this . _UNKNOWN_ = value ; this . _UNKNOWN_ ( "s" , value ) ; } } </s>	O O O $any$ O O O O O O $any$ O $any$ O O $boolean$ O O O O $complexboolean$ O O O O O O $any[]$ O O O $ArrayConstructor$ O O O O O O O $complex$ O O O O $boolean$ O O O O O O O O $boolean$ O O O O $boolean$ O $boolean$ O O O O $boolean$ O $boolean$ O O O $any$ O O O $boolean$ O O O O O
<s> import { EventData } from "s" ; import { Page , _UNKNOWN_ } from "s" ; import { View } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ , _UNKNOWN_ } from "s" ; import * as navigator from "s" ; import * as application from "s" ; let _UNKNOWN_ = new _UNKNOWN_ ( ) ; _UNKNOWN_ . _UNKNOWN_ = 0 ; _UNKNOWN_ . itemHeight = 0 ; let _UNKNOWN_ = new _UNKNOWN_ ( ) ; _UNKNOWN_ . itemHeight = 0 ; if ( _UNKNOWN_ . ios ) { _UNKNOWN_ . ios . _UNKNOWN_ = false ; } declare var android ; export function _UNKNOWN_ ( args ) { var page = < Page > args . object ; page . _UNKNOWN_ = new _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { var page = ( < View > args . object ) . page ; var _UNKNOWN_ = page . _UNKNOWN_ < _UNKNOWN_ > ( "s" ) ; var _UNKNOWN_ = < _UNKNOWN_ > page . _UNKNOWN_ ; _UNKNOWN_ . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ? _UNKNOWN_ : _UNKNOWN_ ; _UNKNOWN_ . _UNKNOWN_ = ! _UNKNOWN_ . _UNKNOWN_ ; } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $any$ O O $any$ O O O $any$ O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O $any$ O O O $void$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $void$ O $EventData$ O O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O $any$ O $any$ O $any$ O $boolean$ O O $any$ O $boolean$ O O O O $void$ O $EventData$ O O $any$ O $void$ O O O O O
<s> import { Observable } from 's' ; import { ObservableArray } from 's' ; export class _UNKNOWN_ extends Observable { constructor ( title , isDone , _UNKNOWN_ ) { super ( ) ; this . set ( "s" , title ) ; this . set ( "s" , isDone ) ; this . set ( "s" , _UNKNOWN_ ) ; this . set ( "s" , false ) ; } get title ( ) { return this . get ( "s" ) ; } set title ( value ) { this . set ( "s" , value ) ; } get isDone ( ) { return this . get ( "s" ) ; } set isDone ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } } export class _UNKNOWN_ extends Observable { private _UNKNOWN_ : ObservableArray < _UNKNOWN_ > ; constructor ( ) { super ( ) ; this . _UNKNOWN_ = new ObservableArray < _UNKNOWN_ > ( ) ; this . _UNKNOWN_ ( ) ; } get _UNKNOWN_ ( ) : ObservableArray < _UNKNOWN_ > { return this . _UNKNOWN_ ; } private _UNKNOWN_ ( ) { this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , false , false ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , true , false ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , false , false ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , true , false ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , false , false ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , false , false ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , false , false ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , false , false ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , false , false ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , false , false ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , false , false ) ) ; } public _UNKNOWN_ ( args ) { let _UNKNOWN_ = this . _UNKNOWN_ . getItem ( args . index ) ; _UNKNOWN_ . _UNKNOWN_ = true ; } public _UNKNOWN_ ( args ) { let index = ( args . data . targetIndex > - 0 ) ? args . data . targetIndex : args . index ; let _UNKNOWN_ = this . _UNKNOWN_ . getItem ( index ) ; _UNKNOWN_ . _UNKNOWN_ = false ; } } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O $string$ O $boolean$ O $boolean$ O O O O O O O O $any$ O O O $string$ O O O O $any$ O O O $boolean$ O O O O $any$ O O O $boolean$ O O O O $any$ O O O O O O O O $string$ O O O O O O $any$ O O O O O O $string$ O $string$ O O O O $any$ O O O $string$ O O O O $boolean$ O O O O O O $any$ O O O O O O $boolean$ O $boolean$ O O O O $any$ O O O $boolean$ O O O O $boolean$ O O O O O O $any$ O O O O O O $boolean$ O $boolean$ O O O O $any$ O O O $boolean$ O O O O $boolean$ O O O O O O $any$ O O O O O O $boolean$ O $boolean$ O O O O $any$ O O O $boolean$ O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O O O O O O O O $any$ O O $any$ O $any$ O O O O O O $void$ O O O O O $any$ O O O $any$ O $any$ O O O O O $any$ O O O $void$ O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $any$ O $any$ O O $any$ O O O O O O O O O O O $void$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O $void$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O
<s> import * as model from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from 's' ; import * as utils from "s" ; import * as application from "s" ; import * as navigator from "s" ; let _UNKNOWN_ = new model . _UNKNOWN_ ( ) ; let _UNKNOWN_ ; let _UNKNOWN_ ; var _UNKNOWN_ = false ; var _UNKNOWN_ = false ; export function _UNKNOWN_ ( args ) { let page = args . object ; if ( _UNKNOWN_ === undefined ) { _UNKNOWN_ = new model . _UNKNOWN_ ( ) ; } page . _UNKNOWN_ = _UNKNOWN_ ; _UNKNOWN_ = page . _UNKNOWN_ ( "s" ) ; } export function _UNKNOWN_ ( args ) { if ( args . _UNKNOWN_ ) { _UNKNOWN_ = undefined ; } } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { args . data . _UNKNOWN_ . threshold = _UNKNOWN_ . _UNKNOWN_ ( ) * utils . layout . _UNKNOWN_ ( ) ; args . data . _UNKNOWN_ . left = 0 * utils . layout . _UNKNOWN_ ( ) ; args . data . _UNKNOWN_ . right = 0 * utils . layout . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { let _UNKNOWN_ = args . _UNKNOWN_ ; let _UNKNOWN_ = args . _UNKNOWN_ ; let _UNKNOWN_ ; if ( args . data . x >= 0 ) { _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( "s" ) ; var dimensions = _UNKNOWN_ . View . _UNKNOWN_ ( < _UNKNOWN_ . View > _UNKNOWN_ . parent , _UNKNOWN_ , utils . layout . _UNKNOWN_ ( Math . abs ( args . data . x ) , utils . layout . _UNKNOWN_ ) , utils . layout . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ ( ) , utils . layout . _UNKNOWN_ ) ) ; _UNKNOWN_ . View . _UNKNOWN_ ( < _UNKNOWN_ . View > _UNKNOWN_ . parent , _UNKNOWN_ , 0 , 0 , dimensions . _UNKNOWN_ , dimensions . _UNKNOWN_ ) ; if ( args . data . x > _UNKNOWN_ . _UNKNOWN_ ( ) / 0 ) { _UNKNOWN_ = true ; } } else { _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ( "s" ) ; var dimensions = _UNKNOWN_ . View . _UNKNOWN_ ( < _UNKNOWN_ . View > _UNKNOWN_ . parent , _UNKNOWN_ , utils . layout . _UNKNOWN_ ( Math . abs ( args . data . x ) , utils . layout . _UNKNOWN_ ) , utils . layout . _UNKNOWN_ ( _UNKNOWN_ . _UNKNOWN_ ( ) , utils . layout . _UNKNOWN_ ) ) ; _UNKNOWN_ . View . _UNKNOWN_ ( < _UNKNOWN_ . View > _UNKNOWN_ . parent , _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ ( ) - dimensions . _UNKNOWN_ , 0 , _UNKNOWN_ . _UNKNOWN_ ( ) , dimensions . _UNKNOWN_ ) ; if ( Math . abs ( args . data . x ) > _UNKNOWN_ . _UNKNOWN_ ( ) / 0 ) { _UNKNOWN_ = true ; } } } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { if ( _UNKNOWN_ ) { _UNKNOWN_ . _UNKNOWN_ . splice ( args . index , 0 ) ; } else if ( _UNKNOWN_ ) { let _UNKNOWN_ : model . _UNKNOWN_ = < model . _UNKNOWN_ > _UNKNOWN_ . _UNKNOWN_ . getItem ( args . index ) ; _UNKNOWN_ . isDone = ! _UNKNOWN_ . isDone ; } _UNKNOWN_ = false ; _UNKNOWN_ = false ; } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O O $boolean$ O O O O $boolean$ O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $undefined$ O O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O $void$ O $any$ O O O O $any$ O $any$ O O $any$ O $undefined$ O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Math$ O $number$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O O O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $Math$ O $number$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O O O O $Math$ O $number$ O $any$ O $any$ O $any$ O O $any$ O $any$ O O O O O O $boolean$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O O $boolean$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O $boolean$ O O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $boolean$ O O $any$ O $boolean$ O O $boolean$ O O O $boolean$ O O O O O O $void$ O $any$ O O $any$ O $void$ O O O O O
<s> import { EventData , Observable } from "s" ; import { ObservableArray } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { _UNKNOWN_ as _UNKNOWN_ } from "s" ; import * as utils from "s" ; import * as platform from "s" ; var _UNKNOWN_ = 0 ; export class _UNKNOWN_ extends Observable { constructor ( title , content , summary , _UNKNOWN_ , id ) { super ( ) ; this . Title = title ; this . Content = content ; this . Summary = summary ; this . _UNKNOWN_ = _UNKNOWN_ ; this . ID = id ; this . _UNKNOWN_ = false ; this . isSelected = false ; } get isSelected ( ) : boolean { return this . get ( "s" ) ; } set isSelected ( value ) { this . set ( "s" , value ) ; } get ID ( ) : number { return this . get ( "s" ) ; } set ID ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) : boolean { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } get Title ( ) : string { return this . get ( "s" ) ; } set Title ( value ) { this . set ( "s" , value ) ; } get Content ( ) : string { return this . get ( "s" ) ; } set Content ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } get Summary ( ) { return this . get ( "s" ) ; } set Summary ( value ) { this . set ( "s" , value ) ; } } export class _UNKNOWN_ extends Observable { private _owner : _UNKNOWN_ ; constructor ( owner ) { super ( ) ; this . _owner = owner ; this . _UNKNOWN_ = false ; this . _UNKNOWN_ = false ; this . Mode = "s" ; this . _UNKNOWN_ = new Array < _UNKNOWN_ > ( ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , "s" , "s" , false , 0 ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , "s" , "s" , true , 0 ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , "s" , "s" , true , 0 ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , "s" , "s" , true , 0 ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , "s" , "s" , false , 0 ) ) ; this . _UNKNOWN_ . push ( new _UNKNOWN_ ( "s" , "s" , "s" , false , 0 ) ) ; } private _UNKNOWN_ : number ; public _UNKNOWN_ ( state ) { this . _UNKNOWN_ = state ; for ( var i = 0 ; i < this . _UNKNOWN_ . length ; i ++ ) { this . _UNKNOWN_ . getItem ( i ) . _UNKNOWN_ = state ; } } get _UNKNOWN_ ( ) { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } get Mode ( ) { return this . get ( "s" ) ; } set Mode ( value ) { this . set ( "s" , value ) ; } get _UNKNOWN_ ( ) : _UNKNOWN_ { return this . get ( "s" ) ; } set _UNKNOWN_ ( value ) { this . set ( "s" , value ) ; } private _UNKNOWN_ : Array < _UNKNOWN_ > ; private _UNKNOWN_ ( ) { this . _UNKNOWN_ ( false ) ; this . _UNKNOWN_ . splice ( 0 , this . _UNKNOWN_ . length ) ; if ( this . Mode == "s" ) { for ( var i = 0 ; i < this . _UNKNOWN_ . length ; ++ i ) { this . _UNKNOWN_ . push ( this . _UNKNOWN_ [ i ] ) ; } } else { for ( var i = 0 ; i < this . _UNKNOWN_ . length ; ++ i ) { if ( this . _UNKNOWN_ [ i ] . _UNKNOWN_ === true ) { this . _UNKNOWN_ . push ( this . _UNKNOWN_ [ i ] ) ; } } } } private _UNKNOWN_ : ObservableArray < _UNKNOWN_ > ; public get _UNKNOWN_ ( ) : ObservableArray < _UNKNOWN_ > { if ( this . _UNKNOWN_ ) { return this . _UNKNOWN_ ; } this . _UNKNOWN_ = new ObservableArray < _UNKNOWN_ > ( ) ; for ( var i = 0 ; i < this . _UNKNOWN_ . length ; ++ i ) { this . _UNKNOWN_ . push ( this . _UNKNOWN_ [ i ] ) ; } return this . _UNKNOWN_ ; } _UNKNOWN_ ( args ) { if ( this . _UNKNOWN_ === true || this . _UNKNOWN_ === true ) { return ; } this . _UNKNOWN_ = ( < any > this . _owner . items ) . getItem ( args . index ) ; this . _UNKNOWN_ = args . index ; _UNKNOWN_ ( ) . navigate ( { moduleName : "s" , animated : true , context : this . _UNKNOWN_ } ) ; } _UNKNOWN_ ( args ) { var _UNKNOWN_ = utils . layout . _UNKNOWN_ ( ) ; var delta = Math . floor ( _UNKNOWN_ ) !== _UNKNOWN_ ? 0 : _UNKNOWN_ ; args . data . _UNKNOWN_ . top = 0 ; args . data . _UNKNOWN_ . left = Math . round ( _UNKNOWN_ * 0 ) ; args . data . _UNKNOWN_ . bottom = 0 ; args . data . _UNKNOWN_ . right = Math . round ( _UNKNOWN_ * 0 ) ; args . data . _UNKNOWN_ . threshold = Math . round ( _UNKNOWN_ * 0 ) ; } _UNKNOWN_ ( args ) { this . _UNKNOWN_ = args . index ; } _UNKNOWN_ ( args ) { var tmp = this . _UNKNOWN_ . getItem ( this . _UNKNOWN_ ) ; tmp . _UNKNOWN_ = ! tmp . _UNKNOWN_ ; if ( tmp . _UNKNOWN_ === false && this . Mode === "s" ) { this . _UNKNOWN_ . splice ( this . _UNKNOWN_ , 0 ) ; } this . _owner . _UNKNOWN_ ( ) ; } _UNKNOWN_ ( args ) { this . _UNKNOWN_ ( this . _UNKNOWN_ ) } public _UNKNOWN_ ( item ) { var index = this . _owner . items . indexOf ( item ) ; if ( index >= 0 ) { this . _UNKNOWN_ ( index ) ; } } private _UNKNOWN_ ( index ) { this . _UNKNOWN_ . splice ( index , 0 ) ; this . _UNKNOWN_ . splice ( index , 0 ) ; } _UNKNOWN_ ( args ) { if ( this . Mode !== "s" ) { this . Mode = "s" ; this . _UNKNOWN_ ( ) ; } } _UNKNOWN_ ( args ) { if ( this . Mode !== "s" ) { this . Mode = "s" ; this . _UNKNOWN_ ( ) ; } } public _UNKNOWN_ ( args ) { if ( this . _UNKNOWN_ === true ) { this . _UNKNOWN_ = this . _owner . _UNKNOWN_ ( ) . length ; this . _UNKNOWN_ . getItem ( args . index ) . isSelected = true ; } } public _UNKNOWN_ ( args ) { this . _UNKNOWN_ = this . _owner . _UNKNOWN_ ( ) . length ; this . _UNKNOWN_ . getItem ( args . index ) . isSelected = false ; } public _UNKNOWN_ ( args ) { if ( this . _UNKNOWN_ || this . _UNKNOWN_ ) { return ; } if ( platform . device . os === platform . _UNKNOWN_ . android && this . _UNKNOWN_ === false ) { this . _UNKNOWN_ ( args . index ) ; } } public _UNKNOWN_ ( args ) { var _UNKNOWN_ = this . _owner . _UNKNOWN_ ( ) ; for ( var i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { var currentItem = _UNKNOWN_ [ i ] ; currentItem . _UNKNOWN_ = ! currentItem . _UNKNOWN_ ; } if ( platform . device . os === platform . _UNKNOWN_ . android ) { this . _UNKNOWN_ ( ) ; } } public _UNKNOWN_ ( args ) { var _UNKNOWN_ < any > = this . _owner . _UNKNOWN_ ( ) ; this . _UNKNOWN_ = ! this . _UNKNOWN_ ; this . _UNKNOWN_ ( this . _UNKNOWN_ ) ; if ( platform . device . os === platform . _UNKNOWN_ . ios ) { if ( this . _UNKNOWN_ === true ) { this . _UNKNOWN_ ( - 0 ) ; } else if ( this . _UNKNOWN_ === false ) { for ( var i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { var selectedItem = _UNKNOWN_ [ i ] ; this . _owner . _UNKNOWN_ ( this . _owner . items . indexOf ( selectedItem ) ) ; selectedItem . isSelected = false ; } this . _UNKNOWN_ ( ) ; } } } public _UNKNOWN_ ( ) { this . _UNKNOWN_ ( ) ; this . _UNKNOWN_ ( false ) ; } public _UNKNOWN_ ( args ) { var _UNKNOWN_ = this . _owner . _UNKNOWN_ ( ) ; for ( var i = 0 ; i < _UNKNOWN_ . length ; i ++ ) { var currentItem = _UNKNOWN_ [ i ] ; this . _UNKNOWN_ ( this . _UNKNOWN_ . indexOf ( currentItem ) ) ; } if ( platform . device . os === platform . _UNKNOWN_ . android ) { this . _UNKNOWN_ ( ) ; } } private _UNKNOWN_ ( ) { this . _owner . _UNKNOWN_ ( ) ; this . _owner . _UNKNOWN_ = "s" ; this . _UNKNOWN_ = false ; this . _owner . _UNKNOWN_ = false ; } private _UNKNOWN_ ( _UNKNOWN_ ) { this . _UNKNOWN_ = true ; if ( _UNKNOWN_ !== - 0 ) { this . _owner . _UNKNOWN_ ( _UNKNOWN_ ) ; } this . _owner . _UNKNOWN_ = "s" ; this . _owner . _UNKNOWN_ = true ; } } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O $number$ O O O O O $any$ O $any$ O O O $string$ O $string$ O $string$ O $boolean$ O $number$ O O O O O O O O $string$ O $string$ O O O $string$ O $string$ O O O $string$ O $string$ O O O $boolean$ O $boolean$ O O O $number$ O $number$ O O O $boolean$ O O O O O $boolean$ O O O O O $boolean$ O O O O O O O O $any$ O O O O O O $boolean$ O $boolean$ O O O O $any$ O O O $boolean$ O O O O $number$ O O O O O O O O $any$ O O O O O O $number$ O $number$ O O O O $any$ O O O $number$ O O O O $boolean$ O O O O O O O O $any$ O O O O O O $boolean$ O $boolean$ O O O O $any$ O O O $boolean$ O O O O $string$ O O O O O O O O $any$ O O O O O O $string$ O $string$ O O O O $any$ O O O $string$ O O O O $string$ O O O O O O O O $any$ O O O O O O $string$ O $string$ O O O O $any$ O O O $string$ O O O O $boolean$ O O O O O O $any$ O O O O O O $boolean$ O $boolean$ O O O O $any$ O O O $boolean$ O O O O $string$ O O O O O O $any$ O O O O O O $string$ O $string$ O O O O $any$ O O O $string$ O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O O O O O O O $any$ O $any$ O O O $boolean$ O O O O O $boolean$ O O O O O $any$ O O O O O $any$ O O $ArrayConstructor$ O $any$ O O O O O O $any$ O $number$ O O $any$ O O O O O O O O O O O O O O O $any$ O $number$ O O $any$ O O O O O O O O O O O O O O O $any$ O $number$ O O $any$ O O O O O O O O O O O O O O O $any$ O $number$ O O $any$ O O O O O O O O O O O O O O O $any$ O $number$ O O $any$ O O O O O O O O O O O O O O O $any$ O $number$ O O $any$ O O O O O O O O O O O O O O O $number$ O O O O $void$ O $boolean$ O O O O $boolean$ O $boolean$ O O O O $number$ O O O $number$ O O O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $number$ O O $any$ O $boolean$ O O O O $number$ O O O O O O $any$ O O O O O O $number$ O $number$ O O O O $any$ O O O $number$ O O O O $boolean$ O O O O O O $any$ O O O O O O $boolean$ O $boolean$ O O O O $any$ O O O $boolean$ O O O O $boolean$ O O O O O O $any$ O O O O O O $boolean$ O $boolean$ O O O O $any$ O O O $boolean$ O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O O O O O $any$ O $any$ O O O O $any$ O O O $any$ O O O O $any$ O $ArrayConstructor$ O $any$ O O O $void$ O O O O O $void$ O O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O O $number$ O O O $number$ O O O $any$ O $number$ O O $number$ O O O O $any$ O $any$ O O O $any$ O $number$ O O O O O O O O O O $number$ O O O $number$ O O O $any$ O $number$ O O $number$ O O O O O O $any$ O $number$ O O $boolean$ O O O O O O $any$ O $any$ O O O $any$ O $number$ O O O O O O O O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O O O O $number$ O O O $number$ O O O $any$ O $number$ O O $number$ O O O O $any$ O $any$ O O O $any$ O $number$ O O O O O O O $any$ O O $void$ O $any$ O O O O O O $boolean$ O O O O O $boolean$ O O O O O O O O O $any$ O O O O O O O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O $number$ O $any$ O $any$ O $any$ O O O $any$ O O $string$ O O O $boolean$ O O O $any$ O O O $any$ O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $number$ O $Math$ O $number$ O $any$ O O $any$ O O O $number$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $Math$ O $number$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $Math$ O $number$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $Math$ O $number$ O $any$ O O O O O $void$ O $any$ O O O O $number$ O $any$ O $any$ O O $void$ O $any$ O O O $any$ O O O $any$ O $any$ O O O $number$ O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O O O $any$ O O O O O O $any$ O $any$ O O O $number$ O O O O O O O $any$ O $any$ O O O O $void$ O $any$ O O O O $void$ O O O $number$ O O O $void$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O $void$ O $any$ O O O O O $void$ O $number$ O O O O $any$ O $complex$ O $number$ O O O O O O $any$ O $any$ O $number$ O O O O O $void$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O O O O O $void$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O O O O O O $void$ O $any$ O O O O O O $boolean$ O O O O O O $number$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $void$ O $any$ O O O O $number$ O O O $any$ O $any$ O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O $void$ O $any$ O O O O O O $boolean$ O O O $boolean$ O O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $boolean$ O O O O O O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $number$ O O $any$ O $any$ O O $any$ O $any$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O O O O O $void$ O $any$ O O O $Array$ O O O O O O $any$ O $any$ O O O O O $boolean$ O O O O $boolean$ O O O $void$ O O O $boolean$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O $boolean$ O O O O O O $void$ O O O O O O O O O O O $false$ O O O O O O O $number$ O O O $number$ O $any[]$ O $number$ O $number$ O O O O $any$ O $any[]$ O $number$ O O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O O O O O O $void$ O O O O O O O $void$ O O O O O $void$ O O O O O $void$ O O O O O O $void$ O $any$ O O O $any$ O O O $any$ O $any$ O O O O O O $number$ O O O $number$ O $any$ O $any$ O $number$ O O O O $any$ O $any$ O $number$ O O O O $void$ O O O $any$ O $any$ O $any$ O O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O O O O O $void$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O $boolean$ O O O O O $any$ O $any$ O O O O O $void$ O $number$ O O O O $boolean$ O O O O O $number$ O O O O O O O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O
<s> import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import { EventData } from "s" ; import { Page , _UNKNOWN_ } from "s" ; import { View } from "s" ; import { _UNKNOWN_ as _UNKNOWN_ } from "s" ; import * as navigator from "s" ; export function _UNKNOWN_ ( args ) { var page = < Page > args . object ; var item = < _UNKNOWN_ > args . context ; page . _UNKNOWN_ = item ; } export function _UNKNOWN_ ( args ) { var page = < Page > ( < View > args . object ) . page ; var item = < _UNKNOWN_ > page . _UNKNOWN_ ; navigator . _UNKNOWN_ ( { action : "s" , item : item } ) ; } export function _UNKNOWN_ ( args ) { var page = < Page > ( < View > args . object ) . page ; var item = < _UNKNOWN_ > page . _UNKNOWN_ ; navigator . _UNKNOWN_ ( { action : "s" , item : item } ) ; } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O $void$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $EventData$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $void$ O O $string$ O O O $any$ O $any$ O O O O O O $void$ O $EventData$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $void$ O O $string$ O O O $any$ O $any$ O O O O O O $void$ O $EventData$ O O $any$ O $void$ O O O O O
<s> import { EventData } from "s" ; import { Page , _UNKNOWN_ } from "s" ; import { View } from "s" ; import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ , _UNKNOWN_ } from "s" ; import * as navigator from "s" ; import * as platform from "s" ; import { _UNKNOWN_ as _UNKNOWN_ } from "s" ; export function _UNKNOWN_ ( args ) { var _UNKNOWN_ = < _UNKNOWN_ > args . object ; var page = < Page > ( < View > args . object ) . page ; if ( ! page . _UNKNOWN_ ) { page . _UNKNOWN_ = new _UNKNOWN_ ( _UNKNOWN_ ) ; } } export function _UNKNOWN_ ( args ) { var page = < Page > args . object ; var _UNKNOWN_ = < _UNKNOWN_ > page . _UNKNOWN_ ; if ( args . _UNKNOWN_ && args . context && args . context . action && args . context . item && _UNKNOWN_ ) { switch ( args . context . action ) { case "s" : _UNKNOWN_ . _UNKNOWN_ ( args . context . item ) ; break ; case "s" : var item = < _UNKNOWN_ > args . context . item ; item . _UNKNOWN_ = ! item . _UNKNOWN_ ; break ; } _UNKNOWN_ ( ) . _UNKNOWN_ . context = null ; } } export function _UNKNOWN_ ( args ) { var page = < Page > ( < View > args . object ) . page ; var _UNKNOWN_ = < _UNKNOWN_ > page . _UNKNOWN_ ; if ( platform . device . os === platform . _UNKNOWN_ . android && _UNKNOWN_ && ( _UNKNOWN_ . _UNKNOWN_ || _UNKNOWN_ . _UNKNOWN_ ) ) { _UNKNOWN_ . _UNKNOWN_ ( ) ; return ; } navigator . _UNKNOWN_ ( ) ; } </s>	O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $void$ O $EventData$ O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O O $any$ O $any$ O O $any$ O $any$ O O $any$ O $any$ O O O O O O $void$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O $any$ O O O O O $any$ O $void$ O $any$ O $any$ O $any$ O O O O O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $boolean$ O O $any$ O $boolean$ O O O O $any$ O O O $any$ O $any$ O O O O O O O $void$ O $EventData$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O $any$ O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $boolean$ O $any$ O $boolean$ O O O $any$ O $void$ O O O O O O $any$ O $void$ O O O O O
<s> import { EventData , Observable } from "s" ; import * as observable from "s" ; import { Page } from "s" ; import { View } from "s" ; import { _UNKNOWN_ } from "s" ; import { Color } from "s" ; import * as platform from "s" ; import * as application from "s" import * as navigator from "s" ; import * as _UNKNOWN_ from "s" ; declare var android ; export function _UNKNOWN_ ( args ) { let page = < Page > args . object ; let _UNKNOWN_ = observable . _UNKNOWN_ ( { username : "s" , email : "s" , password : "s" , _UNKNOWN_ : undefined , isPublic : true , _UNKNOWN_ : false } ) ; page . _UNKNOWN_ = _UNKNOWN_ ; } export function _UNKNOWN_ ( args ) { let view = < View > args . object ; } export function _UNKNOWN_ ( args ) { let background = < View > args . object ; let colors = new Array < Color > ( new Color ( "s" ) , new Color ( "s" ) ) ; let orientation = _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ; switch ( platform . device . os ) { case platform . _UNKNOWN_ . android : _UNKNOWN_ . _UNKNOWN_ ( background , colors , orientation ) ; break ; case platform . _UNKNOWN_ . ios : setTimeout ( ( ) => { _UNKNOWN_ . _UNKNOWN_ ( background , colors , orientation ) ; } ) ; break ; } } export function _UNKNOWN_ ( args ) { notify ( "s" ) ; } export function _UNKNOWN_ ( args ) { notify ( "s" ) ; } declare var android ; function notify ( msg ) { switch ( platform . device . os ) { case platform . _UNKNOWN_ . android : android . widget . Toast . _UNKNOWN_ ( application . android . context , msg , android . widget . Toast . _UNKNOWN_ ) . show ( ) ; break ; case platform . _UNKNOWN_ . ios : console . log ( msg ) ; break ; } } export function _UNKNOWN_ ( args ) { var view = < View > args . object ; var _UNKNOWN_ = view . page . _UNKNOWN_ _UNKNOWN_ . _UNKNOWN_ = ! _UNKNOWN_ . _UNKNOWN_ ; } var _UNKNOWN_ = 0 ; export function _UNKNOWN_ ( args ) { if ( _UNKNOWN_ ) { clearTimeout ( _UNKNOWN_ ) ; } _UNKNOWN_ = setTimeout ( ( ) => { _UNKNOWN_ = 0 ; } , 0 ) ; } export function _UNKNOWN_ ( args ) { var page = < Page > args . object ; if ( ! _UNKNOWN_ ) { _UNKNOWN_ = setTimeout ( ( ) => { page . _UNKNOWN_ < _UNKNOWN_ > ( "s" ) . _UNKNOWN_ ( ) ; page . _UNKNOWN_ < _UNKNOWN_ > ( "s" ) . _UNKNOWN_ ( ) ; page . _UNKNOWN_ < _UNKNOWN_ > ( "s" ) . _UNKNOWN_ ( ) ; page . _UNKNOWN_ < _UNKNOWN_ > ( "s" ) . _UNKNOWN_ ( ) ; _UNKNOWN_ = 0 ; } , 0 ) ; } } export function _UNKNOWN_ ( args ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O $any$ O $any$ O O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O $void$ O $EventData$ O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O $string$ O O O $string$ O O O $string$ O O O $undefined$ O $undefined$ O $boolean$ O O O $boolean$ O O O O O $any$ O $any$ O $any$ O O O O $void$ O $EventData$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O $EventData$ O O O $any$ O O $any$ O $any$ O $any$ O O $any[]$ O O $ArrayConstructor$ O $any$ O O O $any$ O O O O O $any$ O O O O O O $Orientation$ O $any$ O $any$ O $Orientation$ O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any[]$ O $Orientation$ O O O O O $any$ O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $any[]$ O $Orientation$ O O O O O O O O O O O $void$ O $EventData$ O O $void$ O O O O O O O $void$ O $EventData$ O O $void$ O O O O O O O $any$ O O $void$ O $string$ O O O O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $string$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O O O O O $any$ O $any$ O $any$ O $Console$ O $void$ O $string$ O O O O O O O O $void$ O $EventData$ O O O $any$ O O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ $any$ O $any$ O O $any$ O $any$ O O O $number$ O O O O O $void$ O $EventData$ O O O O $number$ O O $void$ O $number$ O O O $number$ O $number$ O O O O O $number$ O O O O O O O O O O O $void$ O $EventData$ O O O $any$ O O $any$ O $any$ O $any$ O O O O $number$ O O $number$ O $number$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $number$ O O O O O O O O O O O O $void$ O $any$ O O $any$ O $void$ O O O O O
<s> import * as application from "s" ; import * as frame from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as trace from "s" ; import * as utils from "s" ; import { time , _UNKNOWN_ } from "s" ; import "s" ; import * as json from "s" ; import { init as _UNKNOWN_ } from "s" ; _UNKNOWN_ ( ) ; if ( application . android ) { application . on ( "s" , args => { console . log ( "s" ) ; _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ . backends . pipeline . _UNKNOWN_ . initialize ( application . android . context ) ; application . android . on ( "s" , ( { activity } ) => { console . log ( "s" ) ; var window = activity . getWindow ( ) ; if ( window ) { window . _UNKNOWN_ ( new android . _UNKNOWN_ . _UNKNOWN_ . _UNKNOWN_ ( 0 ) ) ; window . _UNKNOWN_ ( 0 ) ; } } ) ; } ) ; } if ( application . ios ) { application . on ( "s" , args => { utils . ios . getter ( _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ ) . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ; setTimeout ( ( ) => { utils . ios . getter ( _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ ) . _UNKNOWN_ . backgroundColor = utils . ios . getter ( _UNKNOWN_ , _UNKNOWN_ . _UNKNOWN_ ) ; } , 0 ) ; } ) ; } _UNKNOWN_ . start ( "s" ) ; application . start ( "s" ) ; </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O O O O O $any$ O O O O O $void$ O $void$ O O O O $void$ O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O $Console$ O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O O O O O $any$ O O O O $Console$ O $void$ O O O O O $any$ O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $any$ O O O O O O O O O O O O O O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $number$ O O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O O O O O O O $any$ O $void$ O O O O $any$ O $any$ O O O O O
<s> import "s" ; import "s" ; export function _UNKNOWN_ ( ) { ( < any > require ) . context ( "s" , true , "s" ) ; } </s>	O O O O O O O O O $void$ O O O O O O O $any$ O O $any$ O O O O O O O O O O
<s> import "s" ; import "s" ; export function _UNKNOWN_ ( ) { ( < any > require ) . context ( "s" , true , "s" ) ; } </s>	O O O O O O O O O $void$ O O O O O O O $any$ O O $any$ O O O O O O O O O O
<s> import * as pages from "s" ; import * as frame from "s" ; import * as button from "s" ; import * as _UNKNOWN_ from "s" ; export function _UNKNOWN_ ( ) { var page = new pages . Page ( ) ; var btn = new button . Button ( ) ; btn . text = "s" ; btn . on ( button . Button . _UNKNOWN_ , function ( ) { _UNKNOWN_ . _UNKNOWN_ ( "s" ) ; var nextPage = "s" ; frame . _UNKNOWN_ ( ) . navigate ( nextPage ) ; } ) ; page . content = btn ; return page ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O $any$ O O $any$ O $any$ O O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $any$ O $void$ O O O O O $string$ O O O $any$ O $any$ O O O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O O $any$ O O O
<s> require ( "s" ) ; if ( ! ( < any > global ) . _UNKNOWN_ ) { require ( "s" ) ; require ( "s" ) ; } </s>	O $any$ O O O O O O O O O O O $any$ O O $any$ O O $any$ O O O O $any$ O O O O O O
<s> import * as application from "s" ; import "s" ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; global . _UNKNOWN_ ( "s" , ( ) => require ( "s" ) ) ; application . _UNKNOWN_ ( ) ; require ( "s" ) ; require ( "s" ) ; require ( "s" ) ; require ( "s" ) ; require ( "s" ) ; require ( "s" ) ; require ( "s" ) ; require ( "s" ) ; require ( "s" ) ; </s>	O O O O $any$ O O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O O O O $any$ O O O O O $any$ O $any$ O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O $any$ O O O O O
<s> import * as observable from "s" ; import * as fs from "s" ; import * as _UNKNOWN_ from "s" ; import * as hljs from "s" ; hljs . configure ( { _UNKNOWN_ : "s" , _UNKNOWN_ : true } ) ; var _UNKNOWN_ = "s" var style ; var _UNKNOWN_ = { "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" , "s" : "s" } ; function _UNKNOWN_ ( ) { var path = fs . path . join ( fs . knownFolders . _UNKNOWN_ ( ) . path , _UNKNOWN_ ) ; if ( ! fs . File . exists ( path ) ) { throw new Error ( "s" + path ) ; } style = fs . File . fromPath ( path ) . _UNKNOWN_ ( ( error ) => { console . log ( "s" + error ) ; } ) ; } ; _UNKNOWN_ ( ) ; export class _UNKNOWN_ extends observable . Observable { public files : Array < fs . _UNKNOWN_ > ; public group : _UNKNOWN_ . _UNKNOWN_ ; constructor ( example : _UNKNOWN_ . Example ) { super ( ) ; var _UNKNOWN_ = example . path . lastIndexOf ( "s" ) ; var _UNKNOWN_ = example . path . substr ( _UNKNOWN_ + 0 ) + "s" ; var path = example . path . substring ( 0 , _UNKNOWN_ ) ; path = fs . path . join ( fs . knownFolders . _UNKNOWN_ ( ) . path , path . replace ( "s" , "s" ) ) ; console . log ( "s" + path ) ; var folder = fs . Folder . fromPath ( path ) ; folder . _UNKNOWN_ ( ) . then ( ( entities ) => { entities = entities . filter ( ( e ) => ( e instanceof fs . File ) ) ; this . set ( "s" , entities ) ; this . _UNKNOWN_ ( _UNKNOWN_ ) ; } ) ; this . set ( "s" , example . group ) ; } public _UNKNOWN_ ( fileName ) { for ( var i = 0 ; i < this . files . length ; i ++ ) { if ( this . files [ i ] . name === fileName ) { this . _UNKNOWN_ ( this . files [ i ] ) ; break ; } } } private _UNKNOWN_ ( entity : fs . _UNKNOWN_ ) { this . set ( "s" , true ) ; this . set ( "s" , entity . name ) ; var _UNKNOWN_ = fs . File . fromPath ( entity . path ) ; var lang = _UNKNOWN_ [ _UNKNOWN_ . extension ] ; _UNKNOWN_ . readText ( ) . then ( ( _UNKNOWN_ ) => { var _UNKNOWN_ = hljs . highlight ( "s" , _UNKNOWN_ ) . value ; _UNKNOWN_ = hljs . _UNKNOWN_ ( _UNKNOWN_ ) ; _UNKNOWN_ = "s" + style + "s" + _UNKNOWN_ + "s" this . set ( "s" , false ) ; this . set ( "s" , _UNKNOWN_ ) ; } , ( error ) => { this . set ( "s" , false ) ; console . log ( "s" + error ) ; } ) } } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O $any$ O $void$ O O $string$ O O O $true$ O O O O O O $string$ O O O $string$ O O $complex$ O O O O O O O O O O O O O O O O O O O O O O O O $void$ O O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $string$ O O O O O $any$ O $any$ O $any$ O $any$ O O O O O $ErrorConstructor$ O O O $any$ O O O $string$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O O O $Console$ O $void$ O O O $any$ O O O O O O O $void$ O O O O O $any$ O $any$ O $any$ O O $any[]$ O $ArrayConstructor$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O O O $Example$ O $any$ O $any$ O O O O O O O $number$ O $Example$ O $string$ O $number$ O O O O O $string$ O $Example$ O $string$ O $string$ O $number$ O O O O O O O $string$ O $Example$ O $string$ O $string$ O O O $number$ O O $string$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $string$ O $complex$ O O O O O O O $Console$ O $void$ O O O $string$ O O O $any$ O $any$ O $any$ O $any$ O $string$ O O $any$ O $any$ O O O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O $any$ O O O $any$ O $any$ O $any$ O O O O O $any$ O O O $any$ O O O O $void$ O $string$ O O O O O O O $any$ O O O $Example$ O $any$ O O O O $void$ O $string$ O O O O O $number$ O O O $number$ O O O $any[]$ O $number$ O $number$ O O O O O O O $any[]$ O $number$ O O $any$ O $string$ O O O O $void$ O O O $any[]$ O $number$ O O O O O O O O O $void$ O $any$ O $any$ O $any$ O O O O $any$ O O O O O O O O $any$ O O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $complex$ O $any$ O $any$ O O $any$ O $any$ O O O $any$ O O $any$ O O O O $string$ O $any$ O $any$ O O O $any$ O O $string$ O $string$ O $any$ O $string$ O $string$ O O $string$ O O O $string$ O O O $string$ O O O O $any$ O O O O O O O O $any$ O O O $string$ O O O O O $any$ O O O O O $any$ O O O O O O $Console$ O $void$ O O O $any$ O O O O O O O
<s> import * as _UNKNOWN_ from "s" ; import * as observable from "s" ; import * as _UNKNOWN_ from "s" ; import { _UNKNOWN_ } from "s" ; export class _UNKNOWN_ extends observable . Observable { get firebase ( ) { return _UNKNOWN_ ; } get _UNKNOWN_ ( ) : Array < _UNKNOWN_ . _UNKNOWN_ > { return _UNKNOWN_ . groups ; } get _UNKNOWN_ ( ) : Array < _UNKNOWN_ . Example > { return _UNKNOWN_ . _UNKNOWN_ ; } constructor ( ) { super ( ) ; this . set ( "s" , false ) ; this . set ( "s" , 0 ) ; this . set ( "s" , false ) ; } public _UNKNOWN_ ( ) { this . set ( "s" , ! this . get ( "s" ) ) ; } public _UNKNOWN_ ( ) { console . log ( "s" ) ; this . set ( "s" , ! this . get ( "s" ) ) ; } get screenWidth ( ) : number { return _UNKNOWN_ . screen . _UNKNOWN_ . _UNKNOWN_ ; } } let instance ; export function getInstance ( ) { return instance || ( instance = new _UNKNOWN_ ( ) ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $ViewModel$ O O O O O O $any$ O $any$ O $any$ O O $ViewModel$ O O O O $ViewModel$ O O O $any$ O O O $ArrayConstructor$ O $any$ O $any$ O O O $any$ O $any$ O O O $Example[]$ O O O $ArrayConstructor$ O $any$ O $any$ O O O $any$ O $Example[]$ O O O O O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O $any$ O O O O O O O O $void$ O O O O O $any$ O O O O O O $any$ O O O O O O O $void$ O O O $Console$ O $void$ O O O O O O $any$ O O O O O O $any$ O O O O O O O $number$ O O O O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O O O $any$ O O O O $any$ O O $any$ O O $any$ O O O O O O
<s> import { Page } from "s" ; import { EventData } from "s" ; import * as navigator from "s" ; var page ; export function _UNKNOWN_ ( args ) { page = < Page > args . object ; } export function _UNKNOWN_ ( ) { navigator . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { page . _UNKNOWN_ ( "s" ) . _UNKNOWN_ ( ) ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O O $any$ O O O O $any$ O O O $void$ O $EventData$ O O $any$ O O $any$ O $any$ O $any$ O O O O $void$ O O O $any$ O $void$ O O O O O O $void$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O
<s> import * as pages from "s" ; import * as view from "s" ; import * as _UNKNOWN_ from "s" ; import * as navigator from "s" ; import * as _UNKNOWN_ from "s" import * as _UNKNOWN_ from "s" import * as dialogs from "s" ; import * as observable from "s" ; export function _UNKNOWN_ ( args : pages . _UNKNOWN_ ) { var page = < pages . Page > args . object ; page . _UNKNOWN_ = new _UNKNOWN_ . _UNKNOWN_ ( args . context ) ; } export function _UNKNOWN_ ( args : observable . EventData ) { var vm = < _UNKNOWN_ . _UNKNOWN_ > ( < view . View > args . object ) . _UNKNOWN_ ; var options = vm . files . map ( ( file ) => file . name ) ; dialogs . action ( { cancelButtonText : "s" , actions : vm . files . map ( ( file ) => file . name ) , } ) . then ( ( _UNKNOWN_ ) => { vm . _UNKNOWN_ ( _UNKNOWN_ ) ; } , ( error ) => { console . log ( "s" + error ) ; } ) ; } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any[]$ O $any$ O $any[]$ O $U[]$ O O $any$ O O $any$ O $any$ O O $any$ O $any$ O O $string$ O O O $any[]$ O $any$ O $any[]$ O $U[]$ O O $any$ O O $any$ O $any$ O O O O O $any$ O O $any$ O O O $any$ O $void$ O $any$ O O O O O $any$ O O O $Console$ O $void$ O O O $any$ O O O O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O O
<s> import * as pages from "s" ; import * as view from "s" ; import * as label from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as grid from "s" ; import * as observable from "s" ; import * as animations from "s" ; import * as frame from "s" ; import * as builder from "s" ; import * as navigator from "s" ; import * as _UNKNOWN_ from "s" import * as _UNKNOWN_ from "s" import * as platform from "s" import * as _UNKNOWN_ from "s" ; var _UNKNOWN_ = "s" ; var _UNKNOWN_ = ( platform . device . os === platform . _UNKNOWN_ . android ) ? new android . view . animation . _UNKNOWN_ ( 0 ) : _UNKNOWN_ . _UNKNOWN_ ; export function _UNKNOWN_ ( args : pages . _UNKNOWN_ ) { var page = < pages . Page > args . object ; var vm = < _UNKNOWN_ . _UNKNOWN_ > page . _UNKNOWN_ ; page . _UNKNOWN_ = vm ; } export function _UNKNOWN_ ( args : observable . EventData ) { var context = < _UNKNOWN_ . _UNKNOWN_ > ( < view . View > args . object ) . _UNKNOWN_ ; navigator . _UNKNOWN_ ( context . _UNKNOWN_ ) ; } export function openLink ( args : observable . EventData ) { navigator . openLink ( args . object ) ; } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O $string$ O O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O O O $any$ O $any$ O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O O
<s> import * as pages from "s" ; import * as view from "s" ; import * as _UNKNOWN_ from "s" ; import * as observable from "s" ; import * as navigator from "s" ; export function _UNKNOWN_ ( args : pages . _UNKNOWN_ ) { var page = < pages . Page > args . object ; page . _UNKNOWN_ = args . context ; } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { navigator . _UNKNOWN_ ( ) ; } export function openLink ( args : observable . EventData ) { navigator . openLink ( args . object ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $void$ O $any$ O $any$ O O O O
<s> import * as view from "s" import * as pages from "s" import * as _UNKNOWN_ from "s" ; import * as observable from "s" ; import * as _UNKNOWN_ from "s" ; import * as navigator from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import * as _UNKNOWN_ from "s" ; import { _UNKNOWN_ } from "s" ; var page ; export function _UNKNOWN_ ( args : pages . _UNKNOWN_ ) { page = < pages . Page > args . object ; page . _UNKNOWN_ = args . context ; } export function _UNKNOWN_ ( ) { _UNKNOWN_ . stop ( "s" ) ; } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { _UNKNOWN_ ( args ) ; } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { var example = < _UNKNOWN_ . Example > args . view . _UNKNOWN_ ; var vm = < _UNKNOWN_ . _UNKNOWN_ > args . view . page . _UNKNOWN_ ; navigator . _UNKNOWN_ ( example , example . group . examples ) ; } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { navigator . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( e ) { e . object . _UNKNOWN_ . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args : observable . EventData ) { var _UNKNOWN_ = < _UNKNOWN_ . _UNKNOWN_ > ( < view . View > args . object ) . _UNKNOWN_ ; navigator . _UNKNOWN_ ( _UNKNOWN_ . group ) ; } export function _UNKNOWN_ ( args ) { page . _UNKNOWN_ ( "s" ) . _UNKNOWN_ ( ) ; } </s>	O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O O O O O $any$ O O O $void$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O $void$ O O O $any$ O $void$ O O O O O O O $void$ O $any$ O $any$ O $any$ O O $void$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O O $Example$ O O $any$ O $any$ O $any$ O $any$ O $any$ O O $any$ O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $void$ O $Example$ O $Example$ O $any$ O $Example[]$ O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O O $any$ O O $any$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O O $any$ O $any$ O $void$ O $any$ O $any$ O O O O O $void$ O $any$ O O $any$ O $any$ O O O O $any$ O O O O O
<s> import { _UNKNOWN_ } from "s" ; import { _UNKNOWN_ } from "s" import * as navigator from "s" import * as _UNKNOWN_ from "s" ; import { groups } from "s" import * as firebase from "s" ; import { _UNKNOWN_ } from "s" import { _UNKNOWN_ } from "s" ; import * as application from "s" ; import * as applicationSettings from "s" ; import { Observable } from "s" ; class _UNKNOWN_ extends Observable { public groups = groups ; public firebase = firebase . _UNKNOWN_ ; } export function _UNKNOWN_ ( args ) { args . object . _UNKNOWN_ = new _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { _UNKNOWN_ ( args ) ; } function _UNKNOWN_ ( ) { return _UNKNOWN_ ( ) . currentPage . _UNKNOWN_ ( "s" ) ; } function _UNKNOWN_ ( ) { var instance = _UNKNOWN_ ( ) ; if ( instance ) { instance . _UNKNOWN_ ( ) ; } } function _UNKNOWN_ ( ) { var instance = _UNKNOWN_ ( ) ; if ( instance ) { instance . _UNKNOWN_ ( ) ; } } export function _UNKNOWN_ ( args ) { _UNKNOWN_ ( ) ; var _UNKNOWN_ = < _UNKNOWN_ > ( < any > args ) . object . _UNKNOWN_ ; var context = new _UNKNOWN_ ( _UNKNOWN_ ) ; navigator . _UNKNOWN_ ( context ) ; } export function _UNKNOWN_ ( args ) { _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { _UNKNOWN_ ( ) ; navigator . _UNKNOWN_ ( ) ; } export function _UNKNOWN_ ( args ) { _UNKNOWN_ ( ) ; if ( application . android ) { setTimeout ( ( ) => navigator . _UNKNOWN_ ( ) , 0 ) ; } else { navigator . _UNKNOWN_ ( ) } } export function _UNKNOWN_ ( ) { _UNKNOWN_ ( ) ; if ( application . android ) { setTimeout ( ( ) => navigator . _UNKNOWN_ ( ) , 0 ) ; } else { navigator . _UNKNOWN_ ( ) ; } } export function _UNKNOWN_ ( args ) { _UNKNOWN_ ( ) ; navigator . openLink ( args . object ) ; } </s>	O O O $any$ O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $void$ O O O O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O $any$ O $any$ O O $any$ O $any$ O O $ViewModel$ O $any$ O $ViewModel$ O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O O $any$ O O O O O O $void$ O $any$ O $any$ O $any$ O O $void$ O $any$ O O O O $any$ O O O O $any$ O O O $any$ O $any$ O O O O O O $void$ O O O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O $void$ O O O O $any$ O $any$ O O O O O $any$ O O $any$ O $any$ O O O O O O O $void$ O $any$ O O $void$ O O O O $any$ O O $any$ O O O O O $any$ O O $any$ O $any$ O O $any$ O O $any$ O $any$ O O $any$ O $void$ O $any$ O O O O O $void$ O $any$ O O $void$ O O O O O O $void$ O $any$ O O $void$ O O O $any$ O $void$ O O O O O O $void$ O $any$ O O $void$ O O O O O $any$ O $any$ O O $number$ O O O O $any$ O $void$ O O O O O O O O O $any$ O $void$ O O O O O O $void$ O O O $void$ O O O O O $any$ O $any$ O O $number$ O O O O $any$ O $void$ O O O O O O O O O $any$ O $void$ O O O O O O O $void$ O $any$ O O $void$ O O O $any$ O $void$ O $any$ O $any$ O O O O
<s> import * as firebase from "s" ; import * as utils from "s" ; import { _UNKNOWN_ } from "s" ; import * as navigator from "s" ; import * as _UNKNOWN_ from "s" ; export function _UNKNOWN_ ( args ) { args . object . _UNKNOWN_ = firebase . _UNKNOWN_ ; } export function _UNKNOWN_ ( args ) { const _UNKNOWN_ : firebase . _UNKNOWN_ = firebase . _UNKNOWN_ . _UNKNOWN_ [ args . index ] ; _UNKNOWN_ . _UNKNOWN_ = true ; if ( _UNKNOWN_ . url ) { utils . openUrl ( _UNKNOWN_ . url ) ; } } declare var _UNKNOWN_ ; export function _UNKNOWN_ ( args ) { if ( _UNKNOWN_ ) { var cell = args . ios ; cell . _UNKNOWN_ = _UNKNOWN_ . _UNKNOWN_ ; } } export function _UNKNOWN_ ( args : _UNKNOWN_ . _UNKNOWN_ ) { navigator . _UNKNOWN_ ( ) ; } </s>	O O O O $any$ O O O O O O $any$ O O O O O $any$ O O O O O O O $any$ O O O O O O $any$ O O O O O $void$ O $any$ O O $any$ O $any$ O $any$ O $any$ O $ViewModel$ O O O O $void$ O $any$ O O O $any$ O $any$ O $any$ O $any$ O $ViewModel$ O $any$ O $any$ O $any$ O O $any$ O $boolean$ O O O O O $any$ O $string$ O O $any$ O $any$ O $any$ O $string$ O O O O O O $any$ O O O $void$ O $any$ O O O O $any$ O O O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O $any$ O O O O O $void$ O $any$ O $any$ O $any$ O O $any$ O $void$ O O O O O
